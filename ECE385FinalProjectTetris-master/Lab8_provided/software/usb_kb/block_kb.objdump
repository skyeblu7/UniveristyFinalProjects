
block_kb.elf:     file format elf32-littlenios2
block_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000230

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0001243c memsz 0x0001243c flags r-x
    LOAD off    0x0001345c vaddr 0x0101245c paddr 0x01013f48 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015a34 vaddr 0x01015a34 paddr 0x01015a34 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000117b4  01000230  01000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  010119e4  010119e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0101245c  01013f48  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  01015a34  01015a34  00015a34  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014f48  2**0
                  CONTENTS
  7 .sdram        00000000  01015b98  01015b98  00014f48  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014f48  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00014f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023722  00000000  00000000  00015e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090c8  00000000  00000000  000395aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b88b  00000000  00000000  00042672  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002384  00000000  00000000  0004df00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a07  00000000  00000000  00050284  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b4f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b538  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000701a6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000701a9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000701b5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000701b6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000701b7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000701bb  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000701bf  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000701c3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000701ce  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000701d9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000701e4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002e  00000000  00000000  000701ec  2**0
                  CONTENTS, READONLY
 30 .jdi          0000519e  00000000  00000000  0007021a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000781b2  00000000  00000000  000753b8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
01000230 l    d  .text	00000000 .text
010119e4 l    d  .rodata	00000000 .rodata
0101245c l    d  .rwdata	00000000 .rwdata
01015a34 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01015b98 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
01000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
01015a34 l     O .bss	00000002 ctl_reg.3589
01015a36 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
010121a2 l     O .rodata	00000010 zeroes.4404
01004754 l     F .text	000000bc __sbprintf
010121b2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01004964 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010064bc l     F .text	00000008 __fp_unlock
010064d0 l     F .text	0000019c __sinit.part.1
0100666c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0101245c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
010128a0 l     O .rwdata	00000020 lc_ctype_charset
01012880 l     O .rwdata	00000020 lc_message_charset
010128c0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
010121e4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
01009b40 l     F .text	000000fc __sprint_r.part.0
01012308 l     O .rodata	00000010 zeroes.4349
0100b17c l     F .text	000000bc __sbprintf
01012318 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0100f1c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100f2d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100f304 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100f3f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100f4e0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100f5cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100f7a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01013f38 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0100fa4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100fb88 l     F .text	00000034 alt_dev_reg
01012ea8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100fe64 l     F .text	0000020c altera_avalon_jtag_uart_irq
01010070 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0101094c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01010dac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01010f0c l     F .text	0000003c alt_get_errno
01010f48 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01015a6c g     O .bss	00000004 alt_instruction_exception_handler
01009184 g     F .text	00000074 _mprec_log10
01009270 g     F .text	0000008c __any_on
0100b730 g     F .text	00000054 _isatty_r
010121f0 g     O .rodata	00000028 __mprec_tinytens
0100f6e4 g     F .text	0000007c alt_main
010022f0 g     F .text	000000c0 _puts_r
01015a98 g     O .bss	00000100 alt_irq
0100b784 g     F .text	00000060 _lseek_r
01013f48 g       *ABS*	00000000 __flash_rwdata_start
0100db9c g     F .text	00000088 .hidden __eqdf2
01015b98 g       *ABS*	00000000 __alt_heap_start
010022b4 g     F .text	0000003c printf
0100b99c g     F .text	0000009c _wcrtomb_r
01009a00 g     F .text	0000005c __sseek
0100681c g     F .text	00000010 __sinit
0100b844 g     F .text	00000140 __swbuf_r
010072f0 g     F .text	0000007c _setlocale_r
01006674 g     F .text	00000078 __sfmoreglue
0100f784 g     F .text	00000024 __malloc_unlock
01002184 g     F .text	00000080 UsbGetRetryCnt
01007fc0 g     F .text	0000015c memmove
0100026c g     F .text	00000088 IO_init
01006804 g     F .text	00000018 _cleanup
01008244 g     F .text	000000a8 _Balloc
0100dc24 g     F .text	000000dc .hidden __gtdf2
01011334 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100b6d4 g     F .text	0000005c _fstat_r
01015a50 g     O .bss	00000004 errno
0100997c g     F .text	00000008 __seofread
01015a58 g     O .bss	00000004 alt_argv
0101bf08 g       *ABS*	00000000 _gp
0100fa1c g     F .text	00000030 usleep
01012d28 g     O .rwdata	00000180 alt_fd_list
01011358 g     F .text	00000090 alt_find_dev
01007e78 g     F .text	00000148 memcpy
010064c4 g     F .text	0000000c _cleanup_r
0100efdc g     F .text	000000dc .hidden __floatsidf
01010e90 g     F .text	0000007c alt_io_redirect
0100dd00 g     F .text	000000f4 .hidden __ltdf2
010119e4 g       *ABS*	00000000 __DTOR_END__
010023b0 g     F .text	00000014 puts
010115b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01009860 g     F .text	00000074 __fpclassifyd
010090e0 g     F .text	000000a4 __ratio
0100b160 g     F .text	0000001c __vfiprintf_internal
01010268 g     F .text	0000021c altera_avalon_jtag_uart_read
01002284 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100c83c g     F .text	00000064 .hidden __udivsi3
0100f434 g     F .text	000000ac isatty
01012240 g     O .rodata	000000c8 __mprec_tens
0100736c g     F .text	0000000c __locale_charset
01015a4c g     O .bss	00000004 __malloc_top_pad
01001810 g     F .text	00000268 UsbGetConfigDesc2
01013f10 g     O .rwdata	00000004 __mb_cur_max
0100739c g     F .text	0000000c _localeconv_r
01008678 g     F .text	0000003c __i2b
01006ca0 g     F .text	000004c8 __sfvwrite_r
010098d4 g     F .text	00000054 _sbrk_r
0100b7e4 g     F .text	00000060 _read_r
01013f30 g     O .rwdata	00000004 alt_max_fd
0100b3c8 g     F .text	000000f0 _fclose_r
0100648c g     F .text	00000030 fflush
01015a48 g     O .bss	00000004 __malloc_max_sbrked_mem
0100c920 g     F .text	000008ac .hidden __adddf3
01008e88 g     F .text	0000010c __b2d
0100c180 g     F .text	000005c4 .hidden __umoddi3
0100f608 g     F .text	000000dc lseek
01013f08 g     O .rwdata	00000004 _global_impure_ptr
010092fc g     F .text	00000564 _realloc_r
01015b98 g       *ABS*	00000000 __bss_end
01010cbc g     F .text	000000f0 alt_iic_isr_register
0101122c g     F .text	00000108 alt_tick
0100bb84 g     F .text	000005fc .hidden __udivdi3
0100b630 g     F .text	00000024 _fputwc_r
01012218 g     O .rodata	00000028 __mprec_bigtens
0100845c g     F .text	00000104 __s2b
0100f0b8 g     F .text	000000a8 .hidden __floatunsidf
01008bc8 g     F .text	00000060 __mcmp
01001260 g     F .text	00000100 UsbSetAddress
0100683c g     F .text	00000018 __fp_lock_all
01010c70 g     F .text	0000004c alt_ic_irq_enabled
01011190 g     F .text	0000009c alt_alarm_stop
01015a60 g     O .bss	00000004 alt_irq_active
010000fc g     F .exceptions	000000d4 alt_irq_handler
01012d00 g     O .rwdata	00000028 alt_dev_null
0101092c g     F .text	00000020 alt_dcache_flush_all
01008560 g     F .text	00000068 __hi0bits
01000364 g     F .text	00000068 IO_read
0100ef5c g     F .text	00000080 .hidden __fixdfsi
01013f48 g       *ABS*	00000000 __ram_rwdata_end
01013f28 g     O .rwdata	00000008 alt_dev_list
0100fa88 g     F .text	00000100 write
0101245c g       *ABS*	00000000 __ram_rodata_end
0100f340 g     F .text	000000b8 fstat
0100dd00 g     F .text	000000f4 .hidden __ledf2
01002204 g     F .text	00000080 UsbPrintMem
01008940 g     F .text	00000140 __pow5mult
01009c54 g     F .text	0000150c ___vfiprintf_internal_r
01015a40 g     O .bss	00000004 __nlocale_changed
0100c8a0 g     F .text	00000058 .hidden __umodsi3
01015b98 g       *ABS*	00000000 end
0100fda4 g     F .text	000000c0 altera_avalon_jtag_uart_init
010001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
010119e4 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100f160 g     F .text	00000064 .hidden __clzsi2
01010484 g     F .text	00000224 altera_avalon_jtag_uart_write
0100682c g     F .text	00000004 __sfp_lock_acquire
01007d94 g     F .text	000000e4 memchr
0100245c g     F .text	000022dc ___vfprintf_internal_r
01001b78 g     F .text	00000100 UsbClassRequest
01006990 g     F .text	00000310 _free_r
01007378 g     F .text	00000010 __locale_mb_cur_max
01011830 g     F .text	00000180 __call_exitprocs
01015a3c g     O .bss	00000004 __mlocale_changed
01013f14 g     O .rwdata	00000004 __malloc_sbrk_base
01000230 g     F .text	0000003c _start
01015a64 g     O .bss	00000004 _alt_tick_rate
01008a80 g     F .text	00000148 __lshift
01015a68 g     O .bss	00000004 _alt_nticks
0100f7e4 g     F .text	00000104 read
0100fbf4 g     F .text	0000004c alt_sys_init
01011718 g     F .text	00000118 __register_exitproc
010086b4 g     F .text	0000028c __multiply
01010110 g     F .text	00000068 altera_avalon_jtag_uart_close
0100c8f8 g     F .text	00000028 .hidden __mulsi3
0101245c g       *ABS*	00000000 __ram_rwdata_start
010119e4 g       *ABS*	00000000 __ram_rodata_start
01015a70 g     O .bss	00000028 __malloc_current_mallinfo
01008f94 g     F .text	0000014c __d2b
01001360 g     F .text	00000148 UsbGetDeviceDesc1
0100fc40 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
010114f0 g     F .text	000000c4 alt_get_fd
010107d4 g     F .text	00000158 alt_busy_sleep
0100b298 g     F .text	00000054 _close_r
0101169c g     F .text	0000007c memcmp
0100fd00 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01015b98 g       *ABS*	00000000 __alt_stack_base
0100fd50 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01004810 g     F .text	00000154 __swsetup_r
0100d1cc g     F .text	000009d0 .hidden __divdf3
010066ec g     F .text	00000118 __sfp
010091f8 g     F .text	00000078 __copybits
010128f8 g     O .rwdata	00000408 __malloc_av_
01006838 g     F .text	00000004 __sinit_lock_release
0100ddf4 g     F .text	0000086c .hidden __muldf3
01009928 g     F .text	00000054 __sread
01002100 g     F .text	00000084 UsbWaitTDListDone
010113e8 g     F .text	00000108 alt_find_file
01010988 g     F .text	000000a4 alt_dev_llist_insert
0100f760 g     F .text	00000024 __malloc_lock
0100f96c g     F .text	000000b0 sbrk
01006430 g     F .text	0000005c _fflush_r
0100b2ec g     F .text	000000dc _calloc_r
01015a34 g       *ABS*	00000000 __bss_start
0100811c g     F .text	00000128 memset
010003cc g     F .text	00000d44 main
01015a5c g     O .bss	00000004 alt_envp
01015a44 g     O .bss	00000004 __malloc_max_total_mem
0100fca0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01001a78 g     F .text	00000100 UsbSetConfig
0100b984 g     F .text	00000018 __swbuf
01009a5c g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100b4b8 g     F .text	00000014 fclose
01004b8c g     F .text	00001688 _dtoa_r
01007588 g     F .text	0000080c _malloc_r
0100baf8 g     F .text	00000030 __ascii_wctomb
01013f34 g     O .rwdata	00000004 alt_errno
01007168 g     F .text	000000c4 _fwalk
0100c744 g     F .text	00000084 .hidden __divsi3
0100686c g     F .text	00000124 _malloc_trim_r
01001c78 g     F .text	00000148 UsbGetHidDesc
010119e4 g       *ABS*	00000000 __CTOR_END__
01009a64 g     F .text	000000dc strcmp
010119e4 g       *ABS*	00000000 __flash_rodata_start
010119e4 g       *ABS*	00000000 __DTOR_LIST__
0100db9c g     F .text	00000088 .hidden __nedf2
01001168 g     F .text	00000044 UsbRead
0100fbbc g     F .text	00000038 alt_irq_init
0100f8e8 g     F .text	00000084 alt_release_fd
01012328 g     O .rodata	00000100 .hidden __clz_tab
01015a38 g     O .bss	00000004 _PathLocale
01011650 g     F .text	00000014 atexit
0100b238 g     F .text	00000060 _write_r
010073a8 g     F .text	00000018 setlocale
01013f0c g     O .rwdata	00000004 _impure_ptr
01015a54 g     O .bss	00000004 alt_argc
01006214 g     F .text	0000021c __sflush_r
01010a8c g     F .text	00000060 _do_dtors
01007394 g     F .text	00000008 __locale_cjk_lang
01000020 g       .exceptions	00000000 alt_irq_entry
01008e24 g     F .text	00000064 __ulp
01006854 g     F .text	00000018 __fp_unlock_all
01013f20 g     O .rwdata	00000008 alt_fs_list
01001dc0 g     F .text	00000340 UsbGetReportDesc
01000020 g       *ABS*	00000000 __ram_exceptions_start
010073c0 g     F .text	0000000c localeconv
01010b0c g     F .text	00000050 alt_ic_isr_register
01013f48 g       *ABS*	00000000 _edata
01015b98 g       *ABS*	00000000 _end
01001110 g     F .text	00000058 UsbWrite
0100b4cc g     F .text	00000164 __fputwc
01000230 g       *ABS*	00000000 __ram_exceptions_end
01010178 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01010be4 g     F .text	0000008c alt_ic_irq_disable
01009984 g     F .text	0000007c __swrite
01013f18 g     O .rwdata	00000004 __malloc_trim_threshold
01007388 g     F .text	0000000c __locale_msgcharset
01011664 g     F .text	00000038 exit
0100722c g     F .text	000000c4 _fwalk_reent
01008c28 g     F .text	000001fc __mdiff
0100c7c8 g     F .text	00000074 .hidden __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01006830 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
010002f4 g     F .text	00000070 IO_write
010119b0 g     F .text	00000034 _exit
010106a8 g     F .text	0000012c alt_alarm_start
010073cc g     F .text	000001bc __smakebuf_r
010023c4 g     F .text	00000098 strlen
01011034 g     F .text	0000015c open
0100dc24 g     F .text	000000dc .hidden __gedf2
01013f1c g     O .rwdata	00000004 __wctomb
01009c3c g     F .text	00000018 __sprint_r
01010aec g     F .text	00000020 alt_icache_flush_all
01013f3c g     O .rwdata	00000004 alt_priority_mask
01010b5c g     F .text	00000088 alt_ic_irq_enable
01004738 g     F .text	0000001c __vfprintf_internal
0100bb28 g     F .text	0000005c _wctomb_r
0100e660 g     F .text	000008fc .hidden __subdf3
010085c8 g     F .text	000000b0 __lo0bits
01001680 g     F .text	00000190 UsbGetConfigDesc1
01013f40 g     O .rwdata	00000008 alt_alarm_list
01010a2c g     F .text	00000060 _do_ctors
010011ac g     F .text	000000b4 UsbSoftReset
0100ba38 g     F .text	000000c0 wcrtomb
0100f200 g     F .text	000000d8 close
010014a8 g     F .text	000001d8 UsbGetDeviceDesc2
0100f548 g     F .text	00000084 alt_load
0100b654 g     F .text	00000080 fputwc
01006834 g     F .text	00000004 __sinit_lock_acquire
01008314 g     F .text	00000148 __multadd
010082ec g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08408c14 	ori	at,at,560
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000fc0 	call	10000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000706 	br	10000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1000098:	10001d00 	call	10001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100009c:	1000021e 	bne	r2,zero,10000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000f8:	ef80083a 	eret

010000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000fc:	defff904 	addi	sp,sp,-28
 1000100:	dfc00615 	stw	ra,24(sp)
 1000104:	df000515 	stw	fp,20(sp)
 1000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000110:	0005313a 	rdctl	r2,ipending
 1000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000124:	00800044 	movi	r2,1
 1000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100012c:	e0fffb17 	ldw	r3,-20(fp)
 1000130:	e0bffc17 	ldw	r2,-16(fp)
 1000134:	1884703a 	and	r2,r3,r2
 1000138:	10001426 	beq	r2,zero,100018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100013c:	00804074 	movhi	r2,257
 1000140:	1096a604 	addi	r2,r2,23192
 1000144:	e0fffd17 	ldw	r3,-12(fp)
 1000148:	180690fa 	slli	r3,r3,3
 100014c:	10c5883a 	add	r2,r2,r3
 1000150:	10c00017 	ldw	r3,0(r2)
 1000154:	00804074 	movhi	r2,257
 1000158:	1096a604 	addi	r2,r2,23192
 100015c:	e13ffd17 	ldw	r4,-12(fp)
 1000160:	200890fa 	slli	r4,r4,3
 1000164:	1105883a 	add	r2,r2,r4
 1000168:	10800104 	addi	r2,r2,4
 100016c:	10800017 	ldw	r2,0(r2)
 1000170:	1009883a 	mov	r4,r2
 1000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100017c:	0005313a 	rdctl	r2,ipending
 1000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000184:	e0bfff17 	ldw	r2,-4(fp)
 1000188:	00000706 	br	10001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100018c:	e0bffc17 	ldw	r2,-16(fp)
 1000190:	1085883a 	add	r2,r2,r2
 1000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000198:	e0bffd17 	ldw	r2,-12(fp)
 100019c:	10800044 	addi	r2,r2,1
 10001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a4:	003fe106 	br	100012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
 10001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001ac:	e0bffb17 	ldw	r2,-20(fp)
 10001b0:	103fdb1e 	bne	r2,zero,1000120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001b4:	0001883a 	nop
}
 10001b8:	0001883a 	nop
 10001bc:	e037883a 	mov	sp,fp
 10001c0:	dfc00117 	ldw	ra,4(sp)
 10001c4:	df000017 	ldw	fp,0(sp)
 10001c8:	dec00204 	addi	sp,sp,8
 10001cc:	f800283a 	ret

010001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10001d0:	defffb04 	addi	sp,sp,-20
 10001d4:	dfc00415 	stw	ra,16(sp)
 10001d8:	df000315 	stw	fp,12(sp)
 10001dc:	df000304 	addi	fp,sp,12
 10001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10001e4:	00bfffc4 	movi	r2,-1
 10001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10001f0:	d0a6d917 	ldw	r2,-25756(gp)
 10001f4:	10000726 	beq	r2,zero,1000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10001f8:	d0a6d917 	ldw	r2,-25756(gp)
 10001fc:	e0fffd17 	ldw	r3,-12(fp)
 1000200:	e1bffe17 	ldw	r6,-8(fp)
 1000204:	e17fff17 	ldw	r5,-4(fp)
 1000208:	1809883a 	mov	r4,r3
 100020c:	103ee83a 	callr	r2
 1000210:	00000206 	br	100021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1000218:	0005883a 	mov	r2,zero
}
 100021c:	e037883a 	mov	sp,fp
 1000220:	dfc00117 	ldw	ra,4(sp)
 1000224:	df000017 	ldw	fp,0(sp)
 1000228:	dec00204 	addi	sp,sp,8
 100022c:	f800283a 	ret

Disassembly of section .text:

01000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000230:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 1000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 1000238:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 100023c:	d6afc214 	ori	gp,gp,48904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000240:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 1000244:	10968d14 	ori	r2,r2,23092

    movhi r3, %hi(__bss_end)
 1000248:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 100024c:	18d6e614 	ori	r3,r3,23448

    beq r2, r3, 1f
 1000250:	10c00326 	beq	r2,r3,1000260 <_start+0x30>

0:
    stw zero, (r2)
 1000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 100025c:	10fffd36 	bltu	r2,r3,1000254 <__alt_data_end+0xff800254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000260:	100f5480 	call	100f548 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000264:	100f6e40 	call	100f6e4 <alt_main>

01000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000268:	003fff06 	br	1000268 <__alt_data_end+0xff800268>

0100026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 100026c:	deffff04 	addi	sp,sp,-4
 1000270:	df000015 	stw	fp,0(sp)
 1000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 1000278:	00800c04 	movi	r2,48
 100027c:	00c00044 	movi	r3,1
 1000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 1000284:	00801004 	movi	r2,64
 1000288:	00c00044 	movi	r3,1
 100028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 1000290:	00801804 	movi	r2,96
 1000294:	00c00044 	movi	r3,1
 1000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 100029c:	00801404 	movi	r2,80
 10002a0:	00c00044 	movi	r3,1
 10002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 10002a8:	00802004 	movi	r2,128
 10002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 10002b0:	00801c04 	movi	r2,112
 10002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 10002b8:	00801004 	movi	r2,64
 10002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 10002c0:	00800c04 	movi	r2,48
 10002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 10002c8:	00800c04 	movi	r2,48
 10002cc:	00c00044 	movi	r3,1
 10002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 10002d4:	00801004 	movi	r2,64
 10002d8:	00c00044 	movi	r3,1
 10002dc:	10c00005 	stb	r3,0(r2)
}
 10002e0:	0001883a 	nop
 10002e4:	e037883a 	mov	sp,fp
 10002e8:	df000017 	ldw	fp,0(sp)
 10002ec:	dec00104 	addi	sp,sp,4
 10002f0:	f800283a 	ret

010002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 10002f4:	defffd04 	addi	sp,sp,-12
 10002f8:	df000215 	stw	fp,8(sp)
 10002fc:	df000204 	addi	fp,sp,8
 1000300:	2007883a 	mov	r3,r4
 1000304:	2805883a 	mov	r2,r5
 1000308:	e0fffe05 	stb	r3,-8(fp)
 100030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address=Address;
 1000310:	00802004 	movi	r2,128
 1000314:	e0fffe03 	ldbu	r3,-8(fp)
 1000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs=0;
 100031c:	00801004 	movi	r2,64
 1000320:	10000005 	stb	zero,0(r2)
	*otg_hpi_w=0;
 1000324:	00801404 	movi	r2,80
 1000328:	10000005 	stb	zero,0(r2)
	*otg_hpi_data=Data;
 100032c:	00801c04 	movi	r2,112
 1000330:	e0ffff0b 	ldhu	r3,-4(fp)
 1000334:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs=1;
 1000338:	00801004 	movi	r2,64
 100033c:	00c00044 	movi	r3,1
 1000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w=1;
 1000344:	00801404 	movi	r2,80
 1000348:	00c00044 	movi	r3,1
 100034c:	10c00005 	stb	r3,0(r2)

}
 1000350:	0001883a 	nop
 1000354:	e037883a 	mov	sp,fp
 1000358:	df000017 	ldw	fp,0(sp)
 100035c:	dec00104 	addi	sp,sp,4
 1000360:	f800283a 	ret

01000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 1000364:	defffd04 	addi	sp,sp,-12
 1000368:	df000215 	stw	fp,8(sp)
 100036c:	df000204 	addi	fp,sp,8
 1000370:	2005883a 	mov	r2,r4
 1000374:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);

	*otg_hpi_address=Address;
 1000378:	00802004 	movi	r2,128
 100037c:	e0ffff03 	ldbu	r3,-4(fp)
 1000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs=0;
 1000384:	00801004 	movi	r2,64
 1000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r=0;
 100038c:	00801804 	movi	r2,96
 1000390:	10000005 	stb	zero,0(r2)
	temp=*otg_hpi_data;
 1000394:	00801c04 	movi	r2,112
 1000398:	10800017 	ldw	r2,0(r2)
 100039c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r=1;
 10003a0:	00801804 	movi	r2,96
 10003a4:	00c00044 	movi	r3,1
 10003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs=1;
 10003ac:	00801004 	movi	r2,64
 10003b0:	00c00044 	movi	r3,1
 10003b4:	10c00005 	stb	r3,0(r2)
	return temp;
 10003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 10003bc:	e037883a 	mov	sp,fp
 10003c0:	df000017 	ldw	fp,0(sp)
 10003c4:	dec00104 	addi	sp,sp,4
 10003c8:	f800283a 	ret

010003cc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 10003cc:	defff904 	addi	sp,sp,-28
 10003d0:	dfc00615 	stw	ra,24(sp)
 10003d4:	df000515 	stw	fp,20(sp)
 10003d8:	df000504 	addi	fp,sp,20
	IO_init();
 10003dc:	100026c0 	call	100026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 10003e0:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 10003e4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 10003e8:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 10003ec:	01004074 	movhi	r4,257
 10003f0:	21067904 	addi	r4,r4,6628
 10003f4:	10023b00 	call	10023b0 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 10003f8:	10011ac0 	call	10011ac <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 10003fc:	000b883a 	mov	r5,zero
 1000400:	01005104 	movi	r4,324
 1000404:	10011100 	call	1001110 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 1000408:	017fffd4 	movui	r5,65535
 100040c:	01302414 	movui	r4,49296
 1000410:	10011100 	call	1001110 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 1000414:	01409604 	movi	r5,600
 1000418:	01006d04 	movi	r4,436
 100041c:	10011100 	call	1001110 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 1000420:	00811004 	movi	r2,1088
 1000424:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 1000428:	e0bffb0b 	ldhu	r2,-20(fp)
 100042c:	100b883a 	mov	r5,r2
 1000430:	01005084 	movi	r4,322
 1000434:	10011100 	call	1001110 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 1000438:	00808404 	movi	r2,528
 100043c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 1000440:	e0bffe0b 	ldhu	r2,-8(fp)
 1000444:	100b883a 	mov	r5,r2
 1000448:	01302314 	movui	r4,49292
 100044c:	10011100 	call	1001110 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 1000450:	000b883a 	mov	r5,zero
 1000454:	01007104 	movi	r4,452
 1000458:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 100045c:	000b883a 	mov	r5,zero
 1000460:	01007184 	movi	r4,454
 1000464:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 1000468:	000b883a 	mov	r5,zero
 100046c:	01007204 	movi	r4,456
 1000470:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 1000474:	000b883a 	mov	r5,zero
 1000478:	01007284 	movi	r4,458
 100047c:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 1000480:	000b883a 	mov	r5,zero
 1000484:	01007304 	movi	r4,460
 1000488:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 100048c:	000b883a 	mov	r5,zero
 1000490:	01007384 	movi	r4,462
 1000494:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 1000498:	000b883a 	mov	r5,zero
 100049c:	01007404 	movi	r4,464
 10004a0:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 10004a4:	000b883a 	mov	r5,zero
 10004a8:	01007484 	movi	r4,466
 10004ac:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 10004b0:	000b883a 	mov	r5,zero
 10004b4:	01007504 	movi	r4,468
 10004b8:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 10004bc:	000b883a 	mov	r5,zero
 10004c0:	01007584 	movi	r4,470
 10004c4:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 10004c8:	000b883a 	mov	r5,zero
 10004cc:	01007604 	movi	r4,472
 10004d0:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 10004d4:	000b883a 	mov	r5,zero
 10004d8:	01007684 	movi	r4,474
 10004dc:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 10004e0:	000b883a 	mov	r5,zero
 10004e4:	01007704 	movi	r4,476
 10004e8:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 10004ec:	000b883a 	mov	r5,zero
 10004f0:	01007784 	movi	r4,478
 10004f4:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 10004f8:	01401c84 	movi	r5,114
 10004fc:	01007084 	movi	r4,450
 1000500:	10011100 	call	1001110 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 1000504:	01738054 	movui	r5,52737
 1000508:	01000044 	movi	r4,1
 100050c:	10002f40 	call	10002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 1000510:	0001883a 	nop
 1000514:	010000c4 	movi	r4,3
 1000518:	10003640 	call	1000364 <IO_read>
 100051c:	10bfffcc 	andi	r2,r2,65535
 1000520:	103ffc26 	beq	r2,zero,1000514 <__alt_data_end+0xff800514>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 1000524:	00000806 	br	1000548 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 1000528:	01000044 	movi	r4,1
 100052c:	10003640 	call	1000364 <IO_read>
 1000530:	10bfffcc 	andi	r2,r2,65535
 1000534:	100b883a 	mov	r5,r2
 1000538:	01004074 	movhi	r4,257
 100053c:	21067f04 	addi	r4,r4,6652
 1000540:	10022b40 	call	10022b4 <printf>
		goto USB_HOT_PLUG;
 1000544:	003fac06 	br	10003f8 <__alt_data_end+0xff8003f8>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 1000548:	01000044 	movi	r4,1
 100054c:	10003640 	call	1000364 <IO_read>
 1000550:	10bfffcc 	andi	r2,r2,65535
 1000554:	1083fb58 	cmpnei	r2,r2,4077
 1000558:	103ff31e 	bne	r2,zero,1000528 <__alt_data_end+0xff800528>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 100055c:	01004074 	movhi	r4,257
 1000560:	21068804 	addi	r4,r4,6688
 1000564:	10022b40 	call	10022b4 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 1000568:	01401d04 	movi	r5,116
 100056c:	01007084 	movi	r4,450
 1000570:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 1000574:	01400f04 	movi	r5,60
 1000578:	01007104 	movi	r4,452
 100057c:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 1000580:	000b883a 	mov	r5,zero
 1000584:	01007184 	movi	r4,454
 1000588:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 100058c:	000b883a 	mov	r5,zero
 1000590:	01007204 	movi	r4,456
 1000594:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 1000598:	000b883a 	mov	r5,zero
 100059c:	01007284 	movi	r4,458
 10005a0:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 10005a4:	000b883a 	mov	r5,zero
 10005a8:	01007304 	movi	r4,460
 10005ac:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 10005b0:	000b883a 	mov	r5,zero
 10005b4:	01007384 	movi	r4,462
 10005b8:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 10005bc:	000b883a 	mov	r5,zero
 10005c0:	01007404 	movi	r4,464
 10005c4:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 10005c8:	000b883a 	mov	r5,zero
 10005cc:	01007484 	movi	r4,466
 10005d0:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 10005d4:	000b883a 	mov	r5,zero
 10005d8:	01007504 	movi	r4,468
 10005dc:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 10005e0:	000b883a 	mov	r5,zero
 10005e4:	01007584 	movi	r4,470
 10005e8:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 10005ec:	000b883a 	mov	r5,zero
 10005f0:	01007604 	movi	r4,472
 10005f4:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 10005f8:	000b883a 	mov	r5,zero
 10005fc:	01007684 	movi	r4,474
 1000600:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 1000604:	000b883a 	mov	r5,zero
 1000608:	01007704 	movi	r4,476
 100060c:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 1000610:	000b883a 	mov	r5,zero
 1000614:	01007784 	movi	r4,478
 1000618:	10011100 	call	1001110 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 100061c:	01738054 	movui	r5,52737
 1000620:	01000044 	movi	r4,1
 1000624:	10002f40 	call	10002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 1000628:	0001883a 	nop
 100062c:	01000044 	movi	r4,1
 1000630:	10003640 	call	1000364 <IO_read>
 1000634:	10bfffcc 	andi	r2,r2,65535
 1000638:	1083fb58 	cmpnei	r2,r2,4077
 100063c:	10000826 	beq	r2,zero,1000660 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 1000640:	01000044 	movi	r4,1
 1000644:	10003640 	call	1000364 <IO_read>
 1000648:	10bfffcc 	andi	r2,r2,65535
 100064c:	100b883a 	mov	r5,r2
 1000650:	01004074 	movhi	r4,257
 1000654:	21067f04 	addi	r4,r4,6652
 1000658:	10022b40 	call	10022b4 <printf>
		goto USB_HOT_PLUG;
 100065c:	003f6606 	br	10003f8 <__alt_data_end+0xff8003f8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 1000660:	00b02284 	movi	r2,-16246
 1000664:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 1000668:	008c0004 	movi	r2,12288
 100066c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 1000670:	00880004 	movi	r2,8192
 1000674:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 1000678:	d0a6cb0b 	ldhu	r2,-25812(gp)
 100067c:	10bfffcc 	andi	r2,r2,65535
 1000680:	1009883a 	mov	r4,r2
 1000684:	10011680 	call	1001168 <UsbRead>
 1000688:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 100068c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1000690:	e0fffb0b 	ldhu	r3,-20(fp)
 1000694:	1884703a 	and	r2,r3,r2
 1000698:	10bfffcc 	andi	r2,r2,65535
 100069c:	1000351e 	bne	r2,zero,1000774 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 10006a0:	e03ffbc5 	stb	zero,-17(fp)
 10006a4:	00000f06 	br	10006e4 <main+0x318>
		{
			usleep(5*1000);
 10006a8:	0104e204 	movi	r4,5000
 10006ac:	100fa1c0 	call	100fa1c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 10006b0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 10006b4:	10bfffcc 	andi	r2,r2,65535
 10006b8:	1009883a 	mov	r4,r2
 10006bc:	10011680 	call	1001168 <UsbRead>
 10006c0:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 10006c4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 10006c8:	e0fffb0b 	ldhu	r3,-20(fp)
 10006cc:	1884703a 	and	r2,r3,r2
 10006d0:	10bfffcc 	andi	r2,r2,65535
 10006d4:	1000071e 	bne	r2,zero,10006f4 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 10006d8:	e0bffbc3 	ldbu	r2,-17(fp)
 10006dc:	10800044 	addi	r2,r2,1
 10006e0:	e0bffbc5 	stb	r2,-17(fp)
 10006e4:	e0bffbc3 	ldbu	r2,-17(fp)
 10006e8:	10800170 	cmpltui	r2,r2,5
 10006ec:	103fee1e 	bne	r2,zero,10006a8 <__alt_data_end+0xff8006a8>
 10006f0:	00000106 	br	10006f8 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
 10006f4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
 10006f8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 10006fc:	e0fffb0b 	ldhu	r3,-20(fp)
 1000700:	1884703a 	and	r2,r3,r2
 1000704:	10bfffcc 	andi	r2,r2,65535
 1000708:	1000261e 	bne	r2,zero,10007a4 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 100070c:	01004074 	movhi	r4,257
 1000710:	21068c04 	addi	r4,r4,6704
 1000714:	10023b00 	call	10023b0 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 1000718:	01004074 	movhi	r4,257
 100071c:	21069604 	addi	r4,r4,6744
 1000720:	10023b00 	call	10023b0 <puts>
			while (!(usb_ctl_val & no_device))
 1000724:	00000d06 	br	100075c <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 1000728:	d0a6cb0b 	ldhu	r2,-25812(gp)
 100072c:	10bfffcc 	andi	r2,r2,65535
 1000730:	1009883a 	mov	r4,r2
 1000734:	10011680 	call	1001168 <UsbRead>
 1000738:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 100073c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1000740:	e0fffb0b 	ldhu	r3,-20(fp)
 1000744:	1884703a 	and	r2,r3,r2
 1000748:	10bfffcc 	andi	r2,r2,65535
 100074c:	10000126 	beq	r2,zero,1000754 <main+0x388>
					goto USB_HOT_PLUG;
 1000750:	003f2906 	br	10003f8 <__alt_data_end+0xff8003f8>

				usleep(2000);
 1000754:	0101f404 	movi	r4,2000
 1000758:	100fa1c0 	call	100fa1c <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 100075c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1000760:	e0fffb0b 	ldhu	r3,-20(fp)
 1000764:	1884703a 	and	r2,r3,r2
 1000768:	10bfffcc 	andi	r2,r2,65535
 100076c:	103fee26 	beq	r2,zero,1000728 <__alt_data_end+0xff800728>
 1000770:	00000c06 	br	10007a4 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 1000774:	e0fffb0b 	ldhu	r3,-20(fp)
 1000778:	e0bffc0b 	ldhu	r2,-16(fp)
 100077c:	1884703a 	and	r2,r3,r2
 1000780:	10bfffcc 	andi	r2,r2,65535
 1000784:	10000426 	beq	r2,zero,1000798 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
 1000788:	01004074 	movhi	r4,257
 100078c:	2106a204 	addi	r4,r4,6792
 1000790:	10023b00 	call	10023b0 <puts>
 1000794:	00000306 	br	10007a4 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 1000798:	01004074 	movhi	r4,257
 100079c:	2106a904 	addi	r4,r4,6820
 10007a0:	10023b00 	call	10023b0 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 10007a4:	10012600 	call	1001260 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10007a8:	00000306 	br	10007b8 <main+0x3ec>
	{
		UsbSetAddress();
 10007ac:	10012600 	call	1001260 <UsbSetAddress>
		usleep(10*1000);
 10007b0:	0109c404 	movi	r4,10000
 10007b4:	100fa1c0 	call	100fa1c <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10007b8:	010000c4 	movi	r4,3
 10007bc:	10003640 	call	1000364 <IO_read>
 10007c0:	10bfffcc 	andi	r2,r2,65535
 10007c4:	1080040c 	andi	r2,r2,16
 10007c8:	103ff826 	beq	r2,zero,10007ac <__alt_data_end+0xff8007ac>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 10007cc:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 10007d0:	01414184 	movi	r5,1286
 10007d4:	01000084 	movi	r4,2
 10007d8:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 10007dc:	0009883a 	mov	r4,zero
 10007e0:	10003640 	call	1000364 <IO_read>
 10007e4:	10bfffcc 	andi	r2,r2,65535
 10007e8:	100b883a 	mov	r5,r2
 10007ec:	01004074 	movhi	r4,257
 10007f0:	2106b004 	addi	r4,r4,6848
 10007f4:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 10007f8:	01414204 	movi	r5,1288
 10007fc:	01000084 	movi	r4,2
 1000800:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000804:	0009883a 	mov	r4,zero
 1000808:	10003640 	call	1000364 <IO_read>
 100080c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 1000810:	e0bffb0b 	ldhu	r2,-20(fp)
 1000814:	100b883a 	mov	r5,r2
 1000818:	01004074 	movhi	r4,257
 100081c:	2106bb04 	addi	r4,r4,6892
 1000820:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 1000824:	e0bffb0b 	ldhu	r2,-20(fp)
 1000828:	108000e0 	cmpeqi	r2,r2,3
 100082c:	1000031e 	bne	r2,zero,100083c <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000830:	10021840 	call	1002184 <UsbGetRetryCnt>
 1000834:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 1000838:	003eef06 	br	10003f8 <__alt_data_end+0xff8003f8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 100083c:	01004074 	movhi	r4,257
 1000840:	2106c704 	addi	r4,r4,6940
 1000844:	10023b00 	call	10023b0 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 1000848:	10013600 	call	1001360 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 100084c:	00000306 	br	100085c <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 1000850:	10013600 	call	1001360 <UsbGetDeviceDesc1>
		usleep(10*1000);
 1000854:	0109c404 	movi	r4,10000
 1000858:	100fa1c0 	call	100fa1c <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 100085c:	010000c4 	movi	r4,3
 1000860:	10003640 	call	1000364 <IO_read>
 1000864:	10bfffcc 	andi	r2,r2,65535
 1000868:	1080040c 	andi	r2,r2,16
 100086c:	103ff826 	beq	r2,zero,1000850 <__alt_data_end+0xff800850>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000870:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000874:	01414184 	movi	r5,1286
 1000878:	01000084 	movi	r4,2
 100087c:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000880:	0009883a 	mov	r4,zero
 1000884:	10003640 	call	1000364 <IO_read>
 1000888:	10bfffcc 	andi	r2,r2,65535
 100088c:	100b883a 	mov	r5,r2
 1000890:	01004074 	movhi	r4,257
 1000894:	2106d604 	addi	r4,r4,7000
 1000898:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
 100089c:	01414204 	movi	r5,1288
 10008a0:	01000084 	movi	r4,2
 10008a4:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 10008a8:	0009883a 	mov	r4,zero
 10008ac:	10003640 	call	1000364 <IO_read>
 10008b0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 10008b4:	e0bffb0b 	ldhu	r2,-20(fp)
 10008b8:	100b883a 	mov	r5,r2
 10008bc:	01004074 	movhi	r4,257
 10008c0:	2106e104 	addi	r4,r4,7044
 10008c4:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03)
 10008c8:	00000206 	br	10008d4 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
 10008cc:	10021840 	call	1002184 <UsbGetRetryCnt>
 10008d0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 10008d4:	e0bffb0b 	ldhu	r2,-20(fp)
 10008d8:	108000d8 	cmpnei	r2,r2,3
 10008dc:	103ffb1e 	bne	r2,zero,10008cc <__alt_data_end+0xff8008cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 10008e0:	01004074 	movhi	r4,257
 10008e4:	2106ed04 	addi	r4,r4,7092
 10008e8:	10023b00 	call	10023b0 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 10008ec:	10014a80 	call	10014a8 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10008f0:	00000306 	br	1000900 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 10008f4:	10014a80 	call	10014a8 <UsbGetDeviceDesc2>
		usleep(10*1000);
 10008f8:	0109c404 	movi	r4,10000
 10008fc:	100fa1c0 	call	100fa1c <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000900:	010000c4 	movi	r4,3
 1000904:	10003640 	call	1000364 <IO_read>
 1000908:	10bfffcc 	andi	r2,r2,65535
 100090c:	1080040c 	andi	r2,r2,16
 1000910:	103ff826 	beq	r2,zero,10008f4 <__alt_data_end+0xff8008f4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000914:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000918:	01414184 	movi	r5,1286
 100091c:	01000084 	movi	r4,2
 1000920:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000924:	0009883a 	mov	r4,zero
 1000928:	10003640 	call	1000364 <IO_read>
 100092c:	10bfffcc 	andi	r2,r2,65535
 1000930:	100b883a 	mov	r5,r2
 1000934:	01004074 	movhi	r4,257
 1000938:	2106d604 	addi	r4,r4,7000
 100093c:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
 1000940:	01414204 	movi	r5,1288
 1000944:	01000084 	movi	r4,2
 1000948:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 100094c:	0009883a 	mov	r4,zero
 1000950:	10003640 	call	1000364 <IO_read>
 1000954:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 1000958:	e0bffb0b 	ldhu	r2,-20(fp)
 100095c:	100b883a 	mov	r5,r2
 1000960:	01004074 	movhi	r4,257
 1000964:	2106e104 	addi	r4,r4,7044
 1000968:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03)
 100096c:	00000206 	br	1000978 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000970:	10021840 	call	1002184 <UsbGetRetryCnt>
 1000974:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000978:	e0bffb0b 	ldhu	r2,-20(fp)
 100097c:	108000d8 	cmpnei	r2,r2,3
 1000980:	103ffb1e 	bne	r2,zero,1000970 <__alt_data_end+0xff800970>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 1000984:	01004074 	movhi	r4,257
 1000988:	21070104 	addi	r4,r4,7172
 100098c:	10023b00 	call	10023b0 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 1000990:	10016800 	call	1001680 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000994:	00000306 	br	10009a4 <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 1000998:	10016800 	call	1001680 <UsbGetConfigDesc1>
		usleep(10*1000);
 100099c:	0109c404 	movi	r4,10000
 10009a0:	100fa1c0 	call	100fa1c <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10009a4:	010000c4 	movi	r4,3
 10009a8:	10003640 	call	1000364 <IO_read>
 10009ac:	10bfffcc 	andi	r2,r2,65535
 10009b0:	1080040c 	andi	r2,r2,16
 10009b4:	103ff826 	beq	r2,zero,1000998 <__alt_data_end+0xff800998>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 10009b8:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 10009bc:	01414184 	movi	r5,1286
 10009c0:	01000084 	movi	r4,2
 10009c4:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 10009c8:	0009883a 	mov	r4,zero
 10009cc:	10003640 	call	1000364 <IO_read>
 10009d0:	10bfffcc 	andi	r2,r2,65535
 10009d4:	100b883a 	mov	r5,r2
 10009d8:	01004074 	movhi	r4,257
 10009dc:	21071304 	addi	r4,r4,7244
 10009e0:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
 10009e4:	01414204 	movi	r5,1288
 10009e8:	01000084 	movi	r4,2
 10009ec:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 10009f0:	0009883a 	mov	r4,zero
 10009f4:	10003640 	call	1000364 <IO_read>
 10009f8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 10009fc:	e0bffb0b 	ldhu	r2,-20(fp)
 1000a00:	100b883a 	mov	r5,r2
 1000a04:	01004074 	movhi	r4,257
 1000a08:	21071e04 	addi	r4,r4,7288
 1000a0c:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03)
 1000a10:	00000206 	br	1000a1c <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000a14:	10021840 	call	1002184 <UsbGetRetryCnt>
 1000a18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000a1c:	e0bffb0b 	ldhu	r2,-20(fp)
 1000a20:	108000d8 	cmpnei	r2,r2,3
 1000a24:	103ffb1e 	bne	r2,zero,1000a14 <__alt_data_end+0xff800a14>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 1000a28:	01004074 	movhi	r4,257
 1000a2c:	21072a04 	addi	r4,r4,7336
 1000a30:	10023b00 	call	10023b0 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 1000a34:	10018100 	call	1001810 <UsbGetConfigDesc2>

	usleep(100*1000);
 1000a38:	010000b4 	movhi	r4,2
 1000a3c:	2121a804 	addi	r4,r4,-31072
 1000a40:	100fa1c0 	call	100fa1c <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000a44:	00000306 	br	1000a54 <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 1000a48:	10018100 	call	1001810 <UsbGetConfigDesc2>
		usleep(10*1000);
 1000a4c:	0109c404 	movi	r4,10000
 1000a50:	100fa1c0 	call	100fa1c <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000a54:	010000c4 	movi	r4,3
 1000a58:	10003640 	call	1000364 <IO_read>
 1000a5c:	10bfffcc 	andi	r2,r2,65535
 1000a60:	1080040c 	andi	r2,r2,16
 1000a64:	103ff826 	beq	r2,zero,1000a48 <__alt_data_end+0xff800a48>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000a68:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000a6c:	01414184 	movi	r5,1286
 1000a70:	01000084 	movi	r4,2
 1000a74:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000a78:	0009883a 	mov	r4,zero
 1000a7c:	10003640 	call	1000364 <IO_read>
 1000a80:	10bfffcc 	andi	r2,r2,65535
 1000a84:	100b883a 	mov	r5,r2
 1000a88:	01004074 	movhi	r4,257
 1000a8c:	21073d04 	addi	r4,r4,7412
 1000a90:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
 1000a94:	01414204 	movi	r5,1288
 1000a98:	01000084 	movi	r4,2
 1000a9c:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000aa0:	0009883a 	mov	r4,zero
 1000aa4:	10003640 	call	1000364 <IO_read>
 1000aa8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 1000aac:	e0bffb0b 	ldhu	r2,-20(fp)
 1000ab0:	100b883a 	mov	r5,r2
 1000ab4:	01004074 	movhi	r4,257
 1000ab8:	21074804 	addi	r4,r4,7456
 1000abc:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03)
 1000ac0:	00000206 	br	1000acc <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000ac4:	10021840 	call	1002184 <UsbGetRetryCnt>
 1000ac8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000acc:	e0bffb0b 	ldhu	r2,-20(fp)
 1000ad0:	108000d8 	cmpnei	r2,r2,3
 1000ad4:	103ffb1e 	bne	r2,zero,1000ac4 <__alt_data_end+0xff800ac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 1000ad8:	01004074 	movhi	r4,257
 1000adc:	21075404 	addi	r4,r4,7504
 1000ae0:	10023b00 	call	10023b0 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 1000ae4:	01415b04 	movi	r5,1388
 1000ae8:	01000084 	movi	r4,2
 1000aec:	10002f40 	call	10002f4 <IO_write>
	code = IO_read(HPI_DATA);
 1000af0:	0009883a 	mov	r4,zero
 1000af4:	10003640 	call	1000364 <IO_read>
 1000af8:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 1000afc:	e0bffe8b 	ldhu	r2,-6(fp)
 1000b00:	108000cc 	andi	r2,r2,3
 1000b04:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 1000b08:	e0bffe8b 	ldhu	r2,-6(fp)
 1000b0c:	100b883a 	mov	r5,r2
 1000b10:	01004074 	movhi	r4,257
 1000b14:	21076704 	addi	r4,r4,7580
 1000b18:	10022b40 	call	10022b4 <printf>

	if (code == 0x01)
 1000b1c:	e0bffe8b 	ldhu	r2,-6(fp)
 1000b20:	10800058 	cmpnei	r2,r2,1
 1000b24:	1000041e 	bne	r2,zero,1000b38 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 1000b28:	01004074 	movhi	r4,257
 1000b2c:	21076a04 	addi	r4,r4,7592
 1000b30:	10023b00 	call	10023b0 <puts>
 1000b34:	00000306 	br	1000b44 <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 1000b38:	01004074 	movhi	r4,257
 1000b3c:	21077904 	addi	r4,r4,7652
 1000b40:	10023b00 	call	10023b0 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 1000b44:	01415d84 	movi	r5,1398
 1000b48:	01000084 	movi	r4,2
 1000b4c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
 1000b50:	0141cfc4 	movi	r5,1855
 1000b54:	0009883a 	mov	r4,zero
 1000b58:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
 1000b5c:	01604154 	movui	r5,33029
 1000b60:	0009883a 	mov	r4,zero
 1000b64:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
 1000b68:	014000c4 	movi	r5,3
 1000b6c:	0009883a 	mov	r4,zero
 1000b70:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 1000b74:	01400204 	movi	r5,8
 1000b78:	0009883a 	mov	r4,zero
 1000b7c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 1000b80:	016b0294 	movui	r5,44042
 1000b84:	0009883a 	mov	r4,zero
 1000b88:	10002f40 	call	10002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 1000b8c:	01415d84 	movi	r5,1398
 1000b90:	01006c04 	movi	r4,432
 1000b94:	10011100 	call	1001110 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 1000b98:	01415f04 	movi	r5,1404
 1000b9c:	01000084 	movi	r4,2
 1000ba0:	10002f40 	call	10002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 1000ba4:	0009883a 	mov	r4,zero
 1000ba8:	10003640 	call	1000364 <IO_read>
 1000bac:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 1000bb0:	e0bfff03 	ldbu	r2,-4(fp)
 1000bb4:	100b883a 	mov	r5,r2
 1000bb8:	01004074 	movhi	r4,257
 1000bbc:	21078204 	addi	r4,r4,7688
 1000bc0:	10022b40 	call	10022b4 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 1000bc4:	1001a780 	call	1001a78 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000bc8:	00000306 	br	1000bd8 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 1000bcc:	1001a780 	call	1001a78 <UsbSetConfig>
		usleep(10*1000);
 1000bd0:	0109c404 	movi	r4,10000
 1000bd4:	100fa1c0 	call	100fa1c <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000bd8:	010000c4 	movi	r4,3
 1000bdc:	10003640 	call	1000364 <IO_read>
 1000be0:	10bfffcc 	andi	r2,r2,65535
 1000be4:	1080040c 	andi	r2,r2,16
 1000be8:	103ff826 	beq	r2,zero,1000bcc <__alt_data_end+0xff800bcc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000bec:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000bf0:	01414184 	movi	r5,1286
 1000bf4:	01000084 	movi	r4,2
 1000bf8:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000bfc:	0009883a 	mov	r4,zero
 1000c00:	10003640 	call	1000364 <IO_read>
 1000c04:	10bfffcc 	andi	r2,r2,65535
 1000c08:	100b883a 	mov	r5,r2
 1000c0c:	01004074 	movhi	r4,257
 1000c10:	21078c04 	addi	r4,r4,7728
 1000c14:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
 1000c18:	01414204 	movi	r5,1288
 1000c1c:	01000084 	movi	r4,2
 1000c20:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000c24:	0009883a 	mov	r4,zero
 1000c28:	10003640 	call	1000364 <IO_read>
 1000c2c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 1000c30:	e0bffb0b 	ldhu	r2,-20(fp)
 1000c34:	100b883a 	mov	r5,r2
 1000c38:	01004074 	movhi	r4,257
 1000c3c:	21079704 	addi	r4,r4,7772
 1000c40:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03)
 1000c44:	00000206 	br	1000c50 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000c48:	10021840 	call	1002184 <UsbGetRetryCnt>
 1000c4c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000c50:	e0bffb0b 	ldhu	r2,-20(fp)
 1000c54:	108000d8 	cmpnei	r2,r2,3
 1000c58:	103ffb1e 	bne	r2,zero,1000c48 <__alt_data_end+0xff800c48>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 1000c5c:	01004074 	movhi	r4,257
 1000c60:	2107a304 	addi	r4,r4,7820
 1000c64:	10023b00 	call	10023b0 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 1000c68:	1001b780 	call	1001b78 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000c6c:	00000306 	br	1000c7c <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 1000c70:	1001b780 	call	1001b78 <UsbClassRequest>
		usleep(10*1000);
 1000c74:	0109c404 	movi	r4,10000
 1000c78:	100fa1c0 	call	100fa1c <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000c7c:	010000c4 	movi	r4,3
 1000c80:	10003640 	call	1000364 <IO_read>
 1000c84:	10bfffcc 	andi	r2,r2,65535
 1000c88:	1080040c 	andi	r2,r2,16
 1000c8c:	103ff826 	beq	r2,zero,1000c70 <__alt_data_end+0xff800c70>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000c90:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000c94:	01414184 	movi	r5,1286
 1000c98:	01000084 	movi	r4,2
 1000c9c:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000ca0:	0009883a 	mov	r4,zero
 1000ca4:	10003640 	call	1000364 <IO_read>
 1000ca8:	10bfffcc 	andi	r2,r2,65535
 1000cac:	100b883a 	mov	r5,r2
 1000cb0:	01004074 	movhi	r4,257
 1000cb4:	2107b504 	addi	r4,r4,7892
 1000cb8:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
 1000cbc:	01414204 	movi	r5,1288
 1000cc0:	01000084 	movi	r4,2
 1000cc4:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000cc8:	0009883a 	mov	r4,zero
 1000ccc:	10003640 	call	1000364 <IO_read>
 1000cd0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 1000cd4:	e0bffb0b 	ldhu	r2,-20(fp)
 1000cd8:	100b883a 	mov	r5,r2
 1000cdc:	01004074 	movhi	r4,257
 1000ce0:	2107c004 	addi	r4,r4,7936
 1000ce4:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03)
 1000ce8:	00000206 	br	1000cf4 <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000cec:	10021840 	call	1002184 <UsbGetRetryCnt>
 1000cf0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000cf4:	e0bffb0b 	ldhu	r2,-20(fp)
 1000cf8:	108000d8 	cmpnei	r2,r2,3
 1000cfc:	103ffb1e 	bne	r2,zero,1000cec <__alt_data_end+0xff800cec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 1000d00:	01004074 	movhi	r4,257
 1000d04:	2107cc04 	addi	r4,r4,7984
 1000d08:	10023b00 	call	10023b0 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 1000d0c:	1001c780 	call	1001c78 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000d10:	00000306 	br	1000d20 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 1000d14:	1001c780 	call	1001c78 <UsbGetHidDesc>
		usleep(10*1000);
 1000d18:	0109c404 	movi	r4,10000
 1000d1c:	100fa1c0 	call	100fa1c <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000d20:	010000c4 	movi	r4,3
 1000d24:	10003640 	call	1000364 <IO_read>
 1000d28:	10bfffcc 	andi	r2,r2,65535
 1000d2c:	1080040c 	andi	r2,r2,16
 1000d30:	103ff826 	beq	r2,zero,1000d14 <__alt_data_end+0xff800d14>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000d34:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000d38:	01414184 	movi	r5,1286
 1000d3c:	01000084 	movi	r4,2
 1000d40:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000d44:	0009883a 	mov	r4,zero
 1000d48:	10003640 	call	1000364 <IO_read>
 1000d4c:	10bfffcc 	andi	r2,r2,65535
 1000d50:	100b883a 	mov	r5,r2
 1000d54:	01004074 	movhi	r4,257
 1000d58:	2107b504 	addi	r4,r4,7892
 1000d5c:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
 1000d60:	01414204 	movi	r5,1288
 1000d64:	01000084 	movi	r4,2
 1000d68:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000d6c:	0009883a 	mov	r4,zero
 1000d70:	10003640 	call	1000364 <IO_read>
 1000d74:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 1000d78:	e0bffb0b 	ldhu	r2,-20(fp)
 1000d7c:	100b883a 	mov	r5,r2
 1000d80:	01004074 	movhi	r4,257
 1000d84:	2107c004 	addi	r4,r4,7936
 1000d88:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03)
 1000d8c:	00000206 	br	1000d98 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000d90:	10021840 	call	1002184 <UsbGetRetryCnt>
 1000d94:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000d98:	e0bffb0b 	ldhu	r2,-20(fp)
 1000d9c:	108000d8 	cmpnei	r2,r2,3
 1000da0:	103ffb1e 	bne	r2,zero,1000d90 <__alt_data_end+0xff800d90>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 1000da4:	01004074 	movhi	r4,257
 1000da8:	2107de04 	addi	r4,r4,8056
 1000dac:	10023b00 	call	10023b0 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 1000db0:	1001dc00 	call	1001dc0 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000db4:	00000306 	br	1000dc4 <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 1000db8:	1001dc00 	call	1001dc0 <UsbGetReportDesc>
		usleep(10*1000);
 1000dbc:	0109c404 	movi	r4,10000
 1000dc0:	100fa1c0 	call	100fa1c <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000dc4:	010000c4 	movi	r4,3
 1000dc8:	10003640 	call	1000364 <IO_read>
 1000dcc:	10bfffcc 	andi	r2,r2,65535
 1000dd0:	1080040c 	andi	r2,r2,16
 1000dd4:	103ff826 	beq	r2,zero,1000db8 <__alt_data_end+0xff800db8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000dd8:	10021000 	call	1002100 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000ddc:	01414184 	movi	r5,1286
 1000de0:	01000084 	movi	r4,2
 1000de4:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000de8:	0009883a 	mov	r4,zero
 1000dec:	10003640 	call	1000364 <IO_read>
 1000df0:	10bfffcc 	andi	r2,r2,65535
 1000df4:	100b883a 	mov	r5,r2
 1000df8:	01004074 	movhi	r4,257
 1000dfc:	2107f204 	addi	r4,r4,8136
 1000e00:	10022b40 	call	10022b4 <printf>

	IO_write(HPI_ADDR,0x0508);
 1000e04:	01414204 	movi	r5,1288
 1000e08:	01000084 	movi	r4,2
 1000e0c:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000e10:	0009883a 	mov	r4,zero
 1000e14:	10003640 	call	1000364 <IO_read>
 1000e18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 1000e1c:	e0bffb0b 	ldhu	r2,-20(fp)
 1000e20:	100b883a 	mov	r5,r2
 1000e24:	01004074 	movhi	r4,257
 1000e28:	2107fe04 	addi	r4,r4,8184
 1000e2c:	10022b40 	call	10022b4 <printf>
	while (usb_ctl_val != 0x03)
 1000e30:	00000206 	br	1000e3c <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000e34:	10021840 	call	1002184 <UsbGetRetryCnt>
 1000e38:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000e3c:	e0bffb0b 	ldhu	r2,-20(fp)
 1000e40:	108000d8 	cmpnei	r2,r2,3
 1000e44:	103ffb1e 	bne	r2,zero,1000e34 <__alt_data_end+0xff800e34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 1000e48:	01004074 	movhi	r4,257
 1000e4c:	21080a04 	addi	r4,r4,8232
 1000e50:	10023b00 	call	10023b0 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 1000e54:	0109c404 	movi	r4,10000
 1000e58:	100fa1c0 	call	100fa1c <usleep>
	while(1)
	{
		toggle++;
 1000e5c:	e0bffb83 	ldbu	r2,-18(fp)
 1000e60:	10800044 	addi	r2,r2,1
 1000e64:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 1000e68:	01414004 	movi	r5,1280
 1000e6c:	01000084 	movi	r4,2
 1000e70:	10002f40 	call	10002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 1000e74:	01414704 	movi	r5,1308
 1000e78:	0009883a 	mov	r4,zero
 1000e7c:	10002f40 	call	10002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 1000e80:	e0bfff03 	ldbu	r2,-4(fp)
 1000e84:	108003cc 	andi	r2,r2,15
 1000e88:	100b883a 	mov	r5,r2
 1000e8c:	0009883a 	mov	r4,zero
 1000e90:	10002f40 	call	10002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 1000e94:	0140a444 	movi	r5,657
 1000e98:	0009883a 	mov	r4,zero
 1000e9c:	10002f40 	call	10002f4 <IO_write>
		if(toggle%2)
 1000ea0:	e0bffb83 	ldbu	r2,-18(fp)
 1000ea4:	1080004c 	andi	r2,r2,1
 1000ea8:	10803fcc 	andi	r2,r2,255
 1000eac:	10000426 	beq	r2,zero,1000ec0 <main+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 1000eb0:	01400044 	movi	r5,1
 1000eb4:	0009883a 	mov	r4,zero
 1000eb8:	10002f40 	call	10002f4 <IO_write>
 1000ebc:	00000306 	br	1000ecc <main+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 1000ec0:	01401044 	movi	r5,65
 1000ec4:	0009883a 	mov	r4,zero
 1000ec8:	10002f40 	call	10002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 1000ecc:	014004c4 	movi	r5,19
 1000ed0:	0009883a 	mov	r4,zero
 1000ed4:	10002f40 	call	10002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 1000ed8:	000b883a 	mov	r5,zero
 1000edc:	0009883a 	mov	r4,zero
 1000ee0:	10002f40 	call	10002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1000ee4:	01414004 	movi	r5,1280
 1000ee8:	01006c04 	movi	r4,432
 1000eec:	10011100 	call	1001110 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000ef0:	00002406 	br	1000f84 <main+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 1000ef4:	01414004 	movi	r5,1280
 1000ef8:	01000084 	movi	r4,2
 1000efc:	10002f40 	call	10002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 1000f00:	01414704 	movi	r5,1308
 1000f04:	0009883a 	mov	r4,zero
 1000f08:	10002f40 	call	10002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 1000f0c:	e0bfff03 	ldbu	r2,-4(fp)
 1000f10:	108003cc 	andi	r2,r2,15
 1000f14:	100b883a 	mov	r5,r2
 1000f18:	0009883a 	mov	r4,zero
 1000f1c:	10002f40 	call	10002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 1000f20:	0140a444 	movi	r5,657
 1000f24:	0009883a 	mov	r4,zero
 1000f28:	10002f40 	call	10002f4 <IO_write>
			if(toggle%2)
 1000f2c:	e0bffb83 	ldbu	r2,-18(fp)
 1000f30:	1080004c 	andi	r2,r2,1
 1000f34:	10803fcc 	andi	r2,r2,255
 1000f38:	10000426 	beq	r2,zero,1000f4c <main+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 1000f3c:	01400044 	movi	r5,1
 1000f40:	0009883a 	mov	r4,zero
 1000f44:	10002f40 	call	10002f4 <IO_write>
 1000f48:	00000306 	br	1000f58 <main+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 1000f4c:	01401044 	movi	r5,65
 1000f50:	0009883a 	mov	r4,zero
 1000f54:	10002f40 	call	10002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 1000f58:	014004c4 	movi	r5,19
 1000f5c:	0009883a 	mov	r4,zero
 1000f60:	10002f40 	call	10002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 1000f64:	000b883a 	mov	r5,zero
 1000f68:	0009883a 	mov	r4,zero
 1000f6c:	10002f40 	call	10002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1000f70:	01414004 	movi	r5,1280
 1000f74:	01006c04 	movi	r4,432
 1000f78:	10011100 	call	1001110 <UsbWrite>
			usleep(10*1000);
 1000f7c:	0109c404 	movi	r4,10000
 1000f80:	100fa1c0 	call	100fa1c <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000f84:	010000c4 	movi	r4,3
 1000f88:	10003640 	call	1000364 <IO_read>
 1000f8c:	10bfffcc 	andi	r2,r2,65535
 1000f90:	1080040c 	andi	r2,r2,16
 1000f94:	103fd726 	beq	r2,zero,1000ef4 <__alt_data_end+0xff800ef4>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
 1000f98:	10021000 	call	1002100 <UsbWaitTDListDone>
 1000f9c:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
 1000fa0:	01014784 	movi	r4,1310
 1000fa4:	10011680 	call	1001168 <UsbRead>
 1000fa8:	10bfffcc 	andi	r2,r2,65535
 1000fac:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 1000fb0:	e17ffd17 	ldw	r5,-12(fp)
 1000fb4:	01004074 	movhi	r4,257
 1000fb8:	21081e04 	addi	r4,r4,8312
 1000fbc:	10022b40 	call	10022b4 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
 1000fc0:	00802404 	movi	r2,144
 1000fc4:	e0fffd17 	ldw	r3,-12(fp)
 1000fc8:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
 1000fcc:	01003204 	movi	r4,200
 1000fd0:	100fa1c0 	call	100fa1c <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 1000fd4:	d0a6cb0b 	ldhu	r2,-25812(gp)
 1000fd8:	10bfffcc 	andi	r2,r2,65535
 1000fdc:	1009883a 	mov	r4,r2
 1000fe0:	10011680 	call	1001168 <UsbRead>
 1000fe4:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 1000fe8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1000fec:	e0fffb0b 	ldhu	r3,-20(fp)
 1000ff0:	1884703a 	and	r2,r3,r2
 1000ff4:	10bfffcc 	andi	r2,r2,65535
 1000ff8:	10003f1e 	bne	r2,zero,10010f8 <main+0xd2c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 1000ffc:	e03ffbc5 	stb	zero,-17(fp)
 1001000:	00000f06 	br	1001040 <main+0xc74>
			{
				usleep(5*1000);
 1001004:	0104e204 	movi	r4,5000
 1001008:	100fa1c0 	call	100fa1c <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 100100c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 1001010:	10bfffcc 	andi	r2,r2,65535
 1001014:	1009883a 	mov	r4,r2
 1001018:	10011680 	call	1001168 <UsbRead>
 100101c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 1001020:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1001024:	e0fffb0b 	ldhu	r3,-20(fp)
 1001028:	1884703a 	and	r2,r3,r2
 100102c:	10bfffcc 	andi	r2,r2,65535
 1001030:	1000071e 	bne	r2,zero,1001050 <main+0xc84>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 1001034:	e0bffbc3 	ldbu	r2,-17(fp)
 1001038:	10800044 	addi	r2,r2,1
 100103c:	e0bffbc5 	stb	r2,-17(fp)
 1001040:	e0bffbc3 	ldbu	r2,-17(fp)
 1001044:	108001f0 	cmpltui	r2,r2,7
 1001048:	103fee1e 	bne	r2,zero,1001004 <__alt_data_end+0xff801004>
 100104c:	00000106 	br	1001054 <main+0xc88>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
 1001050:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
 1001054:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1001058:	e0fffb0b 	ldhu	r3,-20(fp)
 100105c:	1884703a 	and	r2,r3,r2
 1001060:	10bfffcc 	andi	r2,r2,65535
 1001064:	1000241e 	bne	r2,zero,10010f8 <main+0xd2c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 1001068:	01004074 	movhi	r4,257
 100106c:	21082704 	addi	r4,r4,8348
 1001070:	10023b00 	call	10023b0 <puts>
				printf("[INFO]: please insert again!!! \n");
 1001074:	01004074 	movhi	r4,257
 1001078:	21083204 	addi	r4,r4,8392
 100107c:	10023b00 	call	10023b0 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 1001080:	00001d06 	br	10010f8 <main+0xd2c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 1001084:	d0a6cb0b 	ldhu	r2,-25812(gp)
 1001088:	10bfffcc 	andi	r2,r2,65535
 100108c:	1009883a 	mov	r4,r2
 1001090:	10011680 	call	1001168 <UsbRead>
 1001094:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 1001098:	0104e204 	movi	r4,5000
 100109c:	100fa1c0 	call	100fa1c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 10010a0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 10010a4:	10bfffcc 	andi	r2,r2,65535
 10010a8:	1009883a 	mov	r4,r2
 10010ac:	10011680 	call	1001168 <UsbRead>
 10010b0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 10010b4:	0104e204 	movi	r4,5000
 10010b8:	100fa1c0 	call	100fa1c <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 10010bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
 10010c0:	10bfffcc 	andi	r2,r2,65535
 10010c4:	1009883a 	mov	r4,r2
 10010c8:	10011680 	call	1001168 <UsbRead>
 10010cc:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 10010d0:	0104e204 	movi	r4,5000
 10010d4:	100fa1c0 	call	100fa1c <usleep>

			if(usb_ctl_val & no_device)
 10010d8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 10010dc:	e0fffb0b 	ldhu	r3,-20(fp)
 10010e0:	1884703a 	and	r2,r3,r2
 10010e4:	10bfffcc 	andi	r2,r2,65535
 10010e8:	10000126 	beq	r2,zero,10010f0 <main+0xd24>
				goto USB_HOT_PLUG;
 10010ec:	003cc206 	br	10003f8 <__alt_data_end+0xff8003f8>

			usleep(200);
 10010f0:	01003204 	movi	r4,200
 10010f4:	100fa1c0 	call	100fa1c <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 10010f8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 10010fc:	e0fffb0b 	ldhu	r3,-20(fp)
 1001100:	1884703a 	and	r2,r3,r2
 1001104:	10bfffcc 	andi	r2,r2,65535
 1001108:	103fde26 	beq	r2,zero,1001084 <__alt_data_end+0xff801084>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 100110c:	003f5306 	br	1000e5c <__alt_data_end+0xff800e5c>

01001110 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 1001110:	defffc04 	addi	sp,sp,-16
 1001114:	dfc00315 	stw	ra,12(sp)
 1001118:	df000215 	stw	fp,8(sp)
 100111c:	df000204 	addi	fp,sp,8
 1001120:	2007883a 	mov	r3,r4
 1001124:	2805883a 	mov	r2,r5
 1001128:	e0fffe0d 	sth	r3,-8(fp)
 100112c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 1001130:	e0bffe0b 	ldhu	r2,-8(fp)
 1001134:	100b883a 	mov	r5,r2
 1001138:	01000084 	movi	r4,2
 100113c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA, Data);
 1001140:	e0bfff0b 	ldhu	r2,-4(fp)
 1001144:	100b883a 	mov	r5,r2
 1001148:	0009883a 	mov	r4,zero
 100114c:	10002f40 	call	10002f4 <IO_write>

}
 1001150:	0001883a 	nop
 1001154:	e037883a 	mov	sp,fp
 1001158:	dfc00117 	ldw	ra,4(sp)
 100115c:	df000017 	ldw	fp,0(sp)
 1001160:	dec00204 	addi	sp,sp,8
 1001164:	f800283a 	ret

01001168 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 1001168:	defffd04 	addi	sp,sp,-12
 100116c:	dfc00215 	stw	ra,8(sp)
 1001170:	df000115 	stw	fp,4(sp)
 1001174:	df000104 	addi	fp,sp,4
 1001178:	2005883a 	mov	r2,r4
 100117c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 1001180:	e0bfff0b 	ldhu	r2,-4(fp)
 1001184:	100b883a 	mov	r5,r2
 1001188:	01000084 	movi	r4,2
 100118c:	10002f40 	call	10002f4 <IO_write>
	return IO_read(HPI_ADDR);
 1001190:	01000084 	movi	r4,2
 1001194:	10003640 	call	1000364 <IO_read>
}
 1001198:	e037883a 	mov	sp,fp
 100119c:	dfc00117 	ldw	ra,4(sp)
 10011a0:	df000017 	ldw	fp,0(sp)
 10011a4:	dec00204 	addi	sp,sp,8
 10011a8:	f800283a 	ret

010011ac <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 10011ac:	defffe04 	addi	sp,sp,-8
 10011b0:	dfc00115 	stw	ra,4(sp)
 10011b4:	df000015 	stw	fp,0(sp)
 10011b8:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 10011bc:	017e9414 	movui	r5,64080
 10011c0:	01000044 	movi	r4,1
 10011c4:	10002f40 	call	10002f4 <IO_write>
	usleep(100000);
 10011c8:	010000b4 	movhi	r4,2
 10011cc:	2121a804 	addi	r4,r4,-31072
 10011d0:	100fa1c0 	call	100fa1c <usleep>
	printf("[USB INIT]:reset finished!\n");
 10011d4:	01004074 	movhi	r4,257
 10011d8:	21083a04 	addi	r4,r4,8424
 10011dc:	10023b00 	call	10023b0 <puts>

	usleep(500000);
 10011e0:	01000234 	movhi	r4,8
 10011e4:	21284804 	addi	r4,r4,-24288
 10011e8:	100fa1c0 	call	100fa1c <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 10011ec:	01004074 	movhi	r4,257
 10011f0:	21084104 	addi	r4,r4,8452
 10011f4:	10023b00 	call	10023b0 <puts>
	IO_read(HPI_MAILBOX);
 10011f8:	01000044 	movi	r4,1
 10011fc:	10003640 	call	1000364 <IO_read>
	IO_read(HPI_STATUS);
 1001200:	010000c4 	movi	r4,3
 1001204:	10003640 	call	1000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 1001208:	01005104 	movi	r4,324
 100120c:	10011680 	call	1001168 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 1001210:	000b883a 	mov	r5,zero
 1001214:	01005104 	movi	r4,324
 1001218:	10011100 	call	1001110 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 100121c:	01005204 	movi	r4,328
 1001220:	10011680 	call	1001168 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 1001224:	000b883a 	mov	r5,zero
 1001228:	01005204 	movi	r4,328
 100122c:	10011100 	call	1001110 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 1001230:	017fffd4 	movui	r5,65535
 1001234:	01302414 	movui	r4,49296
 1001238:	10011100 	call	1001110 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 100123c:	017fffd4 	movui	r5,65535
 1001240:	01302c14 	movui	r4,49328
 1001244:	10011100 	call	1001110 <UsbWrite>
}
 1001248:	0001883a 	nop
 100124c:	e037883a 	mov	sp,fp
 1001250:	dfc00117 	ldw	ra,4(sp)
 1001254:	df000017 	ldw	fp,0(sp)
 1001258:	dec00204 	addi	sp,sp,8
 100125c:	f800283a 	ret

01001260 <UsbSetAddress>:


void UsbSetAddress()
{
 1001260:	defffe04 	addi	sp,sp,-8
 1001264:	dfc00115 	stw	ra,4(sp)
 1001268:	df000015 	stw	fp,0(sp)
 100126c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001270:	01414004 	movi	r5,1280
 1001274:	01000084 	movi	r4,2
 1001278:	10002f40 	call	10002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 100127c:	01414304 	movi	r5,1292
 1001280:	0009883a 	mov	r4,zero
 1001284:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001288:	01400204 	movi	r5,8
 100128c:	0009883a 	mov	r4,zero
 1001290:	10002f40 	call	10002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 1001294:	01403404 	movi	r5,208
 1001298:	0009883a 	mov	r4,zero
 100129c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 10012a0:	01400044 	movi	r5,1
 10012a4:	0009883a 	mov	r4,zero
 10012a8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 10012ac:	014004c4 	movi	r5,19
 10012b0:	0009883a 	mov	r4,zero
 10012b4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 10012b8:	01414504 	movi	r5,1300
 10012bc:	0009883a 	mov	r4,zero
 10012c0:	10002f40 	call	10002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 10012c4:	01414004 	movi	r5,1280
 10012c8:	0009883a 	mov	r4,zero
 10012cc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
 10012d0:	01400084 	movi	r5,2
 10012d4:	0009883a 	mov	r4,zero
 10012d8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 10012dc:	000b883a 	mov	r5,zero
 10012e0:	0009883a 	mov	r4,zero
 10012e4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 10012e8:	000b883a 	mov	r5,zero
 10012ec:	0009883a 	mov	r4,zero
 10012f0:	10002f40 	call	10002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 10012f4:	000b883a 	mov	r5,zero
 10012f8:	0009883a 	mov	r4,zero
 10012fc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 1001300:	000b883a 	mov	r5,zero
 1001304:	0009883a 	mov	r4,zero
 1001308:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 100130c:	01402404 	movi	r5,144
 1001310:	0009883a 	mov	r4,zero
 1001314:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 1001318:	01401044 	movi	r5,65
 100131c:	0009883a 	mov	r4,zero
 1001320:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001324:	014004c4 	movi	r5,19
 1001328:	0009883a 	mov	r4,zero
 100132c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001330:	000b883a 	mov	r5,zero
 1001334:	0009883a 	mov	r4,zero
 1001338:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 100133c:	01414004 	movi	r5,1280
 1001340:	01006c04 	movi	r4,432
 1001344:	10011100 	call	1001110 <UsbWrite>
}
 1001348:	0001883a 	nop
 100134c:	e037883a 	mov	sp,fp
 1001350:	dfc00117 	ldw	ra,4(sp)
 1001354:	df000017 	ldw	fp,0(sp)
 1001358:	dec00204 	addi	sp,sp,8
 100135c:	f800283a 	ret

01001360 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 1001360:	defffe04 	addi	sp,sp,-8
 1001364:	dfc00115 	stw	ra,4(sp)
 1001368:	df000015 	stw	fp,0(sp)
 100136c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001370:	01414004 	movi	r5,1280
 1001374:	01000084 	movi	r4,2
 1001378:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 100137c:	01414304 	movi	r5,1292
 1001380:	0009883a 	mov	r4,zero
 1001384:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001388:	01400204 	movi	r5,8
 100138c:	0009883a 	mov	r4,zero
 1001390:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 1001394:	0140b404 	movi	r5,720
 1001398:	0009883a 	mov	r4,zero
 100139c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 10013a0:	01400044 	movi	r5,1
 10013a4:	0009883a 	mov	r4,zero
 10013a8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 10013ac:	014004c4 	movi	r5,19
 10013b0:	0009883a 	mov	r4,zero
 10013b4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 10013b8:	01414504 	movi	r5,1300
 10013bc:	0009883a 	mov	r4,zero
 10013c0:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 10013c4:	0141a004 	movi	r5,1664
 10013c8:	0009883a 	mov	r4,zero
 10013cc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 10013d0:	01404004 	movi	r5,256
 10013d4:	0009883a 	mov	r4,zero
 10013d8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 10013dc:	000b883a 	mov	r5,zero
 10013e0:	0009883a 	mov	r4,zero
 10013e4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 10013e8:	01400204 	movi	r5,8
 10013ec:	0009883a 	mov	r4,zero
 10013f0:	10002f40 	call	10002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 10013f4:	01414b04 	movi	r5,1324
 10013f8:	0009883a 	mov	r4,zero
 10013fc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 1001400:	01400204 	movi	r5,8
 1001404:	0009883a 	mov	r4,zero
 1001408:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 100140c:	0140a404 	movi	r5,656
 1001410:	0009883a 	mov	r4,zero
 1001414:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 1001418:	01401044 	movi	r5,65
 100141c:	0009883a 	mov	r4,zero
 1001420:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001424:	014004c4 	movi	r5,19
 1001428:	0009883a 	mov	r4,zero
 100142c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
 1001430:	01414804 	movi	r5,1312
 1001434:	0009883a 	mov	r4,zero
 1001438:	10002f40 	call	10002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 100143c:	000b883a 	mov	r5,zero
 1001440:	0009883a 	mov	r4,zero
 1001444:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 1001448:	000b883a 	mov	r5,zero
 100144c:	0009883a 	mov	r4,zero
 1001450:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 1001454:	01408404 	movi	r5,528
 1001458:	0009883a 	mov	r4,zero
 100145c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 1001460:	01401044 	movi	r5,65
 1001464:	0009883a 	mov	r4,zero
 1001468:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 100146c:	014004c4 	movi	r5,19
 1001470:	0009883a 	mov	r4,zero
 1001474:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001478:	000b883a 	mov	r5,zero
 100147c:	0009883a 	mov	r4,zero
 1001480:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001484:	01414004 	movi	r5,1280
 1001488:	01006c04 	movi	r4,432
 100148c:	10011100 	call	1001110 <UsbWrite>
}
 1001490:	0001883a 	nop
 1001494:	e037883a 	mov	sp,fp
 1001498:	dfc00117 	ldw	ra,4(sp)
 100149c:	df000017 	ldw	fp,0(sp)
 10014a0:	dec00204 	addi	sp,sp,8
 10014a4:	f800283a 	ret

010014a8 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 10014a8:	defffe04 	addi	sp,sp,-8
 10014ac:	dfc00115 	stw	ra,4(sp)
 10014b0:	df000015 	stw	fp,0(sp)
 10014b4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 10014b8:	01414004 	movi	r5,1280
 10014bc:	01000084 	movi	r4,2
 10014c0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 10014c4:	01414304 	movi	r5,1292
 10014c8:	0009883a 	mov	r4,zero
 10014cc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 10014d0:	01400204 	movi	r5,8
 10014d4:	0009883a 	mov	r4,zero
 10014d8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 10014dc:	0140b404 	movi	r5,720
 10014e0:	0009883a 	mov	r4,zero
 10014e4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 10014e8:	01400044 	movi	r5,1
 10014ec:	0009883a 	mov	r4,zero
 10014f0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 10014f4:	014004c4 	movi	r5,19
 10014f8:	0009883a 	mov	r4,zero
 10014fc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001500:	01414504 	movi	r5,1300
 1001504:	0009883a 	mov	r4,zero
 1001508:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 100150c:	0141a004 	movi	r5,1664
 1001510:	0009883a 	mov	r4,zero
 1001514:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 1001518:	01404004 	movi	r5,256
 100151c:	0009883a 	mov	r4,zero
 1001520:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 1001524:	000b883a 	mov	r5,zero
 1001528:	0009883a 	mov	r4,zero
 100152c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 1001530:	01400484 	movi	r5,18
 1001534:	0009883a 	mov	r4,zero
 1001538:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 100153c:	01415104 	movi	r5,1348
 1001540:	0009883a 	mov	r4,zero
 1001544:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001548:	01400204 	movi	r5,8
 100154c:	0009883a 	mov	r4,zero
 1001550:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 1001554:	0140a404 	movi	r5,656
 1001558:	0009883a 	mov	r4,zero
 100155c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 1001560:	01401044 	movi	r5,65
 1001564:	0009883a 	mov	r4,zero
 1001568:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 100156c:	014004c4 	movi	r5,19
 1001570:	0009883a 	mov	r4,zero
 1001574:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 1001578:	01414804 	movi	r5,1312
 100157c:	0009883a 	mov	r4,zero
 1001580:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 1001584:	01415304 	movi	r5,1356
 1001588:	0009883a 	mov	r4,zero
 100158c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 1001590:	01400204 	movi	r5,8
 1001594:	0009883a 	mov	r4,zero
 1001598:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 100159c:	0140a404 	movi	r5,656
 10015a0:	0009883a 	mov	r4,zero
 10015a4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 10015a8:	01400044 	movi	r5,1
 10015ac:	0009883a 	mov	r4,zero
 10015b0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 10015b4:	014004c4 	movi	r5,19
 10015b8:	0009883a 	mov	r4,zero
 10015bc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 10015c0:	01414b04 	movi	r5,1324
 10015c4:	0009883a 	mov	r4,zero
 10015c8:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 10015cc:	01415504 	movi	r5,1364
 10015d0:	0009883a 	mov	r4,zero
 10015d4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 10015d8:	01400084 	movi	r5,2
 10015dc:	0009883a 	mov	r4,zero
 10015e0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 10015e4:	0140a404 	movi	r5,656
 10015e8:	0009883a 	mov	r4,zero
 10015ec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 10015f0:	01401044 	movi	r5,65
 10015f4:	0009883a 	mov	r4,zero
 10015f8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 10015fc:	014004c4 	movi	r5,19
 1001600:	0009883a 	mov	r4,zero
 1001604:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 1001608:	01414e04 	movi	r5,1336
 100160c:	0009883a 	mov	r4,zero
 1001610:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 1001614:	000b883a 	mov	r5,zero
 1001618:	0009883a 	mov	r4,zero
 100161c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 1001620:	000b883a 	mov	r5,zero
 1001624:	0009883a 	mov	r4,zero
 1001628:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 100162c:	01408404 	movi	r5,528
 1001630:	0009883a 	mov	r4,zero
 1001634:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 1001638:	01401044 	movi	r5,65
 100163c:	0009883a 	mov	r4,zero
 1001640:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 1001644:	014004c4 	movi	r5,19
 1001648:	0009883a 	mov	r4,zero
 100164c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 1001650:	000b883a 	mov	r5,zero
 1001654:	0009883a 	mov	r4,zero
 1001658:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 100165c:	01414004 	movi	r5,1280
 1001660:	01006c04 	movi	r4,432
 1001664:	10011100 	call	1001110 <UsbWrite>
}
 1001668:	0001883a 	nop
 100166c:	e037883a 	mov	sp,fp
 1001670:	dfc00117 	ldw	ra,4(sp)
 1001674:	df000017 	ldw	fp,0(sp)
 1001678:	dec00204 	addi	sp,sp,8
 100167c:	f800283a 	ret

01001680 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 1001680:	defffe04 	addi	sp,sp,-8
 1001684:	dfc00115 	stw	ra,4(sp)
 1001688:	df000015 	stw	fp,0(sp)
 100168c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001690:	01414004 	movi	r5,1280
 1001694:	01000084 	movi	r4,2
 1001698:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 100169c:	01414304 	movi	r5,1292
 10016a0:	0009883a 	mov	r4,zero
 10016a4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 10016a8:	01400204 	movi	r5,8
 10016ac:	0009883a 	mov	r4,zero
 10016b0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 10016b4:	0140b404 	movi	r5,720
 10016b8:	0009883a 	mov	r4,zero
 10016bc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 10016c0:	01400044 	movi	r5,1
 10016c4:	0009883a 	mov	r4,zero
 10016c8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 10016cc:	014004c4 	movi	r5,19
 10016d0:	0009883a 	mov	r4,zero
 10016d4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 10016d8:	01414504 	movi	r5,1300
 10016dc:	0009883a 	mov	r4,zero
 10016e0:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 10016e4:	0141a004 	movi	r5,1664
 10016e8:	0009883a 	mov	r4,zero
 10016ec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 10016f0:	01408004 	movi	r5,512
 10016f4:	0009883a 	mov	r4,zero
 10016f8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 10016fc:	000b883a 	mov	r5,zero
 1001700:	0009883a 	mov	r4,zero
 1001704:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 1001708:	01400244 	movi	r5,9
 100170c:	0009883a 	mov	r4,zero
 1001710:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 1001714:	01415104 	movi	r5,1348
 1001718:	0009883a 	mov	r4,zero
 100171c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001720:	01400204 	movi	r5,8
 1001724:	0009883a 	mov	r4,zero
 1001728:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 100172c:	0140a404 	movi	r5,656
 1001730:	0009883a 	mov	r4,zero
 1001734:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 1001738:	01401044 	movi	r5,65
 100173c:	0009883a 	mov	r4,zero
 1001740:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 1001744:	014004c4 	movi	r5,19
 1001748:	0009883a 	mov	r4,zero
 100174c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 1001750:	01414804 	movi	r5,1312
 1001754:	0009883a 	mov	r4,zero
 1001758:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 100175c:	01415304 	movi	r5,1356
 1001760:	0009883a 	mov	r4,zero
 1001764:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 1001768:	01400044 	movi	r5,1
 100176c:	0009883a 	mov	r4,zero
 1001770:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 1001774:	0140a404 	movi	r5,656
 1001778:	0009883a 	mov	r4,zero
 100177c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 1001780:	01400044 	movi	r5,1
 1001784:	0009883a 	mov	r4,zero
 1001788:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 100178c:	014004c4 	movi	r5,19
 1001790:	0009883a 	mov	r4,zero
 1001794:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 1001798:	01414b04 	movi	r5,1324
 100179c:	0009883a 	mov	r4,zero
 10017a0:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 10017a4:	000b883a 	mov	r5,zero
 10017a8:	0009883a 	mov	r4,zero
 10017ac:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 10017b0:	000b883a 	mov	r5,zero
 10017b4:	0009883a 	mov	r4,zero
 10017b8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 10017bc:	01408404 	movi	r5,528
 10017c0:	0009883a 	mov	r4,zero
 10017c4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 10017c8:	01401044 	movi	r5,65
 10017cc:	0009883a 	mov	r4,zero
 10017d0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 10017d4:	014004c4 	movi	r5,19
 10017d8:	0009883a 	mov	r4,zero
 10017dc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 10017e0:	000b883a 	mov	r5,zero
 10017e4:	0009883a 	mov	r4,zero
 10017e8:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 10017ec:	01414004 	movi	r5,1280
 10017f0:	01006c04 	movi	r4,432
 10017f4:	10011100 	call	1001110 <UsbWrite>
}
 10017f8:	0001883a 	nop
 10017fc:	e037883a 	mov	sp,fp
 1001800:	dfc00117 	ldw	ra,4(sp)
 1001804:	df000017 	ldw	fp,0(sp)
 1001808:	dec00204 	addi	sp,sp,8
 100180c:	f800283a 	ret

01001810 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 1001810:	defffe04 	addi	sp,sp,-8
 1001814:	dfc00115 	stw	ra,4(sp)
 1001818:	df000015 	stw	fp,0(sp)
 100181c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001820:	01414004 	movi	r5,1280
 1001824:	01000084 	movi	r4,2
 1001828:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 100182c:	01414304 	movi	r5,1292
 1001830:	0009883a 	mov	r4,zero
 1001834:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001838:	01400204 	movi	r5,8
 100183c:	0009883a 	mov	r4,zero
 1001840:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 1001844:	0140b404 	movi	r5,720
 1001848:	0009883a 	mov	r4,zero
 100184c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001850:	01400044 	movi	r5,1
 1001854:	0009883a 	mov	r4,zero
 1001858:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 100185c:	014004c4 	movi	r5,19
 1001860:	0009883a 	mov	r4,zero
 1001864:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001868:	01414504 	movi	r5,1300
 100186c:	0009883a 	mov	r4,zero
 1001870:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 1001874:	0141a004 	movi	r5,1664
 1001878:	0009883a 	mov	r4,zero
 100187c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 1001880:	01408004 	movi	r5,512
 1001884:	0009883a 	mov	r4,zero
 1001888:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 100188c:	000b883a 	mov	r5,zero
 1001890:	0009883a 	mov	r4,zero
 1001894:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 1001898:	01403fc4 	movi	r5,255
 100189c:	0009883a 	mov	r4,zero
 10018a0:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 10018a4:	01415704 	movi	r5,1372
 10018a8:	0009883a 	mov	r4,zero
 10018ac:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 10018b0:	01400204 	movi	r5,8
 10018b4:	0009883a 	mov	r4,zero
 10018b8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 10018bc:	0140a404 	movi	r5,656
 10018c0:	0009883a 	mov	r4,zero
 10018c4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 10018c8:	01401044 	movi	r5,65
 10018cc:	0009883a 	mov	r4,zero
 10018d0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 10018d4:	014004c4 	movi	r5,19
 10018d8:	0009883a 	mov	r4,zero
 10018dc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 10018e0:	01414804 	movi	r5,1312
 10018e4:	0009883a 	mov	r4,zero
 10018e8:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 10018ec:	01415904 	movi	r5,1380
 10018f0:	0009883a 	mov	r4,zero
 10018f4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 10018f8:	01400204 	movi	r5,8
 10018fc:	0009883a 	mov	r4,zero
 1001900:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 1001904:	0140a404 	movi	r5,656
 1001908:	0009883a 	mov	r4,zero
 100190c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 1001910:	01400044 	movi	r5,1
 1001914:	0009883a 	mov	r4,zero
 1001918:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 100191c:	014004c4 	movi	r5,19
 1001920:	0009883a 	mov	r4,zero
 1001924:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 1001928:	01414b04 	movi	r5,1324
 100192c:	0009883a 	mov	r4,zero
 1001930:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 1001934:	01415b04 	movi	r5,1388
 1001938:	0009883a 	mov	r4,zero
 100193c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 1001940:	01400204 	movi	r5,8
 1001944:	0009883a 	mov	r4,zero
 1001948:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 100194c:	0140a404 	movi	r5,656
 1001950:	0009883a 	mov	r4,zero
 1001954:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 1001958:	01401044 	movi	r5,65
 100195c:	0009883a 	mov	r4,zero
 1001960:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 1001964:	014004c4 	movi	r5,19
 1001968:	0009883a 	mov	r4,zero
 100196c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 1001970:	01414e04 	movi	r5,1336
 1001974:	0009883a 	mov	r4,zero
 1001978:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 100197c:	01415d04 	movi	r5,1396
 1001980:	0009883a 	mov	r4,zero
 1001984:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 1001988:	01400204 	movi	r5,8
 100198c:	0009883a 	mov	r4,zero
 1001990:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 1001994:	0140a404 	movi	r5,656
 1001998:	0009883a 	mov	r4,zero
 100199c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 10019a0:	01400044 	movi	r5,1
 10019a4:	0009883a 	mov	r4,zero
 10019a8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 10019ac:	014004c4 	movi	r5,19
 10019b0:	0009883a 	mov	r4,zero
 10019b4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 10019b8:	01415104 	movi	r5,1348
 10019bc:	0009883a 	mov	r4,zero
 10019c0:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 10019c4:	01415f04 	movi	r5,1404
 10019c8:	0009883a 	mov	r4,zero
 10019cc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 10019d0:	01400084 	movi	r5,2
 10019d4:	0009883a 	mov	r4,zero
 10019d8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 10019dc:	0140a404 	movi	r5,656
 10019e0:	0009883a 	mov	r4,zero
 10019e4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 10019e8:	01401044 	movi	r5,65
 10019ec:	0009883a 	mov	r4,zero
 10019f0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 10019f4:	014004c4 	movi	r5,19
 10019f8:	0009883a 	mov	r4,zero
 10019fc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 1001a00:	01415404 	movi	r5,1360
 1001a04:	0009883a 	mov	r4,zero
 1001a08:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 1001a0c:	000b883a 	mov	r5,zero
 1001a10:	0009883a 	mov	r4,zero
 1001a14:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 1001a18:	000b883a 	mov	r5,zero
 1001a1c:	0009883a 	mov	r4,zero
 1001a20:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 1001a24:	01408404 	movi	r5,528
 1001a28:	0009883a 	mov	r4,zero
 1001a2c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 1001a30:	01401044 	movi	r5,65
 1001a34:	0009883a 	mov	r4,zero
 1001a38:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 1001a3c:	014004c4 	movi	r5,19
 1001a40:	0009883a 	mov	r4,zero
 1001a44:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 1001a48:	000b883a 	mov	r5,zero
 1001a4c:	0009883a 	mov	r4,zero
 1001a50:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001a54:	01414004 	movi	r5,1280
 1001a58:	01006c04 	movi	r4,432
 1001a5c:	10011100 	call	1001110 <UsbWrite>
}
 1001a60:	0001883a 	nop
 1001a64:	e037883a 	mov	sp,fp
 1001a68:	dfc00117 	ldw	ra,4(sp)
 1001a6c:	df000017 	ldw	fp,0(sp)
 1001a70:	dec00204 	addi	sp,sp,8
 1001a74:	f800283a 	ret

01001a78 <UsbSetConfig>:

void UsbSetConfig()
{
 1001a78:	defffe04 	addi	sp,sp,-8
 1001a7c:	dfc00115 	stw	ra,4(sp)
 1001a80:	df000015 	stw	fp,0(sp)
 1001a84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001a88:	01414004 	movi	r5,1280
 1001a8c:	01000084 	movi	r4,2
 1001a90:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001a94:	01414304 	movi	r5,1292
 1001a98:	0009883a 	mov	r4,zero
 1001a9c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001aa0:	01400204 	movi	r5,8
 1001aa4:	0009883a 	mov	r4,zero
 1001aa8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 1001aac:	0140b404 	movi	r5,720
 1001ab0:	0009883a 	mov	r4,zero
 1001ab4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001ab8:	01400044 	movi	r5,1
 1001abc:	0009883a 	mov	r4,zero
 1001ac0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001ac4:	014004c4 	movi	r5,19
 1001ac8:	0009883a 	mov	r4,zero
 1001acc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001ad0:	01414504 	movi	r5,1300
 1001ad4:	0009883a 	mov	r4,zero
 1001ad8:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 1001adc:	01424004 	movi	r5,2304
 1001ae0:	0009883a 	mov	r4,zero
 1001ae4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 1001ae8:	01400044 	movi	r5,1
 1001aec:	0009883a 	mov	r4,zero
 1001af0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001af4:	000b883a 	mov	r5,zero
 1001af8:	0009883a 	mov	r4,zero
 1001afc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001b00:	000b883a 	mov	r5,zero
 1001b04:	0009883a 	mov	r4,zero
 1001b08:	10002f40 	call	10002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 1001b0c:	000b883a 	mov	r5,zero
 1001b10:	0009883a 	mov	r4,zero
 1001b14:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 1001b18:	000b883a 	mov	r5,zero
 1001b1c:	0009883a 	mov	r4,zero
 1001b20:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 1001b24:	0140a404 	movi	r5,656
 1001b28:	0009883a 	mov	r4,zero
 1001b2c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 1001b30:	01401044 	movi	r5,65
 1001b34:	0009883a 	mov	r4,zero
 1001b38:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001b3c:	014004c4 	movi	r5,19
 1001b40:	0009883a 	mov	r4,zero
 1001b44:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001b48:	000b883a 	mov	r5,zero
 1001b4c:	0009883a 	mov	r4,zero
 1001b50:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001b54:	01414004 	movi	r5,1280
 1001b58:	01006c04 	movi	r4,432
 1001b5c:	10011100 	call	1001110 <UsbWrite>

}
 1001b60:	0001883a 	nop
 1001b64:	e037883a 	mov	sp,fp
 1001b68:	dfc00117 	ldw	ra,4(sp)
 1001b6c:	df000017 	ldw	fp,0(sp)
 1001b70:	dec00204 	addi	sp,sp,8
 1001b74:	f800283a 	ret

01001b78 <UsbClassRequest>:

void UsbClassRequest()
{
 1001b78:	defffe04 	addi	sp,sp,-8
 1001b7c:	dfc00115 	stw	ra,4(sp)
 1001b80:	df000015 	stw	fp,0(sp)
 1001b84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001b88:	01414004 	movi	r5,1280
 1001b8c:	01000084 	movi	r4,2
 1001b90:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001b94:	01414304 	movi	r5,1292
 1001b98:	0009883a 	mov	r4,zero
 1001b9c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001ba0:	01400204 	movi	r5,8
 1001ba4:	0009883a 	mov	r4,zero
 1001ba8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 1001bac:	0140b404 	movi	r5,720
 1001bb0:	0009883a 	mov	r4,zero
 1001bb4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001bb8:	01400044 	movi	r5,1
 1001bbc:	0009883a 	mov	r4,zero
 1001bc0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001bc4:	014004c4 	movi	r5,19
 1001bc8:	0009883a 	mov	r4,zero
 1001bcc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001bd0:	01414504 	movi	r5,1300
 1001bd4:	0009883a 	mov	r4,zero
 1001bd8:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 1001bdc:	01428844 	movi	r5,2593
 1001be0:	0009883a 	mov	r4,zero
 1001be4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 1001be8:	000b883a 	mov	r5,zero
 1001bec:	0009883a 	mov	r4,zero
 1001bf0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001bf4:	000b883a 	mov	r5,zero
 1001bf8:	0009883a 	mov	r4,zero
 1001bfc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001c00:	000b883a 	mov	r5,zero
 1001c04:	0009883a 	mov	r4,zero
 1001c08:	10002f40 	call	10002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 1001c0c:	000b883a 	mov	r5,zero
 1001c10:	0009883a 	mov	r4,zero
 1001c14:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 1001c18:	000b883a 	mov	r5,zero
 1001c1c:	0009883a 	mov	r4,zero
 1001c20:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 1001c24:	0140a404 	movi	r5,656
 1001c28:	0009883a 	mov	r4,zero
 1001c2c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 1001c30:	01401044 	movi	r5,65
 1001c34:	0009883a 	mov	r4,zero
 1001c38:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001c3c:	014004c4 	movi	r5,19
 1001c40:	0009883a 	mov	r4,zero
 1001c44:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001c48:	000b883a 	mov	r5,zero
 1001c4c:	0009883a 	mov	r4,zero
 1001c50:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001c54:	01414004 	movi	r5,1280
 1001c58:	01006c04 	movi	r4,432
 1001c5c:	10011100 	call	1001110 <UsbWrite>
}
 1001c60:	0001883a 	nop
 1001c64:	e037883a 	mov	sp,fp
 1001c68:	dfc00117 	ldw	ra,4(sp)
 1001c6c:	df000017 	ldw	fp,0(sp)
 1001c70:	dec00204 	addi	sp,sp,8
 1001c74:	f800283a 	ret

01001c78 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 1001c78:	defffe04 	addi	sp,sp,-8
 1001c7c:	dfc00115 	stw	ra,4(sp)
 1001c80:	df000015 	stw	fp,0(sp)
 1001c84:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001c88:	01414004 	movi	r5,1280
 1001c8c:	01000084 	movi	r4,2
 1001c90:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001c94:	01414304 	movi	r5,1292
 1001c98:	0009883a 	mov	r4,zero
 1001c9c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001ca0:	01400204 	movi	r5,8
 1001ca4:	0009883a 	mov	r4,zero
 1001ca8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 1001cac:	0140b404 	movi	r5,720
 1001cb0:	0009883a 	mov	r4,zero
 1001cb4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001cb8:	01400044 	movi	r5,1
 1001cbc:	0009883a 	mov	r4,zero
 1001cc0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001cc4:	014004c4 	movi	r5,19
 1001cc8:	0009883a 	mov	r4,zero
 1001ccc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001cd0:	01414504 	movi	r5,1300
 1001cd4:	0009883a 	mov	r4,zero
 1001cd8:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 1001cdc:	0141a044 	movi	r5,1665
 1001ce0:	0009883a 	mov	r4,zero
 1001ce4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 1001ce8:	01484004 	movi	r5,8448
 1001cec:	0009883a 	mov	r4,zero
 1001cf0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 1001cf4:	000b883a 	mov	r5,zero
 1001cf8:	0009883a 	mov	r4,zero
 1001cfc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 1001d00:	01401ec4 	movi	r5,123
 1001d04:	0009883a 	mov	r4,zero
 1001d08:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 1001d0c:	01415104 	movi	r5,1348
 1001d10:	0009883a 	mov	r4,zero
 1001d14:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001d18:	01400204 	movi	r5,8
 1001d1c:	0009883a 	mov	r4,zero
 1001d20:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 1001d24:	0140a404 	movi	r5,656
 1001d28:	0009883a 	mov	r4,zero
 1001d2c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 1001d30:	01401044 	movi	r5,65
 1001d34:	0009883a 	mov	r4,zero
 1001d38:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 1001d3c:	014004c4 	movi	r5,19
 1001d40:	0009883a 	mov	r4,zero
 1001d44:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 1001d48:	01414804 	movi	r5,1312
 1001d4c:	0009883a 	mov	r4,zero
 1001d50:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 1001d54:	000b883a 	mov	r5,zero
 1001d58:	0009883a 	mov	r4,zero
 1001d5c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 1001d60:	000b883a 	mov	r5,zero
 1001d64:	0009883a 	mov	r4,zero
 1001d68:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 1001d6c:	01408404 	movi	r5,528
 1001d70:	0009883a 	mov	r4,zero
 1001d74:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 1001d78:	01401044 	movi	r5,65
 1001d7c:	0009883a 	mov	r4,zero
 1001d80:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 1001d84:	014004c4 	movi	r5,19
 1001d88:	0009883a 	mov	r4,zero
 1001d8c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 1001d90:	000b883a 	mov	r5,zero
 1001d94:	0009883a 	mov	r4,zero
 1001d98:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001d9c:	01414004 	movi	r5,1280
 1001da0:	01006c04 	movi	r4,432
 1001da4:	10011100 	call	1001110 <UsbWrite>

}
 1001da8:	0001883a 	nop
 1001dac:	e037883a 	mov	sp,fp
 1001db0:	dfc00117 	ldw	ra,4(sp)
 1001db4:	df000017 	ldw	fp,0(sp)
 1001db8:	dec00204 	addi	sp,sp,8
 1001dbc:	f800283a 	ret

01001dc0 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 1001dc0:	defffe04 	addi	sp,sp,-8
 1001dc4:	dfc00115 	stw	ra,4(sp)
 1001dc8:	df000015 	stw	fp,0(sp)
 1001dcc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001dd0:	01414004 	movi	r5,1280
 1001dd4:	01000084 	movi	r4,2
 1001dd8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001ddc:	01414304 	movi	r5,1292
 1001de0:	0009883a 	mov	r4,zero
 1001de4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001de8:	01400204 	movi	r5,8
 1001dec:	0009883a 	mov	r4,zero
 1001df0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 1001df4:	0140b404 	movi	r5,720
 1001df8:	0009883a 	mov	r4,zero
 1001dfc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001e00:	01400044 	movi	r5,1
 1001e04:	0009883a 	mov	r4,zero
 1001e08:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001e0c:	014004c4 	movi	r5,19
 1001e10:	0009883a 	mov	r4,zero
 1001e14:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001e18:	01414504 	movi	r5,1300
 1001e1c:	0009883a 	mov	r4,zero
 1001e20:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 1001e24:	0141a044 	movi	r5,1665
 1001e28:	0009883a 	mov	r4,zero
 1001e2c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 1001e30:	01488004 	movi	r5,8704
 1001e34:	0009883a 	mov	r4,zero
 1001e38:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 1001e3c:	000b883a 	mov	r5,zero
 1001e40:	0009883a 	mov	r4,zero
 1001e44:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 1001e48:	01401ec4 	movi	r5,123
 1001e4c:	0009883a 	mov	r4,zero
 1001e50:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 1001e54:	01416004 	movi	r5,1408
 1001e58:	0009883a 	mov	r4,zero
 1001e5c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001e60:	01400204 	movi	r5,8
 1001e64:	0009883a 	mov	r4,zero
 1001e68:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 1001e6c:	0140a404 	movi	r5,656
 1001e70:	0009883a 	mov	r4,zero
 1001e74:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 1001e78:	01401044 	movi	r5,65
 1001e7c:	0009883a 	mov	r4,zero
 1001e80:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 1001e84:	014004c4 	movi	r5,19
 1001e88:	0009883a 	mov	r4,zero
 1001e8c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 1001e90:	01414804 	movi	r5,1312
 1001e94:	0009883a 	mov	r4,zero
 1001e98:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 1001e9c:	01416204 	movi	r5,1416
 1001ea0:	0009883a 	mov	r4,zero
 1001ea4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 1001ea8:	01400204 	movi	r5,8
 1001eac:	0009883a 	mov	r4,zero
 1001eb0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 1001eb4:	0140a404 	movi	r5,656
 1001eb8:	0009883a 	mov	r4,zero
 1001ebc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 1001ec0:	01400044 	movi	r5,1
 1001ec4:	0009883a 	mov	r4,zero
 1001ec8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 1001ecc:	014004c4 	movi	r5,19
 1001ed0:	0009883a 	mov	r4,zero
 1001ed4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 1001ed8:	01414b04 	movi	r5,1324
 1001edc:	0009883a 	mov	r4,zero
 1001ee0:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 1001ee4:	01416404 	movi	r5,1424
 1001ee8:	0009883a 	mov	r4,zero
 1001eec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 1001ef0:	01400204 	movi	r5,8
 1001ef4:	0009883a 	mov	r4,zero
 1001ef8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 1001efc:	0140a404 	movi	r5,656
 1001f00:	0009883a 	mov	r4,zero
 1001f04:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 1001f08:	01401044 	movi	r5,65
 1001f0c:	0009883a 	mov	r4,zero
 1001f10:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 1001f14:	014004c4 	movi	r5,19
 1001f18:	0009883a 	mov	r4,zero
 1001f1c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 1001f20:	01414e04 	movi	r5,1336
 1001f24:	0009883a 	mov	r4,zero
 1001f28:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 1001f2c:	01416604 	movi	r5,1432
 1001f30:	0009883a 	mov	r4,zero
 1001f34:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 1001f38:	01400204 	movi	r5,8
 1001f3c:	0009883a 	mov	r4,zero
 1001f40:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 1001f44:	0140a404 	movi	r5,656
 1001f48:	0009883a 	mov	r4,zero
 1001f4c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 1001f50:	01400044 	movi	r5,1
 1001f54:	0009883a 	mov	r4,zero
 1001f58:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 1001f5c:	014004c4 	movi	r5,19
 1001f60:	0009883a 	mov	r4,zero
 1001f64:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 1001f68:	01415104 	movi	r5,1348
 1001f6c:	0009883a 	mov	r4,zero
 1001f70:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 1001f74:	01416804 	movi	r5,1440
 1001f78:	0009883a 	mov	r4,zero
 1001f7c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001f80:	01400204 	movi	r5,8
 1001f84:	0009883a 	mov	r4,zero
 1001f88:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 1001f8c:	0140a404 	movi	r5,656
 1001f90:	0009883a 	mov	r4,zero
 1001f94:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 1001f98:	01401044 	movi	r5,65
 1001f9c:	0009883a 	mov	r4,zero
 1001fa0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 1001fa4:	014004c4 	movi	r5,19
 1001fa8:	0009883a 	mov	r4,zero
 1001fac:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 1001fb0:	01415404 	movi	r5,1360
 1001fb4:	0009883a 	mov	r4,zero
 1001fb8:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 1001fbc:	01416a04 	movi	r5,1448
 1001fc0:	0009883a 	mov	r4,zero
 1001fc4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 1001fc8:	01400204 	movi	r5,8
 1001fcc:	0009883a 	mov	r4,zero
 1001fd0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 1001fd4:	0140a404 	movi	r5,656
 1001fd8:	0009883a 	mov	r4,zero
 1001fdc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 1001fe0:	01400044 	movi	r5,1
 1001fe4:	0009883a 	mov	r4,zero
 1001fe8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 1001fec:	014004c4 	movi	r5,19
 1001ff0:	0009883a 	mov	r4,zero
 1001ff4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 1001ff8:	01415704 	movi	r5,1372
 1001ffc:	0009883a 	mov	r4,zero
 1002000:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 1002004:	01416c04 	movi	r5,1456
 1002008:	0009883a 	mov	r4,zero
 100200c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 1002010:	01400204 	movi	r5,8
 1002014:	0009883a 	mov	r4,zero
 1002018:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 100201c:	0140a404 	movi	r5,656
 1002020:	0009883a 	mov	r4,zero
 1002024:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 1002028:	01401044 	movi	r5,65
 100202c:	0009883a 	mov	r4,zero
 1002030:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 1002034:	014004c4 	movi	r5,19
 1002038:	0009883a 	mov	r4,zero
 100203c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 1002040:	01415a04 	movi	r5,1384
 1002044:	0009883a 	mov	r4,zero
 1002048:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 100204c:	01416e04 	movi	r5,1464
 1002050:	0009883a 	mov	r4,zero
 1002054:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 1002058:	014000c4 	movi	r5,3
 100205c:	0009883a 	mov	r4,zero
 1002060:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 1002064:	0140a404 	movi	r5,656
 1002068:	0009883a 	mov	r4,zero
 100206c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 1002070:	01400044 	movi	r5,1
 1002074:	0009883a 	mov	r4,zero
 1002078:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 100207c:	014004c4 	movi	r5,19
 1002080:	0009883a 	mov	r4,zero
 1002084:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 1002088:	01415d04 	movi	r5,1396
 100208c:	0009883a 	mov	r4,zero
 1002090:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 1002094:	000b883a 	mov	r5,zero
 1002098:	0009883a 	mov	r4,zero
 100209c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 10020a0:	000b883a 	mov	r5,zero
 10020a4:	0009883a 	mov	r4,zero
 10020a8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 10020ac:	01408404 	movi	r5,528
 10020b0:	0009883a 	mov	r4,zero
 10020b4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 10020b8:	01401044 	movi	r5,65
 10020bc:	0009883a 	mov	r4,zero
 10020c0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 10020c4:	014004c4 	movi	r5,19
 10020c8:	0009883a 	mov	r4,zero
 10020cc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 10020d0:	000b883a 	mov	r5,zero
 10020d4:	0009883a 	mov	r4,zero
 10020d8:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 10020dc:	01414004 	movi	r5,1280
 10020e0:	01006c04 	movi	r4,432
 10020e4:	10011100 	call	1001110 <UsbWrite>

}
 10020e8:	0001883a 	nop
 10020ec:	e037883a 	mov	sp,fp
 10020f0:	dfc00117 	ldw	ra,4(sp)
 10020f4:	df000017 	ldw	fp,0(sp)
 10020f8:	dec00204 	addi	sp,sp,8
 10020fc:	f800283a 	ret

01002100 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 1002100:	defffd04 	addi	sp,sp,-12
 1002104:	dfc00215 	stw	ra,8(sp)
 1002108:	df000115 	stw	fp,4(sp)
 100210c:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 1002110:	01005104 	movi	r4,324
 1002114:	10011680 	call	1001168 <UsbRead>
 1002118:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 100211c:	000b883a 	mov	r5,zero
 1002120:	01005104 	movi	r4,324
 1002124:	10011100 	call	1001110 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 1002128:	00000d06 	br	1002160 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 100212c:	e0bfff0b 	ldhu	r2,-4(fp)
 1002130:	10000526 	beq	r2,zero,1002148 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 1002134:	e0bfff0b 	ldhu	r2,-4(fp)
 1002138:	100b883a 	mov	r5,r2
 100213c:	01004074 	movhi	r4,257
 1002140:	21084a04 	addi	r4,r4,8488
 1002144:	10022b40 	call	10022b4 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 1002148:	01005104 	movi	r4,324
 100214c:	10011680 	call	1001168 <UsbRead>
 1002150:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 1002154:	000b883a 	mov	r5,zero
 1002158:	01005104 	movi	r4,324
 100215c:	10011100 	call	1001110 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 1002160:	e0bfff0b 	ldhu	r2,-4(fp)
 1002164:	10840018 	cmpnei	r2,r2,4096
 1002168:	103ff01e 	bne	r2,zero,100212c <__alt_data_end+0xff80212c>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 100216c:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1002170:	e037883a 	mov	sp,fp
 1002174:	dfc00117 	ldw	ra,4(sp)
 1002178:	df000017 	ldw	fp,0(sp)
 100217c:	dec00204 	addi	sp,sp,8
 1002180:	f800283a 	ret

01002184 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 1002184:	defffd04 	addi	sp,sp,-12
 1002188:	dfc00215 	stw	ra,8(sp)
 100218c:	df000115 	stw	fp,4(sp)
 1002190:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 1002194:	010000c4 	movi	r4,3
 1002198:	10003640 	call	1000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 100219c:	01005104 	movi	r4,324
 10021a0:	10011680 	call	1001168 <UsbRead>
 10021a4:	10bfffcc 	andi	r2,r2,65535
 10021a8:	10840018 	cmpnei	r2,r2,4096
 10021ac:	1000091e 	bne	r2,zero,10021d4 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 10021b0:	000b883a 	mov	r5,zero
 10021b4:	01005104 	movi	r4,324
 10021b8:	10011100 	call	1001110 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10021bc:	0001883a 	nop
 10021c0:	010000c4 	movi	r4,3
 10021c4:	10003640 	call	1000364 <IO_read>
 10021c8:	10bfffcc 	andi	r2,r2,65535
 10021cc:	1080040c 	andi	r2,r2,16
 10021d0:	103ffb26 	beq	r2,zero,10021c0 <__alt_data_end+0xff8021c0>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 10021d4:	01414204 	movi	r5,1288
 10021d8:	01000084 	movi	r4,2
 10021dc:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 10021e0:	0009883a 	mov	r4,zero
 10021e4:	10003640 	call	1000364 <IO_read>
 10021e8:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 10021ec:	e0bfff0b 	ldhu	r2,-4(fp)
}
 10021f0:	e037883a 	mov	sp,fp
 10021f4:	dfc00117 	ldw	ra,4(sp)
 10021f8:	df000017 	ldw	fp,0(sp)
 10021fc:	dec00204 	addi	sp,sp,8
 1002200:	f800283a 	ret

01002204 <UsbPrintMem>:


void UsbPrintMem()
{
 1002204:	defffc04 	addi	sp,sp,-16
 1002208:	dfc00315 	stw	ra,12(sp)
 100220c:	df000215 	stw	fp,8(sp)
 1002210:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 1002214:	01414004 	movi	r5,1280
 1002218:	01000084 	movi	r4,2
 100221c:	10002f40 	call	10002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
 1002220:	e03ffe15 	stw	zero,-8(fp)
 1002224:	00000e06 	br	1002260 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 1002228:	0009883a 	mov	r4,zero
 100222c:	10003640 	call	1000364 <IO_read>
 1002230:	10bfffcc 	andi	r2,r2,65535
 1002234:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 1002238:	e0bffe17 	ldw	r2,-8(fp)
 100223c:	10814004 	addi	r2,r2,1280
 1002240:	e1bfff17 	ldw	r6,-4(fp)
 1002244:	100b883a 	mov	r5,r2
 1002248:	01004074 	movhi	r4,257
 100224c:	21085204 	addi	r4,r4,8520
 1002250:	10022b40 	call	10022b4 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 1002254:	e0bffe17 	ldw	r2,-8(fp)
 1002258:	10800084 	addi	r2,r2,2
 100225c:	e0bffe15 	stw	r2,-8(fp)
 1002260:	e0bffe17 	ldw	r2,-8(fp)
 1002264:	10803250 	cmplti	r2,r2,201
 1002268:	103fef1e 	bne	r2,zero,1002228 <__alt_data_end+0xff802228>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 100226c:	0001883a 	nop
 1002270:	e037883a 	mov	sp,fp
 1002274:	dfc00117 	ldw	ra,4(sp)
 1002278:	df000017 	ldw	fp,0(sp)
 100227c:	dec00204 	addi	sp,sp,8
 1002280:	f800283a 	ret

01002284 <_printf_r>:
 1002284:	defffd04 	addi	sp,sp,-12
 1002288:	2805883a 	mov	r2,r5
 100228c:	dfc00015 	stw	ra,0(sp)
 1002290:	d9800115 	stw	r6,4(sp)
 1002294:	d9c00215 	stw	r7,8(sp)
 1002298:	21400217 	ldw	r5,8(r4)
 100229c:	d9c00104 	addi	r7,sp,4
 10022a0:	100d883a 	mov	r6,r2
 10022a4:	100245c0 	call	100245c <___vfprintf_internal_r>
 10022a8:	dfc00017 	ldw	ra,0(sp)
 10022ac:	dec00304 	addi	sp,sp,12
 10022b0:	f800283a 	ret

010022b4 <printf>:
 10022b4:	defffc04 	addi	sp,sp,-16
 10022b8:	dfc00015 	stw	ra,0(sp)
 10022bc:	d9400115 	stw	r5,4(sp)
 10022c0:	d9800215 	stw	r6,8(sp)
 10022c4:	d9c00315 	stw	r7,12(sp)
 10022c8:	00804074 	movhi	r2,257
 10022cc:	108fc304 	addi	r2,r2,16140
 10022d0:	10800017 	ldw	r2,0(r2)
 10022d4:	200b883a 	mov	r5,r4
 10022d8:	d9800104 	addi	r6,sp,4
 10022dc:	11000217 	ldw	r4,8(r2)
 10022e0:	10047380 	call	1004738 <__vfprintf_internal>
 10022e4:	dfc00017 	ldw	ra,0(sp)
 10022e8:	dec00404 	addi	sp,sp,16
 10022ec:	f800283a 	ret

010022f0 <_puts_r>:
 10022f0:	defff604 	addi	sp,sp,-40
 10022f4:	dc000715 	stw	r16,28(sp)
 10022f8:	2021883a 	mov	r16,r4
 10022fc:	2809883a 	mov	r4,r5
 1002300:	dc400815 	stw	r17,32(sp)
 1002304:	dfc00915 	stw	ra,36(sp)
 1002308:	2823883a 	mov	r17,r5
 100230c:	10023c40 	call	10023c4 <strlen>
 1002310:	10c00044 	addi	r3,r2,1
 1002314:	d8800115 	stw	r2,4(sp)
 1002318:	00804074 	movhi	r2,257
 100231c:	10885704 	addi	r2,r2,8540
 1002320:	d8800215 	stw	r2,8(sp)
 1002324:	00800044 	movi	r2,1
 1002328:	d8800315 	stw	r2,12(sp)
 100232c:	00800084 	movi	r2,2
 1002330:	dc400015 	stw	r17,0(sp)
 1002334:	d8c00615 	stw	r3,24(sp)
 1002338:	dec00415 	stw	sp,16(sp)
 100233c:	d8800515 	stw	r2,20(sp)
 1002340:	80000226 	beq	r16,zero,100234c <_puts_r+0x5c>
 1002344:	80800e17 	ldw	r2,56(r16)
 1002348:	10001426 	beq	r2,zero,100239c <_puts_r+0xac>
 100234c:	81400217 	ldw	r5,8(r16)
 1002350:	2880030b 	ldhu	r2,12(r5)
 1002354:	10c8000c 	andi	r3,r2,8192
 1002358:	1800061e 	bne	r3,zero,1002374 <_puts_r+0x84>
 100235c:	29001917 	ldw	r4,100(r5)
 1002360:	00f7ffc4 	movi	r3,-8193
 1002364:	10880014 	ori	r2,r2,8192
 1002368:	20c6703a 	and	r3,r4,r3
 100236c:	2880030d 	sth	r2,12(r5)
 1002370:	28c01915 	stw	r3,100(r5)
 1002374:	d9800404 	addi	r6,sp,16
 1002378:	8009883a 	mov	r4,r16
 100237c:	1006ca00 	call	1006ca0 <__sfvwrite_r>
 1002380:	1000091e 	bne	r2,zero,10023a8 <_puts_r+0xb8>
 1002384:	00800284 	movi	r2,10
 1002388:	dfc00917 	ldw	ra,36(sp)
 100238c:	dc400817 	ldw	r17,32(sp)
 1002390:	dc000717 	ldw	r16,28(sp)
 1002394:	dec00a04 	addi	sp,sp,40
 1002398:	f800283a 	ret
 100239c:	8009883a 	mov	r4,r16
 10023a0:	100681c0 	call	100681c <__sinit>
 10023a4:	003fe906 	br	100234c <__alt_data_end+0xff80234c>
 10023a8:	00bfffc4 	movi	r2,-1
 10023ac:	003ff606 	br	1002388 <__alt_data_end+0xff802388>

010023b0 <puts>:
 10023b0:	00804074 	movhi	r2,257
 10023b4:	108fc304 	addi	r2,r2,16140
 10023b8:	200b883a 	mov	r5,r4
 10023bc:	11000017 	ldw	r4,0(r2)
 10023c0:	10022f01 	jmpi	10022f0 <_puts_r>

010023c4 <strlen>:
 10023c4:	208000cc 	andi	r2,r4,3
 10023c8:	10002026 	beq	r2,zero,100244c <strlen+0x88>
 10023cc:	20800007 	ldb	r2,0(r4)
 10023d0:	10002026 	beq	r2,zero,1002454 <strlen+0x90>
 10023d4:	2005883a 	mov	r2,r4
 10023d8:	00000206 	br	10023e4 <strlen+0x20>
 10023dc:	10c00007 	ldb	r3,0(r2)
 10023e0:	18001826 	beq	r3,zero,1002444 <strlen+0x80>
 10023e4:	10800044 	addi	r2,r2,1
 10023e8:	10c000cc 	andi	r3,r2,3
 10023ec:	183ffb1e 	bne	r3,zero,10023dc <__alt_data_end+0xff8023dc>
 10023f0:	10c00017 	ldw	r3,0(r2)
 10023f4:	01ffbff4 	movhi	r7,65279
 10023f8:	39ffbfc4 	addi	r7,r7,-257
 10023fc:	00ca303a 	nor	r5,zero,r3
 1002400:	01a02074 	movhi	r6,32897
 1002404:	19c7883a 	add	r3,r3,r7
 1002408:	31a02004 	addi	r6,r6,-32640
 100240c:	1946703a 	and	r3,r3,r5
 1002410:	1986703a 	and	r3,r3,r6
 1002414:	1800091e 	bne	r3,zero,100243c <strlen+0x78>
 1002418:	10800104 	addi	r2,r2,4
 100241c:	10c00017 	ldw	r3,0(r2)
 1002420:	19cb883a 	add	r5,r3,r7
 1002424:	00c6303a 	nor	r3,zero,r3
 1002428:	28c6703a 	and	r3,r5,r3
 100242c:	1986703a 	and	r3,r3,r6
 1002430:	183ff926 	beq	r3,zero,1002418 <__alt_data_end+0xff802418>
 1002434:	00000106 	br	100243c <strlen+0x78>
 1002438:	10800044 	addi	r2,r2,1
 100243c:	10c00007 	ldb	r3,0(r2)
 1002440:	183ffd1e 	bne	r3,zero,1002438 <__alt_data_end+0xff802438>
 1002444:	1105c83a 	sub	r2,r2,r4
 1002448:	f800283a 	ret
 100244c:	2005883a 	mov	r2,r4
 1002450:	003fe706 	br	10023f0 <__alt_data_end+0xff8023f0>
 1002454:	0005883a 	mov	r2,zero
 1002458:	f800283a 	ret

0100245c <___vfprintf_internal_r>:
 100245c:	deffb804 	addi	sp,sp,-288
 1002460:	dfc04715 	stw	ra,284(sp)
 1002464:	ddc04515 	stw	r23,276(sp)
 1002468:	dd404315 	stw	r21,268(sp)
 100246c:	d9002d15 	stw	r4,180(sp)
 1002470:	282f883a 	mov	r23,r5
 1002474:	302b883a 	mov	r21,r6
 1002478:	d9c02e15 	stw	r7,184(sp)
 100247c:	df004615 	stw	fp,280(sp)
 1002480:	dd804415 	stw	r22,272(sp)
 1002484:	dd004215 	stw	r20,264(sp)
 1002488:	dcc04115 	stw	r19,260(sp)
 100248c:	dc804015 	stw	r18,256(sp)
 1002490:	dc403f15 	stw	r17,252(sp)
 1002494:	dc003e15 	stw	r16,248(sp)
 1002498:	100739c0 	call	100739c <_localeconv_r>
 100249c:	10800017 	ldw	r2,0(r2)
 10024a0:	1009883a 	mov	r4,r2
 10024a4:	d8803415 	stw	r2,208(sp)
 10024a8:	10023c40 	call	10023c4 <strlen>
 10024ac:	d8803715 	stw	r2,220(sp)
 10024b0:	d8802d17 	ldw	r2,180(sp)
 10024b4:	10000226 	beq	r2,zero,10024c0 <___vfprintf_internal_r+0x64>
 10024b8:	10800e17 	ldw	r2,56(r2)
 10024bc:	1000fb26 	beq	r2,zero,10028ac <___vfprintf_internal_r+0x450>
 10024c0:	b880030b 	ldhu	r2,12(r23)
 10024c4:	10c8000c 	andi	r3,r2,8192
 10024c8:	1800061e 	bne	r3,zero,10024e4 <___vfprintf_internal_r+0x88>
 10024cc:	b9001917 	ldw	r4,100(r23)
 10024d0:	00f7ffc4 	movi	r3,-8193
 10024d4:	10880014 	ori	r2,r2,8192
 10024d8:	20c6703a 	and	r3,r4,r3
 10024dc:	b880030d 	sth	r2,12(r23)
 10024e0:	b8c01915 	stw	r3,100(r23)
 10024e4:	10c0020c 	andi	r3,r2,8
 10024e8:	1800c326 	beq	r3,zero,10027f8 <___vfprintf_internal_r+0x39c>
 10024ec:	b8c00417 	ldw	r3,16(r23)
 10024f0:	1800c126 	beq	r3,zero,10027f8 <___vfprintf_internal_r+0x39c>
 10024f4:	1080068c 	andi	r2,r2,26
 10024f8:	00c00284 	movi	r3,10
 10024fc:	10c0c626 	beq	r2,r3,1002818 <___vfprintf_internal_r+0x3bc>
 1002500:	d8c00404 	addi	r3,sp,16
 1002504:	05004074 	movhi	r20,257
 1002508:	d9001e04 	addi	r4,sp,120
 100250c:	a5086884 	addi	r20,r20,8610
 1002510:	d8c01e15 	stw	r3,120(sp)
 1002514:	d8002015 	stw	zero,128(sp)
 1002518:	d8001f15 	stw	zero,124(sp)
 100251c:	d8003315 	stw	zero,204(sp)
 1002520:	d8003615 	stw	zero,216(sp)
 1002524:	d8003815 	stw	zero,224(sp)
 1002528:	1811883a 	mov	r8,r3
 100252c:	d8003915 	stw	zero,228(sp)
 1002530:	d8003a15 	stw	zero,232(sp)
 1002534:	d8002f15 	stw	zero,188(sp)
 1002538:	d9002815 	stw	r4,160(sp)
 100253c:	a8800007 	ldb	r2,0(r21)
 1002540:	10028b26 	beq	r2,zero,1002f70 <___vfprintf_internal_r+0xb14>
 1002544:	00c00944 	movi	r3,37
 1002548:	a823883a 	mov	r17,r21
 100254c:	10c0021e 	bne	r2,r3,1002558 <___vfprintf_internal_r+0xfc>
 1002550:	00001406 	br	10025a4 <___vfprintf_internal_r+0x148>
 1002554:	10c00326 	beq	r2,r3,1002564 <___vfprintf_internal_r+0x108>
 1002558:	8c400044 	addi	r17,r17,1
 100255c:	88800007 	ldb	r2,0(r17)
 1002560:	103ffc1e 	bne	r2,zero,1002554 <__alt_data_end+0xff802554>
 1002564:	8d61c83a 	sub	r16,r17,r21
 1002568:	80000e26 	beq	r16,zero,10025a4 <___vfprintf_internal_r+0x148>
 100256c:	d8c02017 	ldw	r3,128(sp)
 1002570:	d8801f17 	ldw	r2,124(sp)
 1002574:	45400015 	stw	r21,0(r8)
 1002578:	1c07883a 	add	r3,r3,r16
 100257c:	10800044 	addi	r2,r2,1
 1002580:	d8c02015 	stw	r3,128(sp)
 1002584:	44000115 	stw	r16,4(r8)
 1002588:	d8801f15 	stw	r2,124(sp)
 100258c:	00c001c4 	movi	r3,7
 1002590:	1880a916 	blt	r3,r2,1002838 <___vfprintf_internal_r+0x3dc>
 1002594:	42000204 	addi	r8,r8,8
 1002598:	d9402f17 	ldw	r5,188(sp)
 100259c:	2c0b883a 	add	r5,r5,r16
 10025a0:	d9402f15 	stw	r5,188(sp)
 10025a4:	88800007 	ldb	r2,0(r17)
 10025a8:	1000aa26 	beq	r2,zero,1002854 <___vfprintf_internal_r+0x3f8>
 10025ac:	8d400044 	addi	r21,r17,1
 10025b0:	8c400047 	ldb	r17,1(r17)
 10025b4:	0021883a 	mov	r16,zero
 10025b8:	00bfffc4 	movi	r2,-1
 10025bc:	0025883a 	mov	r18,zero
 10025c0:	dc002905 	stb	r16,164(sp)
 10025c4:	d8002785 	stb	zero,158(sp)
 10025c8:	d8002b05 	stb	zero,172(sp)
 10025cc:	d8802a15 	stw	r2,168(sp)
 10025d0:	d8003115 	stw	zero,196(sp)
 10025d4:	04c01604 	movi	r19,88
 10025d8:	05800244 	movi	r22,9
 10025dc:	9021883a 	mov	r16,r18
 10025e0:	4039883a 	mov	fp,r8
 10025e4:	ad400044 	addi	r21,r21,1
 10025e8:	88bff804 	addi	r2,r17,-32
 10025ec:	98833236 	bltu	r19,r2,10032b8 <___vfprintf_internal_r+0xe5c>
 10025f0:	100490ba 	slli	r2,r2,2
 10025f4:	00c04034 	movhi	r3,256
 10025f8:	18c98204 	addi	r3,r3,9736
 10025fc:	10c5883a 	add	r2,r2,r3
 1002600:	10800017 	ldw	r2,0(r2)
 1002604:	1000683a 	jmp	r2
 1002608:	010031b0 	cmpltui	r4,zero,198
 100260c:	010032b8 	rdprs	r4,zero,202
 1002610:	010032b8 	rdprs	r4,zero,202
 1002614:	010031d0 	cmplti	r4,zero,199
 1002618:	010032b8 	rdprs	r4,zero,202
 100261c:	010032b8 	rdprs	r4,zero,202
 1002620:	010032b8 	rdprs	r4,zero,202
 1002624:	010032b8 	rdprs	r4,zero,202
 1002628:	010032b8 	rdprs	r4,zero,202
 100262c:	010032b8 	rdprs	r4,zero,202
 1002630:	010028b8 	rdprs	r4,zero,162
 1002634:	010030c0 	call	10030c <__alt_mem_onchip_memory2_0+0x10030c>
 1002638:	010032b8 	rdprs	r4,zero,202
 100263c:	0100277c 	xorhi	r4,zero,157
 1002640:	010028dc 	xori	r4,zero,163
 1002644:	010032b8 	rdprs	r4,zero,202
 1002648:	0100292c 	andhi	r4,zero,164
 100264c:	01002938 	rdprs	r4,zero,164
 1002650:	01002938 	rdprs	r4,zero,164
 1002654:	01002938 	rdprs	r4,zero,164
 1002658:	01002938 	rdprs	r4,zero,164
 100265c:	01002938 	rdprs	r4,zero,164
 1002660:	01002938 	rdprs	r4,zero,164
 1002664:	01002938 	rdprs	r4,zero,164
 1002668:	01002938 	rdprs	r4,zero,164
 100266c:	01002938 	rdprs	r4,zero,164
 1002670:	010032b8 	rdprs	r4,zero,202
 1002674:	010032b8 	rdprs	r4,zero,202
 1002678:	010032b8 	rdprs	r4,zero,202
 100267c:	010032b8 	rdprs	r4,zero,202
 1002680:	010032b8 	rdprs	r4,zero,202
 1002684:	010032b8 	rdprs	r4,zero,202
 1002688:	010032b8 	rdprs	r4,zero,202
 100268c:	010032b8 	rdprs	r4,zero,202
 1002690:	010032b8 	rdprs	r4,zero,202
 1002694:	010032b8 	rdprs	r4,zero,202
 1002698:	01002974 	movhi	r4,165
 100269c:	01002a3c 	xorhi	r4,zero,168
 10026a0:	010032b8 	rdprs	r4,zero,202
 10026a4:	01002a3c 	xorhi	r4,zero,168
 10026a8:	010032b8 	rdprs	r4,zero,202
 10026ac:	010032b8 	rdprs	r4,zero,202
 10026b0:	010032b8 	rdprs	r4,zero,202
 10026b4:	010032b8 	rdprs	r4,zero,202
 10026b8:	01002ae8 	cmpgeui	r4,zero,171
 10026bc:	010032b8 	rdprs	r4,zero,202
 10026c0:	010032b8 	rdprs	r4,zero,202
 10026c4:	01002af4 	movhi	r4,171
 10026c8:	010032b8 	rdprs	r4,zero,202
 10026cc:	010032b8 	rdprs	r4,zero,202
 10026d0:	010032b8 	rdprs	r4,zero,202
 10026d4:	010032b8 	rdprs	r4,zero,202
 10026d8:	010032b8 	rdprs	r4,zero,202
 10026dc:	01002f78 	rdprs	r4,zero,189
 10026e0:	010032b8 	rdprs	r4,zero,202
 10026e4:	010032b8 	rdprs	r4,zero,202
 10026e8:	01002fe4 	muli	r4,zero,191
 10026ec:	010032b8 	rdprs	r4,zero,202
 10026f0:	010032b8 	rdprs	r4,zero,202
 10026f4:	010032b8 	rdprs	r4,zero,202
 10026f8:	010032b8 	rdprs	r4,zero,202
 10026fc:	010032b8 	rdprs	r4,zero,202
 1002700:	010032b8 	rdprs	r4,zero,202
 1002704:	010032b8 	rdprs	r4,zero,202
 1002708:	010032b8 	rdprs	r4,zero,202
 100270c:	010032b8 	rdprs	r4,zero,202
 1002710:	010032b8 	rdprs	r4,zero,202
 1002714:	0100325c 	xori	r4,zero,201
 1002718:	010031dc 	xori	r4,zero,199
 100271c:	01002a3c 	xorhi	r4,zero,168
 1002720:	01002a3c 	xorhi	r4,zero,168
 1002724:	01002a3c 	xorhi	r4,zero,168
 1002728:	010031fc 	xorhi	r4,zero,199
 100272c:	010031dc 	xori	r4,zero,199
 1002730:	010032b8 	rdprs	r4,zero,202
 1002734:	010032b8 	rdprs	r4,zero,202
 1002738:	01003208 	cmpgei	r4,zero,200
 100273c:	010032b8 	rdprs	r4,zero,202
 1002740:	0100321c 	xori	r4,zero,200
 1002744:	010030a0 	cmpeqi	r4,zero,194
 1002748:	01002788 	cmpgei	r4,zero,158
 100274c:	010030d8 	cmpnei	r4,zero,195
 1002750:	010032b8 	rdprs	r4,zero,202
 1002754:	010030e4 	muli	r4,zero,195
 1002758:	010032b8 	rdprs	r4,zero,202
 100275c:	01003148 	cmpgei	r4,zero,197
 1002760:	010032b8 	rdprs	r4,zero,202
 1002764:	010032b8 	rdprs	r4,zero,202
 1002768:	01003168 	cmpgeui	r4,zero,197
 100276c:	d8c03117 	ldw	r3,196(sp)
 1002770:	d8802e15 	stw	r2,184(sp)
 1002774:	00c7c83a 	sub	r3,zero,r3
 1002778:	d8c03115 	stw	r3,196(sp)
 100277c:	84000114 	ori	r16,r16,4
 1002780:	ac400007 	ldb	r17,0(r21)
 1002784:	003f9706 	br	10025e4 <__alt_data_end+0xff8025e4>
 1002788:	00800c04 	movi	r2,48
 100278c:	d8802705 	stb	r2,156(sp)
 1002790:	00801e04 	movi	r2,120
 1002794:	d8802745 	stb	r2,157(sp)
 1002798:	d9002a17 	ldw	r4,168(sp)
 100279c:	d8802e17 	ldw	r2,184(sp)
 10027a0:	d8002785 	stb	zero,158(sp)
 10027a4:	e011883a 	mov	r8,fp
 10027a8:	10c00104 	addi	r3,r2,4
 10027ac:	14c00017 	ldw	r19,0(r2)
 10027b0:	002d883a 	mov	r22,zero
 10027b4:	80800094 	ori	r2,r16,2
 10027b8:	2002ca16 	blt	r4,zero,10032e4 <___vfprintf_internal_r+0xe88>
 10027bc:	00bfdfc4 	movi	r2,-129
 10027c0:	80a4703a 	and	r18,r16,r2
 10027c4:	d8c02e15 	stw	r3,184(sp)
 10027c8:	94800094 	ori	r18,r18,2
 10027cc:	9802b41e 	bne	r19,zero,10032a0 <___vfprintf_internal_r+0xe44>
 10027d0:	01404074 	movhi	r5,257
 10027d4:	29486104 	addi	r5,r5,8580
 10027d8:	d9403915 	stw	r5,228(sp)
 10027dc:	04401e04 	movi	r17,120
 10027e0:	d8802a17 	ldw	r2,168(sp)
 10027e4:	0039883a 	mov	fp,zero
 10027e8:	1001fa26 	beq	r2,zero,1002fd4 <___vfprintf_internal_r+0xb78>
 10027ec:	0027883a 	mov	r19,zero
 10027f0:	002d883a 	mov	r22,zero
 10027f4:	00021906 	br	100305c <___vfprintf_internal_r+0xc00>
 10027f8:	d9002d17 	ldw	r4,180(sp)
 10027fc:	b80b883a 	mov	r5,r23
 1002800:	10048100 	call	1004810 <__swsetup_r>
 1002804:	1005dc1e 	bne	r2,zero,1003f78 <___vfprintf_internal_r+0x1b1c>
 1002808:	b880030b 	ldhu	r2,12(r23)
 100280c:	00c00284 	movi	r3,10
 1002810:	1080068c 	andi	r2,r2,26
 1002814:	10ff3a1e 	bne	r2,r3,1002500 <__alt_data_end+0xff802500>
 1002818:	b880038f 	ldh	r2,14(r23)
 100281c:	103f3816 	blt	r2,zero,1002500 <__alt_data_end+0xff802500>
 1002820:	d9c02e17 	ldw	r7,184(sp)
 1002824:	d9002d17 	ldw	r4,180(sp)
 1002828:	a80d883a 	mov	r6,r21
 100282c:	b80b883a 	mov	r5,r23
 1002830:	10047540 	call	1004754 <__sbprintf>
 1002834:	00001106 	br	100287c <___vfprintf_internal_r+0x420>
 1002838:	d9002d17 	ldw	r4,180(sp)
 100283c:	d9801e04 	addi	r6,sp,120
 1002840:	b80b883a 	mov	r5,r23
 1002844:	1009c3c0 	call	1009c3c <__sprint_r>
 1002848:	1000081e 	bne	r2,zero,100286c <___vfprintf_internal_r+0x410>
 100284c:	da000404 	addi	r8,sp,16
 1002850:	003f5106 	br	1002598 <__alt_data_end+0xff802598>
 1002854:	d8802017 	ldw	r2,128(sp)
 1002858:	10000426 	beq	r2,zero,100286c <___vfprintf_internal_r+0x410>
 100285c:	d9002d17 	ldw	r4,180(sp)
 1002860:	d9801e04 	addi	r6,sp,120
 1002864:	b80b883a 	mov	r5,r23
 1002868:	1009c3c0 	call	1009c3c <__sprint_r>
 100286c:	b880030b 	ldhu	r2,12(r23)
 1002870:	1080100c 	andi	r2,r2,64
 1002874:	1005c01e 	bne	r2,zero,1003f78 <___vfprintf_internal_r+0x1b1c>
 1002878:	d8802f17 	ldw	r2,188(sp)
 100287c:	dfc04717 	ldw	ra,284(sp)
 1002880:	df004617 	ldw	fp,280(sp)
 1002884:	ddc04517 	ldw	r23,276(sp)
 1002888:	dd804417 	ldw	r22,272(sp)
 100288c:	dd404317 	ldw	r21,268(sp)
 1002890:	dd004217 	ldw	r20,264(sp)
 1002894:	dcc04117 	ldw	r19,260(sp)
 1002898:	dc804017 	ldw	r18,256(sp)
 100289c:	dc403f17 	ldw	r17,252(sp)
 10028a0:	dc003e17 	ldw	r16,248(sp)
 10028a4:	dec04804 	addi	sp,sp,288
 10028a8:	f800283a 	ret
 10028ac:	d9002d17 	ldw	r4,180(sp)
 10028b0:	100681c0 	call	100681c <__sinit>
 10028b4:	003f0206 	br	10024c0 <__alt_data_end+0xff8024c0>
 10028b8:	d9002e17 	ldw	r4,184(sp)
 10028bc:	d9402e17 	ldw	r5,184(sp)
 10028c0:	21000017 	ldw	r4,0(r4)
 10028c4:	28800104 	addi	r2,r5,4
 10028c8:	d9003115 	stw	r4,196(sp)
 10028cc:	203fa716 	blt	r4,zero,100276c <__alt_data_end+0xff80276c>
 10028d0:	d8802e15 	stw	r2,184(sp)
 10028d4:	ac400007 	ldb	r17,0(r21)
 10028d8:	003f4206 	br	10025e4 <__alt_data_end+0xff8025e4>
 10028dc:	ac400007 	ldb	r17,0(r21)
 10028e0:	01000a84 	movi	r4,42
 10028e4:	a8c00044 	addi	r3,r21,1
 10028e8:	89075826 	beq	r17,r4,100464c <___vfprintf_internal_r+0x21f0>
 10028ec:	8cbff404 	addi	r18,r17,-48
 10028f0:	b486ae36 	bltu	r22,r18,10043ac <___vfprintf_internal_r+0x1f50>
 10028f4:	0009883a 	mov	r4,zero
 10028f8:	1823883a 	mov	r17,r3
 10028fc:	01400284 	movi	r5,10
 1002900:	100c8f80 	call	100c8f8 <__mulsi3>
 1002904:	88c00007 	ldb	r3,0(r17)
 1002908:	1489883a 	add	r4,r2,r18
 100290c:	8d400044 	addi	r21,r17,1
 1002910:	1cbff404 	addi	r18,r3,-48
 1002914:	a823883a 	mov	r17,r21
 1002918:	b4bff82e 	bgeu	r22,r18,10028fc <__alt_data_end+0xff8028fc>
 100291c:	1823883a 	mov	r17,r3
 1002920:	2005f616 	blt	r4,zero,10040fc <___vfprintf_internal_r+0x1ca0>
 1002924:	d9002a15 	stw	r4,168(sp)
 1002928:	003f2f06 	br	10025e8 <__alt_data_end+0xff8025e8>
 100292c:	84002014 	ori	r16,r16,128
 1002930:	ac400007 	ldb	r17,0(r21)
 1002934:	003f2b06 	br	10025e4 <__alt_data_end+0xff8025e4>
 1002938:	8cbff404 	addi	r18,r17,-48
 100293c:	d8003115 	stw	zero,196(sp)
 1002940:	0009883a 	mov	r4,zero
 1002944:	a823883a 	mov	r17,r21
 1002948:	01400284 	movi	r5,10
 100294c:	100c8f80 	call	100c8f8 <__mulsi3>
 1002950:	88c00007 	ldb	r3,0(r17)
 1002954:	9089883a 	add	r4,r18,r2
 1002958:	ad400044 	addi	r21,r21,1
 100295c:	1cbff404 	addi	r18,r3,-48
 1002960:	a823883a 	mov	r17,r21
 1002964:	b4bff82e 	bgeu	r22,r18,1002948 <__alt_data_end+0xff802948>
 1002968:	1823883a 	mov	r17,r3
 100296c:	d9003115 	stw	r4,196(sp)
 1002970:	003f1d06 	br	10025e8 <__alt_data_end+0xff8025e8>
 1002974:	8025883a 	mov	r18,r16
 1002978:	dc002903 	ldbu	r16,164(sp)
 100297c:	e011883a 	mov	r8,fp
 1002980:	84003fcc 	andi	r16,r16,255
 1002984:	8007531e 	bne	r16,zero,10046d4 <___vfprintf_internal_r+0x2278>
 1002988:	94800414 	ori	r18,r18,16
 100298c:	9080080c 	andi	r2,r18,32
 1002990:	1003a326 	beq	r2,zero,1003820 <___vfprintf_internal_r+0x13c4>
 1002994:	d9002e17 	ldw	r4,184(sp)
 1002998:	20800117 	ldw	r2,4(r4)
 100299c:	24c00017 	ldw	r19,0(r4)
 10029a0:	21000204 	addi	r4,r4,8
 10029a4:	d9002e15 	stw	r4,184(sp)
 10029a8:	102d883a 	mov	r22,r2
 10029ac:	10047316 	blt	r2,zero,1003b7c <___vfprintf_internal_r+0x1720>
 10029b0:	d9002a17 	ldw	r4,168(sp)
 10029b4:	df002783 	ldbu	fp,158(sp)
 10029b8:	2003e416 	blt	r4,zero,100394c <___vfprintf_internal_r+0x14f0>
 10029bc:	00ffdfc4 	movi	r3,-129
 10029c0:	9d84b03a 	or	r2,r19,r22
 10029c4:	90e4703a 	and	r18,r18,r3
 10029c8:	10018026 	beq	r2,zero,1002fcc <___vfprintf_internal_r+0xb70>
 10029cc:	b003ab26 	beq	r22,zero,100387c <___vfprintf_internal_r+0x1420>
 10029d0:	dc402915 	stw	r17,164(sp)
 10029d4:	dc001e04 	addi	r16,sp,120
 10029d8:	b023883a 	mov	r17,r22
 10029dc:	402d883a 	mov	r22,r8
 10029e0:	9809883a 	mov	r4,r19
 10029e4:	880b883a 	mov	r5,r17
 10029e8:	01800284 	movi	r6,10
 10029ec:	000f883a 	mov	r7,zero
 10029f0:	100c1800 	call	100c180 <__umoddi3>
 10029f4:	10800c04 	addi	r2,r2,48
 10029f8:	843fffc4 	addi	r16,r16,-1
 10029fc:	9809883a 	mov	r4,r19
 1002a00:	880b883a 	mov	r5,r17
 1002a04:	80800005 	stb	r2,0(r16)
 1002a08:	01800284 	movi	r6,10
 1002a0c:	000f883a 	mov	r7,zero
 1002a10:	100bb840 	call	100bb84 <__udivdi3>
 1002a14:	1027883a 	mov	r19,r2
 1002a18:	10c4b03a 	or	r2,r2,r3
 1002a1c:	1823883a 	mov	r17,r3
 1002a20:	103fef1e 	bne	r2,zero,10029e0 <__alt_data_end+0xff8029e0>
 1002a24:	d8c02817 	ldw	r3,160(sp)
 1002a28:	dc402917 	ldw	r17,164(sp)
 1002a2c:	b011883a 	mov	r8,r22
 1002a30:	1c07c83a 	sub	r3,r3,r16
 1002a34:	d8c02b15 	stw	r3,172(sp)
 1002a38:	00005f06 	br	1002bb8 <___vfprintf_internal_r+0x75c>
 1002a3c:	8025883a 	mov	r18,r16
 1002a40:	dc002903 	ldbu	r16,164(sp)
 1002a44:	e011883a 	mov	r8,fp
 1002a48:	84003fcc 	andi	r16,r16,255
 1002a4c:	80071e1e 	bne	r16,zero,10046c8 <___vfprintf_internal_r+0x226c>
 1002a50:	9080020c 	andi	r2,r18,8
 1002a54:	1004af26 	beq	r2,zero,1003d14 <___vfprintf_internal_r+0x18b8>
 1002a58:	d9002e17 	ldw	r4,184(sp)
 1002a5c:	d9402e17 	ldw	r5,184(sp)
 1002a60:	d8802e17 	ldw	r2,184(sp)
 1002a64:	21000017 	ldw	r4,0(r4)
 1002a68:	29400117 	ldw	r5,4(r5)
 1002a6c:	10800204 	addi	r2,r2,8
 1002a70:	d9003615 	stw	r4,216(sp)
 1002a74:	d9403815 	stw	r5,224(sp)
 1002a78:	d8802e15 	stw	r2,184(sp)
 1002a7c:	d9003617 	ldw	r4,216(sp)
 1002a80:	d9403817 	ldw	r5,224(sp)
 1002a84:	da003d15 	stw	r8,244(sp)
 1002a88:	04000044 	movi	r16,1
 1002a8c:	10098600 	call	1009860 <__fpclassifyd>
 1002a90:	da003d17 	ldw	r8,244(sp)
 1002a94:	1404441e 	bne	r2,r16,1003ba8 <___vfprintf_internal_r+0x174c>
 1002a98:	d9003617 	ldw	r4,216(sp)
 1002a9c:	d9403817 	ldw	r5,224(sp)
 1002aa0:	000d883a 	mov	r6,zero
 1002aa4:	000f883a 	mov	r7,zero
 1002aa8:	100dd000 	call	100dd00 <__ledf2>
 1002aac:	da003d17 	ldw	r8,244(sp)
 1002ab0:	1005e316 	blt	r2,zero,1004240 <___vfprintf_internal_r+0x1de4>
 1002ab4:	df002783 	ldbu	fp,158(sp)
 1002ab8:	008011c4 	movi	r2,71
 1002abc:	1445580e 	bge	r2,r17,1004020 <___vfprintf_internal_r+0x1bc4>
 1002ac0:	04004074 	movhi	r16,257
 1002ac4:	84085904 	addi	r16,r16,8548
 1002ac8:	00c000c4 	movi	r3,3
 1002acc:	00bfdfc4 	movi	r2,-129
 1002ad0:	d8c02915 	stw	r3,164(sp)
 1002ad4:	90a4703a 	and	r18,r18,r2
 1002ad8:	d8c02b15 	stw	r3,172(sp)
 1002adc:	d8002a15 	stw	zero,168(sp)
 1002ae0:	d8003215 	stw	zero,200(sp)
 1002ae4:	00003a06 	br	1002bd0 <___vfprintf_internal_r+0x774>
 1002ae8:	84000214 	ori	r16,r16,8
 1002aec:	ac400007 	ldb	r17,0(r21)
 1002af0:	003ebc06 	br	10025e4 <__alt_data_end+0xff8025e4>
 1002af4:	8025883a 	mov	r18,r16
 1002af8:	dc002903 	ldbu	r16,164(sp)
 1002afc:	e011883a 	mov	r8,fp
 1002b00:	84003fcc 	andi	r16,r16,255
 1002b04:	8007001e 	bne	r16,zero,1004708 <___vfprintf_internal_r+0x22ac>
 1002b08:	94800414 	ori	r18,r18,16
 1002b0c:	9080080c 	andi	r2,r18,32
 1002b10:	1002fa26 	beq	r2,zero,10036fc <___vfprintf_internal_r+0x12a0>
 1002b14:	d9002e17 	ldw	r4,184(sp)
 1002b18:	d9402a17 	ldw	r5,168(sp)
 1002b1c:	d8002785 	stb	zero,158(sp)
 1002b20:	20800204 	addi	r2,r4,8
 1002b24:	24c00017 	ldw	r19,0(r4)
 1002b28:	25800117 	ldw	r22,4(r4)
 1002b2c:	2804b116 	blt	r5,zero,1003df4 <___vfprintf_internal_r+0x1998>
 1002b30:	013fdfc4 	movi	r4,-129
 1002b34:	9d86b03a 	or	r3,r19,r22
 1002b38:	d8802e15 	stw	r2,184(sp)
 1002b3c:	9124703a 	and	r18,r18,r4
 1002b40:	1802fb1e 	bne	r3,zero,1003730 <___vfprintf_internal_r+0x12d4>
 1002b44:	d8c02a17 	ldw	r3,168(sp)
 1002b48:	0039883a 	mov	fp,zero
 1002b4c:	1805e526 	beq	r3,zero,10042e4 <___vfprintf_internal_r+0x1e88>
 1002b50:	0027883a 	mov	r19,zero
 1002b54:	002d883a 	mov	r22,zero
 1002b58:	dc001e04 	addi	r16,sp,120
 1002b5c:	9806d0fa 	srli	r3,r19,3
 1002b60:	b008977a 	slli	r4,r22,29
 1002b64:	b02cd0fa 	srli	r22,r22,3
 1002b68:	9cc001cc 	andi	r19,r19,7
 1002b6c:	98800c04 	addi	r2,r19,48
 1002b70:	843fffc4 	addi	r16,r16,-1
 1002b74:	20e6b03a 	or	r19,r4,r3
 1002b78:	80800005 	stb	r2,0(r16)
 1002b7c:	9d86b03a 	or	r3,r19,r22
 1002b80:	183ff61e 	bne	r3,zero,1002b5c <__alt_data_end+0xff802b5c>
 1002b84:	90c0004c 	andi	r3,r18,1
 1002b88:	18014126 	beq	r3,zero,1003090 <___vfprintf_internal_r+0xc34>
 1002b8c:	10803fcc 	andi	r2,r2,255
 1002b90:	1080201c 	xori	r2,r2,128
 1002b94:	10bfe004 	addi	r2,r2,-128
 1002b98:	00c00c04 	movi	r3,48
 1002b9c:	10c13c26 	beq	r2,r3,1003090 <___vfprintf_internal_r+0xc34>
 1002ba0:	80ffffc5 	stb	r3,-1(r16)
 1002ba4:	d8c02817 	ldw	r3,160(sp)
 1002ba8:	80bfffc4 	addi	r2,r16,-1
 1002bac:	1021883a 	mov	r16,r2
 1002bb0:	1887c83a 	sub	r3,r3,r2
 1002bb4:	d8c02b15 	stw	r3,172(sp)
 1002bb8:	d8802b17 	ldw	r2,172(sp)
 1002bbc:	d9002a17 	ldw	r4,168(sp)
 1002bc0:	1100010e 	bge	r2,r4,1002bc8 <___vfprintf_internal_r+0x76c>
 1002bc4:	2005883a 	mov	r2,r4
 1002bc8:	d8802915 	stw	r2,164(sp)
 1002bcc:	d8003215 	stw	zero,200(sp)
 1002bd0:	e7003fcc 	andi	fp,fp,255
 1002bd4:	e700201c 	xori	fp,fp,128
 1002bd8:	e73fe004 	addi	fp,fp,-128
 1002bdc:	e0000326 	beq	fp,zero,1002bec <___vfprintf_internal_r+0x790>
 1002be0:	d8c02917 	ldw	r3,164(sp)
 1002be4:	18c00044 	addi	r3,r3,1
 1002be8:	d8c02915 	stw	r3,164(sp)
 1002bec:	90c0008c 	andi	r3,r18,2
 1002bf0:	d8c02c15 	stw	r3,176(sp)
 1002bf4:	18000326 	beq	r3,zero,1002c04 <___vfprintf_internal_r+0x7a8>
 1002bf8:	d8c02917 	ldw	r3,164(sp)
 1002bfc:	18c00084 	addi	r3,r3,2
 1002c00:	d8c02915 	stw	r3,164(sp)
 1002c04:	90c0210c 	andi	r3,r18,132
 1002c08:	d8c03015 	stw	r3,192(sp)
 1002c0c:	1801c51e 	bne	r3,zero,1003324 <___vfprintf_internal_r+0xec8>
 1002c10:	d9003117 	ldw	r4,196(sp)
 1002c14:	d8c02917 	ldw	r3,164(sp)
 1002c18:	20e7c83a 	sub	r19,r4,r3
 1002c1c:	04c1c10e 	bge	zero,r19,1003324 <___vfprintf_internal_r+0xec8>
 1002c20:	02400404 	movi	r9,16
 1002c24:	d8c02017 	ldw	r3,128(sp)
 1002c28:	d8801f17 	ldw	r2,124(sp)
 1002c2c:	4cc52f0e 	bge	r9,r19,10040ec <___vfprintf_internal_r+0x1c90>
 1002c30:	01404074 	movhi	r5,257
 1002c34:	29486c84 	addi	r5,r5,8626
 1002c38:	dc403b15 	stw	r17,236(sp)
 1002c3c:	d9403515 	stw	r5,212(sp)
 1002c40:	9823883a 	mov	r17,r19
 1002c44:	482d883a 	mov	r22,r9
 1002c48:	9027883a 	mov	r19,r18
 1002c4c:	070001c4 	movi	fp,7
 1002c50:	8025883a 	mov	r18,r16
 1002c54:	dc002d17 	ldw	r16,180(sp)
 1002c58:	00000306 	br	1002c68 <___vfprintf_internal_r+0x80c>
 1002c5c:	8c7ffc04 	addi	r17,r17,-16
 1002c60:	42000204 	addi	r8,r8,8
 1002c64:	b440130e 	bge	r22,r17,1002cb4 <___vfprintf_internal_r+0x858>
 1002c68:	01004074 	movhi	r4,257
 1002c6c:	18c00404 	addi	r3,r3,16
 1002c70:	10800044 	addi	r2,r2,1
 1002c74:	21086c84 	addi	r4,r4,8626
 1002c78:	41000015 	stw	r4,0(r8)
 1002c7c:	45800115 	stw	r22,4(r8)
 1002c80:	d8c02015 	stw	r3,128(sp)
 1002c84:	d8801f15 	stw	r2,124(sp)
 1002c88:	e0bff40e 	bge	fp,r2,1002c5c <__alt_data_end+0xff802c5c>
 1002c8c:	d9801e04 	addi	r6,sp,120
 1002c90:	b80b883a 	mov	r5,r23
 1002c94:	8009883a 	mov	r4,r16
 1002c98:	1009c3c0 	call	1009c3c <__sprint_r>
 1002c9c:	103ef31e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1002ca0:	8c7ffc04 	addi	r17,r17,-16
 1002ca4:	d8c02017 	ldw	r3,128(sp)
 1002ca8:	d8801f17 	ldw	r2,124(sp)
 1002cac:	da000404 	addi	r8,sp,16
 1002cb0:	b47fed16 	blt	r22,r17,1002c68 <__alt_data_end+0xff802c68>
 1002cb4:	9021883a 	mov	r16,r18
 1002cb8:	9825883a 	mov	r18,r19
 1002cbc:	8827883a 	mov	r19,r17
 1002cc0:	dc403b17 	ldw	r17,236(sp)
 1002cc4:	d9403517 	ldw	r5,212(sp)
 1002cc8:	98c7883a 	add	r3,r19,r3
 1002ccc:	10800044 	addi	r2,r2,1
 1002cd0:	41400015 	stw	r5,0(r8)
 1002cd4:	44c00115 	stw	r19,4(r8)
 1002cd8:	d8c02015 	stw	r3,128(sp)
 1002cdc:	d8801f15 	stw	r2,124(sp)
 1002ce0:	010001c4 	movi	r4,7
 1002ce4:	2082c516 	blt	r4,r2,10037fc <___vfprintf_internal_r+0x13a0>
 1002ce8:	df002787 	ldb	fp,158(sp)
 1002cec:	42000204 	addi	r8,r8,8
 1002cf0:	e0000c26 	beq	fp,zero,1002d24 <___vfprintf_internal_r+0x8c8>
 1002cf4:	d8801f17 	ldw	r2,124(sp)
 1002cf8:	d9002784 	addi	r4,sp,158
 1002cfc:	18c00044 	addi	r3,r3,1
 1002d00:	10800044 	addi	r2,r2,1
 1002d04:	41000015 	stw	r4,0(r8)
 1002d08:	01000044 	movi	r4,1
 1002d0c:	41000115 	stw	r4,4(r8)
 1002d10:	d8c02015 	stw	r3,128(sp)
 1002d14:	d8801f15 	stw	r2,124(sp)
 1002d18:	010001c4 	movi	r4,7
 1002d1c:	20825e16 	blt	r4,r2,1003698 <___vfprintf_internal_r+0x123c>
 1002d20:	42000204 	addi	r8,r8,8
 1002d24:	d8802c17 	ldw	r2,176(sp)
 1002d28:	10000c26 	beq	r2,zero,1002d5c <___vfprintf_internal_r+0x900>
 1002d2c:	d8801f17 	ldw	r2,124(sp)
 1002d30:	d9002704 	addi	r4,sp,156
 1002d34:	18c00084 	addi	r3,r3,2
 1002d38:	10800044 	addi	r2,r2,1
 1002d3c:	41000015 	stw	r4,0(r8)
 1002d40:	01000084 	movi	r4,2
 1002d44:	41000115 	stw	r4,4(r8)
 1002d48:	d8c02015 	stw	r3,128(sp)
 1002d4c:	d8801f15 	stw	r2,124(sp)
 1002d50:	010001c4 	movi	r4,7
 1002d54:	20825816 	blt	r4,r2,10036b8 <___vfprintf_internal_r+0x125c>
 1002d58:	42000204 	addi	r8,r8,8
 1002d5c:	d9003017 	ldw	r4,192(sp)
 1002d60:	00802004 	movi	r2,128
 1002d64:	2081bb26 	beq	r4,r2,1003454 <___vfprintf_internal_r+0xff8>
 1002d68:	d9402a17 	ldw	r5,168(sp)
 1002d6c:	d8802b17 	ldw	r2,172(sp)
 1002d70:	28adc83a 	sub	r22,r5,r2
 1002d74:	0580310e 	bge	zero,r22,1002e3c <___vfprintf_internal_r+0x9e0>
 1002d78:	07000404 	movi	fp,16
 1002d7c:	d8801f17 	ldw	r2,124(sp)
 1002d80:	e584360e 	bge	fp,r22,1003e5c <___vfprintf_internal_r+0x1a00>
 1002d84:	01404074 	movhi	r5,257
 1002d88:	29486884 	addi	r5,r5,8610
 1002d8c:	dc402a15 	stw	r17,168(sp)
 1002d90:	d9402c15 	stw	r5,176(sp)
 1002d94:	b023883a 	mov	r17,r22
 1002d98:	04c001c4 	movi	r19,7
 1002d9c:	a82d883a 	mov	r22,r21
 1002da0:	902b883a 	mov	r21,r18
 1002da4:	8025883a 	mov	r18,r16
 1002da8:	dc002d17 	ldw	r16,180(sp)
 1002dac:	00000306 	br	1002dbc <___vfprintf_internal_r+0x960>
 1002db0:	8c7ffc04 	addi	r17,r17,-16
 1002db4:	42000204 	addi	r8,r8,8
 1002db8:	e440110e 	bge	fp,r17,1002e00 <___vfprintf_internal_r+0x9a4>
 1002dbc:	18c00404 	addi	r3,r3,16
 1002dc0:	10800044 	addi	r2,r2,1
 1002dc4:	45000015 	stw	r20,0(r8)
 1002dc8:	47000115 	stw	fp,4(r8)
 1002dcc:	d8c02015 	stw	r3,128(sp)
 1002dd0:	d8801f15 	stw	r2,124(sp)
 1002dd4:	98bff60e 	bge	r19,r2,1002db0 <__alt_data_end+0xff802db0>
 1002dd8:	d9801e04 	addi	r6,sp,120
 1002ddc:	b80b883a 	mov	r5,r23
 1002de0:	8009883a 	mov	r4,r16
 1002de4:	1009c3c0 	call	1009c3c <__sprint_r>
 1002de8:	103ea01e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1002dec:	8c7ffc04 	addi	r17,r17,-16
 1002df0:	d8c02017 	ldw	r3,128(sp)
 1002df4:	d8801f17 	ldw	r2,124(sp)
 1002df8:	da000404 	addi	r8,sp,16
 1002dfc:	e47fef16 	blt	fp,r17,1002dbc <__alt_data_end+0xff802dbc>
 1002e00:	9021883a 	mov	r16,r18
 1002e04:	a825883a 	mov	r18,r21
 1002e08:	b02b883a 	mov	r21,r22
 1002e0c:	882d883a 	mov	r22,r17
 1002e10:	dc402a17 	ldw	r17,168(sp)
 1002e14:	d9002c17 	ldw	r4,176(sp)
 1002e18:	1d87883a 	add	r3,r3,r22
 1002e1c:	10800044 	addi	r2,r2,1
 1002e20:	41000015 	stw	r4,0(r8)
 1002e24:	45800115 	stw	r22,4(r8)
 1002e28:	d8c02015 	stw	r3,128(sp)
 1002e2c:	d8801f15 	stw	r2,124(sp)
 1002e30:	010001c4 	movi	r4,7
 1002e34:	20821016 	blt	r4,r2,1003678 <___vfprintf_internal_r+0x121c>
 1002e38:	42000204 	addi	r8,r8,8
 1002e3c:	9080400c 	andi	r2,r18,256
 1002e40:	10013a1e 	bne	r2,zero,100332c <___vfprintf_internal_r+0xed0>
 1002e44:	d9402b17 	ldw	r5,172(sp)
 1002e48:	d8801f17 	ldw	r2,124(sp)
 1002e4c:	44000015 	stw	r16,0(r8)
 1002e50:	1947883a 	add	r3,r3,r5
 1002e54:	10800044 	addi	r2,r2,1
 1002e58:	41400115 	stw	r5,4(r8)
 1002e5c:	d8c02015 	stw	r3,128(sp)
 1002e60:	d8801f15 	stw	r2,124(sp)
 1002e64:	010001c4 	movi	r4,7
 1002e68:	2081f516 	blt	r4,r2,1003640 <___vfprintf_internal_r+0x11e4>
 1002e6c:	42000204 	addi	r8,r8,8
 1002e70:	9480010c 	andi	r18,r18,4
 1002e74:	90003226 	beq	r18,zero,1002f40 <___vfprintf_internal_r+0xae4>
 1002e78:	d9403117 	ldw	r5,196(sp)
 1002e7c:	d8802917 	ldw	r2,164(sp)
 1002e80:	28a1c83a 	sub	r16,r5,r2
 1002e84:	04002e0e 	bge	zero,r16,1002f40 <___vfprintf_internal_r+0xae4>
 1002e88:	04400404 	movi	r17,16
 1002e8c:	d8801f17 	ldw	r2,124(sp)
 1002e90:	8c04c40e 	bge	r17,r16,10041a4 <___vfprintf_internal_r+0x1d48>
 1002e94:	01404074 	movhi	r5,257
 1002e98:	29486c84 	addi	r5,r5,8626
 1002e9c:	d9403515 	stw	r5,212(sp)
 1002ea0:	048001c4 	movi	r18,7
 1002ea4:	dcc02d17 	ldw	r19,180(sp)
 1002ea8:	00000306 	br	1002eb8 <___vfprintf_internal_r+0xa5c>
 1002eac:	843ffc04 	addi	r16,r16,-16
 1002eb0:	42000204 	addi	r8,r8,8
 1002eb4:	8c00130e 	bge	r17,r16,1002f04 <___vfprintf_internal_r+0xaa8>
 1002eb8:	01004074 	movhi	r4,257
 1002ebc:	18c00404 	addi	r3,r3,16
 1002ec0:	10800044 	addi	r2,r2,1
 1002ec4:	21086c84 	addi	r4,r4,8626
 1002ec8:	41000015 	stw	r4,0(r8)
 1002ecc:	44400115 	stw	r17,4(r8)
 1002ed0:	d8c02015 	stw	r3,128(sp)
 1002ed4:	d8801f15 	stw	r2,124(sp)
 1002ed8:	90bff40e 	bge	r18,r2,1002eac <__alt_data_end+0xff802eac>
 1002edc:	d9801e04 	addi	r6,sp,120
 1002ee0:	b80b883a 	mov	r5,r23
 1002ee4:	9809883a 	mov	r4,r19
 1002ee8:	1009c3c0 	call	1009c3c <__sprint_r>
 1002eec:	103e5f1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1002ef0:	843ffc04 	addi	r16,r16,-16
 1002ef4:	d8c02017 	ldw	r3,128(sp)
 1002ef8:	d8801f17 	ldw	r2,124(sp)
 1002efc:	da000404 	addi	r8,sp,16
 1002f00:	8c3fed16 	blt	r17,r16,1002eb8 <__alt_data_end+0xff802eb8>
 1002f04:	d9403517 	ldw	r5,212(sp)
 1002f08:	1c07883a 	add	r3,r3,r16
 1002f0c:	10800044 	addi	r2,r2,1
 1002f10:	41400015 	stw	r5,0(r8)
 1002f14:	44000115 	stw	r16,4(r8)
 1002f18:	d8c02015 	stw	r3,128(sp)
 1002f1c:	d8801f15 	stw	r2,124(sp)
 1002f20:	010001c4 	movi	r4,7
 1002f24:	2080060e 	bge	r4,r2,1002f40 <___vfprintf_internal_r+0xae4>
 1002f28:	d9002d17 	ldw	r4,180(sp)
 1002f2c:	d9801e04 	addi	r6,sp,120
 1002f30:	b80b883a 	mov	r5,r23
 1002f34:	1009c3c0 	call	1009c3c <__sprint_r>
 1002f38:	103e4c1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1002f3c:	d8c02017 	ldw	r3,128(sp)
 1002f40:	d8803117 	ldw	r2,196(sp)
 1002f44:	d9002917 	ldw	r4,164(sp)
 1002f48:	1100010e 	bge	r2,r4,1002f50 <___vfprintf_internal_r+0xaf4>
 1002f4c:	2005883a 	mov	r2,r4
 1002f50:	d9402f17 	ldw	r5,188(sp)
 1002f54:	288b883a 	add	r5,r5,r2
 1002f58:	d9402f15 	stw	r5,188(sp)
 1002f5c:	1801c01e 	bne	r3,zero,1003660 <___vfprintf_internal_r+0x1204>
 1002f60:	a8800007 	ldb	r2,0(r21)
 1002f64:	d8001f15 	stw	zero,124(sp)
 1002f68:	da000404 	addi	r8,sp,16
 1002f6c:	103d751e 	bne	r2,zero,1002544 <__alt_data_end+0xff802544>
 1002f70:	a823883a 	mov	r17,r21
 1002f74:	003d8b06 	br	10025a4 <__alt_data_end+0xff8025a4>
 1002f78:	8025883a 	mov	r18,r16
 1002f7c:	dc002903 	ldbu	r16,164(sp)
 1002f80:	e011883a 	mov	r8,fp
 1002f84:	84003fcc 	andi	r16,r16,255
 1002f88:	8005e51e 	bne	r16,zero,1004720 <___vfprintf_internal_r+0x22c4>
 1002f8c:	94800414 	ori	r18,r18,16
 1002f90:	9080080c 	andi	r2,r18,32
 1002f94:	10022b26 	beq	r2,zero,1003844 <___vfprintf_internal_r+0x13e8>
 1002f98:	d9002e17 	ldw	r4,184(sp)
 1002f9c:	d9402a17 	ldw	r5,168(sp)
 1002fa0:	d8002785 	stb	zero,158(sp)
 1002fa4:	20c00204 	addi	r3,r4,8
 1002fa8:	24c00017 	ldw	r19,0(r4)
 1002fac:	25800117 	ldw	r22,4(r4)
 1002fb0:	28042e16 	blt	r5,zero,100406c <___vfprintf_internal_r+0x1c10>
 1002fb4:	013fdfc4 	movi	r4,-129
 1002fb8:	9d84b03a 	or	r2,r19,r22
 1002fbc:	d8c02e15 	stw	r3,184(sp)
 1002fc0:	9124703a 	and	r18,r18,r4
 1002fc4:	0039883a 	mov	fp,zero
 1002fc8:	103e801e 	bne	r2,zero,10029cc <__alt_data_end+0xff8029cc>
 1002fcc:	d9002a17 	ldw	r4,168(sp)
 1002fd0:	2002e01e 	bne	r4,zero,1003b54 <___vfprintf_internal_r+0x16f8>
 1002fd4:	d8002a15 	stw	zero,168(sp)
 1002fd8:	d8002b15 	stw	zero,172(sp)
 1002fdc:	dc001e04 	addi	r16,sp,120
 1002fe0:	003ef506 	br	1002bb8 <__alt_data_end+0xff802bb8>
 1002fe4:	8025883a 	mov	r18,r16
 1002fe8:	dc002903 	ldbu	r16,164(sp)
 1002fec:	e011883a 	mov	r8,fp
 1002ff0:	84003fcc 	andi	r16,r16,255
 1002ff4:	8005ba1e 	bne	r16,zero,10046e0 <___vfprintf_internal_r+0x2284>
 1002ff8:	01004074 	movhi	r4,257
 1002ffc:	21085c04 	addi	r4,r4,8560
 1003000:	d9003915 	stw	r4,228(sp)
 1003004:	9080080c 	andi	r2,r18,32
 1003008:	10006126 	beq	r2,zero,1003190 <___vfprintf_internal_r+0xd34>
 100300c:	d9402e17 	ldw	r5,184(sp)
 1003010:	2cc00017 	ldw	r19,0(r5)
 1003014:	2d800117 	ldw	r22,4(r5)
 1003018:	29400204 	addi	r5,r5,8
 100301c:	d9402e15 	stw	r5,184(sp)
 1003020:	9080004c 	andi	r2,r18,1
 1003024:	1001ac26 	beq	r2,zero,10036d8 <___vfprintf_internal_r+0x127c>
 1003028:	9d84b03a 	or	r2,r19,r22
 100302c:	10038526 	beq	r2,zero,1003e44 <___vfprintf_internal_r+0x19e8>
 1003030:	d8c02a17 	ldw	r3,168(sp)
 1003034:	00800c04 	movi	r2,48
 1003038:	d8802705 	stb	r2,156(sp)
 100303c:	dc402745 	stb	r17,157(sp)
 1003040:	d8002785 	stb	zero,158(sp)
 1003044:	90800094 	ori	r2,r18,2
 1003048:	18047916 	blt	r3,zero,1004230 <___vfprintf_internal_r+0x1dd4>
 100304c:	00bfdfc4 	movi	r2,-129
 1003050:	90a4703a 	and	r18,r18,r2
 1003054:	94800094 	ori	r18,r18,2
 1003058:	0039883a 	mov	fp,zero
 100305c:	d9003917 	ldw	r4,228(sp)
 1003060:	dc001e04 	addi	r16,sp,120
 1003064:	988003cc 	andi	r2,r19,15
 1003068:	b006973a 	slli	r3,r22,28
 100306c:	2085883a 	add	r2,r4,r2
 1003070:	9826d13a 	srli	r19,r19,4
 1003074:	10800003 	ldbu	r2,0(r2)
 1003078:	b02cd13a 	srli	r22,r22,4
 100307c:	843fffc4 	addi	r16,r16,-1
 1003080:	1ce6b03a 	or	r19,r3,r19
 1003084:	80800005 	stb	r2,0(r16)
 1003088:	9d84b03a 	or	r2,r19,r22
 100308c:	103ff51e 	bne	r2,zero,1003064 <__alt_data_end+0xff803064>
 1003090:	d8c02817 	ldw	r3,160(sp)
 1003094:	1c07c83a 	sub	r3,r3,r16
 1003098:	d8c02b15 	stw	r3,172(sp)
 100309c:	003ec606 	br	1002bb8 <__alt_data_end+0xff802bb8>
 10030a0:	8025883a 	mov	r18,r16
 10030a4:	dc002903 	ldbu	r16,164(sp)
 10030a8:	e011883a 	mov	r8,fp
 10030ac:	84003fcc 	andi	r16,r16,255
 10030b0:	803e9626 	beq	r16,zero,1002b0c <__alt_data_end+0xff802b0c>
 10030b4:	d8c02b03 	ldbu	r3,172(sp)
 10030b8:	d8c02785 	stb	r3,158(sp)
 10030bc:	003e9306 	br	1002b0c <__alt_data_end+0xff802b0c>
 10030c0:	00c00044 	movi	r3,1
 10030c4:	d8c02905 	stb	r3,164(sp)
 10030c8:	00c00ac4 	movi	r3,43
 10030cc:	d8c02b05 	stb	r3,172(sp)
 10030d0:	ac400007 	ldb	r17,0(r21)
 10030d4:	003d4306 	br	10025e4 <__alt_data_end+0xff8025e4>
 10030d8:	84000814 	ori	r16,r16,32
 10030dc:	ac400007 	ldb	r17,0(r21)
 10030e0:	003d4006 	br	10025e4 <__alt_data_end+0xff8025e4>
 10030e4:	d8802e17 	ldw	r2,184(sp)
 10030e8:	8025883a 	mov	r18,r16
 10030ec:	d8002785 	stb	zero,158(sp)
 10030f0:	14000017 	ldw	r16,0(r2)
 10030f4:	e011883a 	mov	r8,fp
 10030f8:	14c00104 	addi	r19,r2,4
 10030fc:	80042d26 	beq	r16,zero,10041b4 <___vfprintf_internal_r+0x1d58>
 1003100:	d8c02a17 	ldw	r3,168(sp)
 1003104:	1803e416 	blt	r3,zero,1004098 <___vfprintf_internal_r+0x1c3c>
 1003108:	180d883a 	mov	r6,r3
 100310c:	000b883a 	mov	r5,zero
 1003110:	8009883a 	mov	r4,r16
 1003114:	df003d15 	stw	fp,244(sp)
 1003118:	1007d940 	call	1007d94 <memchr>
 100311c:	da003d17 	ldw	r8,244(sp)
 1003120:	10046826 	beq	r2,zero,10042c4 <___vfprintf_internal_r+0x1e68>
 1003124:	1405c83a 	sub	r2,r2,r16
 1003128:	d8802b15 	stw	r2,172(sp)
 100312c:	1003e016 	blt	r2,zero,10040b0 <___vfprintf_internal_r+0x1c54>
 1003130:	df002783 	ldbu	fp,158(sp)
 1003134:	d8802915 	stw	r2,164(sp)
 1003138:	dcc02e15 	stw	r19,184(sp)
 100313c:	d8002a15 	stw	zero,168(sp)
 1003140:	d8003215 	stw	zero,200(sp)
 1003144:	003ea206 	br	1002bd0 <__alt_data_end+0xff802bd0>
 1003148:	8025883a 	mov	r18,r16
 100314c:	dc002903 	ldbu	r16,164(sp)
 1003150:	e011883a 	mov	r8,fp
 1003154:	84003fcc 	andi	r16,r16,255
 1003158:	803f8d26 	beq	r16,zero,1002f90 <__alt_data_end+0xff802f90>
 100315c:	d8c02b03 	ldbu	r3,172(sp)
 1003160:	d8c02785 	stb	r3,158(sp)
 1003164:	003f8a06 	br	1002f90 <__alt_data_end+0xff802f90>
 1003168:	8025883a 	mov	r18,r16
 100316c:	dc002903 	ldbu	r16,164(sp)
 1003170:	e011883a 	mov	r8,fp
 1003174:	84003fcc 	andi	r16,r16,255
 1003178:	8005661e 	bne	r16,zero,1004714 <___vfprintf_internal_r+0x22b8>
 100317c:	01004074 	movhi	r4,257
 1003180:	21086104 	addi	r4,r4,8580
 1003184:	d9003915 	stw	r4,228(sp)
 1003188:	9080080c 	andi	r2,r18,32
 100318c:	103f9f1e 	bne	r2,zero,100300c <__alt_data_end+0xff80300c>
 1003190:	9080040c 	andi	r2,r18,16
 1003194:	1002eb26 	beq	r2,zero,1003d44 <___vfprintf_internal_r+0x18e8>
 1003198:	d8802e17 	ldw	r2,184(sp)
 100319c:	002d883a 	mov	r22,zero
 10031a0:	14c00017 	ldw	r19,0(r2)
 10031a4:	10800104 	addi	r2,r2,4
 10031a8:	d8802e15 	stw	r2,184(sp)
 10031ac:	003f9c06 	br	1003020 <__alt_data_end+0xff803020>
 10031b0:	d8802b07 	ldb	r2,172(sp)
 10031b4:	1002e11e 	bne	r2,zero,1003d3c <___vfprintf_internal_r+0x18e0>
 10031b8:	00c00044 	movi	r3,1
 10031bc:	d8c02905 	stb	r3,164(sp)
 10031c0:	00c00804 	movi	r3,32
 10031c4:	d8c02b05 	stb	r3,172(sp)
 10031c8:	ac400007 	ldb	r17,0(r21)
 10031cc:	003d0506 	br	10025e4 <__alt_data_end+0xff8025e4>
 10031d0:	84000054 	ori	r16,r16,1
 10031d4:	ac400007 	ldb	r17,0(r21)
 10031d8:	003d0206 	br	10025e4 <__alt_data_end+0xff8025e4>
 10031dc:	8025883a 	mov	r18,r16
 10031e0:	dc002903 	ldbu	r16,164(sp)
 10031e4:	e011883a 	mov	r8,fp
 10031e8:	84003fcc 	andi	r16,r16,255
 10031ec:	803de726 	beq	r16,zero,100298c <__alt_data_end+0xff80298c>
 10031f0:	d8c02b03 	ldbu	r3,172(sp)
 10031f4:	d8c02785 	stb	r3,158(sp)
 10031f8:	003de406 	br	100298c <__alt_data_end+0xff80298c>
 10031fc:	84001014 	ori	r16,r16,64
 1003200:	ac400007 	ldb	r17,0(r21)
 1003204:	003cf706 	br	10025e4 <__alt_data_end+0xff8025e4>
 1003208:	ac400007 	ldb	r17,0(r21)
 100320c:	00801b04 	movi	r2,108
 1003210:	88838f26 	beq	r17,r2,1004050 <___vfprintf_internal_r+0x1bf4>
 1003214:	84000414 	ori	r16,r16,16
 1003218:	003cf206 	br	10025e4 <__alt_data_end+0xff8025e4>
 100321c:	8025883a 	mov	r18,r16
 1003220:	dc002903 	ldbu	r16,164(sp)
 1003224:	e011883a 	mov	r8,fp
 1003228:	84003fcc 	andi	r16,r16,255
 100322c:	80053f1e 	bne	r16,zero,100472c <___vfprintf_internal_r+0x22d0>
 1003230:	9080080c 	andi	r2,r18,32
 1003234:	1002d226 	beq	r2,zero,1003d80 <___vfprintf_internal_r+0x1924>
 1003238:	d9002e17 	ldw	r4,184(sp)
 100323c:	d9402f17 	ldw	r5,188(sp)
 1003240:	20800017 	ldw	r2,0(r4)
 1003244:	2807d7fa 	srai	r3,r5,31
 1003248:	21000104 	addi	r4,r4,4
 100324c:	d9002e15 	stw	r4,184(sp)
 1003250:	11400015 	stw	r5,0(r2)
 1003254:	10c00115 	stw	r3,4(r2)
 1003258:	003cb806 	br	100253c <__alt_data_end+0xff80253c>
 100325c:	d8c02e17 	ldw	r3,184(sp)
 1003260:	d9002e17 	ldw	r4,184(sp)
 1003264:	8025883a 	mov	r18,r16
 1003268:	18800017 	ldw	r2,0(r3)
 100326c:	21000104 	addi	r4,r4,4
 1003270:	00c00044 	movi	r3,1
 1003274:	e011883a 	mov	r8,fp
 1003278:	d8c02915 	stw	r3,164(sp)
 100327c:	d8002785 	stb	zero,158(sp)
 1003280:	d8801405 	stb	r2,80(sp)
 1003284:	d9002e15 	stw	r4,184(sp)
 1003288:	d8c02b15 	stw	r3,172(sp)
 100328c:	d8002a15 	stw	zero,168(sp)
 1003290:	d8003215 	stw	zero,200(sp)
 1003294:	dc001404 	addi	r16,sp,80
 1003298:	0039883a 	mov	fp,zero
 100329c:	003e5306 	br	1002bec <__alt_data_end+0xff802bec>
 10032a0:	01004074 	movhi	r4,257
 10032a4:	21086104 	addi	r4,r4,8580
 10032a8:	0039883a 	mov	fp,zero
 10032ac:	d9003915 	stw	r4,228(sp)
 10032b0:	04401e04 	movi	r17,120
 10032b4:	003f6906 	br	100305c <__alt_data_end+0xff80305c>
 10032b8:	8025883a 	mov	r18,r16
 10032bc:	dc002903 	ldbu	r16,164(sp)
 10032c0:	e011883a 	mov	r8,fp
 10032c4:	84003fcc 	andi	r16,r16,255
 10032c8:	8005081e 	bne	r16,zero,10046ec <___vfprintf_internal_r+0x2290>
 10032cc:	883d6126 	beq	r17,zero,1002854 <__alt_data_end+0xff802854>
 10032d0:	00c00044 	movi	r3,1
 10032d4:	d8c02915 	stw	r3,164(sp)
 10032d8:	dc401405 	stb	r17,80(sp)
 10032dc:	d8002785 	stb	zero,158(sp)
 10032e0:	003fe906 	br	1003288 <__alt_data_end+0xff803288>
 10032e4:	01404074 	movhi	r5,257
 10032e8:	29486104 	addi	r5,r5,8580
 10032ec:	d9403915 	stw	r5,228(sp)
 10032f0:	d8c02e15 	stw	r3,184(sp)
 10032f4:	1025883a 	mov	r18,r2
 10032f8:	04401e04 	movi	r17,120
 10032fc:	9d84b03a 	or	r2,r19,r22
 1003300:	1000fc1e 	bne	r2,zero,10036f4 <___vfprintf_internal_r+0x1298>
 1003304:	0039883a 	mov	fp,zero
 1003308:	00800084 	movi	r2,2
 100330c:	10803fcc 	andi	r2,r2,255
 1003310:	00c00044 	movi	r3,1
 1003314:	10c20f26 	beq	r2,r3,1003b54 <___vfprintf_internal_r+0x16f8>
 1003318:	00c00084 	movi	r3,2
 100331c:	10fd3326 	beq	r2,r3,10027ec <__alt_data_end+0xff8027ec>
 1003320:	003e0b06 	br	1002b50 <__alt_data_end+0xff802b50>
 1003324:	d8c02017 	ldw	r3,128(sp)
 1003328:	003e7106 	br	1002cf0 <__alt_data_end+0xff802cf0>
 100332c:	00801944 	movi	r2,101
 1003330:	14407e0e 	bge	r2,r17,100352c <___vfprintf_internal_r+0x10d0>
 1003334:	d9003617 	ldw	r4,216(sp)
 1003338:	d9403817 	ldw	r5,224(sp)
 100333c:	000d883a 	mov	r6,zero
 1003340:	000f883a 	mov	r7,zero
 1003344:	d8c03c15 	stw	r3,240(sp)
 1003348:	da003d15 	stw	r8,244(sp)
 100334c:	100db9c0 	call	100db9c <__eqdf2>
 1003350:	d8c03c17 	ldw	r3,240(sp)
 1003354:	da003d17 	ldw	r8,244(sp)
 1003358:	1000f71e 	bne	r2,zero,1003738 <___vfprintf_internal_r+0x12dc>
 100335c:	d8801f17 	ldw	r2,124(sp)
 1003360:	01004074 	movhi	r4,257
 1003364:	21086804 	addi	r4,r4,8608
 1003368:	18c00044 	addi	r3,r3,1
 100336c:	10800044 	addi	r2,r2,1
 1003370:	41000015 	stw	r4,0(r8)
 1003374:	01000044 	movi	r4,1
 1003378:	41000115 	stw	r4,4(r8)
 100337c:	d8c02015 	stw	r3,128(sp)
 1003380:	d8801f15 	stw	r2,124(sp)
 1003384:	010001c4 	movi	r4,7
 1003388:	2082b816 	blt	r4,r2,1003e6c <___vfprintf_internal_r+0x1a10>
 100338c:	42000204 	addi	r8,r8,8
 1003390:	d8802617 	ldw	r2,152(sp)
 1003394:	d9403317 	ldw	r5,204(sp)
 1003398:	11400216 	blt	r2,r5,10033a4 <___vfprintf_internal_r+0xf48>
 100339c:	9080004c 	andi	r2,r18,1
 10033a0:	103eb326 	beq	r2,zero,1002e70 <__alt_data_end+0xff802e70>
 10033a4:	d8803717 	ldw	r2,220(sp)
 10033a8:	d9003417 	ldw	r4,208(sp)
 10033ac:	d9403717 	ldw	r5,220(sp)
 10033b0:	1887883a 	add	r3,r3,r2
 10033b4:	d8801f17 	ldw	r2,124(sp)
 10033b8:	41000015 	stw	r4,0(r8)
 10033bc:	41400115 	stw	r5,4(r8)
 10033c0:	10800044 	addi	r2,r2,1
 10033c4:	d8c02015 	stw	r3,128(sp)
 10033c8:	d8801f15 	stw	r2,124(sp)
 10033cc:	010001c4 	movi	r4,7
 10033d0:	20832916 	blt	r4,r2,1004078 <___vfprintf_internal_r+0x1c1c>
 10033d4:	42000204 	addi	r8,r8,8
 10033d8:	d8803317 	ldw	r2,204(sp)
 10033dc:	143fffc4 	addi	r16,r2,-1
 10033e0:	043ea30e 	bge	zero,r16,1002e70 <__alt_data_end+0xff802e70>
 10033e4:	04400404 	movi	r17,16
 10033e8:	d8801f17 	ldw	r2,124(sp)
 10033ec:	8c00880e 	bge	r17,r16,1003610 <___vfprintf_internal_r+0x11b4>
 10033f0:	01404074 	movhi	r5,257
 10033f4:	29486884 	addi	r5,r5,8610
 10033f8:	d9402c15 	stw	r5,176(sp)
 10033fc:	058001c4 	movi	r22,7
 1003400:	dcc02d17 	ldw	r19,180(sp)
 1003404:	00000306 	br	1003414 <___vfprintf_internal_r+0xfb8>
 1003408:	42000204 	addi	r8,r8,8
 100340c:	843ffc04 	addi	r16,r16,-16
 1003410:	8c00820e 	bge	r17,r16,100361c <___vfprintf_internal_r+0x11c0>
 1003414:	18c00404 	addi	r3,r3,16
 1003418:	10800044 	addi	r2,r2,1
 100341c:	45000015 	stw	r20,0(r8)
 1003420:	44400115 	stw	r17,4(r8)
 1003424:	d8c02015 	stw	r3,128(sp)
 1003428:	d8801f15 	stw	r2,124(sp)
 100342c:	b0bff60e 	bge	r22,r2,1003408 <__alt_data_end+0xff803408>
 1003430:	d9801e04 	addi	r6,sp,120
 1003434:	b80b883a 	mov	r5,r23
 1003438:	9809883a 	mov	r4,r19
 100343c:	1009c3c0 	call	1009c3c <__sprint_r>
 1003440:	103d0a1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003444:	d8c02017 	ldw	r3,128(sp)
 1003448:	d8801f17 	ldw	r2,124(sp)
 100344c:	da000404 	addi	r8,sp,16
 1003450:	003fee06 	br	100340c <__alt_data_end+0xff80340c>
 1003454:	d9403117 	ldw	r5,196(sp)
 1003458:	d8802917 	ldw	r2,164(sp)
 100345c:	28adc83a 	sub	r22,r5,r2
 1003460:	05be410e 	bge	zero,r22,1002d68 <__alt_data_end+0xff802d68>
 1003464:	07000404 	movi	fp,16
 1003468:	d8801f17 	ldw	r2,124(sp)
 100346c:	e5838f0e 	bge	fp,r22,10042ac <___vfprintf_internal_r+0x1e50>
 1003470:	01404074 	movhi	r5,257
 1003474:	29486884 	addi	r5,r5,8610
 1003478:	dc403015 	stw	r17,192(sp)
 100347c:	d9402c15 	stw	r5,176(sp)
 1003480:	b023883a 	mov	r17,r22
 1003484:	04c001c4 	movi	r19,7
 1003488:	a82d883a 	mov	r22,r21
 100348c:	902b883a 	mov	r21,r18
 1003490:	8025883a 	mov	r18,r16
 1003494:	dc002d17 	ldw	r16,180(sp)
 1003498:	00000306 	br	10034a8 <___vfprintf_internal_r+0x104c>
 100349c:	8c7ffc04 	addi	r17,r17,-16
 10034a0:	42000204 	addi	r8,r8,8
 10034a4:	e440110e 	bge	fp,r17,10034ec <___vfprintf_internal_r+0x1090>
 10034a8:	18c00404 	addi	r3,r3,16
 10034ac:	10800044 	addi	r2,r2,1
 10034b0:	45000015 	stw	r20,0(r8)
 10034b4:	47000115 	stw	fp,4(r8)
 10034b8:	d8c02015 	stw	r3,128(sp)
 10034bc:	d8801f15 	stw	r2,124(sp)
 10034c0:	98bff60e 	bge	r19,r2,100349c <__alt_data_end+0xff80349c>
 10034c4:	d9801e04 	addi	r6,sp,120
 10034c8:	b80b883a 	mov	r5,r23
 10034cc:	8009883a 	mov	r4,r16
 10034d0:	1009c3c0 	call	1009c3c <__sprint_r>
 10034d4:	103ce51e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 10034d8:	8c7ffc04 	addi	r17,r17,-16
 10034dc:	d8c02017 	ldw	r3,128(sp)
 10034e0:	d8801f17 	ldw	r2,124(sp)
 10034e4:	da000404 	addi	r8,sp,16
 10034e8:	e47fef16 	blt	fp,r17,10034a8 <__alt_data_end+0xff8034a8>
 10034ec:	9021883a 	mov	r16,r18
 10034f0:	a825883a 	mov	r18,r21
 10034f4:	b02b883a 	mov	r21,r22
 10034f8:	882d883a 	mov	r22,r17
 10034fc:	dc403017 	ldw	r17,192(sp)
 1003500:	d9002c17 	ldw	r4,176(sp)
 1003504:	1d87883a 	add	r3,r3,r22
 1003508:	10800044 	addi	r2,r2,1
 100350c:	41000015 	stw	r4,0(r8)
 1003510:	45800115 	stw	r22,4(r8)
 1003514:	d8c02015 	stw	r3,128(sp)
 1003518:	d8801f15 	stw	r2,124(sp)
 100351c:	010001c4 	movi	r4,7
 1003520:	20818e16 	blt	r4,r2,1003b5c <___vfprintf_internal_r+0x1700>
 1003524:	42000204 	addi	r8,r8,8
 1003528:	003e0f06 	br	1002d68 <__alt_data_end+0xff802d68>
 100352c:	d9403317 	ldw	r5,204(sp)
 1003530:	00800044 	movi	r2,1
 1003534:	18c00044 	addi	r3,r3,1
 1003538:	1141530e 	bge	r2,r5,1003a88 <___vfprintf_internal_r+0x162c>
 100353c:	dc401f17 	ldw	r17,124(sp)
 1003540:	00800044 	movi	r2,1
 1003544:	40800115 	stw	r2,4(r8)
 1003548:	8c400044 	addi	r17,r17,1
 100354c:	44000015 	stw	r16,0(r8)
 1003550:	d8c02015 	stw	r3,128(sp)
 1003554:	dc401f15 	stw	r17,124(sp)
 1003558:	008001c4 	movi	r2,7
 100355c:	14416b16 	blt	r2,r17,1003b0c <___vfprintf_internal_r+0x16b0>
 1003560:	42000204 	addi	r8,r8,8
 1003564:	d8803717 	ldw	r2,220(sp)
 1003568:	d9003417 	ldw	r4,208(sp)
 100356c:	8c400044 	addi	r17,r17,1
 1003570:	10c7883a 	add	r3,r2,r3
 1003574:	40800115 	stw	r2,4(r8)
 1003578:	41000015 	stw	r4,0(r8)
 100357c:	d8c02015 	stw	r3,128(sp)
 1003580:	dc401f15 	stw	r17,124(sp)
 1003584:	008001c4 	movi	r2,7
 1003588:	14416916 	blt	r2,r17,1003b30 <___vfprintf_internal_r+0x16d4>
 100358c:	45800204 	addi	r22,r8,8
 1003590:	d9003617 	ldw	r4,216(sp)
 1003594:	d9403817 	ldw	r5,224(sp)
 1003598:	000d883a 	mov	r6,zero
 100359c:	000f883a 	mov	r7,zero
 10035a0:	d8c03c15 	stw	r3,240(sp)
 10035a4:	100db9c0 	call	100db9c <__eqdf2>
 10035a8:	d8c03c17 	ldw	r3,240(sp)
 10035ac:	1000bc26 	beq	r2,zero,10038a0 <___vfprintf_internal_r+0x1444>
 10035b0:	d9403317 	ldw	r5,204(sp)
 10035b4:	84000044 	addi	r16,r16,1
 10035b8:	8c400044 	addi	r17,r17,1
 10035bc:	28bfffc4 	addi	r2,r5,-1
 10035c0:	1887883a 	add	r3,r3,r2
 10035c4:	b0800115 	stw	r2,4(r22)
 10035c8:	b4000015 	stw	r16,0(r22)
 10035cc:	d8c02015 	stw	r3,128(sp)
 10035d0:	dc401f15 	stw	r17,124(sp)
 10035d4:	008001c4 	movi	r2,7
 10035d8:	14414316 	blt	r2,r17,1003ae8 <___vfprintf_internal_r+0x168c>
 10035dc:	b5800204 	addi	r22,r22,8
 10035e0:	d9003a17 	ldw	r4,232(sp)
 10035e4:	df0022c4 	addi	fp,sp,139
 10035e8:	8c400044 	addi	r17,r17,1
 10035ec:	20c7883a 	add	r3,r4,r3
 10035f0:	b7000015 	stw	fp,0(r22)
 10035f4:	b1000115 	stw	r4,4(r22)
 10035f8:	d8c02015 	stw	r3,128(sp)
 10035fc:	dc401f15 	stw	r17,124(sp)
 1003600:	008001c4 	movi	r2,7
 1003604:	14400e16 	blt	r2,r17,1003640 <___vfprintf_internal_r+0x11e4>
 1003608:	b2000204 	addi	r8,r22,8
 100360c:	003e1806 	br	1002e70 <__alt_data_end+0xff802e70>
 1003610:	01004074 	movhi	r4,257
 1003614:	21086884 	addi	r4,r4,8610
 1003618:	d9002c15 	stw	r4,176(sp)
 100361c:	d9002c17 	ldw	r4,176(sp)
 1003620:	1c07883a 	add	r3,r3,r16
 1003624:	44000115 	stw	r16,4(r8)
 1003628:	41000015 	stw	r4,0(r8)
 100362c:	10800044 	addi	r2,r2,1
 1003630:	d8c02015 	stw	r3,128(sp)
 1003634:	d8801f15 	stw	r2,124(sp)
 1003638:	010001c4 	movi	r4,7
 100363c:	20be0b0e 	bge	r4,r2,1002e6c <__alt_data_end+0xff802e6c>
 1003640:	d9002d17 	ldw	r4,180(sp)
 1003644:	d9801e04 	addi	r6,sp,120
 1003648:	b80b883a 	mov	r5,r23
 100364c:	1009c3c0 	call	1009c3c <__sprint_r>
 1003650:	103c861e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003654:	d8c02017 	ldw	r3,128(sp)
 1003658:	da000404 	addi	r8,sp,16
 100365c:	003e0406 	br	1002e70 <__alt_data_end+0xff802e70>
 1003660:	d9002d17 	ldw	r4,180(sp)
 1003664:	d9801e04 	addi	r6,sp,120
 1003668:	b80b883a 	mov	r5,r23
 100366c:	1009c3c0 	call	1009c3c <__sprint_r>
 1003670:	103e3b26 	beq	r2,zero,1002f60 <__alt_data_end+0xff802f60>
 1003674:	003c7d06 	br	100286c <__alt_data_end+0xff80286c>
 1003678:	d9002d17 	ldw	r4,180(sp)
 100367c:	d9801e04 	addi	r6,sp,120
 1003680:	b80b883a 	mov	r5,r23
 1003684:	1009c3c0 	call	1009c3c <__sprint_r>
 1003688:	103c781e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 100368c:	d8c02017 	ldw	r3,128(sp)
 1003690:	da000404 	addi	r8,sp,16
 1003694:	003de906 	br	1002e3c <__alt_data_end+0xff802e3c>
 1003698:	d9002d17 	ldw	r4,180(sp)
 100369c:	d9801e04 	addi	r6,sp,120
 10036a0:	b80b883a 	mov	r5,r23
 10036a4:	1009c3c0 	call	1009c3c <__sprint_r>
 10036a8:	103c701e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 10036ac:	d8c02017 	ldw	r3,128(sp)
 10036b0:	da000404 	addi	r8,sp,16
 10036b4:	003d9b06 	br	1002d24 <__alt_data_end+0xff802d24>
 10036b8:	d9002d17 	ldw	r4,180(sp)
 10036bc:	d9801e04 	addi	r6,sp,120
 10036c0:	b80b883a 	mov	r5,r23
 10036c4:	1009c3c0 	call	1009c3c <__sprint_r>
 10036c8:	103c681e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 10036cc:	d8c02017 	ldw	r3,128(sp)
 10036d0:	da000404 	addi	r8,sp,16
 10036d4:	003da106 	br	1002d5c <__alt_data_end+0xff802d5c>
 10036d8:	d9402a17 	ldw	r5,168(sp)
 10036dc:	d8002785 	stb	zero,158(sp)
 10036e0:	283f0616 	blt	r5,zero,10032fc <__alt_data_end+0xff8032fc>
 10036e4:	00ffdfc4 	movi	r3,-129
 10036e8:	9d84b03a 	or	r2,r19,r22
 10036ec:	90e4703a 	and	r18,r18,r3
 10036f0:	103c3b26 	beq	r2,zero,10027e0 <__alt_data_end+0xff8027e0>
 10036f4:	0039883a 	mov	fp,zero
 10036f8:	003e5806 	br	100305c <__alt_data_end+0xff80305c>
 10036fc:	9080040c 	andi	r2,r18,16
 1003700:	1001b326 	beq	r2,zero,1003dd0 <___vfprintf_internal_r+0x1974>
 1003704:	d8c02e17 	ldw	r3,184(sp)
 1003708:	d9002a17 	ldw	r4,168(sp)
 100370c:	d8002785 	stb	zero,158(sp)
 1003710:	18800104 	addi	r2,r3,4
 1003714:	1cc00017 	ldw	r19,0(r3)
 1003718:	002d883a 	mov	r22,zero
 100371c:	2001b516 	blt	r4,zero,1003df4 <___vfprintf_internal_r+0x1998>
 1003720:	00ffdfc4 	movi	r3,-129
 1003724:	d8802e15 	stw	r2,184(sp)
 1003728:	90e4703a 	and	r18,r18,r3
 100372c:	983d0526 	beq	r19,zero,1002b44 <__alt_data_end+0xff802b44>
 1003730:	0039883a 	mov	fp,zero
 1003734:	003d0806 	br	1002b58 <__alt_data_end+0xff802b58>
 1003738:	dc402617 	ldw	r17,152(sp)
 100373c:	0441d30e 	bge	zero,r17,1003e8c <___vfprintf_internal_r+0x1a30>
 1003740:	dc403217 	ldw	r17,200(sp)
 1003744:	d8803317 	ldw	r2,204(sp)
 1003748:	1440010e 	bge	r2,r17,1003750 <___vfprintf_internal_r+0x12f4>
 100374c:	1023883a 	mov	r17,r2
 1003750:	04400a0e 	bge	zero,r17,100377c <___vfprintf_internal_r+0x1320>
 1003754:	d8801f17 	ldw	r2,124(sp)
 1003758:	1c47883a 	add	r3,r3,r17
 100375c:	44000015 	stw	r16,0(r8)
 1003760:	10800044 	addi	r2,r2,1
 1003764:	44400115 	stw	r17,4(r8)
 1003768:	d8c02015 	stw	r3,128(sp)
 100376c:	d8801f15 	stw	r2,124(sp)
 1003770:	010001c4 	movi	r4,7
 1003774:	20826516 	blt	r4,r2,100410c <___vfprintf_internal_r+0x1cb0>
 1003778:	42000204 	addi	r8,r8,8
 100377c:	88026116 	blt	r17,zero,1004104 <___vfprintf_internal_r+0x1ca8>
 1003780:	d9003217 	ldw	r4,200(sp)
 1003784:	2463c83a 	sub	r17,r4,r17
 1003788:	04407b0e 	bge	zero,r17,1003978 <___vfprintf_internal_r+0x151c>
 100378c:	05800404 	movi	r22,16
 1003790:	d8801f17 	ldw	r2,124(sp)
 1003794:	b4419d0e 	bge	r22,r17,1003e0c <___vfprintf_internal_r+0x19b0>
 1003798:	01004074 	movhi	r4,257
 100379c:	21086884 	addi	r4,r4,8610
 10037a0:	d9002c15 	stw	r4,176(sp)
 10037a4:	070001c4 	movi	fp,7
 10037a8:	dcc02d17 	ldw	r19,180(sp)
 10037ac:	00000306 	br	10037bc <___vfprintf_internal_r+0x1360>
 10037b0:	42000204 	addi	r8,r8,8
 10037b4:	8c7ffc04 	addi	r17,r17,-16
 10037b8:	b441970e 	bge	r22,r17,1003e18 <___vfprintf_internal_r+0x19bc>
 10037bc:	18c00404 	addi	r3,r3,16
 10037c0:	10800044 	addi	r2,r2,1
 10037c4:	45000015 	stw	r20,0(r8)
 10037c8:	45800115 	stw	r22,4(r8)
 10037cc:	d8c02015 	stw	r3,128(sp)
 10037d0:	d8801f15 	stw	r2,124(sp)
 10037d4:	e0bff60e 	bge	fp,r2,10037b0 <__alt_data_end+0xff8037b0>
 10037d8:	d9801e04 	addi	r6,sp,120
 10037dc:	b80b883a 	mov	r5,r23
 10037e0:	9809883a 	mov	r4,r19
 10037e4:	1009c3c0 	call	1009c3c <__sprint_r>
 10037e8:	103c201e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 10037ec:	d8c02017 	ldw	r3,128(sp)
 10037f0:	d8801f17 	ldw	r2,124(sp)
 10037f4:	da000404 	addi	r8,sp,16
 10037f8:	003fee06 	br	10037b4 <__alt_data_end+0xff8037b4>
 10037fc:	d9002d17 	ldw	r4,180(sp)
 1003800:	d9801e04 	addi	r6,sp,120
 1003804:	b80b883a 	mov	r5,r23
 1003808:	1009c3c0 	call	1009c3c <__sprint_r>
 100380c:	103c171e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003810:	d8c02017 	ldw	r3,128(sp)
 1003814:	df002787 	ldb	fp,158(sp)
 1003818:	da000404 	addi	r8,sp,16
 100381c:	003d3406 	br	1002cf0 <__alt_data_end+0xff802cf0>
 1003820:	9080040c 	andi	r2,r18,16
 1003824:	10016126 	beq	r2,zero,1003dac <___vfprintf_internal_r+0x1950>
 1003828:	d9402e17 	ldw	r5,184(sp)
 100382c:	2cc00017 	ldw	r19,0(r5)
 1003830:	29400104 	addi	r5,r5,4
 1003834:	d9402e15 	stw	r5,184(sp)
 1003838:	982dd7fa 	srai	r22,r19,31
 100383c:	b005883a 	mov	r2,r22
 1003840:	003c5a06 	br	10029ac <__alt_data_end+0xff8029ac>
 1003844:	9080040c 	andi	r2,r18,16
 1003848:	10003526 	beq	r2,zero,1003920 <___vfprintf_internal_r+0x14c4>
 100384c:	d8c02e17 	ldw	r3,184(sp)
 1003850:	d9002a17 	ldw	r4,168(sp)
 1003854:	d8002785 	stb	zero,158(sp)
 1003858:	18800104 	addi	r2,r3,4
 100385c:	1cc00017 	ldw	r19,0(r3)
 1003860:	002d883a 	mov	r22,zero
 1003864:	20003716 	blt	r4,zero,1003944 <___vfprintf_internal_r+0x14e8>
 1003868:	00ffdfc4 	movi	r3,-129
 100386c:	d8802e15 	stw	r2,184(sp)
 1003870:	90e4703a 	and	r18,r18,r3
 1003874:	0039883a 	mov	fp,zero
 1003878:	983dd426 	beq	r19,zero,1002fcc <__alt_data_end+0xff802fcc>
 100387c:	00800244 	movi	r2,9
 1003880:	14fc5336 	bltu	r2,r19,10029d0 <__alt_data_end+0xff8029d0>
 1003884:	d8c02817 	ldw	r3,160(sp)
 1003888:	dc001dc4 	addi	r16,sp,119
 100388c:	9cc00c04 	addi	r19,r19,48
 1003890:	1c07c83a 	sub	r3,r3,r16
 1003894:	dcc01dc5 	stb	r19,119(sp)
 1003898:	d8c02b15 	stw	r3,172(sp)
 100389c:	003cc606 	br	1002bb8 <__alt_data_end+0xff802bb8>
 10038a0:	d8803317 	ldw	r2,204(sp)
 10038a4:	143fffc4 	addi	r16,r2,-1
 10038a8:	043f4d0e 	bge	zero,r16,10035e0 <__alt_data_end+0xff8035e0>
 10038ac:	07000404 	movi	fp,16
 10038b0:	e400810e 	bge	fp,r16,1003ab8 <___vfprintf_internal_r+0x165c>
 10038b4:	01404074 	movhi	r5,257
 10038b8:	29486884 	addi	r5,r5,8610
 10038bc:	d9402c15 	stw	r5,176(sp)
 10038c0:	01c001c4 	movi	r7,7
 10038c4:	dcc02d17 	ldw	r19,180(sp)
 10038c8:	00000306 	br	10038d8 <___vfprintf_internal_r+0x147c>
 10038cc:	b5800204 	addi	r22,r22,8
 10038d0:	843ffc04 	addi	r16,r16,-16
 10038d4:	e4007b0e 	bge	fp,r16,1003ac4 <___vfprintf_internal_r+0x1668>
 10038d8:	18c00404 	addi	r3,r3,16
 10038dc:	8c400044 	addi	r17,r17,1
 10038e0:	b5000015 	stw	r20,0(r22)
 10038e4:	b7000115 	stw	fp,4(r22)
 10038e8:	d8c02015 	stw	r3,128(sp)
 10038ec:	dc401f15 	stw	r17,124(sp)
 10038f0:	3c7ff60e 	bge	r7,r17,10038cc <__alt_data_end+0xff8038cc>
 10038f4:	d9801e04 	addi	r6,sp,120
 10038f8:	b80b883a 	mov	r5,r23
 10038fc:	9809883a 	mov	r4,r19
 1003900:	d9c03c15 	stw	r7,240(sp)
 1003904:	1009c3c0 	call	1009c3c <__sprint_r>
 1003908:	d9c03c17 	ldw	r7,240(sp)
 100390c:	103bd71e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003910:	d8c02017 	ldw	r3,128(sp)
 1003914:	dc401f17 	ldw	r17,124(sp)
 1003918:	dd800404 	addi	r22,sp,16
 100391c:	003fec06 	br	10038d0 <__alt_data_end+0xff8038d0>
 1003920:	9080100c 	andi	r2,r18,64
 1003924:	d8002785 	stb	zero,158(sp)
 1003928:	10010e26 	beq	r2,zero,1003d64 <___vfprintf_internal_r+0x1908>
 100392c:	d9402e17 	ldw	r5,184(sp)
 1003930:	d8c02a17 	ldw	r3,168(sp)
 1003934:	002d883a 	mov	r22,zero
 1003938:	28800104 	addi	r2,r5,4
 100393c:	2cc0000b 	ldhu	r19,0(r5)
 1003940:	183fc90e 	bge	r3,zero,1003868 <__alt_data_end+0xff803868>
 1003944:	d8802e15 	stw	r2,184(sp)
 1003948:	0039883a 	mov	fp,zero
 100394c:	9d84b03a 	or	r2,r19,r22
 1003950:	103c1e1e 	bne	r2,zero,10029cc <__alt_data_end+0xff8029cc>
 1003954:	00800044 	movi	r2,1
 1003958:	003e6c06 	br	100330c <__alt_data_end+0xff80330c>
 100395c:	d9002d17 	ldw	r4,180(sp)
 1003960:	d9801e04 	addi	r6,sp,120
 1003964:	b80b883a 	mov	r5,r23
 1003968:	1009c3c0 	call	1009c3c <__sprint_r>
 100396c:	103bbf1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003970:	d8c02017 	ldw	r3,128(sp)
 1003974:	da000404 	addi	r8,sp,16
 1003978:	d9003217 	ldw	r4,200(sp)
 100397c:	d8802617 	ldw	r2,152(sp)
 1003980:	d9403317 	ldw	r5,204(sp)
 1003984:	8123883a 	add	r17,r16,r4
 1003988:	11400216 	blt	r2,r5,1003994 <___vfprintf_internal_r+0x1538>
 100398c:	9100004c 	andi	r4,r18,1
 1003990:	20000d26 	beq	r4,zero,10039c8 <___vfprintf_internal_r+0x156c>
 1003994:	d9003717 	ldw	r4,220(sp)
 1003998:	d9403417 	ldw	r5,208(sp)
 100399c:	1907883a 	add	r3,r3,r4
 10039a0:	d9001f17 	ldw	r4,124(sp)
 10039a4:	41400015 	stw	r5,0(r8)
 10039a8:	d9403717 	ldw	r5,220(sp)
 10039ac:	21000044 	addi	r4,r4,1
 10039b0:	d8c02015 	stw	r3,128(sp)
 10039b4:	41400115 	stw	r5,4(r8)
 10039b8:	d9001f15 	stw	r4,124(sp)
 10039bc:	014001c4 	movi	r5,7
 10039c0:	2901e816 	blt	r5,r4,1004164 <___vfprintf_internal_r+0x1d08>
 10039c4:	42000204 	addi	r8,r8,8
 10039c8:	d9003317 	ldw	r4,204(sp)
 10039cc:	8121883a 	add	r16,r16,r4
 10039d0:	2085c83a 	sub	r2,r4,r2
 10039d4:	8461c83a 	sub	r16,r16,r17
 10039d8:	1400010e 	bge	r2,r16,10039e0 <___vfprintf_internal_r+0x1584>
 10039dc:	1021883a 	mov	r16,r2
 10039e0:	04000a0e 	bge	zero,r16,1003a0c <___vfprintf_internal_r+0x15b0>
 10039e4:	d9001f17 	ldw	r4,124(sp)
 10039e8:	1c07883a 	add	r3,r3,r16
 10039ec:	44400015 	stw	r17,0(r8)
 10039f0:	21000044 	addi	r4,r4,1
 10039f4:	44000115 	stw	r16,4(r8)
 10039f8:	d8c02015 	stw	r3,128(sp)
 10039fc:	d9001f15 	stw	r4,124(sp)
 1003a00:	014001c4 	movi	r5,7
 1003a04:	2901fb16 	blt	r5,r4,10041f4 <___vfprintf_internal_r+0x1d98>
 1003a08:	42000204 	addi	r8,r8,8
 1003a0c:	8001f716 	blt	r16,zero,10041ec <___vfprintf_internal_r+0x1d90>
 1003a10:	1421c83a 	sub	r16,r2,r16
 1003a14:	043d160e 	bge	zero,r16,1002e70 <__alt_data_end+0xff802e70>
 1003a18:	04400404 	movi	r17,16
 1003a1c:	d8801f17 	ldw	r2,124(sp)
 1003a20:	8c3efb0e 	bge	r17,r16,1003610 <__alt_data_end+0xff803610>
 1003a24:	01404074 	movhi	r5,257
 1003a28:	29486884 	addi	r5,r5,8610
 1003a2c:	d9402c15 	stw	r5,176(sp)
 1003a30:	058001c4 	movi	r22,7
 1003a34:	dcc02d17 	ldw	r19,180(sp)
 1003a38:	00000306 	br	1003a48 <___vfprintf_internal_r+0x15ec>
 1003a3c:	42000204 	addi	r8,r8,8
 1003a40:	843ffc04 	addi	r16,r16,-16
 1003a44:	8c3ef50e 	bge	r17,r16,100361c <__alt_data_end+0xff80361c>
 1003a48:	18c00404 	addi	r3,r3,16
 1003a4c:	10800044 	addi	r2,r2,1
 1003a50:	45000015 	stw	r20,0(r8)
 1003a54:	44400115 	stw	r17,4(r8)
 1003a58:	d8c02015 	stw	r3,128(sp)
 1003a5c:	d8801f15 	stw	r2,124(sp)
 1003a60:	b0bff60e 	bge	r22,r2,1003a3c <__alt_data_end+0xff803a3c>
 1003a64:	d9801e04 	addi	r6,sp,120
 1003a68:	b80b883a 	mov	r5,r23
 1003a6c:	9809883a 	mov	r4,r19
 1003a70:	1009c3c0 	call	1009c3c <__sprint_r>
 1003a74:	103b7d1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003a78:	d8c02017 	ldw	r3,128(sp)
 1003a7c:	d8801f17 	ldw	r2,124(sp)
 1003a80:	da000404 	addi	r8,sp,16
 1003a84:	003fee06 	br	1003a40 <__alt_data_end+0xff803a40>
 1003a88:	9088703a 	and	r4,r18,r2
 1003a8c:	203eab1e 	bne	r4,zero,100353c <__alt_data_end+0xff80353c>
 1003a90:	dc401f17 	ldw	r17,124(sp)
 1003a94:	40800115 	stw	r2,4(r8)
 1003a98:	44000015 	stw	r16,0(r8)
 1003a9c:	8c400044 	addi	r17,r17,1
 1003aa0:	d8c02015 	stw	r3,128(sp)
 1003aa4:	dc401f15 	stw	r17,124(sp)
 1003aa8:	008001c4 	movi	r2,7
 1003aac:	14400e16 	blt	r2,r17,1003ae8 <___vfprintf_internal_r+0x168c>
 1003ab0:	45800204 	addi	r22,r8,8
 1003ab4:	003eca06 	br	10035e0 <__alt_data_end+0xff8035e0>
 1003ab8:	01004074 	movhi	r4,257
 1003abc:	21086884 	addi	r4,r4,8610
 1003ac0:	d9002c15 	stw	r4,176(sp)
 1003ac4:	d8802c17 	ldw	r2,176(sp)
 1003ac8:	1c07883a 	add	r3,r3,r16
 1003acc:	8c400044 	addi	r17,r17,1
 1003ad0:	b0800015 	stw	r2,0(r22)
 1003ad4:	b4000115 	stw	r16,4(r22)
 1003ad8:	d8c02015 	stw	r3,128(sp)
 1003adc:	dc401f15 	stw	r17,124(sp)
 1003ae0:	008001c4 	movi	r2,7
 1003ae4:	147ebd0e 	bge	r2,r17,10035dc <__alt_data_end+0xff8035dc>
 1003ae8:	d9002d17 	ldw	r4,180(sp)
 1003aec:	d9801e04 	addi	r6,sp,120
 1003af0:	b80b883a 	mov	r5,r23
 1003af4:	1009c3c0 	call	1009c3c <__sprint_r>
 1003af8:	103b5c1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003afc:	d8c02017 	ldw	r3,128(sp)
 1003b00:	dc401f17 	ldw	r17,124(sp)
 1003b04:	dd800404 	addi	r22,sp,16
 1003b08:	003eb506 	br	10035e0 <__alt_data_end+0xff8035e0>
 1003b0c:	d9002d17 	ldw	r4,180(sp)
 1003b10:	d9801e04 	addi	r6,sp,120
 1003b14:	b80b883a 	mov	r5,r23
 1003b18:	1009c3c0 	call	1009c3c <__sprint_r>
 1003b1c:	103b531e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003b20:	d8c02017 	ldw	r3,128(sp)
 1003b24:	dc401f17 	ldw	r17,124(sp)
 1003b28:	da000404 	addi	r8,sp,16
 1003b2c:	003e8d06 	br	1003564 <__alt_data_end+0xff803564>
 1003b30:	d9002d17 	ldw	r4,180(sp)
 1003b34:	d9801e04 	addi	r6,sp,120
 1003b38:	b80b883a 	mov	r5,r23
 1003b3c:	1009c3c0 	call	1009c3c <__sprint_r>
 1003b40:	103b4a1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003b44:	d8c02017 	ldw	r3,128(sp)
 1003b48:	dc401f17 	ldw	r17,124(sp)
 1003b4c:	dd800404 	addi	r22,sp,16
 1003b50:	003e8f06 	br	1003590 <__alt_data_end+0xff803590>
 1003b54:	0027883a 	mov	r19,zero
 1003b58:	003f4a06 	br	1003884 <__alt_data_end+0xff803884>
 1003b5c:	d9002d17 	ldw	r4,180(sp)
 1003b60:	d9801e04 	addi	r6,sp,120
 1003b64:	b80b883a 	mov	r5,r23
 1003b68:	1009c3c0 	call	1009c3c <__sprint_r>
 1003b6c:	103b3f1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003b70:	d8c02017 	ldw	r3,128(sp)
 1003b74:	da000404 	addi	r8,sp,16
 1003b78:	003c7b06 	br	1002d68 <__alt_data_end+0xff802d68>
 1003b7c:	d9402a17 	ldw	r5,168(sp)
 1003b80:	04e7c83a 	sub	r19,zero,r19
 1003b84:	07000b44 	movi	fp,45
 1003b88:	9804c03a 	cmpne	r2,r19,zero
 1003b8c:	05adc83a 	sub	r22,zero,r22
 1003b90:	df002785 	stb	fp,158(sp)
 1003b94:	b0adc83a 	sub	r22,r22,r2
 1003b98:	28017b16 	blt	r5,zero,1004188 <___vfprintf_internal_r+0x1d2c>
 1003b9c:	00bfdfc4 	movi	r2,-129
 1003ba0:	90a4703a 	and	r18,r18,r2
 1003ba4:	003b8906 	br	10029cc <__alt_data_end+0xff8029cc>
 1003ba8:	d9003617 	ldw	r4,216(sp)
 1003bac:	d9403817 	ldw	r5,224(sp)
 1003bb0:	da003d15 	stw	r8,244(sp)
 1003bb4:	10098600 	call	1009860 <__fpclassifyd>
 1003bb8:	da003d17 	ldw	r8,244(sp)
 1003bbc:	1000f026 	beq	r2,zero,1003f80 <___vfprintf_internal_r+0x1b24>
 1003bc0:	d9002a17 	ldw	r4,168(sp)
 1003bc4:	05bff7c4 	movi	r22,-33
 1003bc8:	00bfffc4 	movi	r2,-1
 1003bcc:	8dac703a 	and	r22,r17,r22
 1003bd0:	20820026 	beq	r4,r2,10043d4 <___vfprintf_internal_r+0x1f78>
 1003bd4:	008011c4 	movi	r2,71
 1003bd8:	b081f726 	beq	r22,r2,10043b8 <___vfprintf_internal_r+0x1f5c>
 1003bdc:	d9003817 	ldw	r4,224(sp)
 1003be0:	90c04014 	ori	r3,r18,256
 1003be4:	d8c02c15 	stw	r3,176(sp)
 1003be8:	20021516 	blt	r4,zero,1004440 <___vfprintf_internal_r+0x1fe4>
 1003bec:	dcc03817 	ldw	r19,224(sp)
 1003bf0:	d8002905 	stb	zero,164(sp)
 1003bf4:	00801984 	movi	r2,102
 1003bf8:	8881f926 	beq	r17,r2,10043e0 <___vfprintf_internal_r+0x1f84>
 1003bfc:	00801184 	movi	r2,70
 1003c00:	88821c26 	beq	r17,r2,1004474 <___vfprintf_internal_r+0x2018>
 1003c04:	00801144 	movi	r2,69
 1003c08:	b081ef26 	beq	r22,r2,10043c8 <___vfprintf_internal_r+0x1f6c>
 1003c0c:	d8c02a17 	ldw	r3,168(sp)
 1003c10:	d8802104 	addi	r2,sp,132
 1003c14:	d8800315 	stw	r2,12(sp)
 1003c18:	d9403617 	ldw	r5,216(sp)
 1003c1c:	d8802504 	addi	r2,sp,148
 1003c20:	d9002d17 	ldw	r4,180(sp)
 1003c24:	d8800215 	stw	r2,8(sp)
 1003c28:	d8802604 	addi	r2,sp,152
 1003c2c:	d8c00015 	stw	r3,0(sp)
 1003c30:	d8800115 	stw	r2,4(sp)
 1003c34:	01c00084 	movi	r7,2
 1003c38:	980d883a 	mov	r6,r19
 1003c3c:	d8c03c15 	stw	r3,240(sp)
 1003c40:	da003d15 	stw	r8,244(sp)
 1003c44:	1004b8c0 	call	1004b8c <_dtoa_r>
 1003c48:	1021883a 	mov	r16,r2
 1003c4c:	008019c4 	movi	r2,103
 1003c50:	d8c03c17 	ldw	r3,240(sp)
 1003c54:	da003d17 	ldw	r8,244(sp)
 1003c58:	88817126 	beq	r17,r2,1004220 <___vfprintf_internal_r+0x1dc4>
 1003c5c:	008011c4 	movi	r2,71
 1003c60:	88829126 	beq	r17,r2,10046a8 <___vfprintf_internal_r+0x224c>
 1003c64:	80f9883a 	add	fp,r16,r3
 1003c68:	d9003617 	ldw	r4,216(sp)
 1003c6c:	000d883a 	mov	r6,zero
 1003c70:	000f883a 	mov	r7,zero
 1003c74:	980b883a 	mov	r5,r19
 1003c78:	da003d15 	stw	r8,244(sp)
 1003c7c:	100db9c0 	call	100db9c <__eqdf2>
 1003c80:	da003d17 	ldw	r8,244(sp)
 1003c84:	10018d26 	beq	r2,zero,10042bc <___vfprintf_internal_r+0x1e60>
 1003c88:	d8802117 	ldw	r2,132(sp)
 1003c8c:	1700062e 	bgeu	r2,fp,1003ca8 <___vfprintf_internal_r+0x184c>
 1003c90:	01000c04 	movi	r4,48
 1003c94:	10c00044 	addi	r3,r2,1
 1003c98:	d8c02115 	stw	r3,132(sp)
 1003c9c:	11000005 	stb	r4,0(r2)
 1003ca0:	d8802117 	ldw	r2,132(sp)
 1003ca4:	173ffb36 	bltu	r2,fp,1003c94 <__alt_data_end+0xff803c94>
 1003ca8:	1405c83a 	sub	r2,r2,r16
 1003cac:	d8803315 	stw	r2,204(sp)
 1003cb0:	008011c4 	movi	r2,71
 1003cb4:	b0817626 	beq	r22,r2,1004290 <___vfprintf_internal_r+0x1e34>
 1003cb8:	00801944 	movi	r2,101
 1003cbc:	1442800e 	bge	r2,r17,10046c0 <___vfprintf_internal_r+0x2264>
 1003cc0:	d8c02617 	ldw	r3,152(sp)
 1003cc4:	00801984 	movi	r2,102
 1003cc8:	d8c03215 	stw	r3,200(sp)
 1003ccc:	8881fe26 	beq	r17,r2,10044c8 <___vfprintf_internal_r+0x206c>
 1003cd0:	d8c03217 	ldw	r3,200(sp)
 1003cd4:	d9003317 	ldw	r4,204(sp)
 1003cd8:	1901dd16 	blt	r3,r4,1004450 <___vfprintf_internal_r+0x1ff4>
 1003cdc:	9480004c 	andi	r18,r18,1
 1003ce0:	90022b1e 	bne	r18,zero,1004590 <___vfprintf_internal_r+0x2134>
 1003ce4:	1805883a 	mov	r2,r3
 1003ce8:	18028316 	blt	r3,zero,10046f8 <___vfprintf_internal_r+0x229c>
 1003cec:	d8c03217 	ldw	r3,200(sp)
 1003cf0:	044019c4 	movi	r17,103
 1003cf4:	d8c02b15 	stw	r3,172(sp)
 1003cf8:	df002907 	ldb	fp,164(sp)
 1003cfc:	e001531e 	bne	fp,zero,100424c <___vfprintf_internal_r+0x1df0>
 1003d00:	df002783 	ldbu	fp,158(sp)
 1003d04:	d8802915 	stw	r2,164(sp)
 1003d08:	dc802c17 	ldw	r18,176(sp)
 1003d0c:	d8002a15 	stw	zero,168(sp)
 1003d10:	003baf06 	br	1002bd0 <__alt_data_end+0xff802bd0>
 1003d14:	d8c02e17 	ldw	r3,184(sp)
 1003d18:	d9002e17 	ldw	r4,184(sp)
 1003d1c:	d9402e17 	ldw	r5,184(sp)
 1003d20:	18c00017 	ldw	r3,0(r3)
 1003d24:	21000117 	ldw	r4,4(r4)
 1003d28:	29400204 	addi	r5,r5,8
 1003d2c:	d8c03615 	stw	r3,216(sp)
 1003d30:	d9003815 	stw	r4,224(sp)
 1003d34:	d9402e15 	stw	r5,184(sp)
 1003d38:	003b5006 	br	1002a7c <__alt_data_end+0xff802a7c>
 1003d3c:	ac400007 	ldb	r17,0(r21)
 1003d40:	003a2806 	br	10025e4 <__alt_data_end+0xff8025e4>
 1003d44:	9080100c 	andi	r2,r18,64
 1003d48:	1000a826 	beq	r2,zero,1003fec <___vfprintf_internal_r+0x1b90>
 1003d4c:	d8c02e17 	ldw	r3,184(sp)
 1003d50:	002d883a 	mov	r22,zero
 1003d54:	1cc0000b 	ldhu	r19,0(r3)
 1003d58:	18c00104 	addi	r3,r3,4
 1003d5c:	d8c02e15 	stw	r3,184(sp)
 1003d60:	003caf06 	br	1003020 <__alt_data_end+0xff803020>
 1003d64:	d9002e17 	ldw	r4,184(sp)
 1003d68:	d9402a17 	ldw	r5,168(sp)
 1003d6c:	002d883a 	mov	r22,zero
 1003d70:	20800104 	addi	r2,r4,4
 1003d74:	24c00017 	ldw	r19,0(r4)
 1003d78:	283ebb0e 	bge	r5,zero,1003868 <__alt_data_end+0xff803868>
 1003d7c:	003ef106 	br	1003944 <__alt_data_end+0xff803944>
 1003d80:	9080040c 	andi	r2,r18,16
 1003d84:	1000921e 	bne	r2,zero,1003fd0 <___vfprintf_internal_r+0x1b74>
 1003d88:	9480100c 	andi	r18,r18,64
 1003d8c:	90013926 	beq	r18,zero,1004274 <___vfprintf_internal_r+0x1e18>
 1003d90:	d9402e17 	ldw	r5,184(sp)
 1003d94:	d8c02f17 	ldw	r3,188(sp)
 1003d98:	28800017 	ldw	r2,0(r5)
 1003d9c:	29400104 	addi	r5,r5,4
 1003da0:	d9402e15 	stw	r5,184(sp)
 1003da4:	10c0000d 	sth	r3,0(r2)
 1003da8:	0039e406 	br	100253c <__alt_data_end+0xff80253c>
 1003dac:	9080100c 	andi	r2,r18,64
 1003db0:	10008026 	beq	r2,zero,1003fb4 <___vfprintf_internal_r+0x1b58>
 1003db4:	d8802e17 	ldw	r2,184(sp)
 1003db8:	14c0000f 	ldh	r19,0(r2)
 1003dbc:	10800104 	addi	r2,r2,4
 1003dc0:	d8802e15 	stw	r2,184(sp)
 1003dc4:	982dd7fa 	srai	r22,r19,31
 1003dc8:	b005883a 	mov	r2,r22
 1003dcc:	003af706 	br	10029ac <__alt_data_end+0xff8029ac>
 1003dd0:	9080100c 	andi	r2,r18,64
 1003dd4:	d8002785 	stb	zero,158(sp)
 1003dd8:	10008a1e 	bne	r2,zero,1004004 <___vfprintf_internal_r+0x1ba8>
 1003ddc:	d9002e17 	ldw	r4,184(sp)
 1003de0:	d9402a17 	ldw	r5,168(sp)
 1003de4:	002d883a 	mov	r22,zero
 1003de8:	20800104 	addi	r2,r4,4
 1003dec:	24c00017 	ldw	r19,0(r4)
 1003df0:	283e4b0e 	bge	r5,zero,1003720 <__alt_data_end+0xff803720>
 1003df4:	9d86b03a 	or	r3,r19,r22
 1003df8:	d8802e15 	stw	r2,184(sp)
 1003dfc:	183e4c1e 	bne	r3,zero,1003730 <__alt_data_end+0xff803730>
 1003e00:	0039883a 	mov	fp,zero
 1003e04:	0005883a 	mov	r2,zero
 1003e08:	003d4006 	br	100330c <__alt_data_end+0xff80330c>
 1003e0c:	01404074 	movhi	r5,257
 1003e10:	29486884 	addi	r5,r5,8610
 1003e14:	d9402c15 	stw	r5,176(sp)
 1003e18:	d9402c17 	ldw	r5,176(sp)
 1003e1c:	1c47883a 	add	r3,r3,r17
 1003e20:	10800044 	addi	r2,r2,1
 1003e24:	41400015 	stw	r5,0(r8)
 1003e28:	44400115 	stw	r17,4(r8)
 1003e2c:	d8c02015 	stw	r3,128(sp)
 1003e30:	d8801f15 	stw	r2,124(sp)
 1003e34:	010001c4 	movi	r4,7
 1003e38:	20bec816 	blt	r4,r2,100395c <__alt_data_end+0xff80395c>
 1003e3c:	42000204 	addi	r8,r8,8
 1003e40:	003ecd06 	br	1003978 <__alt_data_end+0xff803978>
 1003e44:	d9002a17 	ldw	r4,168(sp)
 1003e48:	d8002785 	stb	zero,158(sp)
 1003e4c:	203d2d16 	blt	r4,zero,1003304 <__alt_data_end+0xff803304>
 1003e50:	00bfdfc4 	movi	r2,-129
 1003e54:	90a4703a 	and	r18,r18,r2
 1003e58:	003a6106 	br	10027e0 <__alt_data_end+0xff8027e0>
 1003e5c:	01004074 	movhi	r4,257
 1003e60:	21086884 	addi	r4,r4,8610
 1003e64:	d9002c15 	stw	r4,176(sp)
 1003e68:	003bea06 	br	1002e14 <__alt_data_end+0xff802e14>
 1003e6c:	d9002d17 	ldw	r4,180(sp)
 1003e70:	d9801e04 	addi	r6,sp,120
 1003e74:	b80b883a 	mov	r5,r23
 1003e78:	1009c3c0 	call	1009c3c <__sprint_r>
 1003e7c:	103a7b1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003e80:	d8c02017 	ldw	r3,128(sp)
 1003e84:	da000404 	addi	r8,sp,16
 1003e88:	003d4106 	br	1003390 <__alt_data_end+0xff803390>
 1003e8c:	d8801f17 	ldw	r2,124(sp)
 1003e90:	01404074 	movhi	r5,257
 1003e94:	01000044 	movi	r4,1
 1003e98:	18c00044 	addi	r3,r3,1
 1003e9c:	10800044 	addi	r2,r2,1
 1003ea0:	29486804 	addi	r5,r5,8608
 1003ea4:	41000115 	stw	r4,4(r8)
 1003ea8:	41400015 	stw	r5,0(r8)
 1003eac:	d8c02015 	stw	r3,128(sp)
 1003eb0:	d8801f15 	stw	r2,124(sp)
 1003eb4:	010001c4 	movi	r4,7
 1003eb8:	20805c16 	blt	r4,r2,100402c <___vfprintf_internal_r+0x1bd0>
 1003ebc:	42000204 	addi	r8,r8,8
 1003ec0:	8800041e 	bne	r17,zero,1003ed4 <___vfprintf_internal_r+0x1a78>
 1003ec4:	d8803317 	ldw	r2,204(sp)
 1003ec8:	1000021e 	bne	r2,zero,1003ed4 <___vfprintf_internal_r+0x1a78>
 1003ecc:	9080004c 	andi	r2,r18,1
 1003ed0:	103be726 	beq	r2,zero,1002e70 <__alt_data_end+0xff802e70>
 1003ed4:	d9003717 	ldw	r4,220(sp)
 1003ed8:	d8801f17 	ldw	r2,124(sp)
 1003edc:	d9403417 	ldw	r5,208(sp)
 1003ee0:	20c7883a 	add	r3,r4,r3
 1003ee4:	10800044 	addi	r2,r2,1
 1003ee8:	41000115 	stw	r4,4(r8)
 1003eec:	41400015 	stw	r5,0(r8)
 1003ef0:	d8c02015 	stw	r3,128(sp)
 1003ef4:	d8801f15 	stw	r2,124(sp)
 1003ef8:	010001c4 	movi	r4,7
 1003efc:	20812116 	blt	r4,r2,1004384 <___vfprintf_internal_r+0x1f28>
 1003f00:	42000204 	addi	r8,r8,8
 1003f04:	0463c83a 	sub	r17,zero,r17
 1003f08:	0440730e 	bge	zero,r17,10040d8 <___vfprintf_internal_r+0x1c7c>
 1003f0c:	05800404 	movi	r22,16
 1003f10:	b440860e 	bge	r22,r17,100412c <___vfprintf_internal_r+0x1cd0>
 1003f14:	01404074 	movhi	r5,257
 1003f18:	29486884 	addi	r5,r5,8610
 1003f1c:	d9402c15 	stw	r5,176(sp)
 1003f20:	070001c4 	movi	fp,7
 1003f24:	dcc02d17 	ldw	r19,180(sp)
 1003f28:	00000306 	br	1003f38 <___vfprintf_internal_r+0x1adc>
 1003f2c:	42000204 	addi	r8,r8,8
 1003f30:	8c7ffc04 	addi	r17,r17,-16
 1003f34:	b440800e 	bge	r22,r17,1004138 <___vfprintf_internal_r+0x1cdc>
 1003f38:	18c00404 	addi	r3,r3,16
 1003f3c:	10800044 	addi	r2,r2,1
 1003f40:	45000015 	stw	r20,0(r8)
 1003f44:	45800115 	stw	r22,4(r8)
 1003f48:	d8c02015 	stw	r3,128(sp)
 1003f4c:	d8801f15 	stw	r2,124(sp)
 1003f50:	e0bff60e 	bge	fp,r2,1003f2c <__alt_data_end+0xff803f2c>
 1003f54:	d9801e04 	addi	r6,sp,120
 1003f58:	b80b883a 	mov	r5,r23
 1003f5c:	9809883a 	mov	r4,r19
 1003f60:	1009c3c0 	call	1009c3c <__sprint_r>
 1003f64:	103a411e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1003f68:	d8c02017 	ldw	r3,128(sp)
 1003f6c:	d8801f17 	ldw	r2,124(sp)
 1003f70:	da000404 	addi	r8,sp,16
 1003f74:	003fee06 	br	1003f30 <__alt_data_end+0xff803f30>
 1003f78:	00bfffc4 	movi	r2,-1
 1003f7c:	003a3f06 	br	100287c <__alt_data_end+0xff80287c>
 1003f80:	008011c4 	movi	r2,71
 1003f84:	1440b816 	blt	r2,r17,1004268 <___vfprintf_internal_r+0x1e0c>
 1003f88:	04004074 	movhi	r16,257
 1003f8c:	84085a04 	addi	r16,r16,8552
 1003f90:	00c000c4 	movi	r3,3
 1003f94:	00bfdfc4 	movi	r2,-129
 1003f98:	d8c02915 	stw	r3,164(sp)
 1003f9c:	90a4703a 	and	r18,r18,r2
 1003fa0:	df002783 	ldbu	fp,158(sp)
 1003fa4:	d8c02b15 	stw	r3,172(sp)
 1003fa8:	d8002a15 	stw	zero,168(sp)
 1003fac:	d8003215 	stw	zero,200(sp)
 1003fb0:	003b0706 	br	1002bd0 <__alt_data_end+0xff802bd0>
 1003fb4:	d8c02e17 	ldw	r3,184(sp)
 1003fb8:	1cc00017 	ldw	r19,0(r3)
 1003fbc:	18c00104 	addi	r3,r3,4
 1003fc0:	d8c02e15 	stw	r3,184(sp)
 1003fc4:	982dd7fa 	srai	r22,r19,31
 1003fc8:	b005883a 	mov	r2,r22
 1003fcc:	003a7706 	br	10029ac <__alt_data_end+0xff8029ac>
 1003fd0:	d8c02e17 	ldw	r3,184(sp)
 1003fd4:	d9002f17 	ldw	r4,188(sp)
 1003fd8:	18800017 	ldw	r2,0(r3)
 1003fdc:	18c00104 	addi	r3,r3,4
 1003fe0:	d8c02e15 	stw	r3,184(sp)
 1003fe4:	11000015 	stw	r4,0(r2)
 1003fe8:	00395406 	br	100253c <__alt_data_end+0xff80253c>
 1003fec:	d9002e17 	ldw	r4,184(sp)
 1003ff0:	002d883a 	mov	r22,zero
 1003ff4:	24c00017 	ldw	r19,0(r4)
 1003ff8:	21000104 	addi	r4,r4,4
 1003ffc:	d9002e15 	stw	r4,184(sp)
 1004000:	003c0706 	br	1003020 <__alt_data_end+0xff803020>
 1004004:	d9402e17 	ldw	r5,184(sp)
 1004008:	d8c02a17 	ldw	r3,168(sp)
 100400c:	002d883a 	mov	r22,zero
 1004010:	28800104 	addi	r2,r5,4
 1004014:	2cc0000b 	ldhu	r19,0(r5)
 1004018:	183dc10e 	bge	r3,zero,1003720 <__alt_data_end+0xff803720>
 100401c:	003f7506 	br	1003df4 <__alt_data_end+0xff803df4>
 1004020:	04004074 	movhi	r16,257
 1004024:	84085804 	addi	r16,r16,8544
 1004028:	003aa706 	br	1002ac8 <__alt_data_end+0xff802ac8>
 100402c:	d9002d17 	ldw	r4,180(sp)
 1004030:	d9801e04 	addi	r6,sp,120
 1004034:	b80b883a 	mov	r5,r23
 1004038:	1009c3c0 	call	1009c3c <__sprint_r>
 100403c:	103a0b1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1004040:	dc402617 	ldw	r17,152(sp)
 1004044:	d8c02017 	ldw	r3,128(sp)
 1004048:	da000404 	addi	r8,sp,16
 100404c:	003f9c06 	br	1003ec0 <__alt_data_end+0xff803ec0>
 1004050:	ac400043 	ldbu	r17,1(r21)
 1004054:	84000814 	ori	r16,r16,32
 1004058:	ad400044 	addi	r21,r21,1
 100405c:	8c403fcc 	andi	r17,r17,255
 1004060:	8c40201c 	xori	r17,r17,128
 1004064:	8c7fe004 	addi	r17,r17,-128
 1004068:	00395e06 	br	10025e4 <__alt_data_end+0xff8025e4>
 100406c:	d8c02e15 	stw	r3,184(sp)
 1004070:	0039883a 	mov	fp,zero
 1004074:	003e3506 	br	100394c <__alt_data_end+0xff80394c>
 1004078:	d9002d17 	ldw	r4,180(sp)
 100407c:	d9801e04 	addi	r6,sp,120
 1004080:	b80b883a 	mov	r5,r23
 1004084:	1009c3c0 	call	1009c3c <__sprint_r>
 1004088:	1039f81e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 100408c:	d8c02017 	ldw	r3,128(sp)
 1004090:	da000404 	addi	r8,sp,16
 1004094:	003cd006 	br	10033d8 <__alt_data_end+0xff8033d8>
 1004098:	8009883a 	mov	r4,r16
 100409c:	df003d15 	stw	fp,244(sp)
 10040a0:	10023c40 	call	10023c4 <strlen>
 10040a4:	d8802b15 	stw	r2,172(sp)
 10040a8:	da003d17 	ldw	r8,244(sp)
 10040ac:	103c200e 	bge	r2,zero,1003130 <__alt_data_end+0xff803130>
 10040b0:	0005883a 	mov	r2,zero
 10040b4:	003c1e06 	br	1003130 <__alt_data_end+0xff803130>
 10040b8:	d9002d17 	ldw	r4,180(sp)
 10040bc:	d9801e04 	addi	r6,sp,120
 10040c0:	b80b883a 	mov	r5,r23
 10040c4:	1009c3c0 	call	1009c3c <__sprint_r>
 10040c8:	1039e81e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 10040cc:	d8c02017 	ldw	r3,128(sp)
 10040d0:	d8801f17 	ldw	r2,124(sp)
 10040d4:	da000404 	addi	r8,sp,16
 10040d8:	d9403317 	ldw	r5,204(sp)
 10040dc:	10800044 	addi	r2,r2,1
 10040e0:	44000015 	stw	r16,0(r8)
 10040e4:	28c7883a 	add	r3,r5,r3
 10040e8:	003b5b06 	br	1002e58 <__alt_data_end+0xff802e58>
 10040ec:	01004074 	movhi	r4,257
 10040f0:	21086c84 	addi	r4,r4,8626
 10040f4:	d9003515 	stw	r4,212(sp)
 10040f8:	003af206 	br	1002cc4 <__alt_data_end+0xff802cc4>
 10040fc:	013fffc4 	movi	r4,-1
 1004100:	003a0806 	br	1002924 <__alt_data_end+0xff802924>
 1004104:	0023883a 	mov	r17,zero
 1004108:	003d9d06 	br	1003780 <__alt_data_end+0xff803780>
 100410c:	d9002d17 	ldw	r4,180(sp)
 1004110:	d9801e04 	addi	r6,sp,120
 1004114:	b80b883a 	mov	r5,r23
 1004118:	1009c3c0 	call	1009c3c <__sprint_r>
 100411c:	1039d31e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1004120:	d8c02017 	ldw	r3,128(sp)
 1004124:	da000404 	addi	r8,sp,16
 1004128:	003d9406 	br	100377c <__alt_data_end+0xff80377c>
 100412c:	01004074 	movhi	r4,257
 1004130:	21086884 	addi	r4,r4,8610
 1004134:	d9002c15 	stw	r4,176(sp)
 1004138:	d9002c17 	ldw	r4,176(sp)
 100413c:	1c47883a 	add	r3,r3,r17
 1004140:	10800044 	addi	r2,r2,1
 1004144:	41000015 	stw	r4,0(r8)
 1004148:	44400115 	stw	r17,4(r8)
 100414c:	d8c02015 	stw	r3,128(sp)
 1004150:	d8801f15 	stw	r2,124(sp)
 1004154:	010001c4 	movi	r4,7
 1004158:	20bfd716 	blt	r4,r2,10040b8 <__alt_data_end+0xff8040b8>
 100415c:	42000204 	addi	r8,r8,8
 1004160:	003fdd06 	br	10040d8 <__alt_data_end+0xff8040d8>
 1004164:	d9002d17 	ldw	r4,180(sp)
 1004168:	d9801e04 	addi	r6,sp,120
 100416c:	b80b883a 	mov	r5,r23
 1004170:	1009c3c0 	call	1009c3c <__sprint_r>
 1004174:	1039bd1e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1004178:	d8802617 	ldw	r2,152(sp)
 100417c:	d8c02017 	ldw	r3,128(sp)
 1004180:	da000404 	addi	r8,sp,16
 1004184:	003e1006 	br	10039c8 <__alt_data_end+0xff8039c8>
 1004188:	00800044 	movi	r2,1
 100418c:	10803fcc 	andi	r2,r2,255
 1004190:	00c00044 	movi	r3,1
 1004194:	10fa0d26 	beq	r2,r3,10029cc <__alt_data_end+0xff8029cc>
 1004198:	00c00084 	movi	r3,2
 100419c:	10fbaf26 	beq	r2,r3,100305c <__alt_data_end+0xff80305c>
 10041a0:	003a6d06 	br	1002b58 <__alt_data_end+0xff802b58>
 10041a4:	01004074 	movhi	r4,257
 10041a8:	21086c84 	addi	r4,r4,8626
 10041ac:	d9003515 	stw	r4,212(sp)
 10041b0:	003b5406 	br	1002f04 <__alt_data_end+0xff802f04>
 10041b4:	d8802a17 	ldw	r2,168(sp)
 10041b8:	00c00184 	movi	r3,6
 10041bc:	1880012e 	bgeu	r3,r2,10041c4 <___vfprintf_internal_r+0x1d68>
 10041c0:	1805883a 	mov	r2,r3
 10041c4:	d8802b15 	stw	r2,172(sp)
 10041c8:	1000ef16 	blt	r2,zero,1004588 <___vfprintf_internal_r+0x212c>
 10041cc:	04004074 	movhi	r16,257
 10041d0:	d8802915 	stw	r2,164(sp)
 10041d4:	dcc02e15 	stw	r19,184(sp)
 10041d8:	d8002a15 	stw	zero,168(sp)
 10041dc:	d8003215 	stw	zero,200(sp)
 10041e0:	84086604 	addi	r16,r16,8600
 10041e4:	0039883a 	mov	fp,zero
 10041e8:	003a8006 	br	1002bec <__alt_data_end+0xff802bec>
 10041ec:	0021883a 	mov	r16,zero
 10041f0:	003e0706 	br	1003a10 <__alt_data_end+0xff803a10>
 10041f4:	d9002d17 	ldw	r4,180(sp)
 10041f8:	d9801e04 	addi	r6,sp,120
 10041fc:	b80b883a 	mov	r5,r23
 1004200:	1009c3c0 	call	1009c3c <__sprint_r>
 1004204:	1039991e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1004208:	d8802617 	ldw	r2,152(sp)
 100420c:	d9403317 	ldw	r5,204(sp)
 1004210:	d8c02017 	ldw	r3,128(sp)
 1004214:	da000404 	addi	r8,sp,16
 1004218:	2885c83a 	sub	r2,r5,r2
 100421c:	003dfb06 	br	1003a0c <__alt_data_end+0xff803a0c>
 1004220:	9080004c 	andi	r2,r18,1
 1004224:	103e8f1e 	bne	r2,zero,1003c64 <__alt_data_end+0xff803c64>
 1004228:	d8802117 	ldw	r2,132(sp)
 100422c:	003e9e06 	br	1003ca8 <__alt_data_end+0xff803ca8>
 1004230:	1025883a 	mov	r18,r2
 1004234:	0039883a 	mov	fp,zero
 1004238:	00800084 	movi	r2,2
 100423c:	003fd306 	br	100418c <__alt_data_end+0xff80418c>
 1004240:	07000b44 	movi	fp,45
 1004244:	df002785 	stb	fp,158(sp)
 1004248:	003a1b06 	br	1002ab8 <__alt_data_end+0xff802ab8>
 100424c:	00c00b44 	movi	r3,45
 1004250:	d8c02785 	stb	r3,158(sp)
 1004254:	d8802915 	stw	r2,164(sp)
 1004258:	dc802c17 	ldw	r18,176(sp)
 100425c:	d8002a15 	stw	zero,168(sp)
 1004260:	07000b44 	movi	fp,45
 1004264:	003a5e06 	br	1002be0 <__alt_data_end+0xff802be0>
 1004268:	04004074 	movhi	r16,257
 100426c:	84085b04 	addi	r16,r16,8556
 1004270:	003f4706 	br	1003f90 <__alt_data_end+0xff803f90>
 1004274:	d9002e17 	ldw	r4,184(sp)
 1004278:	d9402f17 	ldw	r5,188(sp)
 100427c:	20800017 	ldw	r2,0(r4)
 1004280:	21000104 	addi	r4,r4,4
 1004284:	d9002e15 	stw	r4,184(sp)
 1004288:	11400015 	stw	r5,0(r2)
 100428c:	0038ab06 	br	100253c <__alt_data_end+0xff80253c>
 1004290:	dd802617 	ldw	r22,152(sp)
 1004294:	00bfff44 	movi	r2,-3
 1004298:	b0801c16 	blt	r22,r2,100430c <___vfprintf_internal_r+0x1eb0>
 100429c:	d9402a17 	ldw	r5,168(sp)
 10042a0:	2d801a16 	blt	r5,r22,100430c <___vfprintf_internal_r+0x1eb0>
 10042a4:	dd803215 	stw	r22,200(sp)
 10042a8:	003e8906 	br	1003cd0 <__alt_data_end+0xff803cd0>
 10042ac:	01004074 	movhi	r4,257
 10042b0:	21086884 	addi	r4,r4,8610
 10042b4:	d9002c15 	stw	r4,176(sp)
 10042b8:	003c9106 	br	1003500 <__alt_data_end+0xff803500>
 10042bc:	e005883a 	mov	r2,fp
 10042c0:	003e7906 	br	1003ca8 <__alt_data_end+0xff803ca8>
 10042c4:	d9002a17 	ldw	r4,168(sp)
 10042c8:	df002783 	ldbu	fp,158(sp)
 10042cc:	dcc02e15 	stw	r19,184(sp)
 10042d0:	d9002915 	stw	r4,164(sp)
 10042d4:	d9002b15 	stw	r4,172(sp)
 10042d8:	d8002a15 	stw	zero,168(sp)
 10042dc:	d8003215 	stw	zero,200(sp)
 10042e0:	003a3b06 	br	1002bd0 <__alt_data_end+0xff802bd0>
 10042e4:	9080004c 	andi	r2,r18,1
 10042e8:	0039883a 	mov	fp,zero
 10042ec:	10000426 	beq	r2,zero,1004300 <___vfprintf_internal_r+0x1ea4>
 10042f0:	00800c04 	movi	r2,48
 10042f4:	dc001dc4 	addi	r16,sp,119
 10042f8:	d8801dc5 	stb	r2,119(sp)
 10042fc:	003b6406 	br	1003090 <__alt_data_end+0xff803090>
 1004300:	d8002b15 	stw	zero,172(sp)
 1004304:	dc001e04 	addi	r16,sp,120
 1004308:	003a2b06 	br	1002bb8 <__alt_data_end+0xff802bb8>
 100430c:	8c7fff84 	addi	r17,r17,-2
 1004310:	b5bfffc4 	addi	r22,r22,-1
 1004314:	dd802615 	stw	r22,152(sp)
 1004318:	dc4022c5 	stb	r17,139(sp)
 100431c:	b000bf16 	blt	r22,zero,100461c <___vfprintf_internal_r+0x21c0>
 1004320:	00800ac4 	movi	r2,43
 1004324:	d8802305 	stb	r2,140(sp)
 1004328:	00800244 	movi	r2,9
 100432c:	15807016 	blt	r2,r22,10044f0 <___vfprintf_internal_r+0x2094>
 1004330:	00800c04 	movi	r2,48
 1004334:	b5800c04 	addi	r22,r22,48
 1004338:	d8802345 	stb	r2,141(sp)
 100433c:	dd802385 	stb	r22,142(sp)
 1004340:	d88023c4 	addi	r2,sp,143
 1004344:	df0022c4 	addi	fp,sp,139
 1004348:	d8c03317 	ldw	r3,204(sp)
 100434c:	1739c83a 	sub	fp,r2,fp
 1004350:	d9003317 	ldw	r4,204(sp)
 1004354:	e0c7883a 	add	r3,fp,r3
 1004358:	df003a15 	stw	fp,232(sp)
 100435c:	d8c02b15 	stw	r3,172(sp)
 1004360:	00800044 	movi	r2,1
 1004364:	1100b30e 	bge	r2,r4,1004634 <___vfprintf_internal_r+0x21d8>
 1004368:	d8c02b17 	ldw	r3,172(sp)
 100436c:	18c00044 	addi	r3,r3,1
 1004370:	d8c02b15 	stw	r3,172(sp)
 1004374:	1805883a 	mov	r2,r3
 1004378:	1800ac16 	blt	r3,zero,100462c <___vfprintf_internal_r+0x21d0>
 100437c:	d8003215 	stw	zero,200(sp)
 1004380:	003e5d06 	br	1003cf8 <__alt_data_end+0xff803cf8>
 1004384:	d9002d17 	ldw	r4,180(sp)
 1004388:	d9801e04 	addi	r6,sp,120
 100438c:	b80b883a 	mov	r5,r23
 1004390:	1009c3c0 	call	1009c3c <__sprint_r>
 1004394:	1039351e 	bne	r2,zero,100286c <__alt_data_end+0xff80286c>
 1004398:	dc402617 	ldw	r17,152(sp)
 100439c:	d8c02017 	ldw	r3,128(sp)
 10043a0:	d8801f17 	ldw	r2,124(sp)
 10043a4:	da000404 	addi	r8,sp,16
 10043a8:	003ed606 	br	1003f04 <__alt_data_end+0xff803f04>
 10043ac:	182b883a 	mov	r21,r3
 10043b0:	d8002a15 	stw	zero,168(sp)
 10043b4:	00388c06 	br	10025e8 <__alt_data_end+0xff8025e8>
 10043b8:	d8802a17 	ldw	r2,168(sp)
 10043bc:	103e071e 	bne	r2,zero,1003bdc <__alt_data_end+0xff803bdc>
 10043c0:	dc002a15 	stw	r16,168(sp)
 10043c4:	003e0506 	br	1003bdc <__alt_data_end+0xff803bdc>
 10043c8:	d9002a17 	ldw	r4,168(sp)
 10043cc:	20c00044 	addi	r3,r4,1
 10043d0:	003e0f06 	br	1003c10 <__alt_data_end+0xff803c10>
 10043d4:	01400184 	movi	r5,6
 10043d8:	d9402a15 	stw	r5,168(sp)
 10043dc:	003dff06 	br	1003bdc <__alt_data_end+0xff803bdc>
 10043e0:	d8802104 	addi	r2,sp,132
 10043e4:	d8800315 	stw	r2,12(sp)
 10043e8:	d8802504 	addi	r2,sp,148
 10043ec:	d8800215 	stw	r2,8(sp)
 10043f0:	d8802604 	addi	r2,sp,152
 10043f4:	d8800115 	stw	r2,4(sp)
 10043f8:	d8802a17 	ldw	r2,168(sp)
 10043fc:	d9403617 	ldw	r5,216(sp)
 1004400:	d9002d17 	ldw	r4,180(sp)
 1004404:	d8800015 	stw	r2,0(sp)
 1004408:	01c000c4 	movi	r7,3
 100440c:	980d883a 	mov	r6,r19
 1004410:	da003d15 	stw	r8,244(sp)
 1004414:	1004b8c0 	call	1004b8c <_dtoa_r>
 1004418:	d8c02a17 	ldw	r3,168(sp)
 100441c:	da003d17 	ldw	r8,244(sp)
 1004420:	1021883a 	mov	r16,r2
 1004424:	10f9883a 	add	fp,r2,r3
 1004428:	81000007 	ldb	r4,0(r16)
 100442c:	00800c04 	movi	r2,48
 1004430:	20805e26 	beq	r4,r2,10045ac <___vfprintf_internal_r+0x2150>
 1004434:	d8c02617 	ldw	r3,152(sp)
 1004438:	e0f9883a 	add	fp,fp,r3
 100443c:	003e0a06 	br	1003c68 <__alt_data_end+0xff803c68>
 1004440:	00c00b44 	movi	r3,45
 1004444:	24e0003c 	xorhi	r19,r4,32768
 1004448:	d8c02905 	stb	r3,164(sp)
 100444c:	003de906 	br	1003bf4 <__alt_data_end+0xff803bf4>
 1004450:	d8c03217 	ldw	r3,200(sp)
 1004454:	00c07a0e 	bge	zero,r3,1004640 <___vfprintf_internal_r+0x21e4>
 1004458:	00800044 	movi	r2,1
 100445c:	d9003317 	ldw	r4,204(sp)
 1004460:	1105883a 	add	r2,r2,r4
 1004464:	d8802b15 	stw	r2,172(sp)
 1004468:	10004e16 	blt	r2,zero,10045a4 <___vfprintf_internal_r+0x2148>
 100446c:	044019c4 	movi	r17,103
 1004470:	003e2106 	br	1003cf8 <__alt_data_end+0xff803cf8>
 1004474:	d9002a17 	ldw	r4,168(sp)
 1004478:	d8802104 	addi	r2,sp,132
 100447c:	d8800315 	stw	r2,12(sp)
 1004480:	d9000015 	stw	r4,0(sp)
 1004484:	d8802504 	addi	r2,sp,148
 1004488:	d9403617 	ldw	r5,216(sp)
 100448c:	d9002d17 	ldw	r4,180(sp)
 1004490:	d8800215 	stw	r2,8(sp)
 1004494:	d8802604 	addi	r2,sp,152
 1004498:	d8800115 	stw	r2,4(sp)
 100449c:	01c000c4 	movi	r7,3
 10044a0:	980d883a 	mov	r6,r19
 10044a4:	da003d15 	stw	r8,244(sp)
 10044a8:	1004b8c0 	call	1004b8c <_dtoa_r>
 10044ac:	d8c02a17 	ldw	r3,168(sp)
 10044b0:	da003d17 	ldw	r8,244(sp)
 10044b4:	1021883a 	mov	r16,r2
 10044b8:	00801184 	movi	r2,70
 10044bc:	80f9883a 	add	fp,r16,r3
 10044c0:	88bfd926 	beq	r17,r2,1004428 <__alt_data_end+0xff804428>
 10044c4:	003de806 	br	1003c68 <__alt_data_end+0xff803c68>
 10044c8:	d9002a17 	ldw	r4,168(sp)
 10044cc:	00c04d0e 	bge	zero,r3,1004604 <___vfprintf_internal_r+0x21a8>
 10044d0:	2000441e 	bne	r4,zero,10045e4 <___vfprintf_internal_r+0x2188>
 10044d4:	9480004c 	andi	r18,r18,1
 10044d8:	9000421e 	bne	r18,zero,10045e4 <___vfprintf_internal_r+0x2188>
 10044dc:	1805883a 	mov	r2,r3
 10044e0:	18006f16 	blt	r3,zero,10046a0 <___vfprintf_internal_r+0x2244>
 10044e4:	d8c03217 	ldw	r3,200(sp)
 10044e8:	d8c02b15 	stw	r3,172(sp)
 10044ec:	003e0206 	br	1003cf8 <__alt_data_end+0xff803cf8>
 10044f0:	df0022c4 	addi	fp,sp,139
 10044f4:	dc002a15 	stw	r16,168(sp)
 10044f8:	4027883a 	mov	r19,r8
 10044fc:	e021883a 	mov	r16,fp
 1004500:	b009883a 	mov	r4,r22
 1004504:	01400284 	movi	r5,10
 1004508:	100c7c80 	call	100c7c8 <__modsi3>
 100450c:	10800c04 	addi	r2,r2,48
 1004510:	843fffc4 	addi	r16,r16,-1
 1004514:	b009883a 	mov	r4,r22
 1004518:	01400284 	movi	r5,10
 100451c:	80800005 	stb	r2,0(r16)
 1004520:	100c7440 	call	100c744 <__divsi3>
 1004524:	102d883a 	mov	r22,r2
 1004528:	00800244 	movi	r2,9
 100452c:	15bff416 	blt	r2,r22,1004500 <__alt_data_end+0xff804500>
 1004530:	9811883a 	mov	r8,r19
 1004534:	b0800c04 	addi	r2,r22,48
 1004538:	8027883a 	mov	r19,r16
 100453c:	997fffc4 	addi	r5,r19,-1
 1004540:	98bfffc5 	stb	r2,-1(r19)
 1004544:	dc002a17 	ldw	r16,168(sp)
 1004548:	2f006d2e 	bgeu	r5,fp,1004700 <___vfprintf_internal_r+0x22a4>
 100454c:	d9c02384 	addi	r7,sp,142
 1004550:	3ccfc83a 	sub	r7,r7,r19
 1004554:	d9002344 	addi	r4,sp,141
 1004558:	e1cf883a 	add	r7,fp,r7
 100455c:	00000106 	br	1004564 <___vfprintf_internal_r+0x2108>
 1004560:	28800003 	ldbu	r2,0(r5)
 1004564:	20800005 	stb	r2,0(r4)
 1004568:	21000044 	addi	r4,r4,1
 100456c:	29400044 	addi	r5,r5,1
 1004570:	393ffb1e 	bne	r7,r4,1004560 <__alt_data_end+0xff804560>
 1004574:	d8802304 	addi	r2,sp,140
 1004578:	14c5c83a 	sub	r2,r2,r19
 100457c:	d8c02344 	addi	r3,sp,141
 1004580:	1885883a 	add	r2,r3,r2
 1004584:	003f7006 	br	1004348 <__alt_data_end+0xff804348>
 1004588:	0005883a 	mov	r2,zero
 100458c:	003f0f06 	br	10041cc <__alt_data_end+0xff8041cc>
 1004590:	d8c03217 	ldw	r3,200(sp)
 1004594:	18c00044 	addi	r3,r3,1
 1004598:	d8c02b15 	stw	r3,172(sp)
 100459c:	1805883a 	mov	r2,r3
 10045a0:	183fb20e 	bge	r3,zero,100446c <__alt_data_end+0xff80446c>
 10045a4:	0005883a 	mov	r2,zero
 10045a8:	003fb006 	br	100446c <__alt_data_end+0xff80446c>
 10045ac:	d9003617 	ldw	r4,216(sp)
 10045b0:	000d883a 	mov	r6,zero
 10045b4:	000f883a 	mov	r7,zero
 10045b8:	980b883a 	mov	r5,r19
 10045bc:	d8c03c15 	stw	r3,240(sp)
 10045c0:	da003d15 	stw	r8,244(sp)
 10045c4:	100db9c0 	call	100db9c <__eqdf2>
 10045c8:	d8c03c17 	ldw	r3,240(sp)
 10045cc:	da003d17 	ldw	r8,244(sp)
 10045d0:	103f9826 	beq	r2,zero,1004434 <__alt_data_end+0xff804434>
 10045d4:	00800044 	movi	r2,1
 10045d8:	10c7c83a 	sub	r3,r2,r3
 10045dc:	d8c02615 	stw	r3,152(sp)
 10045e0:	003f9506 	br	1004438 <__alt_data_end+0xff804438>
 10045e4:	d9002a17 	ldw	r4,168(sp)
 10045e8:	d8c03217 	ldw	r3,200(sp)
 10045ec:	20800044 	addi	r2,r4,1
 10045f0:	1885883a 	add	r2,r3,r2
 10045f4:	d8802b15 	stw	r2,172(sp)
 10045f8:	103dbf0e 	bge	r2,zero,1003cf8 <__alt_data_end+0xff803cf8>
 10045fc:	0005883a 	mov	r2,zero
 1004600:	003dbd06 	br	1003cf8 <__alt_data_end+0xff803cf8>
 1004604:	2000201e 	bne	r4,zero,1004688 <___vfprintf_internal_r+0x222c>
 1004608:	9480004c 	andi	r18,r18,1
 100460c:	90001e1e 	bne	r18,zero,1004688 <___vfprintf_internal_r+0x222c>
 1004610:	00800044 	movi	r2,1
 1004614:	d8802b15 	stw	r2,172(sp)
 1004618:	003db706 	br	1003cf8 <__alt_data_end+0xff803cf8>
 100461c:	00800b44 	movi	r2,45
 1004620:	05adc83a 	sub	r22,zero,r22
 1004624:	d8802305 	stb	r2,140(sp)
 1004628:	003f3f06 	br	1004328 <__alt_data_end+0xff804328>
 100462c:	0005883a 	mov	r2,zero
 1004630:	003f5206 	br	100437c <__alt_data_end+0xff80437c>
 1004634:	90a4703a 	and	r18,r18,r2
 1004638:	903f4e26 	beq	r18,zero,1004374 <__alt_data_end+0xff804374>
 100463c:	003f4a06 	br	1004368 <__alt_data_end+0xff804368>
 1004640:	00800084 	movi	r2,2
 1004644:	10c5c83a 	sub	r2,r2,r3
 1004648:	003f8406 	br	100445c <__alt_data_end+0xff80445c>
 100464c:	d9402e17 	ldw	r5,184(sp)
 1004650:	d9002e17 	ldw	r4,184(sp)
 1004654:	ac400043 	ldbu	r17,1(r21)
 1004658:	29400017 	ldw	r5,0(r5)
 100465c:	20800104 	addi	r2,r4,4
 1004660:	d8802e15 	stw	r2,184(sp)
 1004664:	d9402a15 	stw	r5,168(sp)
 1004668:	182b883a 	mov	r21,r3
 100466c:	283e7b0e 	bge	r5,zero,100405c <__alt_data_end+0xff80405c>
 1004670:	8c403fcc 	andi	r17,r17,255
 1004674:	017fffc4 	movi	r5,-1
 1004678:	8c40201c 	xori	r17,r17,128
 100467c:	d9402a15 	stw	r5,168(sp)
 1004680:	8c7fe004 	addi	r17,r17,-128
 1004684:	0037d706 	br	10025e4 <__alt_data_end+0xff8025e4>
 1004688:	d8c02a17 	ldw	r3,168(sp)
 100468c:	18c00084 	addi	r3,r3,2
 1004690:	d8c02b15 	stw	r3,172(sp)
 1004694:	1805883a 	mov	r2,r3
 1004698:	183d970e 	bge	r3,zero,1003cf8 <__alt_data_end+0xff803cf8>
 100469c:	003fd706 	br	10045fc <__alt_data_end+0xff8045fc>
 10046a0:	0005883a 	mov	r2,zero
 10046a4:	003f8f06 	br	10044e4 <__alt_data_end+0xff8044e4>
 10046a8:	9080004c 	andi	r2,r18,1
 10046ac:	103f821e 	bne	r2,zero,10044b8 <__alt_data_end+0xff8044b8>
 10046b0:	d8802117 	ldw	r2,132(sp)
 10046b4:	1405c83a 	sub	r2,r2,r16
 10046b8:	d8803315 	stw	r2,204(sp)
 10046bc:	b47ef426 	beq	r22,r17,1004290 <__alt_data_end+0xff804290>
 10046c0:	dd802617 	ldw	r22,152(sp)
 10046c4:	003f1206 	br	1004310 <__alt_data_end+0xff804310>
 10046c8:	d8c02b03 	ldbu	r3,172(sp)
 10046cc:	d8c02785 	stb	r3,158(sp)
 10046d0:	0038df06 	br	1002a50 <__alt_data_end+0xff802a50>
 10046d4:	d8c02b03 	ldbu	r3,172(sp)
 10046d8:	d8c02785 	stb	r3,158(sp)
 10046dc:	0038aa06 	br	1002988 <__alt_data_end+0xff802988>
 10046e0:	d8c02b03 	ldbu	r3,172(sp)
 10046e4:	d8c02785 	stb	r3,158(sp)
 10046e8:	003a4306 	br	1002ff8 <__alt_data_end+0xff802ff8>
 10046ec:	d8c02b03 	ldbu	r3,172(sp)
 10046f0:	d8c02785 	stb	r3,158(sp)
 10046f4:	003af506 	br	10032cc <__alt_data_end+0xff8032cc>
 10046f8:	0005883a 	mov	r2,zero
 10046fc:	003d7b06 	br	1003cec <__alt_data_end+0xff803cec>
 1004700:	d8802344 	addi	r2,sp,141
 1004704:	003f1006 	br	1004348 <__alt_data_end+0xff804348>
 1004708:	d8c02b03 	ldbu	r3,172(sp)
 100470c:	d8c02785 	stb	r3,158(sp)
 1004710:	0038fd06 	br	1002b08 <__alt_data_end+0xff802b08>
 1004714:	d8c02b03 	ldbu	r3,172(sp)
 1004718:	d8c02785 	stb	r3,158(sp)
 100471c:	003a9706 	br	100317c <__alt_data_end+0xff80317c>
 1004720:	d8c02b03 	ldbu	r3,172(sp)
 1004724:	d8c02785 	stb	r3,158(sp)
 1004728:	003a1806 	br	1002f8c <__alt_data_end+0xff802f8c>
 100472c:	d8c02b03 	ldbu	r3,172(sp)
 1004730:	d8c02785 	stb	r3,158(sp)
 1004734:	003abe06 	br	1003230 <__alt_data_end+0xff803230>

01004738 <__vfprintf_internal>:
 1004738:	00804074 	movhi	r2,257
 100473c:	108fc304 	addi	r2,r2,16140
 1004740:	300f883a 	mov	r7,r6
 1004744:	280d883a 	mov	r6,r5
 1004748:	200b883a 	mov	r5,r4
 100474c:	11000017 	ldw	r4,0(r2)
 1004750:	100245c1 	jmpi	100245c <___vfprintf_internal_r>

01004754 <__sbprintf>:
 1004754:	2880030b 	ldhu	r2,12(r5)
 1004758:	2ac01917 	ldw	r11,100(r5)
 100475c:	2a80038b 	ldhu	r10,14(r5)
 1004760:	2a400717 	ldw	r9,28(r5)
 1004764:	2a000917 	ldw	r8,36(r5)
 1004768:	defee204 	addi	sp,sp,-1144
 100476c:	00c10004 	movi	r3,1024
 1004770:	dc011a15 	stw	r16,1128(sp)
 1004774:	10bfff4c 	andi	r2,r2,65533
 1004778:	2821883a 	mov	r16,r5
 100477c:	d8cb883a 	add	r5,sp,r3
 1004780:	dc811c15 	stw	r18,1136(sp)
 1004784:	dc411b15 	stw	r17,1132(sp)
 1004788:	dfc11d15 	stw	ra,1140(sp)
 100478c:	2025883a 	mov	r18,r4
 1004790:	d881030d 	sth	r2,1036(sp)
 1004794:	dac11915 	stw	r11,1124(sp)
 1004798:	da81038d 	sth	r10,1038(sp)
 100479c:	da410715 	stw	r9,1052(sp)
 10047a0:	da010915 	stw	r8,1060(sp)
 10047a4:	dec10015 	stw	sp,1024(sp)
 10047a8:	dec10415 	stw	sp,1040(sp)
 10047ac:	d8c10215 	stw	r3,1032(sp)
 10047b0:	d8c10515 	stw	r3,1044(sp)
 10047b4:	d8010615 	stw	zero,1048(sp)
 10047b8:	100245c0 	call	100245c <___vfprintf_internal_r>
 10047bc:	1023883a 	mov	r17,r2
 10047c0:	10000416 	blt	r2,zero,10047d4 <__sbprintf+0x80>
 10047c4:	d9410004 	addi	r5,sp,1024
 10047c8:	9009883a 	mov	r4,r18
 10047cc:	10064300 	call	1006430 <_fflush_r>
 10047d0:	10000d1e 	bne	r2,zero,1004808 <__sbprintf+0xb4>
 10047d4:	d881030b 	ldhu	r2,1036(sp)
 10047d8:	1080100c 	andi	r2,r2,64
 10047dc:	10000326 	beq	r2,zero,10047ec <__sbprintf+0x98>
 10047e0:	8080030b 	ldhu	r2,12(r16)
 10047e4:	10801014 	ori	r2,r2,64
 10047e8:	8080030d 	sth	r2,12(r16)
 10047ec:	8805883a 	mov	r2,r17
 10047f0:	dfc11d17 	ldw	ra,1140(sp)
 10047f4:	dc811c17 	ldw	r18,1136(sp)
 10047f8:	dc411b17 	ldw	r17,1132(sp)
 10047fc:	dc011a17 	ldw	r16,1128(sp)
 1004800:	dec11e04 	addi	sp,sp,1144
 1004804:	f800283a 	ret
 1004808:	047fffc4 	movi	r17,-1
 100480c:	003ff106 	br	10047d4 <__alt_data_end+0xff8047d4>

01004810 <__swsetup_r>:
 1004810:	00804074 	movhi	r2,257
 1004814:	defffd04 	addi	sp,sp,-12
 1004818:	108fc304 	addi	r2,r2,16140
 100481c:	dc400115 	stw	r17,4(sp)
 1004820:	2023883a 	mov	r17,r4
 1004824:	11000017 	ldw	r4,0(r2)
 1004828:	dc000015 	stw	r16,0(sp)
 100482c:	dfc00215 	stw	ra,8(sp)
 1004830:	2821883a 	mov	r16,r5
 1004834:	20000226 	beq	r4,zero,1004840 <__swsetup_r+0x30>
 1004838:	20800e17 	ldw	r2,56(r4)
 100483c:	10003126 	beq	r2,zero,1004904 <__swsetup_r+0xf4>
 1004840:	8080030b 	ldhu	r2,12(r16)
 1004844:	10c0020c 	andi	r3,r2,8
 1004848:	1009883a 	mov	r4,r2
 100484c:	18000f26 	beq	r3,zero,100488c <__swsetup_r+0x7c>
 1004850:	80c00417 	ldw	r3,16(r16)
 1004854:	18001526 	beq	r3,zero,10048ac <__swsetup_r+0x9c>
 1004858:	1100004c 	andi	r4,r2,1
 100485c:	20001c1e 	bne	r4,zero,10048d0 <__swsetup_r+0xc0>
 1004860:	1080008c 	andi	r2,r2,2
 1004864:	1000291e 	bne	r2,zero,100490c <__swsetup_r+0xfc>
 1004868:	80800517 	ldw	r2,20(r16)
 100486c:	80800215 	stw	r2,8(r16)
 1004870:	18001c26 	beq	r3,zero,10048e4 <__swsetup_r+0xd4>
 1004874:	0005883a 	mov	r2,zero
 1004878:	dfc00217 	ldw	ra,8(sp)
 100487c:	dc400117 	ldw	r17,4(sp)
 1004880:	dc000017 	ldw	r16,0(sp)
 1004884:	dec00304 	addi	sp,sp,12
 1004888:	f800283a 	ret
 100488c:	2080040c 	andi	r2,r4,16
 1004890:	10002e26 	beq	r2,zero,100494c <__swsetup_r+0x13c>
 1004894:	2080010c 	andi	r2,r4,4
 1004898:	10001e1e 	bne	r2,zero,1004914 <__swsetup_r+0x104>
 100489c:	80c00417 	ldw	r3,16(r16)
 10048a0:	20800214 	ori	r2,r4,8
 10048a4:	8080030d 	sth	r2,12(r16)
 10048a8:	183feb1e 	bne	r3,zero,1004858 <__alt_data_end+0xff804858>
 10048ac:	1100a00c 	andi	r4,r2,640
 10048b0:	01408004 	movi	r5,512
 10048b4:	217fe826 	beq	r4,r5,1004858 <__alt_data_end+0xff804858>
 10048b8:	800b883a 	mov	r5,r16
 10048bc:	8809883a 	mov	r4,r17
 10048c0:	10073cc0 	call	10073cc <__smakebuf_r>
 10048c4:	8080030b 	ldhu	r2,12(r16)
 10048c8:	80c00417 	ldw	r3,16(r16)
 10048cc:	003fe206 	br	1004858 <__alt_data_end+0xff804858>
 10048d0:	80800517 	ldw	r2,20(r16)
 10048d4:	80000215 	stw	zero,8(r16)
 10048d8:	0085c83a 	sub	r2,zero,r2
 10048dc:	80800615 	stw	r2,24(r16)
 10048e0:	183fe41e 	bne	r3,zero,1004874 <__alt_data_end+0xff804874>
 10048e4:	80c0030b 	ldhu	r3,12(r16)
 10048e8:	0005883a 	mov	r2,zero
 10048ec:	1900200c 	andi	r4,r3,128
 10048f0:	203fe126 	beq	r4,zero,1004878 <__alt_data_end+0xff804878>
 10048f4:	18c01014 	ori	r3,r3,64
 10048f8:	80c0030d 	sth	r3,12(r16)
 10048fc:	00bfffc4 	movi	r2,-1
 1004900:	003fdd06 	br	1004878 <__alt_data_end+0xff804878>
 1004904:	100681c0 	call	100681c <__sinit>
 1004908:	003fcd06 	br	1004840 <__alt_data_end+0xff804840>
 100490c:	0005883a 	mov	r2,zero
 1004910:	003fd606 	br	100486c <__alt_data_end+0xff80486c>
 1004914:	81400c17 	ldw	r5,48(r16)
 1004918:	28000626 	beq	r5,zero,1004934 <__swsetup_r+0x124>
 100491c:	80801004 	addi	r2,r16,64
 1004920:	28800326 	beq	r5,r2,1004930 <__swsetup_r+0x120>
 1004924:	8809883a 	mov	r4,r17
 1004928:	10069900 	call	1006990 <_free_r>
 100492c:	8100030b 	ldhu	r4,12(r16)
 1004930:	80000c15 	stw	zero,48(r16)
 1004934:	80c00417 	ldw	r3,16(r16)
 1004938:	00bff6c4 	movi	r2,-37
 100493c:	1108703a 	and	r4,r2,r4
 1004940:	80000115 	stw	zero,4(r16)
 1004944:	80c00015 	stw	r3,0(r16)
 1004948:	003fd506 	br	10048a0 <__alt_data_end+0xff8048a0>
 100494c:	00800244 	movi	r2,9
 1004950:	88800015 	stw	r2,0(r17)
 1004954:	20801014 	ori	r2,r4,64
 1004958:	8080030d 	sth	r2,12(r16)
 100495c:	00bfffc4 	movi	r2,-1
 1004960:	003fc506 	br	1004878 <__alt_data_end+0xff804878>

01004964 <quorem>:
 1004964:	defff204 	addi	sp,sp,-56
 1004968:	ddc00b15 	stw	r23,44(sp)
 100496c:	20800417 	ldw	r2,16(r4)
 1004970:	2dc00417 	ldw	r23,16(r5)
 1004974:	dfc00d15 	stw	ra,52(sp)
 1004978:	df000c15 	stw	fp,48(sp)
 100497c:	dd800a15 	stw	r22,40(sp)
 1004980:	dd400915 	stw	r21,36(sp)
 1004984:	dd000815 	stw	r20,32(sp)
 1004988:	dcc00715 	stw	r19,28(sp)
 100498c:	dc800615 	stw	r18,24(sp)
 1004990:	dc400515 	stw	r17,20(sp)
 1004994:	dc000415 	stw	r16,16(sp)
 1004998:	15c07a16 	blt	r2,r23,1004b84 <quorem+0x220>
 100499c:	bdffffc4 	addi	r23,r23,-1
 10049a0:	bde9883a 	add	r20,r23,r23
 10049a4:	28c00504 	addi	r3,r5,20
 10049a8:	a529883a 	add	r20,r20,r20
 10049ac:	1d39883a 	add	fp,r3,r20
 10049b0:	24c00504 	addi	r19,r4,20
 10049b4:	d9400215 	stw	r5,8(sp)
 10049b8:	9d29883a 	add	r20,r19,r20
 10049bc:	e1400017 	ldw	r5,0(fp)
 10049c0:	d9000015 	stw	r4,0(sp)
 10049c4:	a1000017 	ldw	r4,0(r20)
 10049c8:	29400044 	addi	r5,r5,1
 10049cc:	d8c00115 	stw	r3,4(sp)
 10049d0:	dd000315 	stw	r20,12(sp)
 10049d4:	100c83c0 	call	100c83c <__udivsi3>
 10049d8:	1025883a 	mov	r18,r2
 10049dc:	10003026 	beq	r2,zero,1004aa0 <quorem+0x13c>
 10049e0:	dc400117 	ldw	r17,4(sp)
 10049e4:	9829883a 	mov	r20,r19
 10049e8:	002d883a 	mov	r22,zero
 10049ec:	0021883a 	mov	r16,zero
 10049f0:	8d400017 	ldw	r21,0(r17)
 10049f4:	900b883a 	mov	r5,r18
 10049f8:	8c400104 	addi	r17,r17,4
 10049fc:	a93fffcc 	andi	r4,r21,65535
 1004a00:	100c8f80 	call	100c8f8 <__mulsi3>
 1004a04:	a808d43a 	srli	r4,r21,16
 1004a08:	900b883a 	mov	r5,r18
 1004a0c:	15ad883a 	add	r22,r2,r22
 1004a10:	100c8f80 	call	100c8f8 <__mulsi3>
 1004a14:	a1000017 	ldw	r4,0(r20)
 1004a18:	b00cd43a 	srli	r6,r22,16
 1004a1c:	b0ffffcc 	andi	r3,r22,65535
 1004a20:	217fffcc 	andi	r5,r4,65535
 1004a24:	2c21883a 	add	r16,r5,r16
 1004a28:	80c7c83a 	sub	r3,r16,r3
 1004a2c:	2008d43a 	srli	r4,r4,16
 1004a30:	1185883a 	add	r2,r2,r6
 1004a34:	1821d43a 	srai	r16,r3,16
 1004a38:	117fffcc 	andi	r5,r2,65535
 1004a3c:	2149c83a 	sub	r4,r4,r5
 1004a40:	2421883a 	add	r16,r4,r16
 1004a44:	8008943a 	slli	r4,r16,16
 1004a48:	18ffffcc 	andi	r3,r3,65535
 1004a4c:	102cd43a 	srli	r22,r2,16
 1004a50:	20c8b03a 	or	r4,r4,r3
 1004a54:	a1000015 	stw	r4,0(r20)
 1004a58:	8021d43a 	srai	r16,r16,16
 1004a5c:	a5000104 	addi	r20,r20,4
 1004a60:	e47fe32e 	bgeu	fp,r17,10049f0 <__alt_data_end+0xff8049f0>
 1004a64:	d8c00317 	ldw	r3,12(sp)
 1004a68:	18800017 	ldw	r2,0(r3)
 1004a6c:	10000c1e 	bne	r2,zero,1004aa0 <quorem+0x13c>
 1004a70:	18bfff04 	addi	r2,r3,-4
 1004a74:	9880082e 	bgeu	r19,r2,1004a98 <quorem+0x134>
 1004a78:	18ffff17 	ldw	r3,-4(r3)
 1004a7c:	18000326 	beq	r3,zero,1004a8c <quorem+0x128>
 1004a80:	00000506 	br	1004a98 <quorem+0x134>
 1004a84:	10c00017 	ldw	r3,0(r2)
 1004a88:	1800031e 	bne	r3,zero,1004a98 <quorem+0x134>
 1004a8c:	10bfff04 	addi	r2,r2,-4
 1004a90:	bdffffc4 	addi	r23,r23,-1
 1004a94:	98bffb36 	bltu	r19,r2,1004a84 <__alt_data_end+0xff804a84>
 1004a98:	d8c00017 	ldw	r3,0(sp)
 1004a9c:	1dc00415 	stw	r23,16(r3)
 1004aa0:	d9400217 	ldw	r5,8(sp)
 1004aa4:	d9000017 	ldw	r4,0(sp)
 1004aa8:	1008bc80 	call	1008bc8 <__mcmp>
 1004aac:	10002816 	blt	r2,zero,1004b50 <quorem+0x1ec>
 1004ab0:	dc400117 	ldw	r17,4(sp)
 1004ab4:	94800044 	addi	r18,r18,1
 1004ab8:	980d883a 	mov	r6,r19
 1004abc:	0007883a 	mov	r3,zero
 1004ac0:	31000017 	ldw	r4,0(r6)
 1004ac4:	89400017 	ldw	r5,0(r17)
 1004ac8:	31800104 	addi	r6,r6,4
 1004acc:	20bfffcc 	andi	r2,r4,65535
 1004ad0:	10c7883a 	add	r3,r2,r3
 1004ad4:	28bfffcc 	andi	r2,r5,65535
 1004ad8:	1885c83a 	sub	r2,r3,r2
 1004adc:	280ad43a 	srli	r5,r5,16
 1004ae0:	2008d43a 	srli	r4,r4,16
 1004ae4:	1007d43a 	srai	r3,r2,16
 1004ae8:	10bfffcc 	andi	r2,r2,65535
 1004aec:	2149c83a 	sub	r4,r4,r5
 1004af0:	20c9883a 	add	r4,r4,r3
 1004af4:	200a943a 	slli	r5,r4,16
 1004af8:	8c400104 	addi	r17,r17,4
 1004afc:	2007d43a 	srai	r3,r4,16
 1004b00:	2884b03a 	or	r2,r5,r2
 1004b04:	30bfff15 	stw	r2,-4(r6)
 1004b08:	e47fed2e 	bgeu	fp,r17,1004ac0 <__alt_data_end+0xff804ac0>
 1004b0c:	bdc5883a 	add	r2,r23,r23
 1004b10:	1085883a 	add	r2,r2,r2
 1004b14:	9887883a 	add	r3,r19,r2
 1004b18:	18800017 	ldw	r2,0(r3)
 1004b1c:	10000c1e 	bne	r2,zero,1004b50 <quorem+0x1ec>
 1004b20:	18bfff04 	addi	r2,r3,-4
 1004b24:	9880082e 	bgeu	r19,r2,1004b48 <quorem+0x1e4>
 1004b28:	18ffff17 	ldw	r3,-4(r3)
 1004b2c:	18000326 	beq	r3,zero,1004b3c <quorem+0x1d8>
 1004b30:	00000506 	br	1004b48 <quorem+0x1e4>
 1004b34:	10c00017 	ldw	r3,0(r2)
 1004b38:	1800031e 	bne	r3,zero,1004b48 <quorem+0x1e4>
 1004b3c:	10bfff04 	addi	r2,r2,-4
 1004b40:	bdffffc4 	addi	r23,r23,-1
 1004b44:	98bffb36 	bltu	r19,r2,1004b34 <__alt_data_end+0xff804b34>
 1004b48:	d8c00017 	ldw	r3,0(sp)
 1004b4c:	1dc00415 	stw	r23,16(r3)
 1004b50:	9005883a 	mov	r2,r18
 1004b54:	dfc00d17 	ldw	ra,52(sp)
 1004b58:	df000c17 	ldw	fp,48(sp)
 1004b5c:	ddc00b17 	ldw	r23,44(sp)
 1004b60:	dd800a17 	ldw	r22,40(sp)
 1004b64:	dd400917 	ldw	r21,36(sp)
 1004b68:	dd000817 	ldw	r20,32(sp)
 1004b6c:	dcc00717 	ldw	r19,28(sp)
 1004b70:	dc800617 	ldw	r18,24(sp)
 1004b74:	dc400517 	ldw	r17,20(sp)
 1004b78:	dc000417 	ldw	r16,16(sp)
 1004b7c:	dec00e04 	addi	sp,sp,56
 1004b80:	f800283a 	ret
 1004b84:	0005883a 	mov	r2,zero
 1004b88:	003ff206 	br	1004b54 <__alt_data_end+0xff804b54>

01004b8c <_dtoa_r>:
 1004b8c:	20801017 	ldw	r2,64(r4)
 1004b90:	deffde04 	addi	sp,sp,-136
 1004b94:	df002015 	stw	fp,128(sp)
 1004b98:	dcc01b15 	stw	r19,108(sp)
 1004b9c:	dc801a15 	stw	r18,104(sp)
 1004ba0:	dc401915 	stw	r17,100(sp)
 1004ba4:	dc001815 	stw	r16,96(sp)
 1004ba8:	dfc02115 	stw	ra,132(sp)
 1004bac:	ddc01f15 	stw	r23,124(sp)
 1004bb0:	dd801e15 	stw	r22,120(sp)
 1004bb4:	dd401d15 	stw	r21,116(sp)
 1004bb8:	dd001c15 	stw	r20,112(sp)
 1004bbc:	d9c00315 	stw	r7,12(sp)
 1004bc0:	2039883a 	mov	fp,r4
 1004bc4:	3023883a 	mov	r17,r6
 1004bc8:	2825883a 	mov	r18,r5
 1004bcc:	dc002417 	ldw	r16,144(sp)
 1004bd0:	3027883a 	mov	r19,r6
 1004bd4:	10000826 	beq	r2,zero,1004bf8 <_dtoa_r+0x6c>
 1004bd8:	21801117 	ldw	r6,68(r4)
 1004bdc:	00c00044 	movi	r3,1
 1004be0:	100b883a 	mov	r5,r2
 1004be4:	1986983a 	sll	r3,r3,r6
 1004be8:	11800115 	stw	r6,4(r2)
 1004bec:	10c00215 	stw	r3,8(r2)
 1004bf0:	10082ec0 	call	10082ec <_Bfree>
 1004bf4:	e0001015 	stw	zero,64(fp)
 1004bf8:	88002e16 	blt	r17,zero,1004cb4 <_dtoa_r+0x128>
 1004bfc:	80000015 	stw	zero,0(r16)
 1004c00:	889ffc2c 	andhi	r2,r17,32752
 1004c04:	00dffc34 	movhi	r3,32752
 1004c08:	10c01c26 	beq	r2,r3,1004c7c <_dtoa_r+0xf0>
 1004c0c:	000d883a 	mov	r6,zero
 1004c10:	000f883a 	mov	r7,zero
 1004c14:	9009883a 	mov	r4,r18
 1004c18:	980b883a 	mov	r5,r19
 1004c1c:	100db9c0 	call	100db9c <__eqdf2>
 1004c20:	10002b1e 	bne	r2,zero,1004cd0 <_dtoa_r+0x144>
 1004c24:	d9c02317 	ldw	r7,140(sp)
 1004c28:	00800044 	movi	r2,1
 1004c2c:	38800015 	stw	r2,0(r7)
 1004c30:	d8802517 	ldw	r2,148(sp)
 1004c34:	10019e26 	beq	r2,zero,10052b0 <_dtoa_r+0x724>
 1004c38:	d8c02517 	ldw	r3,148(sp)
 1004c3c:	00804074 	movhi	r2,257
 1004c40:	10886844 	addi	r2,r2,8609
 1004c44:	18800015 	stw	r2,0(r3)
 1004c48:	10bfffc4 	addi	r2,r2,-1
 1004c4c:	dfc02117 	ldw	ra,132(sp)
 1004c50:	df002017 	ldw	fp,128(sp)
 1004c54:	ddc01f17 	ldw	r23,124(sp)
 1004c58:	dd801e17 	ldw	r22,120(sp)
 1004c5c:	dd401d17 	ldw	r21,116(sp)
 1004c60:	dd001c17 	ldw	r20,112(sp)
 1004c64:	dcc01b17 	ldw	r19,108(sp)
 1004c68:	dc801a17 	ldw	r18,104(sp)
 1004c6c:	dc401917 	ldw	r17,100(sp)
 1004c70:	dc001817 	ldw	r16,96(sp)
 1004c74:	dec02204 	addi	sp,sp,136
 1004c78:	f800283a 	ret
 1004c7c:	d8c02317 	ldw	r3,140(sp)
 1004c80:	0089c3c4 	movi	r2,9999
 1004c84:	18800015 	stw	r2,0(r3)
 1004c88:	90017726 	beq	r18,zero,1005268 <_dtoa_r+0x6dc>
 1004c8c:	00804074 	movhi	r2,257
 1004c90:	10887404 	addi	r2,r2,8656
 1004c94:	d9002517 	ldw	r4,148(sp)
 1004c98:	203fec26 	beq	r4,zero,1004c4c <__alt_data_end+0xff804c4c>
 1004c9c:	10c000c7 	ldb	r3,3(r2)
 1004ca0:	1801781e 	bne	r3,zero,1005284 <_dtoa_r+0x6f8>
 1004ca4:	10c000c4 	addi	r3,r2,3
 1004ca8:	d9802517 	ldw	r6,148(sp)
 1004cac:	30c00015 	stw	r3,0(r6)
 1004cb0:	003fe606 	br	1004c4c <__alt_data_end+0xff804c4c>
 1004cb4:	04e00034 	movhi	r19,32768
 1004cb8:	9cffffc4 	addi	r19,r19,-1
 1004cbc:	00800044 	movi	r2,1
 1004cc0:	8ce6703a 	and	r19,r17,r19
 1004cc4:	80800015 	stw	r2,0(r16)
 1004cc8:	9823883a 	mov	r17,r19
 1004ccc:	003fcc06 	br	1004c00 <__alt_data_end+0xff804c00>
 1004cd0:	d8800204 	addi	r2,sp,8
 1004cd4:	d8800015 	stw	r2,0(sp)
 1004cd8:	d9c00104 	addi	r7,sp,4
 1004cdc:	900b883a 	mov	r5,r18
 1004ce0:	980d883a 	mov	r6,r19
 1004ce4:	e009883a 	mov	r4,fp
 1004ce8:	8820d53a 	srli	r16,r17,20
 1004cec:	1008f940 	call	1008f94 <__d2b>
 1004cf0:	d8800915 	stw	r2,36(sp)
 1004cf4:	8001651e 	bne	r16,zero,100528c <_dtoa_r+0x700>
 1004cf8:	dd800217 	ldw	r22,8(sp)
 1004cfc:	dc000117 	ldw	r16,4(sp)
 1004d00:	00800804 	movi	r2,32
 1004d04:	b421883a 	add	r16,r22,r16
 1004d08:	80c10c84 	addi	r3,r16,1074
 1004d0c:	10c2d10e 	bge	r2,r3,1005854 <_dtoa_r+0xcc8>
 1004d10:	00801004 	movi	r2,64
 1004d14:	81010484 	addi	r4,r16,1042
 1004d18:	10c7c83a 	sub	r3,r2,r3
 1004d1c:	9108d83a 	srl	r4,r18,r4
 1004d20:	88e2983a 	sll	r17,r17,r3
 1004d24:	2448b03a 	or	r4,r4,r17
 1004d28:	100f0b80 	call	100f0b8 <__floatunsidf>
 1004d2c:	017f8434 	movhi	r5,65040
 1004d30:	01800044 	movi	r6,1
 1004d34:	1009883a 	mov	r4,r2
 1004d38:	194b883a 	add	r5,r3,r5
 1004d3c:	843fffc4 	addi	r16,r16,-1
 1004d40:	d9801115 	stw	r6,68(sp)
 1004d44:	000d883a 	mov	r6,zero
 1004d48:	01cffe34 	movhi	r7,16376
 1004d4c:	100e6600 	call	100e660 <__subdf3>
 1004d50:	0198dbf4 	movhi	r6,25455
 1004d54:	01cff4f4 	movhi	r7,16339
 1004d58:	3190d844 	addi	r6,r6,17249
 1004d5c:	39e1e9c4 	addi	r7,r7,-30809
 1004d60:	1009883a 	mov	r4,r2
 1004d64:	180b883a 	mov	r5,r3
 1004d68:	100ddf40 	call	100ddf4 <__muldf3>
 1004d6c:	01a2d874 	movhi	r6,35681
 1004d70:	01cff1f4 	movhi	r7,16327
 1004d74:	31b22cc4 	addi	r6,r6,-14157
 1004d78:	39e28a04 	addi	r7,r7,-30168
 1004d7c:	180b883a 	mov	r5,r3
 1004d80:	1009883a 	mov	r4,r2
 1004d84:	100c9200 	call	100c920 <__adddf3>
 1004d88:	8009883a 	mov	r4,r16
 1004d8c:	1029883a 	mov	r20,r2
 1004d90:	1823883a 	mov	r17,r3
 1004d94:	100efdc0 	call	100efdc <__floatsidf>
 1004d98:	019427f4 	movhi	r6,20639
 1004d9c:	01cff4f4 	movhi	r7,16339
 1004da0:	319e7ec4 	addi	r6,r6,31227
 1004da4:	39d104c4 	addi	r7,r7,17427
 1004da8:	1009883a 	mov	r4,r2
 1004dac:	180b883a 	mov	r5,r3
 1004db0:	100ddf40 	call	100ddf4 <__muldf3>
 1004db4:	100d883a 	mov	r6,r2
 1004db8:	180f883a 	mov	r7,r3
 1004dbc:	a009883a 	mov	r4,r20
 1004dc0:	880b883a 	mov	r5,r17
 1004dc4:	100c9200 	call	100c920 <__adddf3>
 1004dc8:	1009883a 	mov	r4,r2
 1004dcc:	180b883a 	mov	r5,r3
 1004dd0:	1029883a 	mov	r20,r2
 1004dd4:	1823883a 	mov	r17,r3
 1004dd8:	100ef5c0 	call	100ef5c <__fixdfsi>
 1004ddc:	000d883a 	mov	r6,zero
 1004de0:	000f883a 	mov	r7,zero
 1004de4:	a009883a 	mov	r4,r20
 1004de8:	880b883a 	mov	r5,r17
 1004dec:	d8800515 	stw	r2,20(sp)
 1004df0:	100dd000 	call	100dd00 <__ledf2>
 1004df4:	10028716 	blt	r2,zero,1005814 <_dtoa_r+0xc88>
 1004df8:	d8c00517 	ldw	r3,20(sp)
 1004dfc:	00800584 	movi	r2,22
 1004e00:	10c27536 	bltu	r2,r3,10057d8 <_dtoa_r+0xc4c>
 1004e04:	180490fa 	slli	r2,r3,3
 1004e08:	00c04074 	movhi	r3,257
 1004e0c:	18c89004 	addi	r3,r3,8768
 1004e10:	1885883a 	add	r2,r3,r2
 1004e14:	11000017 	ldw	r4,0(r2)
 1004e18:	11400117 	ldw	r5,4(r2)
 1004e1c:	900d883a 	mov	r6,r18
 1004e20:	980f883a 	mov	r7,r19
 1004e24:	100dc240 	call	100dc24 <__gedf2>
 1004e28:	00828d0e 	bge	zero,r2,1005860 <_dtoa_r+0xcd4>
 1004e2c:	d9000517 	ldw	r4,20(sp)
 1004e30:	d8000e15 	stw	zero,56(sp)
 1004e34:	213fffc4 	addi	r4,r4,-1
 1004e38:	d9000515 	stw	r4,20(sp)
 1004e3c:	b42dc83a 	sub	r22,r22,r16
 1004e40:	b5bfffc4 	addi	r22,r22,-1
 1004e44:	b0026f16 	blt	r22,zero,1005804 <_dtoa_r+0xc78>
 1004e48:	d8000815 	stw	zero,32(sp)
 1004e4c:	d9c00517 	ldw	r7,20(sp)
 1004e50:	38026416 	blt	r7,zero,10057e4 <_dtoa_r+0xc58>
 1004e54:	b1ed883a 	add	r22,r22,r7
 1004e58:	d9c00d15 	stw	r7,52(sp)
 1004e5c:	d8000a15 	stw	zero,40(sp)
 1004e60:	d9800317 	ldw	r6,12(sp)
 1004e64:	00800244 	movi	r2,9
 1004e68:	11811436 	bltu	r2,r6,10052bc <_dtoa_r+0x730>
 1004e6c:	00800144 	movi	r2,5
 1004e70:	1184e10e 	bge	r2,r6,10061f8 <_dtoa_r+0x166c>
 1004e74:	31bfff04 	addi	r6,r6,-4
 1004e78:	d9800315 	stw	r6,12(sp)
 1004e7c:	0023883a 	mov	r17,zero
 1004e80:	d9800317 	ldw	r6,12(sp)
 1004e84:	008000c4 	movi	r2,3
 1004e88:	30836726 	beq	r6,r2,1005c28 <_dtoa_r+0x109c>
 1004e8c:	1183410e 	bge	r2,r6,1005b94 <_dtoa_r+0x1008>
 1004e90:	d9c00317 	ldw	r7,12(sp)
 1004e94:	00800104 	movi	r2,4
 1004e98:	38827c26 	beq	r7,r2,100588c <_dtoa_r+0xd00>
 1004e9c:	00800144 	movi	r2,5
 1004ea0:	3884c41e 	bne	r7,r2,10061b4 <_dtoa_r+0x1628>
 1004ea4:	00800044 	movi	r2,1
 1004ea8:	d8800b15 	stw	r2,44(sp)
 1004eac:	d8c00517 	ldw	r3,20(sp)
 1004eb0:	d9002217 	ldw	r4,136(sp)
 1004eb4:	1907883a 	add	r3,r3,r4
 1004eb8:	19800044 	addi	r6,r3,1
 1004ebc:	d8c00c15 	stw	r3,48(sp)
 1004ec0:	d9800615 	stw	r6,24(sp)
 1004ec4:	0183a40e 	bge	zero,r6,1005d58 <_dtoa_r+0x11cc>
 1004ec8:	d9800617 	ldw	r6,24(sp)
 1004ecc:	3021883a 	mov	r16,r6
 1004ed0:	e0001115 	stw	zero,68(fp)
 1004ed4:	008005c4 	movi	r2,23
 1004ed8:	1184c92e 	bgeu	r2,r6,1006200 <_dtoa_r+0x1674>
 1004edc:	00c00044 	movi	r3,1
 1004ee0:	00800104 	movi	r2,4
 1004ee4:	1085883a 	add	r2,r2,r2
 1004ee8:	11000504 	addi	r4,r2,20
 1004eec:	180b883a 	mov	r5,r3
 1004ef0:	18c00044 	addi	r3,r3,1
 1004ef4:	313ffb2e 	bgeu	r6,r4,1004ee4 <__alt_data_end+0xff804ee4>
 1004ef8:	e1401115 	stw	r5,68(fp)
 1004efc:	e009883a 	mov	r4,fp
 1004f00:	10082440 	call	1008244 <_Balloc>
 1004f04:	d8800715 	stw	r2,28(sp)
 1004f08:	e0801015 	stw	r2,64(fp)
 1004f0c:	00800384 	movi	r2,14
 1004f10:	1400f736 	bltu	r2,r16,10052f0 <_dtoa_r+0x764>
 1004f14:	8800f626 	beq	r17,zero,10052f0 <_dtoa_r+0x764>
 1004f18:	d9c00517 	ldw	r7,20(sp)
 1004f1c:	01c39a0e 	bge	zero,r7,1005d88 <_dtoa_r+0x11fc>
 1004f20:	388003cc 	andi	r2,r7,15
 1004f24:	100490fa 	slli	r2,r2,3
 1004f28:	382bd13a 	srai	r21,r7,4
 1004f2c:	00c04074 	movhi	r3,257
 1004f30:	18c89004 	addi	r3,r3,8768
 1004f34:	1885883a 	add	r2,r3,r2
 1004f38:	a8c0040c 	andi	r3,r21,16
 1004f3c:	12400017 	ldw	r9,0(r2)
 1004f40:	12000117 	ldw	r8,4(r2)
 1004f44:	18037926 	beq	r3,zero,1005d2c <_dtoa_r+0x11a0>
 1004f48:	00804074 	movhi	r2,257
 1004f4c:	10888604 	addi	r2,r2,8728
 1004f50:	11800817 	ldw	r6,32(r2)
 1004f54:	11c00917 	ldw	r7,36(r2)
 1004f58:	9009883a 	mov	r4,r18
 1004f5c:	980b883a 	mov	r5,r19
 1004f60:	da001715 	stw	r8,92(sp)
 1004f64:	da401615 	stw	r9,88(sp)
 1004f68:	100d1cc0 	call	100d1cc <__divdf3>
 1004f6c:	da001717 	ldw	r8,92(sp)
 1004f70:	da401617 	ldw	r9,88(sp)
 1004f74:	ad4003cc 	andi	r21,r21,15
 1004f78:	040000c4 	movi	r16,3
 1004f7c:	1023883a 	mov	r17,r2
 1004f80:	1829883a 	mov	r20,r3
 1004f84:	a8001126 	beq	r21,zero,1004fcc <_dtoa_r+0x440>
 1004f88:	05c04074 	movhi	r23,257
 1004f8c:	bdc88604 	addi	r23,r23,8728
 1004f90:	4805883a 	mov	r2,r9
 1004f94:	4007883a 	mov	r3,r8
 1004f98:	a980004c 	andi	r6,r21,1
 1004f9c:	1009883a 	mov	r4,r2
 1004fa0:	a82bd07a 	srai	r21,r21,1
 1004fa4:	180b883a 	mov	r5,r3
 1004fa8:	30000426 	beq	r6,zero,1004fbc <_dtoa_r+0x430>
 1004fac:	b9800017 	ldw	r6,0(r23)
 1004fb0:	b9c00117 	ldw	r7,4(r23)
 1004fb4:	84000044 	addi	r16,r16,1
 1004fb8:	100ddf40 	call	100ddf4 <__muldf3>
 1004fbc:	bdc00204 	addi	r23,r23,8
 1004fc0:	a83ff51e 	bne	r21,zero,1004f98 <__alt_data_end+0xff804f98>
 1004fc4:	1013883a 	mov	r9,r2
 1004fc8:	1811883a 	mov	r8,r3
 1004fcc:	480d883a 	mov	r6,r9
 1004fd0:	400f883a 	mov	r7,r8
 1004fd4:	8809883a 	mov	r4,r17
 1004fd8:	a00b883a 	mov	r5,r20
 1004fdc:	100d1cc0 	call	100d1cc <__divdf3>
 1004fe0:	d8800f15 	stw	r2,60(sp)
 1004fe4:	d8c01015 	stw	r3,64(sp)
 1004fe8:	d8c00e17 	ldw	r3,56(sp)
 1004fec:	18000626 	beq	r3,zero,1005008 <_dtoa_r+0x47c>
 1004ff0:	d9000f17 	ldw	r4,60(sp)
 1004ff4:	d9401017 	ldw	r5,64(sp)
 1004ff8:	000d883a 	mov	r6,zero
 1004ffc:	01cffc34 	movhi	r7,16368
 1005000:	100dd000 	call	100dd00 <__ledf2>
 1005004:	10040b16 	blt	r2,zero,1006034 <_dtoa_r+0x14a8>
 1005008:	8009883a 	mov	r4,r16
 100500c:	100efdc0 	call	100efdc <__floatsidf>
 1005010:	d9800f17 	ldw	r6,60(sp)
 1005014:	d9c01017 	ldw	r7,64(sp)
 1005018:	1009883a 	mov	r4,r2
 100501c:	180b883a 	mov	r5,r3
 1005020:	100ddf40 	call	100ddf4 <__muldf3>
 1005024:	000d883a 	mov	r6,zero
 1005028:	01d00734 	movhi	r7,16412
 100502c:	1009883a 	mov	r4,r2
 1005030:	180b883a 	mov	r5,r3
 1005034:	100c9200 	call	100c920 <__adddf3>
 1005038:	1021883a 	mov	r16,r2
 100503c:	d8800617 	ldw	r2,24(sp)
 1005040:	047f3034 	movhi	r17,64704
 1005044:	1c63883a 	add	r17,r3,r17
 1005048:	10031826 	beq	r2,zero,1005cac <_dtoa_r+0x1120>
 100504c:	d8c00517 	ldw	r3,20(sp)
 1005050:	db000617 	ldw	r12,24(sp)
 1005054:	d8c01315 	stw	r3,76(sp)
 1005058:	d9000b17 	ldw	r4,44(sp)
 100505c:	20038f26 	beq	r4,zero,1005e9c <_dtoa_r+0x1310>
 1005060:	60bfffc4 	addi	r2,r12,-1
 1005064:	100490fa 	slli	r2,r2,3
 1005068:	00c04074 	movhi	r3,257
 100506c:	18c89004 	addi	r3,r3,8768
 1005070:	1885883a 	add	r2,r3,r2
 1005074:	11800017 	ldw	r6,0(r2)
 1005078:	11c00117 	ldw	r7,4(r2)
 100507c:	d8800717 	ldw	r2,28(sp)
 1005080:	0009883a 	mov	r4,zero
 1005084:	014ff834 	movhi	r5,16352
 1005088:	db001615 	stw	r12,88(sp)
 100508c:	15c00044 	addi	r23,r2,1
 1005090:	100d1cc0 	call	100d1cc <__divdf3>
 1005094:	800d883a 	mov	r6,r16
 1005098:	880f883a 	mov	r7,r17
 100509c:	1009883a 	mov	r4,r2
 10050a0:	180b883a 	mov	r5,r3
 10050a4:	100e6600 	call	100e660 <__subdf3>
 10050a8:	d9401017 	ldw	r5,64(sp)
 10050ac:	d9000f17 	ldw	r4,60(sp)
 10050b0:	102b883a 	mov	r21,r2
 10050b4:	d8c01215 	stw	r3,72(sp)
 10050b8:	100ef5c0 	call	100ef5c <__fixdfsi>
 10050bc:	1009883a 	mov	r4,r2
 10050c0:	1029883a 	mov	r20,r2
 10050c4:	100efdc0 	call	100efdc <__floatsidf>
 10050c8:	d9000f17 	ldw	r4,60(sp)
 10050cc:	d9401017 	ldw	r5,64(sp)
 10050d0:	100d883a 	mov	r6,r2
 10050d4:	180f883a 	mov	r7,r3
 10050d8:	100e6600 	call	100e660 <__subdf3>
 10050dc:	1823883a 	mov	r17,r3
 10050e0:	d8c00717 	ldw	r3,28(sp)
 10050e4:	d9401217 	ldw	r5,72(sp)
 10050e8:	a2000c04 	addi	r8,r20,48
 10050ec:	1021883a 	mov	r16,r2
 10050f0:	1a000005 	stb	r8,0(r3)
 10050f4:	800d883a 	mov	r6,r16
 10050f8:	880f883a 	mov	r7,r17
 10050fc:	a809883a 	mov	r4,r21
 1005100:	4029883a 	mov	r20,r8
 1005104:	100dc240 	call	100dc24 <__gedf2>
 1005108:	00841d16 	blt	zero,r2,1006180 <_dtoa_r+0x15f4>
 100510c:	800d883a 	mov	r6,r16
 1005110:	880f883a 	mov	r7,r17
 1005114:	0009883a 	mov	r4,zero
 1005118:	014ffc34 	movhi	r5,16368
 100511c:	100e6600 	call	100e660 <__subdf3>
 1005120:	d9401217 	ldw	r5,72(sp)
 1005124:	100d883a 	mov	r6,r2
 1005128:	180f883a 	mov	r7,r3
 100512c:	a809883a 	mov	r4,r21
 1005130:	100dc240 	call	100dc24 <__gedf2>
 1005134:	db001617 	ldw	r12,88(sp)
 1005138:	00840e16 	blt	zero,r2,1006174 <_dtoa_r+0x15e8>
 100513c:	00800044 	movi	r2,1
 1005140:	13006b0e 	bge	r2,r12,10052f0 <_dtoa_r+0x764>
 1005144:	d9000717 	ldw	r4,28(sp)
 1005148:	dd800f15 	stw	r22,60(sp)
 100514c:	dcc01015 	stw	r19,64(sp)
 1005150:	2319883a 	add	r12,r4,r12
 1005154:	dcc01217 	ldw	r19,72(sp)
 1005158:	602d883a 	mov	r22,r12
 100515c:	dc801215 	stw	r18,72(sp)
 1005160:	b825883a 	mov	r18,r23
 1005164:	00000906 	br	100518c <_dtoa_r+0x600>
 1005168:	100e6600 	call	100e660 <__subdf3>
 100516c:	a80d883a 	mov	r6,r21
 1005170:	980f883a 	mov	r7,r19
 1005174:	1009883a 	mov	r4,r2
 1005178:	180b883a 	mov	r5,r3
 100517c:	100dd000 	call	100dd00 <__ledf2>
 1005180:	1003e816 	blt	r2,zero,1006124 <_dtoa_r+0x1598>
 1005184:	b825883a 	mov	r18,r23
 1005188:	bd83e926 	beq	r23,r22,1006130 <_dtoa_r+0x15a4>
 100518c:	a809883a 	mov	r4,r21
 1005190:	980b883a 	mov	r5,r19
 1005194:	000d883a 	mov	r6,zero
 1005198:	01d00934 	movhi	r7,16420
 100519c:	100ddf40 	call	100ddf4 <__muldf3>
 10051a0:	000d883a 	mov	r6,zero
 10051a4:	01d00934 	movhi	r7,16420
 10051a8:	8009883a 	mov	r4,r16
 10051ac:	880b883a 	mov	r5,r17
 10051b0:	102b883a 	mov	r21,r2
 10051b4:	1827883a 	mov	r19,r3
 10051b8:	100ddf40 	call	100ddf4 <__muldf3>
 10051bc:	180b883a 	mov	r5,r3
 10051c0:	1009883a 	mov	r4,r2
 10051c4:	1821883a 	mov	r16,r3
 10051c8:	1023883a 	mov	r17,r2
 10051cc:	100ef5c0 	call	100ef5c <__fixdfsi>
 10051d0:	1009883a 	mov	r4,r2
 10051d4:	1029883a 	mov	r20,r2
 10051d8:	100efdc0 	call	100efdc <__floatsidf>
 10051dc:	8809883a 	mov	r4,r17
 10051e0:	800b883a 	mov	r5,r16
 10051e4:	100d883a 	mov	r6,r2
 10051e8:	180f883a 	mov	r7,r3
 10051ec:	100e6600 	call	100e660 <__subdf3>
 10051f0:	a5000c04 	addi	r20,r20,48
 10051f4:	a80d883a 	mov	r6,r21
 10051f8:	980f883a 	mov	r7,r19
 10051fc:	1009883a 	mov	r4,r2
 1005200:	180b883a 	mov	r5,r3
 1005204:	95000005 	stb	r20,0(r18)
 1005208:	1021883a 	mov	r16,r2
 100520c:	1823883a 	mov	r17,r3
 1005210:	100dd000 	call	100dd00 <__ledf2>
 1005214:	bdc00044 	addi	r23,r23,1
 1005218:	800d883a 	mov	r6,r16
 100521c:	880f883a 	mov	r7,r17
 1005220:	0009883a 	mov	r4,zero
 1005224:	014ffc34 	movhi	r5,16368
 1005228:	103fcf0e 	bge	r2,zero,1005168 <__alt_data_end+0xff805168>
 100522c:	d8c01317 	ldw	r3,76(sp)
 1005230:	d8c00515 	stw	r3,20(sp)
 1005234:	d9400917 	ldw	r5,36(sp)
 1005238:	e009883a 	mov	r4,fp
 100523c:	10082ec0 	call	10082ec <_Bfree>
 1005240:	d9000517 	ldw	r4,20(sp)
 1005244:	d9802317 	ldw	r6,140(sp)
 1005248:	d9c02517 	ldw	r7,148(sp)
 100524c:	b8000005 	stb	zero,0(r23)
 1005250:	20800044 	addi	r2,r4,1
 1005254:	30800015 	stw	r2,0(r6)
 1005258:	3802aa26 	beq	r7,zero,1005d04 <_dtoa_r+0x1178>
 100525c:	3dc00015 	stw	r23,0(r7)
 1005260:	d8800717 	ldw	r2,28(sp)
 1005264:	003e7906 	br	1004c4c <__alt_data_end+0xff804c4c>
 1005268:	00800434 	movhi	r2,16
 100526c:	10bfffc4 	addi	r2,r2,-1
 1005270:	88a2703a 	and	r17,r17,r2
 1005274:	883e851e 	bne	r17,zero,1004c8c <__alt_data_end+0xff804c8c>
 1005278:	00804074 	movhi	r2,257
 100527c:	10887104 	addi	r2,r2,8644
 1005280:	003e8406 	br	1004c94 <__alt_data_end+0xff804c94>
 1005284:	10c00204 	addi	r3,r2,8
 1005288:	003e8706 	br	1004ca8 <__alt_data_end+0xff804ca8>
 100528c:	01400434 	movhi	r5,16
 1005290:	297fffc4 	addi	r5,r5,-1
 1005294:	994a703a 	and	r5,r19,r5
 1005298:	9009883a 	mov	r4,r18
 100529c:	843f0044 	addi	r16,r16,-1023
 10052a0:	294ffc34 	orhi	r5,r5,16368
 10052a4:	dd800217 	ldw	r22,8(sp)
 10052a8:	d8001115 	stw	zero,68(sp)
 10052ac:	003ea506 	br	1004d44 <__alt_data_end+0xff804d44>
 10052b0:	00804074 	movhi	r2,257
 10052b4:	10886804 	addi	r2,r2,8608
 10052b8:	003e6406 	br	1004c4c <__alt_data_end+0xff804c4c>
 10052bc:	e0001115 	stw	zero,68(fp)
 10052c0:	000b883a 	mov	r5,zero
 10052c4:	e009883a 	mov	r4,fp
 10052c8:	10082440 	call	1008244 <_Balloc>
 10052cc:	01bfffc4 	movi	r6,-1
 10052d0:	01c00044 	movi	r7,1
 10052d4:	d8800715 	stw	r2,28(sp)
 10052d8:	d9800c15 	stw	r6,48(sp)
 10052dc:	e0801015 	stw	r2,64(fp)
 10052e0:	d8000315 	stw	zero,12(sp)
 10052e4:	d9c00b15 	stw	r7,44(sp)
 10052e8:	d9800615 	stw	r6,24(sp)
 10052ec:	d8002215 	stw	zero,136(sp)
 10052f0:	d8800117 	ldw	r2,4(sp)
 10052f4:	10008916 	blt	r2,zero,100551c <_dtoa_r+0x990>
 10052f8:	d9000517 	ldw	r4,20(sp)
 10052fc:	00c00384 	movi	r3,14
 1005300:	19008616 	blt	r3,r4,100551c <_dtoa_r+0x990>
 1005304:	200490fa 	slli	r2,r4,3
 1005308:	00c04074 	movhi	r3,257
 100530c:	d9802217 	ldw	r6,136(sp)
 1005310:	18c89004 	addi	r3,r3,8768
 1005314:	1885883a 	add	r2,r3,r2
 1005318:	14000017 	ldw	r16,0(r2)
 100531c:	14400117 	ldw	r17,4(r2)
 1005320:	30016316 	blt	r6,zero,10058b0 <_dtoa_r+0xd24>
 1005324:	800d883a 	mov	r6,r16
 1005328:	880f883a 	mov	r7,r17
 100532c:	9009883a 	mov	r4,r18
 1005330:	980b883a 	mov	r5,r19
 1005334:	100d1cc0 	call	100d1cc <__divdf3>
 1005338:	180b883a 	mov	r5,r3
 100533c:	1009883a 	mov	r4,r2
 1005340:	100ef5c0 	call	100ef5c <__fixdfsi>
 1005344:	1009883a 	mov	r4,r2
 1005348:	102b883a 	mov	r21,r2
 100534c:	100efdc0 	call	100efdc <__floatsidf>
 1005350:	800d883a 	mov	r6,r16
 1005354:	880f883a 	mov	r7,r17
 1005358:	1009883a 	mov	r4,r2
 100535c:	180b883a 	mov	r5,r3
 1005360:	100ddf40 	call	100ddf4 <__muldf3>
 1005364:	100d883a 	mov	r6,r2
 1005368:	180f883a 	mov	r7,r3
 100536c:	9009883a 	mov	r4,r18
 1005370:	980b883a 	mov	r5,r19
 1005374:	100e6600 	call	100e660 <__subdf3>
 1005378:	d9c00717 	ldw	r7,28(sp)
 100537c:	1009883a 	mov	r4,r2
 1005380:	a8800c04 	addi	r2,r21,48
 1005384:	38800005 	stb	r2,0(r7)
 1005388:	3dc00044 	addi	r23,r7,1
 100538c:	d9c00617 	ldw	r7,24(sp)
 1005390:	01800044 	movi	r6,1
 1005394:	180b883a 	mov	r5,r3
 1005398:	2005883a 	mov	r2,r4
 100539c:	39803826 	beq	r7,r6,1005480 <_dtoa_r+0x8f4>
 10053a0:	000d883a 	mov	r6,zero
 10053a4:	01d00934 	movhi	r7,16420
 10053a8:	100ddf40 	call	100ddf4 <__muldf3>
 10053ac:	000d883a 	mov	r6,zero
 10053b0:	000f883a 	mov	r7,zero
 10053b4:	1009883a 	mov	r4,r2
 10053b8:	180b883a 	mov	r5,r3
 10053bc:	1025883a 	mov	r18,r2
 10053c0:	1827883a 	mov	r19,r3
 10053c4:	100db9c0 	call	100db9c <__eqdf2>
 10053c8:	103f9a26 	beq	r2,zero,1005234 <__alt_data_end+0xff805234>
 10053cc:	d9c00617 	ldw	r7,24(sp)
 10053d0:	d8c00717 	ldw	r3,28(sp)
 10053d4:	b829883a 	mov	r20,r23
 10053d8:	38bfffc4 	addi	r2,r7,-1
 10053dc:	18ad883a 	add	r22,r3,r2
 10053e0:	00000a06 	br	100540c <_dtoa_r+0x880>
 10053e4:	100ddf40 	call	100ddf4 <__muldf3>
 10053e8:	000d883a 	mov	r6,zero
 10053ec:	000f883a 	mov	r7,zero
 10053f0:	1009883a 	mov	r4,r2
 10053f4:	180b883a 	mov	r5,r3
 10053f8:	1025883a 	mov	r18,r2
 10053fc:	1827883a 	mov	r19,r3
 1005400:	b829883a 	mov	r20,r23
 1005404:	100db9c0 	call	100db9c <__eqdf2>
 1005408:	103f8a26 	beq	r2,zero,1005234 <__alt_data_end+0xff805234>
 100540c:	800d883a 	mov	r6,r16
 1005410:	880f883a 	mov	r7,r17
 1005414:	9009883a 	mov	r4,r18
 1005418:	980b883a 	mov	r5,r19
 100541c:	100d1cc0 	call	100d1cc <__divdf3>
 1005420:	180b883a 	mov	r5,r3
 1005424:	1009883a 	mov	r4,r2
 1005428:	100ef5c0 	call	100ef5c <__fixdfsi>
 100542c:	1009883a 	mov	r4,r2
 1005430:	102b883a 	mov	r21,r2
 1005434:	100efdc0 	call	100efdc <__floatsidf>
 1005438:	800d883a 	mov	r6,r16
 100543c:	880f883a 	mov	r7,r17
 1005440:	1009883a 	mov	r4,r2
 1005444:	180b883a 	mov	r5,r3
 1005448:	100ddf40 	call	100ddf4 <__muldf3>
 100544c:	100d883a 	mov	r6,r2
 1005450:	180f883a 	mov	r7,r3
 1005454:	9009883a 	mov	r4,r18
 1005458:	980b883a 	mov	r5,r19
 100545c:	100e6600 	call	100e660 <__subdf3>
 1005460:	aa000c04 	addi	r8,r21,48
 1005464:	a2000005 	stb	r8,0(r20)
 1005468:	000d883a 	mov	r6,zero
 100546c:	01d00934 	movhi	r7,16420
 1005470:	1009883a 	mov	r4,r2
 1005474:	180b883a 	mov	r5,r3
 1005478:	a5c00044 	addi	r23,r20,1
 100547c:	b53fd91e 	bne	r22,r20,10053e4 <__alt_data_end+0xff8053e4>
 1005480:	100d883a 	mov	r6,r2
 1005484:	180f883a 	mov	r7,r3
 1005488:	1009883a 	mov	r4,r2
 100548c:	180b883a 	mov	r5,r3
 1005490:	100c9200 	call	100c920 <__adddf3>
 1005494:	100d883a 	mov	r6,r2
 1005498:	180f883a 	mov	r7,r3
 100549c:	8009883a 	mov	r4,r16
 10054a0:	880b883a 	mov	r5,r17
 10054a4:	1027883a 	mov	r19,r2
 10054a8:	1825883a 	mov	r18,r3
 10054ac:	100dd000 	call	100dd00 <__ledf2>
 10054b0:	10000816 	blt	r2,zero,10054d4 <_dtoa_r+0x948>
 10054b4:	980d883a 	mov	r6,r19
 10054b8:	900f883a 	mov	r7,r18
 10054bc:	8009883a 	mov	r4,r16
 10054c0:	880b883a 	mov	r5,r17
 10054c4:	100db9c0 	call	100db9c <__eqdf2>
 10054c8:	103f5a1e 	bne	r2,zero,1005234 <__alt_data_end+0xff805234>
 10054cc:	ad40004c 	andi	r21,r21,1
 10054d0:	a83f5826 	beq	r21,zero,1005234 <__alt_data_end+0xff805234>
 10054d4:	bd3fffc3 	ldbu	r20,-1(r23)
 10054d8:	b8bfffc4 	addi	r2,r23,-1
 10054dc:	1007883a 	mov	r3,r2
 10054e0:	01400e44 	movi	r5,57
 10054e4:	d9800717 	ldw	r6,28(sp)
 10054e8:	00000506 	br	1005500 <_dtoa_r+0x974>
 10054ec:	18ffffc4 	addi	r3,r3,-1
 10054f0:	11824726 	beq	r2,r6,1005e10 <_dtoa_r+0x1284>
 10054f4:	1d000003 	ldbu	r20,0(r3)
 10054f8:	102f883a 	mov	r23,r2
 10054fc:	10bfffc4 	addi	r2,r2,-1
 1005500:	a1003fcc 	andi	r4,r20,255
 1005504:	2100201c 	xori	r4,r4,128
 1005508:	213fe004 	addi	r4,r4,-128
 100550c:	217ff726 	beq	r4,r5,10054ec <__alt_data_end+0xff8054ec>
 1005510:	a2000044 	addi	r8,r20,1
 1005514:	12000005 	stb	r8,0(r2)
 1005518:	003f4606 	br	1005234 <__alt_data_end+0xff805234>
 100551c:	d9000b17 	ldw	r4,44(sp)
 1005520:	2000c826 	beq	r4,zero,1005844 <_dtoa_r+0xcb8>
 1005524:	d9800317 	ldw	r6,12(sp)
 1005528:	00c00044 	movi	r3,1
 100552c:	1980f90e 	bge	r3,r6,1005914 <_dtoa_r+0xd88>
 1005530:	d8800617 	ldw	r2,24(sp)
 1005534:	d8c00a17 	ldw	r3,40(sp)
 1005538:	157fffc4 	addi	r21,r2,-1
 100553c:	1d41f316 	blt	r3,r21,1005d0c <_dtoa_r+0x1180>
 1005540:	1d6bc83a 	sub	r21,r3,r21
 1005544:	d9c00617 	ldw	r7,24(sp)
 1005548:	3802aa16 	blt	r7,zero,1005ff4 <_dtoa_r+0x1468>
 100554c:	dd000817 	ldw	r20,32(sp)
 1005550:	d8800617 	ldw	r2,24(sp)
 1005554:	d8c00817 	ldw	r3,32(sp)
 1005558:	01400044 	movi	r5,1
 100555c:	e009883a 	mov	r4,fp
 1005560:	1887883a 	add	r3,r3,r2
 1005564:	d8c00815 	stw	r3,32(sp)
 1005568:	b0ad883a 	add	r22,r22,r2
 100556c:	10086780 	call	1008678 <__i2b>
 1005570:	1023883a 	mov	r17,r2
 1005574:	a0000826 	beq	r20,zero,1005598 <_dtoa_r+0xa0c>
 1005578:	0580070e 	bge	zero,r22,1005598 <_dtoa_r+0xa0c>
 100557c:	a005883a 	mov	r2,r20
 1005580:	b500b916 	blt	r22,r20,1005868 <_dtoa_r+0xcdc>
 1005584:	d9000817 	ldw	r4,32(sp)
 1005588:	a0a9c83a 	sub	r20,r20,r2
 100558c:	b0adc83a 	sub	r22,r22,r2
 1005590:	2089c83a 	sub	r4,r4,r2
 1005594:	d9000815 	stw	r4,32(sp)
 1005598:	d9800a17 	ldw	r6,40(sp)
 100559c:	0181810e 	bge	zero,r6,1005ba4 <_dtoa_r+0x1018>
 10055a0:	d9c00b17 	ldw	r7,44(sp)
 10055a4:	3800b326 	beq	r7,zero,1005874 <_dtoa_r+0xce8>
 10055a8:	a800b226 	beq	r21,zero,1005874 <_dtoa_r+0xce8>
 10055ac:	880b883a 	mov	r5,r17
 10055b0:	a80d883a 	mov	r6,r21
 10055b4:	e009883a 	mov	r4,fp
 10055b8:	10089400 	call	1008940 <__pow5mult>
 10055bc:	d9800917 	ldw	r6,36(sp)
 10055c0:	100b883a 	mov	r5,r2
 10055c4:	e009883a 	mov	r4,fp
 10055c8:	1023883a 	mov	r17,r2
 10055cc:	10086b40 	call	10086b4 <__multiply>
 10055d0:	1021883a 	mov	r16,r2
 10055d4:	d8800a17 	ldw	r2,40(sp)
 10055d8:	d9400917 	ldw	r5,36(sp)
 10055dc:	e009883a 	mov	r4,fp
 10055e0:	1545c83a 	sub	r2,r2,r21
 10055e4:	d8800a15 	stw	r2,40(sp)
 10055e8:	10082ec0 	call	10082ec <_Bfree>
 10055ec:	d8c00a17 	ldw	r3,40(sp)
 10055f0:	18009f1e 	bne	r3,zero,1005870 <_dtoa_r+0xce4>
 10055f4:	05c00044 	movi	r23,1
 10055f8:	e009883a 	mov	r4,fp
 10055fc:	b80b883a 	mov	r5,r23
 1005600:	10086780 	call	1008678 <__i2b>
 1005604:	d9000d17 	ldw	r4,52(sp)
 1005608:	102b883a 	mov	r21,r2
 100560c:	2000ce26 	beq	r4,zero,1005948 <_dtoa_r+0xdbc>
 1005610:	200d883a 	mov	r6,r4
 1005614:	100b883a 	mov	r5,r2
 1005618:	e009883a 	mov	r4,fp
 100561c:	10089400 	call	1008940 <__pow5mult>
 1005620:	d9800317 	ldw	r6,12(sp)
 1005624:	102b883a 	mov	r21,r2
 1005628:	b981810e 	bge	r23,r6,1005c30 <_dtoa_r+0x10a4>
 100562c:	0027883a 	mov	r19,zero
 1005630:	a8800417 	ldw	r2,16(r21)
 1005634:	05c00804 	movi	r23,32
 1005638:	10800104 	addi	r2,r2,4
 100563c:	1085883a 	add	r2,r2,r2
 1005640:	1085883a 	add	r2,r2,r2
 1005644:	a885883a 	add	r2,r21,r2
 1005648:	11000017 	ldw	r4,0(r2)
 100564c:	10085600 	call	1008560 <__hi0bits>
 1005650:	b885c83a 	sub	r2,r23,r2
 1005654:	1585883a 	add	r2,r2,r22
 1005658:	108007cc 	andi	r2,r2,31
 100565c:	1000b326 	beq	r2,zero,100592c <_dtoa_r+0xda0>
 1005660:	00c00804 	movi	r3,32
 1005664:	1887c83a 	sub	r3,r3,r2
 1005668:	01000104 	movi	r4,4
 100566c:	20c2cd0e 	bge	r4,r3,10061a4 <_dtoa_r+0x1618>
 1005670:	00c00704 	movi	r3,28
 1005674:	1885c83a 	sub	r2,r3,r2
 1005678:	d8c00817 	ldw	r3,32(sp)
 100567c:	a0a9883a 	add	r20,r20,r2
 1005680:	b0ad883a 	add	r22,r22,r2
 1005684:	1887883a 	add	r3,r3,r2
 1005688:	d8c00815 	stw	r3,32(sp)
 100568c:	d9800817 	ldw	r6,32(sp)
 1005690:	0180040e 	bge	zero,r6,10056a4 <_dtoa_r+0xb18>
 1005694:	800b883a 	mov	r5,r16
 1005698:	e009883a 	mov	r4,fp
 100569c:	1008a800 	call	1008a80 <__lshift>
 10056a0:	1021883a 	mov	r16,r2
 10056a4:	0580050e 	bge	zero,r22,10056bc <_dtoa_r+0xb30>
 10056a8:	a80b883a 	mov	r5,r21
 10056ac:	b00d883a 	mov	r6,r22
 10056b0:	e009883a 	mov	r4,fp
 10056b4:	1008a800 	call	1008a80 <__lshift>
 10056b8:	102b883a 	mov	r21,r2
 10056bc:	d9c00e17 	ldw	r7,56(sp)
 10056c0:	3801211e 	bne	r7,zero,1005b48 <_dtoa_r+0xfbc>
 10056c4:	d9800617 	ldw	r6,24(sp)
 10056c8:	0181380e 	bge	zero,r6,1005bac <_dtoa_r+0x1020>
 10056cc:	d8c00b17 	ldw	r3,44(sp)
 10056d0:	1800ab1e 	bne	r3,zero,1005980 <_dtoa_r+0xdf4>
 10056d4:	dc800717 	ldw	r18,28(sp)
 10056d8:	dcc00617 	ldw	r19,24(sp)
 10056dc:	9029883a 	mov	r20,r18
 10056e0:	00000206 	br	10056ec <_dtoa_r+0xb60>
 10056e4:	10083140 	call	1008314 <__multadd>
 10056e8:	1021883a 	mov	r16,r2
 10056ec:	a80b883a 	mov	r5,r21
 10056f0:	8009883a 	mov	r4,r16
 10056f4:	10049640 	call	1004964 <quorem>
 10056f8:	10800c04 	addi	r2,r2,48
 10056fc:	90800005 	stb	r2,0(r18)
 1005700:	94800044 	addi	r18,r18,1
 1005704:	9507c83a 	sub	r3,r18,r20
 1005708:	000f883a 	mov	r7,zero
 100570c:	01800284 	movi	r6,10
 1005710:	800b883a 	mov	r5,r16
 1005714:	e009883a 	mov	r4,fp
 1005718:	1cfff216 	blt	r3,r19,10056e4 <__alt_data_end+0xff8056e4>
 100571c:	1011883a 	mov	r8,r2
 1005720:	d8800617 	ldw	r2,24(sp)
 1005724:	0082370e 	bge	zero,r2,1006004 <_dtoa_r+0x1478>
 1005728:	d9000717 	ldw	r4,28(sp)
 100572c:	0025883a 	mov	r18,zero
 1005730:	20af883a 	add	r23,r4,r2
 1005734:	01800044 	movi	r6,1
 1005738:	800b883a 	mov	r5,r16
 100573c:	e009883a 	mov	r4,fp
 1005740:	da001715 	stw	r8,92(sp)
 1005744:	1008a800 	call	1008a80 <__lshift>
 1005748:	a80b883a 	mov	r5,r21
 100574c:	1009883a 	mov	r4,r2
 1005750:	d8800915 	stw	r2,36(sp)
 1005754:	1008bc80 	call	1008bc8 <__mcmp>
 1005758:	da001717 	ldw	r8,92(sp)
 100575c:	0081800e 	bge	zero,r2,1005d60 <_dtoa_r+0x11d4>
 1005760:	b93fffc3 	ldbu	r4,-1(r23)
 1005764:	b8bfffc4 	addi	r2,r23,-1
 1005768:	1007883a 	mov	r3,r2
 100576c:	01800e44 	movi	r6,57
 1005770:	d9c00717 	ldw	r7,28(sp)
 1005774:	00000506 	br	100578c <_dtoa_r+0xc00>
 1005778:	18ffffc4 	addi	r3,r3,-1
 100577c:	11c12326 	beq	r2,r7,1005c0c <_dtoa_r+0x1080>
 1005780:	19000003 	ldbu	r4,0(r3)
 1005784:	102f883a 	mov	r23,r2
 1005788:	10bfffc4 	addi	r2,r2,-1
 100578c:	21403fcc 	andi	r5,r4,255
 1005790:	2940201c 	xori	r5,r5,128
 1005794:	297fe004 	addi	r5,r5,-128
 1005798:	29bff726 	beq	r5,r6,1005778 <__alt_data_end+0xff805778>
 100579c:	21000044 	addi	r4,r4,1
 10057a0:	11000005 	stb	r4,0(r2)
 10057a4:	a80b883a 	mov	r5,r21
 10057a8:	e009883a 	mov	r4,fp
 10057ac:	10082ec0 	call	10082ec <_Bfree>
 10057b0:	883ea026 	beq	r17,zero,1005234 <__alt_data_end+0xff805234>
 10057b4:	90000426 	beq	r18,zero,10057c8 <_dtoa_r+0xc3c>
 10057b8:	94400326 	beq	r18,r17,10057c8 <_dtoa_r+0xc3c>
 10057bc:	900b883a 	mov	r5,r18
 10057c0:	e009883a 	mov	r4,fp
 10057c4:	10082ec0 	call	10082ec <_Bfree>
 10057c8:	880b883a 	mov	r5,r17
 10057cc:	e009883a 	mov	r4,fp
 10057d0:	10082ec0 	call	10082ec <_Bfree>
 10057d4:	003e9706 	br	1005234 <__alt_data_end+0xff805234>
 10057d8:	01800044 	movi	r6,1
 10057dc:	d9800e15 	stw	r6,56(sp)
 10057e0:	003d9606 	br	1004e3c <__alt_data_end+0xff804e3c>
 10057e4:	d8800817 	ldw	r2,32(sp)
 10057e8:	d8c00517 	ldw	r3,20(sp)
 10057ec:	d8000d15 	stw	zero,52(sp)
 10057f0:	10c5c83a 	sub	r2,r2,r3
 10057f4:	00c9c83a 	sub	r4,zero,r3
 10057f8:	d8800815 	stw	r2,32(sp)
 10057fc:	d9000a15 	stw	r4,40(sp)
 1005800:	003d9706 	br	1004e60 <__alt_data_end+0xff804e60>
 1005804:	05adc83a 	sub	r22,zero,r22
 1005808:	dd800815 	stw	r22,32(sp)
 100580c:	002d883a 	mov	r22,zero
 1005810:	003d8e06 	br	1004e4c <__alt_data_end+0xff804e4c>
 1005814:	d9000517 	ldw	r4,20(sp)
 1005818:	100efdc0 	call	100efdc <__floatsidf>
 100581c:	100d883a 	mov	r6,r2
 1005820:	180f883a 	mov	r7,r3
 1005824:	a009883a 	mov	r4,r20
 1005828:	880b883a 	mov	r5,r17
 100582c:	100db9c0 	call	100db9c <__eqdf2>
 1005830:	103d7126 	beq	r2,zero,1004df8 <__alt_data_end+0xff804df8>
 1005834:	d9c00517 	ldw	r7,20(sp)
 1005838:	39ffffc4 	addi	r7,r7,-1
 100583c:	d9c00515 	stw	r7,20(sp)
 1005840:	003d6d06 	br	1004df8 <__alt_data_end+0xff804df8>
 1005844:	dd400a17 	ldw	r21,40(sp)
 1005848:	dd000817 	ldw	r20,32(sp)
 100584c:	0023883a 	mov	r17,zero
 1005850:	003f4806 	br	1005574 <__alt_data_end+0xff805574>
 1005854:	10e3c83a 	sub	r17,r2,r3
 1005858:	9448983a 	sll	r4,r18,r17
 100585c:	003d3206 	br	1004d28 <__alt_data_end+0xff804d28>
 1005860:	d8000e15 	stw	zero,56(sp)
 1005864:	003d7506 	br	1004e3c <__alt_data_end+0xff804e3c>
 1005868:	b005883a 	mov	r2,r22
 100586c:	003f4506 	br	1005584 <__alt_data_end+0xff805584>
 1005870:	dc000915 	stw	r16,36(sp)
 1005874:	d9800a17 	ldw	r6,40(sp)
 1005878:	d9400917 	ldw	r5,36(sp)
 100587c:	e009883a 	mov	r4,fp
 1005880:	10089400 	call	1008940 <__pow5mult>
 1005884:	1021883a 	mov	r16,r2
 1005888:	003f5a06 	br	10055f4 <__alt_data_end+0xff8055f4>
 100588c:	01c00044 	movi	r7,1
 1005890:	d9c00b15 	stw	r7,44(sp)
 1005894:	d8802217 	ldw	r2,136(sp)
 1005898:	0081280e 	bge	zero,r2,1005d3c <_dtoa_r+0x11b0>
 100589c:	100d883a 	mov	r6,r2
 10058a0:	1021883a 	mov	r16,r2
 10058a4:	d8800c15 	stw	r2,48(sp)
 10058a8:	d8800615 	stw	r2,24(sp)
 10058ac:	003d8806 	br	1004ed0 <__alt_data_end+0xff804ed0>
 10058b0:	d8800617 	ldw	r2,24(sp)
 10058b4:	00be9b16 	blt	zero,r2,1005324 <__alt_data_end+0xff805324>
 10058b8:	10010f1e 	bne	r2,zero,1005cf8 <_dtoa_r+0x116c>
 10058bc:	880b883a 	mov	r5,r17
 10058c0:	000d883a 	mov	r6,zero
 10058c4:	01d00534 	movhi	r7,16404
 10058c8:	8009883a 	mov	r4,r16
 10058cc:	100ddf40 	call	100ddf4 <__muldf3>
 10058d0:	900d883a 	mov	r6,r18
 10058d4:	980f883a 	mov	r7,r19
 10058d8:	1009883a 	mov	r4,r2
 10058dc:	180b883a 	mov	r5,r3
 10058e0:	100dc240 	call	100dc24 <__gedf2>
 10058e4:	002b883a 	mov	r21,zero
 10058e8:	0023883a 	mov	r17,zero
 10058ec:	1000bf16 	blt	r2,zero,1005bec <_dtoa_r+0x1060>
 10058f0:	d9802217 	ldw	r6,136(sp)
 10058f4:	ddc00717 	ldw	r23,28(sp)
 10058f8:	018c303a 	nor	r6,zero,r6
 10058fc:	d9800515 	stw	r6,20(sp)
 1005900:	a80b883a 	mov	r5,r21
 1005904:	e009883a 	mov	r4,fp
 1005908:	10082ec0 	call	10082ec <_Bfree>
 100590c:	883e4926 	beq	r17,zero,1005234 <__alt_data_end+0xff805234>
 1005910:	003fad06 	br	10057c8 <__alt_data_end+0xff8057c8>
 1005914:	d9c01117 	ldw	r7,68(sp)
 1005918:	3801bc26 	beq	r7,zero,100600c <_dtoa_r+0x1480>
 100591c:	10810cc4 	addi	r2,r2,1075
 1005920:	dd400a17 	ldw	r21,40(sp)
 1005924:	dd000817 	ldw	r20,32(sp)
 1005928:	003f0a06 	br	1005554 <__alt_data_end+0xff805554>
 100592c:	00800704 	movi	r2,28
 1005930:	d9000817 	ldw	r4,32(sp)
 1005934:	a0a9883a 	add	r20,r20,r2
 1005938:	b0ad883a 	add	r22,r22,r2
 100593c:	2089883a 	add	r4,r4,r2
 1005940:	d9000815 	stw	r4,32(sp)
 1005944:	003f5106 	br	100568c <__alt_data_end+0xff80568c>
 1005948:	d8c00317 	ldw	r3,12(sp)
 100594c:	b8c1fc0e 	bge	r23,r3,1006140 <_dtoa_r+0x15b4>
 1005950:	0027883a 	mov	r19,zero
 1005954:	b805883a 	mov	r2,r23
 1005958:	003f3e06 	br	1005654 <__alt_data_end+0xff805654>
 100595c:	880b883a 	mov	r5,r17
 1005960:	e009883a 	mov	r4,fp
 1005964:	000f883a 	mov	r7,zero
 1005968:	01800284 	movi	r6,10
 100596c:	10083140 	call	1008314 <__multadd>
 1005970:	d9000c17 	ldw	r4,48(sp)
 1005974:	1023883a 	mov	r17,r2
 1005978:	0102040e 	bge	zero,r4,100618c <_dtoa_r+0x1600>
 100597c:	d9000615 	stw	r4,24(sp)
 1005980:	0500050e 	bge	zero,r20,1005998 <_dtoa_r+0xe0c>
 1005984:	880b883a 	mov	r5,r17
 1005988:	a00d883a 	mov	r6,r20
 100598c:	e009883a 	mov	r4,fp
 1005990:	1008a800 	call	1008a80 <__lshift>
 1005994:	1023883a 	mov	r17,r2
 1005998:	9801241e 	bne	r19,zero,1005e2c <_dtoa_r+0x12a0>
 100599c:	8829883a 	mov	r20,r17
 10059a0:	d9000617 	ldw	r4,24(sp)
 10059a4:	dcc00717 	ldw	r19,28(sp)
 10059a8:	9480004c 	andi	r18,r18,1
 10059ac:	20bfffc4 	addi	r2,r4,-1
 10059b0:	9885883a 	add	r2,r19,r2
 10059b4:	d8800415 	stw	r2,16(sp)
 10059b8:	dc800615 	stw	r18,24(sp)
 10059bc:	a80b883a 	mov	r5,r21
 10059c0:	8009883a 	mov	r4,r16
 10059c4:	10049640 	call	1004964 <quorem>
 10059c8:	880b883a 	mov	r5,r17
 10059cc:	8009883a 	mov	r4,r16
 10059d0:	102f883a 	mov	r23,r2
 10059d4:	1008bc80 	call	1008bc8 <__mcmp>
 10059d8:	a80b883a 	mov	r5,r21
 10059dc:	a00d883a 	mov	r6,r20
 10059e0:	e009883a 	mov	r4,fp
 10059e4:	102d883a 	mov	r22,r2
 10059e8:	1008c280 	call	1008c28 <__mdiff>
 10059ec:	1007883a 	mov	r3,r2
 10059f0:	10800317 	ldw	r2,12(r2)
 10059f4:	bc800c04 	addi	r18,r23,48
 10059f8:	180b883a 	mov	r5,r3
 10059fc:	10004e1e 	bne	r2,zero,1005b38 <_dtoa_r+0xfac>
 1005a00:	8009883a 	mov	r4,r16
 1005a04:	d8c01615 	stw	r3,88(sp)
 1005a08:	1008bc80 	call	1008bc8 <__mcmp>
 1005a0c:	d8c01617 	ldw	r3,88(sp)
 1005a10:	e009883a 	mov	r4,fp
 1005a14:	d8801615 	stw	r2,88(sp)
 1005a18:	180b883a 	mov	r5,r3
 1005a1c:	10082ec0 	call	10082ec <_Bfree>
 1005a20:	d8801617 	ldw	r2,88(sp)
 1005a24:	1000041e 	bne	r2,zero,1005a38 <_dtoa_r+0xeac>
 1005a28:	d9800317 	ldw	r6,12(sp)
 1005a2c:	3000021e 	bne	r6,zero,1005a38 <_dtoa_r+0xeac>
 1005a30:	d8c00617 	ldw	r3,24(sp)
 1005a34:	18003726 	beq	r3,zero,1005b14 <_dtoa_r+0xf88>
 1005a38:	b0002016 	blt	r22,zero,1005abc <_dtoa_r+0xf30>
 1005a3c:	b000041e 	bne	r22,zero,1005a50 <_dtoa_r+0xec4>
 1005a40:	d9000317 	ldw	r4,12(sp)
 1005a44:	2000021e 	bne	r4,zero,1005a50 <_dtoa_r+0xec4>
 1005a48:	d8c00617 	ldw	r3,24(sp)
 1005a4c:	18001b26 	beq	r3,zero,1005abc <_dtoa_r+0xf30>
 1005a50:	00810716 	blt	zero,r2,1005e70 <_dtoa_r+0x12e4>
 1005a54:	d8c00417 	ldw	r3,16(sp)
 1005a58:	9d800044 	addi	r22,r19,1
 1005a5c:	9c800005 	stb	r18,0(r19)
 1005a60:	b02f883a 	mov	r23,r22
 1005a64:	98c10626 	beq	r19,r3,1005e80 <_dtoa_r+0x12f4>
 1005a68:	800b883a 	mov	r5,r16
 1005a6c:	000f883a 	mov	r7,zero
 1005a70:	01800284 	movi	r6,10
 1005a74:	e009883a 	mov	r4,fp
 1005a78:	10083140 	call	1008314 <__multadd>
 1005a7c:	1021883a 	mov	r16,r2
 1005a80:	000f883a 	mov	r7,zero
 1005a84:	01800284 	movi	r6,10
 1005a88:	880b883a 	mov	r5,r17
 1005a8c:	e009883a 	mov	r4,fp
 1005a90:	8d002526 	beq	r17,r20,1005b28 <_dtoa_r+0xf9c>
 1005a94:	10083140 	call	1008314 <__multadd>
 1005a98:	a00b883a 	mov	r5,r20
 1005a9c:	000f883a 	mov	r7,zero
 1005aa0:	01800284 	movi	r6,10
 1005aa4:	e009883a 	mov	r4,fp
 1005aa8:	1023883a 	mov	r17,r2
 1005aac:	10083140 	call	1008314 <__multadd>
 1005ab0:	1029883a 	mov	r20,r2
 1005ab4:	b027883a 	mov	r19,r22
 1005ab8:	003fc006 	br	10059bc <__alt_data_end+0xff8059bc>
 1005abc:	9011883a 	mov	r8,r18
 1005ac0:	00800e0e 	bge	zero,r2,1005afc <_dtoa_r+0xf70>
 1005ac4:	800b883a 	mov	r5,r16
 1005ac8:	01800044 	movi	r6,1
 1005acc:	e009883a 	mov	r4,fp
 1005ad0:	da001715 	stw	r8,92(sp)
 1005ad4:	1008a800 	call	1008a80 <__lshift>
 1005ad8:	a80b883a 	mov	r5,r21
 1005adc:	1009883a 	mov	r4,r2
 1005ae0:	1021883a 	mov	r16,r2
 1005ae4:	1008bc80 	call	1008bc8 <__mcmp>
 1005ae8:	da001717 	ldw	r8,92(sp)
 1005aec:	0081960e 	bge	zero,r2,1006148 <_dtoa_r+0x15bc>
 1005af0:	00800e44 	movi	r2,57
 1005af4:	40817026 	beq	r8,r2,10060b8 <_dtoa_r+0x152c>
 1005af8:	ba000c44 	addi	r8,r23,49
 1005afc:	8825883a 	mov	r18,r17
 1005b00:	9dc00044 	addi	r23,r19,1
 1005b04:	9a000005 	stb	r8,0(r19)
 1005b08:	a023883a 	mov	r17,r20
 1005b0c:	dc000915 	stw	r16,36(sp)
 1005b10:	003f2406 	br	10057a4 <__alt_data_end+0xff8057a4>
 1005b14:	00800e44 	movi	r2,57
 1005b18:	9011883a 	mov	r8,r18
 1005b1c:	90816626 	beq	r18,r2,10060b8 <_dtoa_r+0x152c>
 1005b20:	05bff516 	blt	zero,r22,1005af8 <__alt_data_end+0xff805af8>
 1005b24:	003ff506 	br	1005afc <__alt_data_end+0xff805afc>
 1005b28:	10083140 	call	1008314 <__multadd>
 1005b2c:	1023883a 	mov	r17,r2
 1005b30:	1029883a 	mov	r20,r2
 1005b34:	003fdf06 	br	1005ab4 <__alt_data_end+0xff805ab4>
 1005b38:	e009883a 	mov	r4,fp
 1005b3c:	10082ec0 	call	10082ec <_Bfree>
 1005b40:	00800044 	movi	r2,1
 1005b44:	003fbc06 	br	1005a38 <__alt_data_end+0xff805a38>
 1005b48:	a80b883a 	mov	r5,r21
 1005b4c:	8009883a 	mov	r4,r16
 1005b50:	1008bc80 	call	1008bc8 <__mcmp>
 1005b54:	103edb0e 	bge	r2,zero,10056c4 <__alt_data_end+0xff8056c4>
 1005b58:	800b883a 	mov	r5,r16
 1005b5c:	000f883a 	mov	r7,zero
 1005b60:	01800284 	movi	r6,10
 1005b64:	e009883a 	mov	r4,fp
 1005b68:	10083140 	call	1008314 <__multadd>
 1005b6c:	1021883a 	mov	r16,r2
 1005b70:	d8800517 	ldw	r2,20(sp)
 1005b74:	d8c00b17 	ldw	r3,44(sp)
 1005b78:	10bfffc4 	addi	r2,r2,-1
 1005b7c:	d8800515 	stw	r2,20(sp)
 1005b80:	183f761e 	bne	r3,zero,100595c <__alt_data_end+0xff80595c>
 1005b84:	d9000c17 	ldw	r4,48(sp)
 1005b88:	0101730e 	bge	zero,r4,1006158 <_dtoa_r+0x15cc>
 1005b8c:	d9000615 	stw	r4,24(sp)
 1005b90:	003ed006 	br	10056d4 <__alt_data_end+0xff8056d4>
 1005b94:	00800084 	movi	r2,2
 1005b98:	3081861e 	bne	r6,r2,10061b4 <_dtoa_r+0x1628>
 1005b9c:	d8000b15 	stw	zero,44(sp)
 1005ba0:	003f3c06 	br	1005894 <__alt_data_end+0xff805894>
 1005ba4:	dc000917 	ldw	r16,36(sp)
 1005ba8:	003e9206 	br	10055f4 <__alt_data_end+0xff8055f4>
 1005bac:	d9c00317 	ldw	r7,12(sp)
 1005bb0:	00800084 	movi	r2,2
 1005bb4:	11fec50e 	bge	r2,r7,10056cc <__alt_data_end+0xff8056cc>
 1005bb8:	d9000617 	ldw	r4,24(sp)
 1005bbc:	20013c1e 	bne	r4,zero,10060b0 <_dtoa_r+0x1524>
 1005bc0:	a80b883a 	mov	r5,r21
 1005bc4:	000f883a 	mov	r7,zero
 1005bc8:	01800144 	movi	r6,5
 1005bcc:	e009883a 	mov	r4,fp
 1005bd0:	10083140 	call	1008314 <__multadd>
 1005bd4:	100b883a 	mov	r5,r2
 1005bd8:	8009883a 	mov	r4,r16
 1005bdc:	102b883a 	mov	r21,r2
 1005be0:	1008bc80 	call	1008bc8 <__mcmp>
 1005be4:	dc000915 	stw	r16,36(sp)
 1005be8:	00bf410e 	bge	zero,r2,10058f0 <__alt_data_end+0xff8058f0>
 1005bec:	d9c00717 	ldw	r7,28(sp)
 1005bf0:	00800c44 	movi	r2,49
 1005bf4:	38800005 	stb	r2,0(r7)
 1005bf8:	d8800517 	ldw	r2,20(sp)
 1005bfc:	3dc00044 	addi	r23,r7,1
 1005c00:	10800044 	addi	r2,r2,1
 1005c04:	d8800515 	stw	r2,20(sp)
 1005c08:	003f3d06 	br	1005900 <__alt_data_end+0xff805900>
 1005c0c:	d9800517 	ldw	r6,20(sp)
 1005c10:	d9c00717 	ldw	r7,28(sp)
 1005c14:	00800c44 	movi	r2,49
 1005c18:	31800044 	addi	r6,r6,1
 1005c1c:	d9800515 	stw	r6,20(sp)
 1005c20:	38800005 	stb	r2,0(r7)
 1005c24:	003edf06 	br	10057a4 <__alt_data_end+0xff8057a4>
 1005c28:	d8000b15 	stw	zero,44(sp)
 1005c2c:	003c9f06 	br	1004eac <__alt_data_end+0xff804eac>
 1005c30:	903e7e1e 	bne	r18,zero,100562c <__alt_data_end+0xff80562c>
 1005c34:	00800434 	movhi	r2,16
 1005c38:	10bfffc4 	addi	r2,r2,-1
 1005c3c:	9884703a 	and	r2,r19,r2
 1005c40:	1000ea1e 	bne	r2,zero,1005fec <_dtoa_r+0x1460>
 1005c44:	9cdffc2c 	andhi	r19,r19,32752
 1005c48:	9800e826 	beq	r19,zero,1005fec <_dtoa_r+0x1460>
 1005c4c:	d9c00817 	ldw	r7,32(sp)
 1005c50:	b5800044 	addi	r22,r22,1
 1005c54:	04c00044 	movi	r19,1
 1005c58:	39c00044 	addi	r7,r7,1
 1005c5c:	d9c00815 	stw	r7,32(sp)
 1005c60:	d8800d17 	ldw	r2,52(sp)
 1005c64:	103e721e 	bne	r2,zero,1005630 <__alt_data_end+0xff805630>
 1005c68:	00800044 	movi	r2,1
 1005c6c:	003e7906 	br	1005654 <__alt_data_end+0xff805654>
 1005c70:	8009883a 	mov	r4,r16
 1005c74:	100efdc0 	call	100efdc <__floatsidf>
 1005c78:	d9800f17 	ldw	r6,60(sp)
 1005c7c:	d9c01017 	ldw	r7,64(sp)
 1005c80:	1009883a 	mov	r4,r2
 1005c84:	180b883a 	mov	r5,r3
 1005c88:	100ddf40 	call	100ddf4 <__muldf3>
 1005c8c:	000d883a 	mov	r6,zero
 1005c90:	01d00734 	movhi	r7,16412
 1005c94:	1009883a 	mov	r4,r2
 1005c98:	180b883a 	mov	r5,r3
 1005c9c:	100c9200 	call	100c920 <__adddf3>
 1005ca0:	047f3034 	movhi	r17,64704
 1005ca4:	1021883a 	mov	r16,r2
 1005ca8:	1c63883a 	add	r17,r3,r17
 1005cac:	d9000f17 	ldw	r4,60(sp)
 1005cb0:	d9401017 	ldw	r5,64(sp)
 1005cb4:	000d883a 	mov	r6,zero
 1005cb8:	01d00534 	movhi	r7,16404
 1005cbc:	100e6600 	call	100e660 <__subdf3>
 1005cc0:	800d883a 	mov	r6,r16
 1005cc4:	880f883a 	mov	r7,r17
 1005cc8:	1009883a 	mov	r4,r2
 1005ccc:	180b883a 	mov	r5,r3
 1005cd0:	102b883a 	mov	r21,r2
 1005cd4:	1829883a 	mov	r20,r3
 1005cd8:	100dc240 	call	100dc24 <__gedf2>
 1005cdc:	00806c16 	blt	zero,r2,1005e90 <_dtoa_r+0x1304>
 1005ce0:	89e0003c 	xorhi	r7,r17,32768
 1005ce4:	800d883a 	mov	r6,r16
 1005ce8:	a809883a 	mov	r4,r21
 1005cec:	a00b883a 	mov	r5,r20
 1005cf0:	100dd000 	call	100dd00 <__ledf2>
 1005cf4:	103d7e0e 	bge	r2,zero,10052f0 <__alt_data_end+0xff8052f0>
 1005cf8:	002b883a 	mov	r21,zero
 1005cfc:	0023883a 	mov	r17,zero
 1005d00:	003efb06 	br	10058f0 <__alt_data_end+0xff8058f0>
 1005d04:	d8800717 	ldw	r2,28(sp)
 1005d08:	003bd006 	br	1004c4c <__alt_data_end+0xff804c4c>
 1005d0c:	d9000a17 	ldw	r4,40(sp)
 1005d10:	d9800d17 	ldw	r6,52(sp)
 1005d14:	dd400a15 	stw	r21,40(sp)
 1005d18:	a905c83a 	sub	r2,r21,r4
 1005d1c:	308d883a 	add	r6,r6,r2
 1005d20:	d9800d15 	stw	r6,52(sp)
 1005d24:	002b883a 	mov	r21,zero
 1005d28:	003e0606 	br	1005544 <__alt_data_end+0xff805544>
 1005d2c:	9023883a 	mov	r17,r18
 1005d30:	9829883a 	mov	r20,r19
 1005d34:	04000084 	movi	r16,2
 1005d38:	003c9206 	br	1004f84 <__alt_data_end+0xff804f84>
 1005d3c:	04000044 	movi	r16,1
 1005d40:	dc000c15 	stw	r16,48(sp)
 1005d44:	dc000615 	stw	r16,24(sp)
 1005d48:	dc002215 	stw	r16,136(sp)
 1005d4c:	e0001115 	stw	zero,68(fp)
 1005d50:	000b883a 	mov	r5,zero
 1005d54:	003c6906 	br	1004efc <__alt_data_end+0xff804efc>
 1005d58:	3021883a 	mov	r16,r6
 1005d5c:	003ffb06 	br	1005d4c <__alt_data_end+0xff805d4c>
 1005d60:	1000021e 	bne	r2,zero,1005d6c <_dtoa_r+0x11e0>
 1005d64:	4200004c 	andi	r8,r8,1
 1005d68:	403e7d1e 	bne	r8,zero,1005760 <__alt_data_end+0xff805760>
 1005d6c:	01000c04 	movi	r4,48
 1005d70:	00000106 	br	1005d78 <_dtoa_r+0x11ec>
 1005d74:	102f883a 	mov	r23,r2
 1005d78:	b8bfffc4 	addi	r2,r23,-1
 1005d7c:	10c00007 	ldb	r3,0(r2)
 1005d80:	193ffc26 	beq	r3,r4,1005d74 <__alt_data_end+0xff805d74>
 1005d84:	003e8706 	br	10057a4 <__alt_data_end+0xff8057a4>
 1005d88:	d8800517 	ldw	r2,20(sp)
 1005d8c:	00a3c83a 	sub	r17,zero,r2
 1005d90:	8800a426 	beq	r17,zero,1006024 <_dtoa_r+0x1498>
 1005d94:	888003cc 	andi	r2,r17,15
 1005d98:	100490fa 	slli	r2,r2,3
 1005d9c:	00c04074 	movhi	r3,257
 1005da0:	18c89004 	addi	r3,r3,8768
 1005da4:	1885883a 	add	r2,r3,r2
 1005da8:	11800017 	ldw	r6,0(r2)
 1005dac:	11c00117 	ldw	r7,4(r2)
 1005db0:	9009883a 	mov	r4,r18
 1005db4:	980b883a 	mov	r5,r19
 1005db8:	8823d13a 	srai	r17,r17,4
 1005dbc:	100ddf40 	call	100ddf4 <__muldf3>
 1005dc0:	d8800f15 	stw	r2,60(sp)
 1005dc4:	d8c01015 	stw	r3,64(sp)
 1005dc8:	8800e826 	beq	r17,zero,100616c <_dtoa_r+0x15e0>
 1005dcc:	05004074 	movhi	r20,257
 1005dd0:	a5088604 	addi	r20,r20,8728
 1005dd4:	04000084 	movi	r16,2
 1005dd8:	8980004c 	andi	r6,r17,1
 1005ddc:	1009883a 	mov	r4,r2
 1005de0:	8823d07a 	srai	r17,r17,1
 1005de4:	180b883a 	mov	r5,r3
 1005de8:	30000426 	beq	r6,zero,1005dfc <_dtoa_r+0x1270>
 1005dec:	a1800017 	ldw	r6,0(r20)
 1005df0:	a1c00117 	ldw	r7,4(r20)
 1005df4:	84000044 	addi	r16,r16,1
 1005df8:	100ddf40 	call	100ddf4 <__muldf3>
 1005dfc:	a5000204 	addi	r20,r20,8
 1005e00:	883ff51e 	bne	r17,zero,1005dd8 <__alt_data_end+0xff805dd8>
 1005e04:	d8800f15 	stw	r2,60(sp)
 1005e08:	d8c01015 	stw	r3,64(sp)
 1005e0c:	003c7606 	br	1004fe8 <__alt_data_end+0xff804fe8>
 1005e10:	00c00c04 	movi	r3,48
 1005e14:	10c00005 	stb	r3,0(r2)
 1005e18:	d8c00517 	ldw	r3,20(sp)
 1005e1c:	bd3fffc3 	ldbu	r20,-1(r23)
 1005e20:	18c00044 	addi	r3,r3,1
 1005e24:	d8c00515 	stw	r3,20(sp)
 1005e28:	003db906 	br	1005510 <__alt_data_end+0xff805510>
 1005e2c:	89400117 	ldw	r5,4(r17)
 1005e30:	e009883a 	mov	r4,fp
 1005e34:	10082440 	call	1008244 <_Balloc>
 1005e38:	89800417 	ldw	r6,16(r17)
 1005e3c:	89400304 	addi	r5,r17,12
 1005e40:	11000304 	addi	r4,r2,12
 1005e44:	31800084 	addi	r6,r6,2
 1005e48:	318d883a 	add	r6,r6,r6
 1005e4c:	318d883a 	add	r6,r6,r6
 1005e50:	1027883a 	mov	r19,r2
 1005e54:	1007e780 	call	1007e78 <memcpy>
 1005e58:	01800044 	movi	r6,1
 1005e5c:	980b883a 	mov	r5,r19
 1005e60:	e009883a 	mov	r4,fp
 1005e64:	1008a800 	call	1008a80 <__lshift>
 1005e68:	1029883a 	mov	r20,r2
 1005e6c:	003ecc06 	br	10059a0 <__alt_data_end+0xff8059a0>
 1005e70:	00800e44 	movi	r2,57
 1005e74:	90809026 	beq	r18,r2,10060b8 <_dtoa_r+0x152c>
 1005e78:	92000044 	addi	r8,r18,1
 1005e7c:	003f1f06 	br	1005afc <__alt_data_end+0xff805afc>
 1005e80:	9011883a 	mov	r8,r18
 1005e84:	8825883a 	mov	r18,r17
 1005e88:	a023883a 	mov	r17,r20
 1005e8c:	003e2906 	br	1005734 <__alt_data_end+0xff805734>
 1005e90:	002b883a 	mov	r21,zero
 1005e94:	0023883a 	mov	r17,zero
 1005e98:	003f5406 	br	1005bec <__alt_data_end+0xff805bec>
 1005e9c:	61bfffc4 	addi	r6,r12,-1
 1005ea0:	300490fa 	slli	r2,r6,3
 1005ea4:	00c04074 	movhi	r3,257
 1005ea8:	18c89004 	addi	r3,r3,8768
 1005eac:	1885883a 	add	r2,r3,r2
 1005eb0:	11000017 	ldw	r4,0(r2)
 1005eb4:	11400117 	ldw	r5,4(r2)
 1005eb8:	d8800717 	ldw	r2,28(sp)
 1005ebc:	880f883a 	mov	r7,r17
 1005ec0:	d9801215 	stw	r6,72(sp)
 1005ec4:	800d883a 	mov	r6,r16
 1005ec8:	db001615 	stw	r12,88(sp)
 1005ecc:	15c00044 	addi	r23,r2,1
 1005ed0:	100ddf40 	call	100ddf4 <__muldf3>
 1005ed4:	d9401017 	ldw	r5,64(sp)
 1005ed8:	d9000f17 	ldw	r4,60(sp)
 1005edc:	d8c01515 	stw	r3,84(sp)
 1005ee0:	d8801415 	stw	r2,80(sp)
 1005ee4:	100ef5c0 	call	100ef5c <__fixdfsi>
 1005ee8:	1009883a 	mov	r4,r2
 1005eec:	1021883a 	mov	r16,r2
 1005ef0:	100efdc0 	call	100efdc <__floatsidf>
 1005ef4:	d9000f17 	ldw	r4,60(sp)
 1005ef8:	d9401017 	ldw	r5,64(sp)
 1005efc:	100d883a 	mov	r6,r2
 1005f00:	180f883a 	mov	r7,r3
 1005f04:	100e6600 	call	100e660 <__subdf3>
 1005f08:	1829883a 	mov	r20,r3
 1005f0c:	d8c00717 	ldw	r3,28(sp)
 1005f10:	84000c04 	addi	r16,r16,48
 1005f14:	1023883a 	mov	r17,r2
 1005f18:	1c000005 	stb	r16,0(r3)
 1005f1c:	db001617 	ldw	r12,88(sp)
 1005f20:	00800044 	movi	r2,1
 1005f24:	60802226 	beq	r12,r2,1005fb0 <_dtoa_r+0x1424>
 1005f28:	d9c00717 	ldw	r7,28(sp)
 1005f2c:	8805883a 	mov	r2,r17
 1005f30:	b82b883a 	mov	r21,r23
 1005f34:	3b19883a 	add	r12,r7,r12
 1005f38:	6023883a 	mov	r17,r12
 1005f3c:	a007883a 	mov	r3,r20
 1005f40:	dc800f15 	stw	r18,60(sp)
 1005f44:	000d883a 	mov	r6,zero
 1005f48:	01d00934 	movhi	r7,16420
 1005f4c:	1009883a 	mov	r4,r2
 1005f50:	180b883a 	mov	r5,r3
 1005f54:	100ddf40 	call	100ddf4 <__muldf3>
 1005f58:	180b883a 	mov	r5,r3
 1005f5c:	1009883a 	mov	r4,r2
 1005f60:	1829883a 	mov	r20,r3
 1005f64:	1025883a 	mov	r18,r2
 1005f68:	100ef5c0 	call	100ef5c <__fixdfsi>
 1005f6c:	1009883a 	mov	r4,r2
 1005f70:	1021883a 	mov	r16,r2
 1005f74:	100efdc0 	call	100efdc <__floatsidf>
 1005f78:	100d883a 	mov	r6,r2
 1005f7c:	180f883a 	mov	r7,r3
 1005f80:	9009883a 	mov	r4,r18
 1005f84:	a00b883a 	mov	r5,r20
 1005f88:	84000c04 	addi	r16,r16,48
 1005f8c:	100e6600 	call	100e660 <__subdf3>
 1005f90:	ad400044 	addi	r21,r21,1
 1005f94:	ac3fffc5 	stb	r16,-1(r21)
 1005f98:	ac7fea1e 	bne	r21,r17,1005f44 <__alt_data_end+0xff805f44>
 1005f9c:	1023883a 	mov	r17,r2
 1005fa0:	d8801217 	ldw	r2,72(sp)
 1005fa4:	dc800f17 	ldw	r18,60(sp)
 1005fa8:	1829883a 	mov	r20,r3
 1005fac:	b8af883a 	add	r23,r23,r2
 1005fb0:	d9001417 	ldw	r4,80(sp)
 1005fb4:	d9401517 	ldw	r5,84(sp)
 1005fb8:	000d883a 	mov	r6,zero
 1005fbc:	01cff834 	movhi	r7,16352
 1005fc0:	100c9200 	call	100c920 <__adddf3>
 1005fc4:	880d883a 	mov	r6,r17
 1005fc8:	a00f883a 	mov	r7,r20
 1005fcc:	1009883a 	mov	r4,r2
 1005fd0:	180b883a 	mov	r5,r3
 1005fd4:	100dd000 	call	100dd00 <__ledf2>
 1005fd8:	10003e0e 	bge	r2,zero,10060d4 <_dtoa_r+0x1548>
 1005fdc:	d9001317 	ldw	r4,76(sp)
 1005fe0:	bd3fffc3 	ldbu	r20,-1(r23)
 1005fe4:	d9000515 	stw	r4,20(sp)
 1005fe8:	003d3b06 	br	10054d8 <__alt_data_end+0xff8054d8>
 1005fec:	0027883a 	mov	r19,zero
 1005ff0:	003f1b06 	br	1005c60 <__alt_data_end+0xff805c60>
 1005ff4:	d8800817 	ldw	r2,32(sp)
 1005ff8:	11e9c83a 	sub	r20,r2,r7
 1005ffc:	0005883a 	mov	r2,zero
 1006000:	003d5406 	br	1005554 <__alt_data_end+0xff805554>
 1006004:	00800044 	movi	r2,1
 1006008:	003dc706 	br	1005728 <__alt_data_end+0xff805728>
 100600c:	d8c00217 	ldw	r3,8(sp)
 1006010:	00800d84 	movi	r2,54
 1006014:	dd400a17 	ldw	r21,40(sp)
 1006018:	10c5c83a 	sub	r2,r2,r3
 100601c:	dd000817 	ldw	r20,32(sp)
 1006020:	003d4c06 	br	1005554 <__alt_data_end+0xff805554>
 1006024:	dc800f15 	stw	r18,60(sp)
 1006028:	dcc01015 	stw	r19,64(sp)
 100602c:	04000084 	movi	r16,2
 1006030:	003bed06 	br	1004fe8 <__alt_data_end+0xff804fe8>
 1006034:	d9000617 	ldw	r4,24(sp)
 1006038:	203f0d26 	beq	r4,zero,1005c70 <__alt_data_end+0xff805c70>
 100603c:	d9800c17 	ldw	r6,48(sp)
 1006040:	01bcab0e 	bge	zero,r6,10052f0 <__alt_data_end+0xff8052f0>
 1006044:	d9401017 	ldw	r5,64(sp)
 1006048:	d9000f17 	ldw	r4,60(sp)
 100604c:	000d883a 	mov	r6,zero
 1006050:	01d00934 	movhi	r7,16420
 1006054:	100ddf40 	call	100ddf4 <__muldf3>
 1006058:	81000044 	addi	r4,r16,1
 100605c:	d8800f15 	stw	r2,60(sp)
 1006060:	d8c01015 	stw	r3,64(sp)
 1006064:	100efdc0 	call	100efdc <__floatsidf>
 1006068:	d9800f17 	ldw	r6,60(sp)
 100606c:	d9c01017 	ldw	r7,64(sp)
 1006070:	1009883a 	mov	r4,r2
 1006074:	180b883a 	mov	r5,r3
 1006078:	100ddf40 	call	100ddf4 <__muldf3>
 100607c:	01d00734 	movhi	r7,16412
 1006080:	000d883a 	mov	r6,zero
 1006084:	1009883a 	mov	r4,r2
 1006088:	180b883a 	mov	r5,r3
 100608c:	100c9200 	call	100c920 <__adddf3>
 1006090:	d9c00517 	ldw	r7,20(sp)
 1006094:	047f3034 	movhi	r17,64704
 1006098:	1021883a 	mov	r16,r2
 100609c:	39ffffc4 	addi	r7,r7,-1
 10060a0:	d9c01315 	stw	r7,76(sp)
 10060a4:	1c63883a 	add	r17,r3,r17
 10060a8:	db000c17 	ldw	r12,48(sp)
 10060ac:	003bea06 	br	1005058 <__alt_data_end+0xff805058>
 10060b0:	dc000915 	stw	r16,36(sp)
 10060b4:	003e0e06 	br	10058f0 <__alt_data_end+0xff8058f0>
 10060b8:	01000e44 	movi	r4,57
 10060bc:	8825883a 	mov	r18,r17
 10060c0:	9dc00044 	addi	r23,r19,1
 10060c4:	99000005 	stb	r4,0(r19)
 10060c8:	a023883a 	mov	r17,r20
 10060cc:	dc000915 	stw	r16,36(sp)
 10060d0:	003da406 	br	1005764 <__alt_data_end+0xff805764>
 10060d4:	d9801417 	ldw	r6,80(sp)
 10060d8:	d9c01517 	ldw	r7,84(sp)
 10060dc:	0009883a 	mov	r4,zero
 10060e0:	014ff834 	movhi	r5,16352
 10060e4:	100e6600 	call	100e660 <__subdf3>
 10060e8:	880d883a 	mov	r6,r17
 10060ec:	a00f883a 	mov	r7,r20
 10060f0:	1009883a 	mov	r4,r2
 10060f4:	180b883a 	mov	r5,r3
 10060f8:	100dc240 	call	100dc24 <__gedf2>
 10060fc:	00bc7c0e 	bge	zero,r2,10052f0 <__alt_data_end+0xff8052f0>
 1006100:	01000c04 	movi	r4,48
 1006104:	00000106 	br	100610c <_dtoa_r+0x1580>
 1006108:	102f883a 	mov	r23,r2
 100610c:	b8bfffc4 	addi	r2,r23,-1
 1006110:	10c00007 	ldb	r3,0(r2)
 1006114:	193ffc26 	beq	r3,r4,1006108 <__alt_data_end+0xff806108>
 1006118:	d9801317 	ldw	r6,76(sp)
 100611c:	d9800515 	stw	r6,20(sp)
 1006120:	003c4406 	br	1005234 <__alt_data_end+0xff805234>
 1006124:	d9801317 	ldw	r6,76(sp)
 1006128:	d9800515 	stw	r6,20(sp)
 100612c:	003cea06 	br	10054d8 <__alt_data_end+0xff8054d8>
 1006130:	dd800f17 	ldw	r22,60(sp)
 1006134:	dcc01017 	ldw	r19,64(sp)
 1006138:	dc801217 	ldw	r18,72(sp)
 100613c:	003c6c06 	br	10052f0 <__alt_data_end+0xff8052f0>
 1006140:	903e031e 	bne	r18,zero,1005950 <__alt_data_end+0xff805950>
 1006144:	003ebb06 	br	1005c34 <__alt_data_end+0xff805c34>
 1006148:	103e6c1e 	bne	r2,zero,1005afc <__alt_data_end+0xff805afc>
 100614c:	4080004c 	andi	r2,r8,1
 1006150:	103e6a26 	beq	r2,zero,1005afc <__alt_data_end+0xff805afc>
 1006154:	003e6606 	br	1005af0 <__alt_data_end+0xff805af0>
 1006158:	d8c00317 	ldw	r3,12(sp)
 100615c:	00800084 	movi	r2,2
 1006160:	10c02916 	blt	r2,r3,1006208 <_dtoa_r+0x167c>
 1006164:	d9000c17 	ldw	r4,48(sp)
 1006168:	003e8806 	br	1005b8c <__alt_data_end+0xff805b8c>
 100616c:	04000084 	movi	r16,2
 1006170:	003b9d06 	br	1004fe8 <__alt_data_end+0xff804fe8>
 1006174:	d9001317 	ldw	r4,76(sp)
 1006178:	d9000515 	stw	r4,20(sp)
 100617c:	003cd606 	br	10054d8 <__alt_data_end+0xff8054d8>
 1006180:	d8801317 	ldw	r2,76(sp)
 1006184:	d8800515 	stw	r2,20(sp)
 1006188:	003c2a06 	br	1005234 <__alt_data_end+0xff805234>
 100618c:	d9800317 	ldw	r6,12(sp)
 1006190:	00800084 	movi	r2,2
 1006194:	11801516 	blt	r2,r6,10061ec <_dtoa_r+0x1660>
 1006198:	d9c00c17 	ldw	r7,48(sp)
 100619c:	d9c00615 	stw	r7,24(sp)
 10061a0:	003df706 	br	1005980 <__alt_data_end+0xff805980>
 10061a4:	193d3926 	beq	r3,r4,100568c <__alt_data_end+0xff80568c>
 10061a8:	00c00f04 	movi	r3,60
 10061ac:	1885c83a 	sub	r2,r3,r2
 10061b0:	003ddf06 	br	1005930 <__alt_data_end+0xff805930>
 10061b4:	e009883a 	mov	r4,fp
 10061b8:	e0001115 	stw	zero,68(fp)
 10061bc:	000b883a 	mov	r5,zero
 10061c0:	10082440 	call	1008244 <_Balloc>
 10061c4:	d8800715 	stw	r2,28(sp)
 10061c8:	d8c00717 	ldw	r3,28(sp)
 10061cc:	00bfffc4 	movi	r2,-1
 10061d0:	01000044 	movi	r4,1
 10061d4:	d8800c15 	stw	r2,48(sp)
 10061d8:	e0c01015 	stw	r3,64(fp)
 10061dc:	d9000b15 	stw	r4,44(sp)
 10061e0:	d8800615 	stw	r2,24(sp)
 10061e4:	d8002215 	stw	zero,136(sp)
 10061e8:	003c4106 	br	10052f0 <__alt_data_end+0xff8052f0>
 10061ec:	d8c00c17 	ldw	r3,48(sp)
 10061f0:	d8c00615 	stw	r3,24(sp)
 10061f4:	003e7006 	br	1005bb8 <__alt_data_end+0xff805bb8>
 10061f8:	04400044 	movi	r17,1
 10061fc:	003b2006 	br	1004e80 <__alt_data_end+0xff804e80>
 1006200:	000b883a 	mov	r5,zero
 1006204:	003b3d06 	br	1004efc <__alt_data_end+0xff804efc>
 1006208:	d8800c17 	ldw	r2,48(sp)
 100620c:	d8800615 	stw	r2,24(sp)
 1006210:	003e6906 	br	1005bb8 <__alt_data_end+0xff805bb8>

01006214 <__sflush_r>:
 1006214:	2880030b 	ldhu	r2,12(r5)
 1006218:	defffb04 	addi	sp,sp,-20
 100621c:	dcc00315 	stw	r19,12(sp)
 1006220:	dc400115 	stw	r17,4(sp)
 1006224:	dfc00415 	stw	ra,16(sp)
 1006228:	dc800215 	stw	r18,8(sp)
 100622c:	dc000015 	stw	r16,0(sp)
 1006230:	10c0020c 	andi	r3,r2,8
 1006234:	2823883a 	mov	r17,r5
 1006238:	2027883a 	mov	r19,r4
 100623c:	1800311e 	bne	r3,zero,1006304 <__sflush_r+0xf0>
 1006240:	28c00117 	ldw	r3,4(r5)
 1006244:	10820014 	ori	r2,r2,2048
 1006248:	2880030d 	sth	r2,12(r5)
 100624c:	00c04b0e 	bge	zero,r3,100637c <__sflush_r+0x168>
 1006250:	8a000a17 	ldw	r8,40(r17)
 1006254:	40002326 	beq	r8,zero,10062e4 <__sflush_r+0xd0>
 1006258:	9c000017 	ldw	r16,0(r19)
 100625c:	10c4000c 	andi	r3,r2,4096
 1006260:	98000015 	stw	zero,0(r19)
 1006264:	18004826 	beq	r3,zero,1006388 <__sflush_r+0x174>
 1006268:	89801417 	ldw	r6,80(r17)
 100626c:	10c0010c 	andi	r3,r2,4
 1006270:	18000626 	beq	r3,zero,100628c <__sflush_r+0x78>
 1006274:	88c00117 	ldw	r3,4(r17)
 1006278:	88800c17 	ldw	r2,48(r17)
 100627c:	30cdc83a 	sub	r6,r6,r3
 1006280:	10000226 	beq	r2,zero,100628c <__sflush_r+0x78>
 1006284:	88800f17 	ldw	r2,60(r17)
 1006288:	308dc83a 	sub	r6,r6,r2
 100628c:	89400717 	ldw	r5,28(r17)
 1006290:	000f883a 	mov	r7,zero
 1006294:	9809883a 	mov	r4,r19
 1006298:	403ee83a 	callr	r8
 100629c:	00ffffc4 	movi	r3,-1
 10062a0:	10c04426 	beq	r2,r3,10063b4 <__sflush_r+0x1a0>
 10062a4:	88c0030b 	ldhu	r3,12(r17)
 10062a8:	89000417 	ldw	r4,16(r17)
 10062ac:	88000115 	stw	zero,4(r17)
 10062b0:	197dffcc 	andi	r5,r3,63487
 10062b4:	8940030d 	sth	r5,12(r17)
 10062b8:	89000015 	stw	r4,0(r17)
 10062bc:	18c4000c 	andi	r3,r3,4096
 10062c0:	18002c1e 	bne	r3,zero,1006374 <__sflush_r+0x160>
 10062c4:	89400c17 	ldw	r5,48(r17)
 10062c8:	9c000015 	stw	r16,0(r19)
 10062cc:	28000526 	beq	r5,zero,10062e4 <__sflush_r+0xd0>
 10062d0:	88801004 	addi	r2,r17,64
 10062d4:	28800226 	beq	r5,r2,10062e0 <__sflush_r+0xcc>
 10062d8:	9809883a 	mov	r4,r19
 10062dc:	10069900 	call	1006990 <_free_r>
 10062e0:	88000c15 	stw	zero,48(r17)
 10062e4:	0005883a 	mov	r2,zero
 10062e8:	dfc00417 	ldw	ra,16(sp)
 10062ec:	dcc00317 	ldw	r19,12(sp)
 10062f0:	dc800217 	ldw	r18,8(sp)
 10062f4:	dc400117 	ldw	r17,4(sp)
 10062f8:	dc000017 	ldw	r16,0(sp)
 10062fc:	dec00504 	addi	sp,sp,20
 1006300:	f800283a 	ret
 1006304:	2c800417 	ldw	r18,16(r5)
 1006308:	903ff626 	beq	r18,zero,10062e4 <__alt_data_end+0xff8062e4>
 100630c:	2c000017 	ldw	r16,0(r5)
 1006310:	108000cc 	andi	r2,r2,3
 1006314:	2c800015 	stw	r18,0(r5)
 1006318:	84a1c83a 	sub	r16,r16,r18
 100631c:	1000131e 	bne	r2,zero,100636c <__sflush_r+0x158>
 1006320:	28800517 	ldw	r2,20(r5)
 1006324:	88800215 	stw	r2,8(r17)
 1006328:	04000316 	blt	zero,r16,1006338 <__sflush_r+0x124>
 100632c:	003fed06 	br	10062e4 <__alt_data_end+0xff8062e4>
 1006330:	90a5883a 	add	r18,r18,r2
 1006334:	043feb0e 	bge	zero,r16,10062e4 <__alt_data_end+0xff8062e4>
 1006338:	88800917 	ldw	r2,36(r17)
 100633c:	89400717 	ldw	r5,28(r17)
 1006340:	800f883a 	mov	r7,r16
 1006344:	900d883a 	mov	r6,r18
 1006348:	9809883a 	mov	r4,r19
 100634c:	103ee83a 	callr	r2
 1006350:	80a1c83a 	sub	r16,r16,r2
 1006354:	00bff616 	blt	zero,r2,1006330 <__alt_data_end+0xff806330>
 1006358:	88c0030b 	ldhu	r3,12(r17)
 100635c:	00bfffc4 	movi	r2,-1
 1006360:	18c01014 	ori	r3,r3,64
 1006364:	88c0030d 	sth	r3,12(r17)
 1006368:	003fdf06 	br	10062e8 <__alt_data_end+0xff8062e8>
 100636c:	0005883a 	mov	r2,zero
 1006370:	003fec06 	br	1006324 <__alt_data_end+0xff806324>
 1006374:	88801415 	stw	r2,80(r17)
 1006378:	003fd206 	br	10062c4 <__alt_data_end+0xff8062c4>
 100637c:	28c00f17 	ldw	r3,60(r5)
 1006380:	00ffb316 	blt	zero,r3,1006250 <__alt_data_end+0xff806250>
 1006384:	003fd706 	br	10062e4 <__alt_data_end+0xff8062e4>
 1006388:	89400717 	ldw	r5,28(r17)
 100638c:	000d883a 	mov	r6,zero
 1006390:	01c00044 	movi	r7,1
 1006394:	9809883a 	mov	r4,r19
 1006398:	403ee83a 	callr	r8
 100639c:	100d883a 	mov	r6,r2
 10063a0:	00bfffc4 	movi	r2,-1
 10063a4:	30801426 	beq	r6,r2,10063f8 <__sflush_r+0x1e4>
 10063a8:	8880030b 	ldhu	r2,12(r17)
 10063ac:	8a000a17 	ldw	r8,40(r17)
 10063b0:	003fae06 	br	100626c <__alt_data_end+0xff80626c>
 10063b4:	98c00017 	ldw	r3,0(r19)
 10063b8:	183fba26 	beq	r3,zero,10062a4 <__alt_data_end+0xff8062a4>
 10063bc:	01000744 	movi	r4,29
 10063c0:	19000626 	beq	r3,r4,10063dc <__sflush_r+0x1c8>
 10063c4:	01000584 	movi	r4,22
 10063c8:	19000426 	beq	r3,r4,10063dc <__sflush_r+0x1c8>
 10063cc:	88c0030b 	ldhu	r3,12(r17)
 10063d0:	18c01014 	ori	r3,r3,64
 10063d4:	88c0030d 	sth	r3,12(r17)
 10063d8:	003fc306 	br	10062e8 <__alt_data_end+0xff8062e8>
 10063dc:	8880030b 	ldhu	r2,12(r17)
 10063e0:	88c00417 	ldw	r3,16(r17)
 10063e4:	88000115 	stw	zero,4(r17)
 10063e8:	10bdffcc 	andi	r2,r2,63487
 10063ec:	8880030d 	sth	r2,12(r17)
 10063f0:	88c00015 	stw	r3,0(r17)
 10063f4:	003fb306 	br	10062c4 <__alt_data_end+0xff8062c4>
 10063f8:	98800017 	ldw	r2,0(r19)
 10063fc:	103fea26 	beq	r2,zero,10063a8 <__alt_data_end+0xff8063a8>
 1006400:	00c00744 	movi	r3,29
 1006404:	10c00226 	beq	r2,r3,1006410 <__sflush_r+0x1fc>
 1006408:	00c00584 	movi	r3,22
 100640c:	10c0031e 	bne	r2,r3,100641c <__sflush_r+0x208>
 1006410:	9c000015 	stw	r16,0(r19)
 1006414:	0005883a 	mov	r2,zero
 1006418:	003fb306 	br	10062e8 <__alt_data_end+0xff8062e8>
 100641c:	88c0030b 	ldhu	r3,12(r17)
 1006420:	3005883a 	mov	r2,r6
 1006424:	18c01014 	ori	r3,r3,64
 1006428:	88c0030d 	sth	r3,12(r17)
 100642c:	003fae06 	br	10062e8 <__alt_data_end+0xff8062e8>

01006430 <_fflush_r>:
 1006430:	defffd04 	addi	sp,sp,-12
 1006434:	dc000115 	stw	r16,4(sp)
 1006438:	dfc00215 	stw	ra,8(sp)
 100643c:	2021883a 	mov	r16,r4
 1006440:	20000226 	beq	r4,zero,100644c <_fflush_r+0x1c>
 1006444:	20800e17 	ldw	r2,56(r4)
 1006448:	10000c26 	beq	r2,zero,100647c <_fflush_r+0x4c>
 100644c:	2880030f 	ldh	r2,12(r5)
 1006450:	1000051e 	bne	r2,zero,1006468 <_fflush_r+0x38>
 1006454:	0005883a 	mov	r2,zero
 1006458:	dfc00217 	ldw	ra,8(sp)
 100645c:	dc000117 	ldw	r16,4(sp)
 1006460:	dec00304 	addi	sp,sp,12
 1006464:	f800283a 	ret
 1006468:	8009883a 	mov	r4,r16
 100646c:	dfc00217 	ldw	ra,8(sp)
 1006470:	dc000117 	ldw	r16,4(sp)
 1006474:	dec00304 	addi	sp,sp,12
 1006478:	10062141 	jmpi	1006214 <__sflush_r>
 100647c:	d9400015 	stw	r5,0(sp)
 1006480:	100681c0 	call	100681c <__sinit>
 1006484:	d9400017 	ldw	r5,0(sp)
 1006488:	003ff006 	br	100644c <__alt_data_end+0xff80644c>

0100648c <fflush>:
 100648c:	20000526 	beq	r4,zero,10064a4 <fflush+0x18>
 1006490:	00804074 	movhi	r2,257
 1006494:	108fc304 	addi	r2,r2,16140
 1006498:	200b883a 	mov	r5,r4
 100649c:	11000017 	ldw	r4,0(r2)
 10064a0:	10064301 	jmpi	1006430 <_fflush_r>
 10064a4:	00804074 	movhi	r2,257
 10064a8:	108fc204 	addi	r2,r2,16136
 10064ac:	11000017 	ldw	r4,0(r2)
 10064b0:	01404034 	movhi	r5,256
 10064b4:	29590c04 	addi	r5,r5,25648
 10064b8:	100722c1 	jmpi	100722c <_fwalk_reent>

010064bc <__fp_unlock>:
 10064bc:	0005883a 	mov	r2,zero
 10064c0:	f800283a 	ret

010064c4 <_cleanup_r>:
 10064c4:	01404074 	movhi	r5,257
 10064c8:	296cf204 	addi	r5,r5,-19512
 10064cc:	100722c1 	jmpi	100722c <_fwalk_reent>

010064d0 <__sinit.part.1>:
 10064d0:	defff704 	addi	sp,sp,-36
 10064d4:	00c04034 	movhi	r3,256
 10064d8:	dfc00815 	stw	ra,32(sp)
 10064dc:	ddc00715 	stw	r23,28(sp)
 10064e0:	dd800615 	stw	r22,24(sp)
 10064e4:	dd400515 	stw	r21,20(sp)
 10064e8:	dd000415 	stw	r20,16(sp)
 10064ec:	dcc00315 	stw	r19,12(sp)
 10064f0:	dc800215 	stw	r18,8(sp)
 10064f4:	dc400115 	stw	r17,4(sp)
 10064f8:	dc000015 	stw	r16,0(sp)
 10064fc:	18d93104 	addi	r3,r3,25796
 1006500:	24000117 	ldw	r16,4(r4)
 1006504:	20c00f15 	stw	r3,60(r4)
 1006508:	2080bb04 	addi	r2,r4,748
 100650c:	00c000c4 	movi	r3,3
 1006510:	20c0b915 	stw	r3,740(r4)
 1006514:	2080ba15 	stw	r2,744(r4)
 1006518:	2000b815 	stw	zero,736(r4)
 100651c:	05c00204 	movi	r23,8
 1006520:	00800104 	movi	r2,4
 1006524:	2025883a 	mov	r18,r4
 1006528:	b80d883a 	mov	r6,r23
 100652c:	81001704 	addi	r4,r16,92
 1006530:	000b883a 	mov	r5,zero
 1006534:	80000015 	stw	zero,0(r16)
 1006538:	80000115 	stw	zero,4(r16)
 100653c:	80000215 	stw	zero,8(r16)
 1006540:	8080030d 	sth	r2,12(r16)
 1006544:	80001915 	stw	zero,100(r16)
 1006548:	8000038d 	sth	zero,14(r16)
 100654c:	80000415 	stw	zero,16(r16)
 1006550:	80000515 	stw	zero,20(r16)
 1006554:	80000615 	stw	zero,24(r16)
 1006558:	100811c0 	call	100811c <memset>
 100655c:	05804074 	movhi	r22,257
 1006560:	94400217 	ldw	r17,8(r18)
 1006564:	05404074 	movhi	r21,257
 1006568:	05004074 	movhi	r20,257
 100656c:	04c04074 	movhi	r19,257
 1006570:	b5a64a04 	addi	r22,r22,-26328
 1006574:	ad666104 	addi	r21,r21,-26236
 1006578:	a5268004 	addi	r20,r20,-26112
 100657c:	9ce69704 	addi	r19,r19,-26020
 1006580:	85800815 	stw	r22,32(r16)
 1006584:	85400915 	stw	r21,36(r16)
 1006588:	85000a15 	stw	r20,40(r16)
 100658c:	84c00b15 	stw	r19,44(r16)
 1006590:	84000715 	stw	r16,28(r16)
 1006594:	00800284 	movi	r2,10
 1006598:	8880030d 	sth	r2,12(r17)
 100659c:	00800044 	movi	r2,1
 10065a0:	b80d883a 	mov	r6,r23
 10065a4:	89001704 	addi	r4,r17,92
 10065a8:	000b883a 	mov	r5,zero
 10065ac:	88000015 	stw	zero,0(r17)
 10065b0:	88000115 	stw	zero,4(r17)
 10065b4:	88000215 	stw	zero,8(r17)
 10065b8:	88001915 	stw	zero,100(r17)
 10065bc:	8880038d 	sth	r2,14(r17)
 10065c0:	88000415 	stw	zero,16(r17)
 10065c4:	88000515 	stw	zero,20(r17)
 10065c8:	88000615 	stw	zero,24(r17)
 10065cc:	100811c0 	call	100811c <memset>
 10065d0:	94000317 	ldw	r16,12(r18)
 10065d4:	00800484 	movi	r2,18
 10065d8:	8c400715 	stw	r17,28(r17)
 10065dc:	8d800815 	stw	r22,32(r17)
 10065e0:	8d400915 	stw	r21,36(r17)
 10065e4:	8d000a15 	stw	r20,40(r17)
 10065e8:	8cc00b15 	stw	r19,44(r17)
 10065ec:	8080030d 	sth	r2,12(r16)
 10065f0:	00800084 	movi	r2,2
 10065f4:	80000015 	stw	zero,0(r16)
 10065f8:	80000115 	stw	zero,4(r16)
 10065fc:	80000215 	stw	zero,8(r16)
 1006600:	80001915 	stw	zero,100(r16)
 1006604:	8080038d 	sth	r2,14(r16)
 1006608:	80000415 	stw	zero,16(r16)
 100660c:	80000515 	stw	zero,20(r16)
 1006610:	80000615 	stw	zero,24(r16)
 1006614:	b80d883a 	mov	r6,r23
 1006618:	000b883a 	mov	r5,zero
 100661c:	81001704 	addi	r4,r16,92
 1006620:	100811c0 	call	100811c <memset>
 1006624:	00800044 	movi	r2,1
 1006628:	84000715 	stw	r16,28(r16)
 100662c:	85800815 	stw	r22,32(r16)
 1006630:	85400915 	stw	r21,36(r16)
 1006634:	85000a15 	stw	r20,40(r16)
 1006638:	84c00b15 	stw	r19,44(r16)
 100663c:	90800e15 	stw	r2,56(r18)
 1006640:	dfc00817 	ldw	ra,32(sp)
 1006644:	ddc00717 	ldw	r23,28(sp)
 1006648:	dd800617 	ldw	r22,24(sp)
 100664c:	dd400517 	ldw	r21,20(sp)
 1006650:	dd000417 	ldw	r20,16(sp)
 1006654:	dcc00317 	ldw	r19,12(sp)
 1006658:	dc800217 	ldw	r18,8(sp)
 100665c:	dc400117 	ldw	r17,4(sp)
 1006660:	dc000017 	ldw	r16,0(sp)
 1006664:	dec00904 	addi	sp,sp,36
 1006668:	f800283a 	ret

0100666c <__fp_lock>:
 100666c:	0005883a 	mov	r2,zero
 1006670:	f800283a 	ret

01006674 <__sfmoreglue>:
 1006674:	defffc04 	addi	sp,sp,-16
 1006678:	dc800215 	stw	r18,8(sp)
 100667c:	2825883a 	mov	r18,r5
 1006680:	dc000015 	stw	r16,0(sp)
 1006684:	01401a04 	movi	r5,104
 1006688:	2021883a 	mov	r16,r4
 100668c:	913fffc4 	addi	r4,r18,-1
 1006690:	dfc00315 	stw	ra,12(sp)
 1006694:	dc400115 	stw	r17,4(sp)
 1006698:	100c8f80 	call	100c8f8 <__mulsi3>
 100669c:	8009883a 	mov	r4,r16
 10066a0:	11401d04 	addi	r5,r2,116
 10066a4:	1023883a 	mov	r17,r2
 10066a8:	10075880 	call	1007588 <_malloc_r>
 10066ac:	1021883a 	mov	r16,r2
 10066b0:	10000726 	beq	r2,zero,10066d0 <__sfmoreglue+0x5c>
 10066b4:	11000304 	addi	r4,r2,12
 10066b8:	10000015 	stw	zero,0(r2)
 10066bc:	14800115 	stw	r18,4(r2)
 10066c0:	11000215 	stw	r4,8(r2)
 10066c4:	89801a04 	addi	r6,r17,104
 10066c8:	000b883a 	mov	r5,zero
 10066cc:	100811c0 	call	100811c <memset>
 10066d0:	8005883a 	mov	r2,r16
 10066d4:	dfc00317 	ldw	ra,12(sp)
 10066d8:	dc800217 	ldw	r18,8(sp)
 10066dc:	dc400117 	ldw	r17,4(sp)
 10066e0:	dc000017 	ldw	r16,0(sp)
 10066e4:	dec00404 	addi	sp,sp,16
 10066e8:	f800283a 	ret

010066ec <__sfp>:
 10066ec:	defffb04 	addi	sp,sp,-20
 10066f0:	dc000015 	stw	r16,0(sp)
 10066f4:	04004074 	movhi	r16,257
 10066f8:	840fc204 	addi	r16,r16,16136
 10066fc:	dcc00315 	stw	r19,12(sp)
 1006700:	2027883a 	mov	r19,r4
 1006704:	81000017 	ldw	r4,0(r16)
 1006708:	dfc00415 	stw	ra,16(sp)
 100670c:	dc800215 	stw	r18,8(sp)
 1006710:	20800e17 	ldw	r2,56(r4)
 1006714:	dc400115 	stw	r17,4(sp)
 1006718:	1000021e 	bne	r2,zero,1006724 <__sfp+0x38>
 100671c:	10064d00 	call	10064d0 <__sinit.part.1>
 1006720:	81000017 	ldw	r4,0(r16)
 1006724:	2480b804 	addi	r18,r4,736
 1006728:	047fffc4 	movi	r17,-1
 100672c:	91000117 	ldw	r4,4(r18)
 1006730:	94000217 	ldw	r16,8(r18)
 1006734:	213fffc4 	addi	r4,r4,-1
 1006738:	20000a16 	blt	r4,zero,1006764 <__sfp+0x78>
 100673c:	8080030f 	ldh	r2,12(r16)
 1006740:	10000c26 	beq	r2,zero,1006774 <__sfp+0x88>
 1006744:	80c01d04 	addi	r3,r16,116
 1006748:	00000206 	br	1006754 <__sfp+0x68>
 100674c:	18bfe60f 	ldh	r2,-104(r3)
 1006750:	10000826 	beq	r2,zero,1006774 <__sfp+0x88>
 1006754:	213fffc4 	addi	r4,r4,-1
 1006758:	1c3ffd04 	addi	r16,r3,-12
 100675c:	18c01a04 	addi	r3,r3,104
 1006760:	247ffa1e 	bne	r4,r17,100674c <__alt_data_end+0xff80674c>
 1006764:	90800017 	ldw	r2,0(r18)
 1006768:	10001d26 	beq	r2,zero,10067e0 <__sfp+0xf4>
 100676c:	1025883a 	mov	r18,r2
 1006770:	003fee06 	br	100672c <__alt_data_end+0xff80672c>
 1006774:	00bfffc4 	movi	r2,-1
 1006778:	8080038d 	sth	r2,14(r16)
 100677c:	00800044 	movi	r2,1
 1006780:	8080030d 	sth	r2,12(r16)
 1006784:	80001915 	stw	zero,100(r16)
 1006788:	80000015 	stw	zero,0(r16)
 100678c:	80000215 	stw	zero,8(r16)
 1006790:	80000115 	stw	zero,4(r16)
 1006794:	80000415 	stw	zero,16(r16)
 1006798:	80000515 	stw	zero,20(r16)
 100679c:	80000615 	stw	zero,24(r16)
 10067a0:	01800204 	movi	r6,8
 10067a4:	000b883a 	mov	r5,zero
 10067a8:	81001704 	addi	r4,r16,92
 10067ac:	100811c0 	call	100811c <memset>
 10067b0:	8005883a 	mov	r2,r16
 10067b4:	80000c15 	stw	zero,48(r16)
 10067b8:	80000d15 	stw	zero,52(r16)
 10067bc:	80001115 	stw	zero,68(r16)
 10067c0:	80001215 	stw	zero,72(r16)
 10067c4:	dfc00417 	ldw	ra,16(sp)
 10067c8:	dcc00317 	ldw	r19,12(sp)
 10067cc:	dc800217 	ldw	r18,8(sp)
 10067d0:	dc400117 	ldw	r17,4(sp)
 10067d4:	dc000017 	ldw	r16,0(sp)
 10067d8:	dec00504 	addi	sp,sp,20
 10067dc:	f800283a 	ret
 10067e0:	01400104 	movi	r5,4
 10067e4:	9809883a 	mov	r4,r19
 10067e8:	10066740 	call	1006674 <__sfmoreglue>
 10067ec:	90800015 	stw	r2,0(r18)
 10067f0:	103fde1e 	bne	r2,zero,100676c <__alt_data_end+0xff80676c>
 10067f4:	00800304 	movi	r2,12
 10067f8:	98800015 	stw	r2,0(r19)
 10067fc:	0005883a 	mov	r2,zero
 1006800:	003ff006 	br	10067c4 <__alt_data_end+0xff8067c4>

01006804 <_cleanup>:
 1006804:	00804074 	movhi	r2,257
 1006808:	108fc204 	addi	r2,r2,16136
 100680c:	11000017 	ldw	r4,0(r2)
 1006810:	01404074 	movhi	r5,257
 1006814:	296cf204 	addi	r5,r5,-19512
 1006818:	100722c1 	jmpi	100722c <_fwalk_reent>

0100681c <__sinit>:
 100681c:	20800e17 	ldw	r2,56(r4)
 1006820:	10000126 	beq	r2,zero,1006828 <__sinit+0xc>
 1006824:	f800283a 	ret
 1006828:	10064d01 	jmpi	10064d0 <__sinit.part.1>

0100682c <__sfp_lock_acquire>:
 100682c:	f800283a 	ret

01006830 <__sfp_lock_release>:
 1006830:	f800283a 	ret

01006834 <__sinit_lock_acquire>:
 1006834:	f800283a 	ret

01006838 <__sinit_lock_release>:
 1006838:	f800283a 	ret

0100683c <__fp_lock_all>:
 100683c:	00804074 	movhi	r2,257
 1006840:	108fc304 	addi	r2,r2,16140
 1006844:	11000017 	ldw	r4,0(r2)
 1006848:	01404034 	movhi	r5,256
 100684c:	29599b04 	addi	r5,r5,26220
 1006850:	10071681 	jmpi	1007168 <_fwalk>

01006854 <__fp_unlock_all>:
 1006854:	00804074 	movhi	r2,257
 1006858:	108fc304 	addi	r2,r2,16140
 100685c:	11000017 	ldw	r4,0(r2)
 1006860:	01404034 	movhi	r5,256
 1006864:	29592f04 	addi	r5,r5,25788
 1006868:	10071681 	jmpi	1007168 <_fwalk>

0100686c <_malloc_trim_r>:
 100686c:	defffb04 	addi	sp,sp,-20
 1006870:	dcc00315 	stw	r19,12(sp)
 1006874:	04c04074 	movhi	r19,257
 1006878:	dc800215 	stw	r18,8(sp)
 100687c:	dc400115 	stw	r17,4(sp)
 1006880:	dc000015 	stw	r16,0(sp)
 1006884:	dfc00415 	stw	ra,16(sp)
 1006888:	2821883a 	mov	r16,r5
 100688c:	9cca3e04 	addi	r19,r19,10488
 1006890:	2025883a 	mov	r18,r4
 1006894:	100f7600 	call	100f760 <__malloc_lock>
 1006898:	98800217 	ldw	r2,8(r19)
 100689c:	14400117 	ldw	r17,4(r2)
 10068a0:	00bfff04 	movi	r2,-4
 10068a4:	88a2703a 	and	r17,r17,r2
 10068a8:	8c21c83a 	sub	r16,r17,r16
 10068ac:	8403fbc4 	addi	r16,r16,4079
 10068b0:	8020d33a 	srli	r16,r16,12
 10068b4:	0083ffc4 	movi	r2,4095
 10068b8:	843fffc4 	addi	r16,r16,-1
 10068bc:	8020933a 	slli	r16,r16,12
 10068c0:	1400060e 	bge	r2,r16,10068dc <_malloc_trim_r+0x70>
 10068c4:	000b883a 	mov	r5,zero
 10068c8:	9009883a 	mov	r4,r18
 10068cc:	10098d40 	call	10098d4 <_sbrk_r>
 10068d0:	98c00217 	ldw	r3,8(r19)
 10068d4:	1c47883a 	add	r3,r3,r17
 10068d8:	10c00a26 	beq	r2,r3,1006904 <_malloc_trim_r+0x98>
 10068dc:	9009883a 	mov	r4,r18
 10068e0:	100f7840 	call	100f784 <__malloc_unlock>
 10068e4:	0005883a 	mov	r2,zero
 10068e8:	dfc00417 	ldw	ra,16(sp)
 10068ec:	dcc00317 	ldw	r19,12(sp)
 10068f0:	dc800217 	ldw	r18,8(sp)
 10068f4:	dc400117 	ldw	r17,4(sp)
 10068f8:	dc000017 	ldw	r16,0(sp)
 10068fc:	dec00504 	addi	sp,sp,20
 1006900:	f800283a 	ret
 1006904:	040bc83a 	sub	r5,zero,r16
 1006908:	9009883a 	mov	r4,r18
 100690c:	10098d40 	call	10098d4 <_sbrk_r>
 1006910:	00ffffc4 	movi	r3,-1
 1006914:	10c00d26 	beq	r2,r3,100694c <_malloc_trim_r+0xe0>
 1006918:	00c04074 	movhi	r3,257
 100691c:	18d69c04 	addi	r3,r3,23152
 1006920:	18800017 	ldw	r2,0(r3)
 1006924:	99000217 	ldw	r4,8(r19)
 1006928:	8c23c83a 	sub	r17,r17,r16
 100692c:	8c400054 	ori	r17,r17,1
 1006930:	1421c83a 	sub	r16,r2,r16
 1006934:	24400115 	stw	r17,4(r4)
 1006938:	9009883a 	mov	r4,r18
 100693c:	1c000015 	stw	r16,0(r3)
 1006940:	100f7840 	call	100f784 <__malloc_unlock>
 1006944:	00800044 	movi	r2,1
 1006948:	003fe706 	br	10068e8 <__alt_data_end+0xff8068e8>
 100694c:	000b883a 	mov	r5,zero
 1006950:	9009883a 	mov	r4,r18
 1006954:	10098d40 	call	10098d4 <_sbrk_r>
 1006958:	99000217 	ldw	r4,8(r19)
 100695c:	014003c4 	movi	r5,15
 1006960:	1107c83a 	sub	r3,r2,r4
 1006964:	28ffdd0e 	bge	r5,r3,10068dc <__alt_data_end+0xff8068dc>
 1006968:	01404074 	movhi	r5,257
 100696c:	294fc504 	addi	r5,r5,16148
 1006970:	29400017 	ldw	r5,0(r5)
 1006974:	18c00054 	ori	r3,r3,1
 1006978:	20c00115 	stw	r3,4(r4)
 100697c:	00c04074 	movhi	r3,257
 1006980:	1145c83a 	sub	r2,r2,r5
 1006984:	18d69c04 	addi	r3,r3,23152
 1006988:	18800015 	stw	r2,0(r3)
 100698c:	003fd306 	br	10068dc <__alt_data_end+0xff8068dc>

01006990 <_free_r>:
 1006990:	28004126 	beq	r5,zero,1006a98 <_free_r+0x108>
 1006994:	defffd04 	addi	sp,sp,-12
 1006998:	dc400115 	stw	r17,4(sp)
 100699c:	dc000015 	stw	r16,0(sp)
 10069a0:	2023883a 	mov	r17,r4
 10069a4:	2821883a 	mov	r16,r5
 10069a8:	dfc00215 	stw	ra,8(sp)
 10069ac:	100f7600 	call	100f760 <__malloc_lock>
 10069b0:	81ffff17 	ldw	r7,-4(r16)
 10069b4:	00bfff84 	movi	r2,-2
 10069b8:	01004074 	movhi	r4,257
 10069bc:	81bffe04 	addi	r6,r16,-8
 10069c0:	3884703a 	and	r2,r7,r2
 10069c4:	210a3e04 	addi	r4,r4,10488
 10069c8:	308b883a 	add	r5,r6,r2
 10069cc:	2a400117 	ldw	r9,4(r5)
 10069d0:	22000217 	ldw	r8,8(r4)
 10069d4:	00ffff04 	movi	r3,-4
 10069d8:	48c6703a 	and	r3,r9,r3
 10069dc:	2a005726 	beq	r5,r8,1006b3c <_free_r+0x1ac>
 10069e0:	28c00115 	stw	r3,4(r5)
 10069e4:	39c0004c 	andi	r7,r7,1
 10069e8:	3800091e 	bne	r7,zero,1006a10 <_free_r+0x80>
 10069ec:	823ffe17 	ldw	r8,-8(r16)
 10069f0:	22400204 	addi	r9,r4,8
 10069f4:	320dc83a 	sub	r6,r6,r8
 10069f8:	31c00217 	ldw	r7,8(r6)
 10069fc:	1205883a 	add	r2,r2,r8
 1006a00:	3a406526 	beq	r7,r9,1006b98 <_free_r+0x208>
 1006a04:	32000317 	ldw	r8,12(r6)
 1006a08:	3a000315 	stw	r8,12(r7)
 1006a0c:	41c00215 	stw	r7,8(r8)
 1006a10:	28cf883a 	add	r7,r5,r3
 1006a14:	39c00117 	ldw	r7,4(r7)
 1006a18:	39c0004c 	andi	r7,r7,1
 1006a1c:	38003a26 	beq	r7,zero,1006b08 <_free_r+0x178>
 1006a20:	10c00054 	ori	r3,r2,1
 1006a24:	30c00115 	stw	r3,4(r6)
 1006a28:	3087883a 	add	r3,r6,r2
 1006a2c:	18800015 	stw	r2,0(r3)
 1006a30:	00c07fc4 	movi	r3,511
 1006a34:	18801936 	bltu	r3,r2,1006a9c <_free_r+0x10c>
 1006a38:	1004d0fa 	srli	r2,r2,3
 1006a3c:	01c00044 	movi	r7,1
 1006a40:	21400117 	ldw	r5,4(r4)
 1006a44:	10c00044 	addi	r3,r2,1
 1006a48:	18c7883a 	add	r3,r3,r3
 1006a4c:	1005d0ba 	srai	r2,r2,2
 1006a50:	18c7883a 	add	r3,r3,r3
 1006a54:	18c7883a 	add	r3,r3,r3
 1006a58:	1907883a 	add	r3,r3,r4
 1006a5c:	3884983a 	sll	r2,r7,r2
 1006a60:	19c00017 	ldw	r7,0(r3)
 1006a64:	1a3ffe04 	addi	r8,r3,-8
 1006a68:	1144b03a 	or	r2,r2,r5
 1006a6c:	32000315 	stw	r8,12(r6)
 1006a70:	31c00215 	stw	r7,8(r6)
 1006a74:	20800115 	stw	r2,4(r4)
 1006a78:	19800015 	stw	r6,0(r3)
 1006a7c:	39800315 	stw	r6,12(r7)
 1006a80:	8809883a 	mov	r4,r17
 1006a84:	dfc00217 	ldw	ra,8(sp)
 1006a88:	dc400117 	ldw	r17,4(sp)
 1006a8c:	dc000017 	ldw	r16,0(sp)
 1006a90:	dec00304 	addi	sp,sp,12
 1006a94:	100f7841 	jmpi	100f784 <__malloc_unlock>
 1006a98:	f800283a 	ret
 1006a9c:	100ad27a 	srli	r5,r2,9
 1006aa0:	00c00104 	movi	r3,4
 1006aa4:	19404a36 	bltu	r3,r5,1006bd0 <_free_r+0x240>
 1006aa8:	100ad1ba 	srli	r5,r2,6
 1006aac:	28c00e44 	addi	r3,r5,57
 1006ab0:	18c7883a 	add	r3,r3,r3
 1006ab4:	29400e04 	addi	r5,r5,56
 1006ab8:	18c7883a 	add	r3,r3,r3
 1006abc:	18c7883a 	add	r3,r3,r3
 1006ac0:	1909883a 	add	r4,r3,r4
 1006ac4:	20c00017 	ldw	r3,0(r4)
 1006ac8:	01c04074 	movhi	r7,257
 1006acc:	213ffe04 	addi	r4,r4,-8
 1006ad0:	39ca3e04 	addi	r7,r7,10488
 1006ad4:	20c04426 	beq	r4,r3,1006be8 <_free_r+0x258>
 1006ad8:	01ffff04 	movi	r7,-4
 1006adc:	19400117 	ldw	r5,4(r3)
 1006ae0:	29ca703a 	and	r5,r5,r7
 1006ae4:	1140022e 	bgeu	r2,r5,1006af0 <_free_r+0x160>
 1006ae8:	18c00217 	ldw	r3,8(r3)
 1006aec:	20fffb1e 	bne	r4,r3,1006adc <__alt_data_end+0xff806adc>
 1006af0:	19000317 	ldw	r4,12(r3)
 1006af4:	31000315 	stw	r4,12(r6)
 1006af8:	30c00215 	stw	r3,8(r6)
 1006afc:	21800215 	stw	r6,8(r4)
 1006b00:	19800315 	stw	r6,12(r3)
 1006b04:	003fde06 	br	1006a80 <__alt_data_end+0xff806a80>
 1006b08:	29c00217 	ldw	r7,8(r5)
 1006b0c:	10c5883a 	add	r2,r2,r3
 1006b10:	00c04074 	movhi	r3,257
 1006b14:	18ca4004 	addi	r3,r3,10496
 1006b18:	38c03b26 	beq	r7,r3,1006c08 <_free_r+0x278>
 1006b1c:	2a000317 	ldw	r8,12(r5)
 1006b20:	11400054 	ori	r5,r2,1
 1006b24:	3087883a 	add	r3,r6,r2
 1006b28:	3a000315 	stw	r8,12(r7)
 1006b2c:	41c00215 	stw	r7,8(r8)
 1006b30:	31400115 	stw	r5,4(r6)
 1006b34:	18800015 	stw	r2,0(r3)
 1006b38:	003fbd06 	br	1006a30 <__alt_data_end+0xff806a30>
 1006b3c:	39c0004c 	andi	r7,r7,1
 1006b40:	10c5883a 	add	r2,r2,r3
 1006b44:	3800071e 	bne	r7,zero,1006b64 <_free_r+0x1d4>
 1006b48:	81fffe17 	ldw	r7,-8(r16)
 1006b4c:	31cdc83a 	sub	r6,r6,r7
 1006b50:	30c00317 	ldw	r3,12(r6)
 1006b54:	31400217 	ldw	r5,8(r6)
 1006b58:	11c5883a 	add	r2,r2,r7
 1006b5c:	28c00315 	stw	r3,12(r5)
 1006b60:	19400215 	stw	r5,8(r3)
 1006b64:	10c00054 	ori	r3,r2,1
 1006b68:	30c00115 	stw	r3,4(r6)
 1006b6c:	00c04074 	movhi	r3,257
 1006b70:	18cfc604 	addi	r3,r3,16152
 1006b74:	18c00017 	ldw	r3,0(r3)
 1006b78:	21800215 	stw	r6,8(r4)
 1006b7c:	10ffc036 	bltu	r2,r3,1006a80 <__alt_data_end+0xff806a80>
 1006b80:	00804074 	movhi	r2,257
 1006b84:	10969304 	addi	r2,r2,23116
 1006b88:	11400017 	ldw	r5,0(r2)
 1006b8c:	8809883a 	mov	r4,r17
 1006b90:	100686c0 	call	100686c <_malloc_trim_r>
 1006b94:	003fba06 	br	1006a80 <__alt_data_end+0xff806a80>
 1006b98:	28c9883a 	add	r4,r5,r3
 1006b9c:	21000117 	ldw	r4,4(r4)
 1006ba0:	2100004c 	andi	r4,r4,1
 1006ba4:	2000391e 	bne	r4,zero,1006c8c <_free_r+0x2fc>
 1006ba8:	29c00217 	ldw	r7,8(r5)
 1006bac:	29000317 	ldw	r4,12(r5)
 1006bb0:	1885883a 	add	r2,r3,r2
 1006bb4:	10c00054 	ori	r3,r2,1
 1006bb8:	39000315 	stw	r4,12(r7)
 1006bbc:	21c00215 	stw	r7,8(r4)
 1006bc0:	30c00115 	stw	r3,4(r6)
 1006bc4:	308d883a 	add	r6,r6,r2
 1006bc8:	30800015 	stw	r2,0(r6)
 1006bcc:	003fac06 	br	1006a80 <__alt_data_end+0xff806a80>
 1006bd0:	00c00504 	movi	r3,20
 1006bd4:	19401536 	bltu	r3,r5,1006c2c <_free_r+0x29c>
 1006bd8:	28c01704 	addi	r3,r5,92
 1006bdc:	18c7883a 	add	r3,r3,r3
 1006be0:	294016c4 	addi	r5,r5,91
 1006be4:	003fb406 	br	1006ab8 <__alt_data_end+0xff806ab8>
 1006be8:	280bd0ba 	srai	r5,r5,2
 1006bec:	00c00044 	movi	r3,1
 1006bf0:	38800117 	ldw	r2,4(r7)
 1006bf4:	194a983a 	sll	r5,r3,r5
 1006bf8:	2007883a 	mov	r3,r4
 1006bfc:	2884b03a 	or	r2,r5,r2
 1006c00:	38800115 	stw	r2,4(r7)
 1006c04:	003fbb06 	br	1006af4 <__alt_data_end+0xff806af4>
 1006c08:	21800515 	stw	r6,20(r4)
 1006c0c:	21800415 	stw	r6,16(r4)
 1006c10:	10c00054 	ori	r3,r2,1
 1006c14:	31c00315 	stw	r7,12(r6)
 1006c18:	31c00215 	stw	r7,8(r6)
 1006c1c:	30c00115 	stw	r3,4(r6)
 1006c20:	308d883a 	add	r6,r6,r2
 1006c24:	30800015 	stw	r2,0(r6)
 1006c28:	003f9506 	br	1006a80 <__alt_data_end+0xff806a80>
 1006c2c:	00c01504 	movi	r3,84
 1006c30:	19400536 	bltu	r3,r5,1006c48 <_free_r+0x2b8>
 1006c34:	100ad33a 	srli	r5,r2,12
 1006c38:	28c01bc4 	addi	r3,r5,111
 1006c3c:	18c7883a 	add	r3,r3,r3
 1006c40:	29401b84 	addi	r5,r5,110
 1006c44:	003f9c06 	br	1006ab8 <__alt_data_end+0xff806ab8>
 1006c48:	00c05504 	movi	r3,340
 1006c4c:	19400536 	bltu	r3,r5,1006c64 <_free_r+0x2d4>
 1006c50:	100ad3fa 	srli	r5,r2,15
 1006c54:	28c01e04 	addi	r3,r5,120
 1006c58:	18c7883a 	add	r3,r3,r3
 1006c5c:	29401dc4 	addi	r5,r5,119
 1006c60:	003f9506 	br	1006ab8 <__alt_data_end+0xff806ab8>
 1006c64:	00c15504 	movi	r3,1364
 1006c68:	19400536 	bltu	r3,r5,1006c80 <_free_r+0x2f0>
 1006c6c:	100ad4ba 	srli	r5,r2,18
 1006c70:	28c01f44 	addi	r3,r5,125
 1006c74:	18c7883a 	add	r3,r3,r3
 1006c78:	29401f04 	addi	r5,r5,124
 1006c7c:	003f8e06 	br	1006ab8 <__alt_data_end+0xff806ab8>
 1006c80:	00c03f84 	movi	r3,254
 1006c84:	01401f84 	movi	r5,126
 1006c88:	003f8b06 	br	1006ab8 <__alt_data_end+0xff806ab8>
 1006c8c:	10c00054 	ori	r3,r2,1
 1006c90:	30c00115 	stw	r3,4(r6)
 1006c94:	308d883a 	add	r6,r6,r2
 1006c98:	30800015 	stw	r2,0(r6)
 1006c9c:	003f7806 	br	1006a80 <__alt_data_end+0xff806a80>

01006ca0 <__sfvwrite_r>:
 1006ca0:	30800217 	ldw	r2,8(r6)
 1006ca4:	10006726 	beq	r2,zero,1006e44 <__sfvwrite_r+0x1a4>
 1006ca8:	28c0030b 	ldhu	r3,12(r5)
 1006cac:	defff404 	addi	sp,sp,-48
 1006cb0:	dd400715 	stw	r21,28(sp)
 1006cb4:	dd000615 	stw	r20,24(sp)
 1006cb8:	dc000215 	stw	r16,8(sp)
 1006cbc:	dfc00b15 	stw	ra,44(sp)
 1006cc0:	df000a15 	stw	fp,40(sp)
 1006cc4:	ddc00915 	stw	r23,36(sp)
 1006cc8:	dd800815 	stw	r22,32(sp)
 1006ccc:	dcc00515 	stw	r19,20(sp)
 1006cd0:	dc800415 	stw	r18,16(sp)
 1006cd4:	dc400315 	stw	r17,12(sp)
 1006cd8:	1880020c 	andi	r2,r3,8
 1006cdc:	2821883a 	mov	r16,r5
 1006ce0:	202b883a 	mov	r21,r4
 1006ce4:	3029883a 	mov	r20,r6
 1006ce8:	10002726 	beq	r2,zero,1006d88 <__sfvwrite_r+0xe8>
 1006cec:	28800417 	ldw	r2,16(r5)
 1006cf0:	10002526 	beq	r2,zero,1006d88 <__sfvwrite_r+0xe8>
 1006cf4:	1880008c 	andi	r2,r3,2
 1006cf8:	a4400017 	ldw	r17,0(r20)
 1006cfc:	10002a26 	beq	r2,zero,1006da8 <__sfvwrite_r+0x108>
 1006d00:	05a00034 	movhi	r22,32768
 1006d04:	0027883a 	mov	r19,zero
 1006d08:	0025883a 	mov	r18,zero
 1006d0c:	b5bf0004 	addi	r22,r22,-1024
 1006d10:	980d883a 	mov	r6,r19
 1006d14:	a809883a 	mov	r4,r21
 1006d18:	90004626 	beq	r18,zero,1006e34 <__sfvwrite_r+0x194>
 1006d1c:	900f883a 	mov	r7,r18
 1006d20:	b480022e 	bgeu	r22,r18,1006d2c <__sfvwrite_r+0x8c>
 1006d24:	01e00034 	movhi	r7,32768
 1006d28:	39ff0004 	addi	r7,r7,-1024
 1006d2c:	80800917 	ldw	r2,36(r16)
 1006d30:	81400717 	ldw	r5,28(r16)
 1006d34:	103ee83a 	callr	r2
 1006d38:	00805a0e 	bge	zero,r2,1006ea4 <__sfvwrite_r+0x204>
 1006d3c:	a0c00217 	ldw	r3,8(r20)
 1006d40:	98a7883a 	add	r19,r19,r2
 1006d44:	90a5c83a 	sub	r18,r18,r2
 1006d48:	1885c83a 	sub	r2,r3,r2
 1006d4c:	a0800215 	stw	r2,8(r20)
 1006d50:	103fef1e 	bne	r2,zero,1006d10 <__alt_data_end+0xff806d10>
 1006d54:	0005883a 	mov	r2,zero
 1006d58:	dfc00b17 	ldw	ra,44(sp)
 1006d5c:	df000a17 	ldw	fp,40(sp)
 1006d60:	ddc00917 	ldw	r23,36(sp)
 1006d64:	dd800817 	ldw	r22,32(sp)
 1006d68:	dd400717 	ldw	r21,28(sp)
 1006d6c:	dd000617 	ldw	r20,24(sp)
 1006d70:	dcc00517 	ldw	r19,20(sp)
 1006d74:	dc800417 	ldw	r18,16(sp)
 1006d78:	dc400317 	ldw	r17,12(sp)
 1006d7c:	dc000217 	ldw	r16,8(sp)
 1006d80:	dec00c04 	addi	sp,sp,48
 1006d84:	f800283a 	ret
 1006d88:	800b883a 	mov	r5,r16
 1006d8c:	a809883a 	mov	r4,r21
 1006d90:	10048100 	call	1004810 <__swsetup_r>
 1006d94:	1000ee1e 	bne	r2,zero,1007150 <__sfvwrite_r+0x4b0>
 1006d98:	80c0030b 	ldhu	r3,12(r16)
 1006d9c:	a4400017 	ldw	r17,0(r20)
 1006da0:	1880008c 	andi	r2,r3,2
 1006da4:	103fd61e 	bne	r2,zero,1006d00 <__alt_data_end+0xff806d00>
 1006da8:	1880004c 	andi	r2,r3,1
 1006dac:	1000421e 	bne	r2,zero,1006eb8 <__sfvwrite_r+0x218>
 1006db0:	0039883a 	mov	fp,zero
 1006db4:	0025883a 	mov	r18,zero
 1006db8:	90001a26 	beq	r18,zero,1006e24 <__sfvwrite_r+0x184>
 1006dbc:	1880800c 	andi	r2,r3,512
 1006dc0:	84c00217 	ldw	r19,8(r16)
 1006dc4:	10002126 	beq	r2,zero,1006e4c <__sfvwrite_r+0x1ac>
 1006dc8:	982f883a 	mov	r23,r19
 1006dcc:	94c09636 	bltu	r18,r19,1007028 <__sfvwrite_r+0x388>
 1006dd0:	1881200c 	andi	r2,r3,1152
 1006dd4:	1000a11e 	bne	r2,zero,100705c <__sfvwrite_r+0x3bc>
 1006dd8:	81000017 	ldw	r4,0(r16)
 1006ddc:	b80d883a 	mov	r6,r23
 1006de0:	e00b883a 	mov	r5,fp
 1006de4:	1007fc00 	call	1007fc0 <memmove>
 1006de8:	80c00217 	ldw	r3,8(r16)
 1006dec:	81000017 	ldw	r4,0(r16)
 1006df0:	9005883a 	mov	r2,r18
 1006df4:	1ce7c83a 	sub	r19,r3,r19
 1006df8:	25cf883a 	add	r7,r4,r23
 1006dfc:	84c00215 	stw	r19,8(r16)
 1006e00:	81c00015 	stw	r7,0(r16)
 1006e04:	a0c00217 	ldw	r3,8(r20)
 1006e08:	e0b9883a 	add	fp,fp,r2
 1006e0c:	90a5c83a 	sub	r18,r18,r2
 1006e10:	18a7c83a 	sub	r19,r3,r2
 1006e14:	a4c00215 	stw	r19,8(r20)
 1006e18:	983fce26 	beq	r19,zero,1006d54 <__alt_data_end+0xff806d54>
 1006e1c:	80c0030b 	ldhu	r3,12(r16)
 1006e20:	903fe61e 	bne	r18,zero,1006dbc <__alt_data_end+0xff806dbc>
 1006e24:	8f000017 	ldw	fp,0(r17)
 1006e28:	8c800117 	ldw	r18,4(r17)
 1006e2c:	8c400204 	addi	r17,r17,8
 1006e30:	003fe106 	br	1006db8 <__alt_data_end+0xff806db8>
 1006e34:	8cc00017 	ldw	r19,0(r17)
 1006e38:	8c800117 	ldw	r18,4(r17)
 1006e3c:	8c400204 	addi	r17,r17,8
 1006e40:	003fb306 	br	1006d10 <__alt_data_end+0xff806d10>
 1006e44:	0005883a 	mov	r2,zero
 1006e48:	f800283a 	ret
 1006e4c:	81000017 	ldw	r4,0(r16)
 1006e50:	80800417 	ldw	r2,16(r16)
 1006e54:	11005a36 	bltu	r2,r4,1006fc0 <__sfvwrite_r+0x320>
 1006e58:	85c00517 	ldw	r23,20(r16)
 1006e5c:	95c05836 	bltu	r18,r23,1006fc0 <__sfvwrite_r+0x320>
 1006e60:	00a00034 	movhi	r2,32768
 1006e64:	10bfffc4 	addi	r2,r2,-1
 1006e68:	9009883a 	mov	r4,r18
 1006e6c:	1480012e 	bgeu	r2,r18,1006e74 <__sfvwrite_r+0x1d4>
 1006e70:	1009883a 	mov	r4,r2
 1006e74:	b80b883a 	mov	r5,r23
 1006e78:	100c7440 	call	100c744 <__divsi3>
 1006e7c:	b80b883a 	mov	r5,r23
 1006e80:	1009883a 	mov	r4,r2
 1006e84:	100c8f80 	call	100c8f8 <__mulsi3>
 1006e88:	81400717 	ldw	r5,28(r16)
 1006e8c:	80c00917 	ldw	r3,36(r16)
 1006e90:	100f883a 	mov	r7,r2
 1006e94:	e00d883a 	mov	r6,fp
 1006e98:	a809883a 	mov	r4,r21
 1006e9c:	183ee83a 	callr	r3
 1006ea0:	00bfd816 	blt	zero,r2,1006e04 <__alt_data_end+0xff806e04>
 1006ea4:	8080030b 	ldhu	r2,12(r16)
 1006ea8:	10801014 	ori	r2,r2,64
 1006eac:	8080030d 	sth	r2,12(r16)
 1006eb0:	00bfffc4 	movi	r2,-1
 1006eb4:	003fa806 	br	1006d58 <__alt_data_end+0xff806d58>
 1006eb8:	0027883a 	mov	r19,zero
 1006ebc:	0011883a 	mov	r8,zero
 1006ec0:	0039883a 	mov	fp,zero
 1006ec4:	0025883a 	mov	r18,zero
 1006ec8:	90001f26 	beq	r18,zero,1006f48 <__sfvwrite_r+0x2a8>
 1006ecc:	40005a26 	beq	r8,zero,1007038 <__sfvwrite_r+0x398>
 1006ed0:	982d883a 	mov	r22,r19
 1006ed4:	94c0012e 	bgeu	r18,r19,1006edc <__sfvwrite_r+0x23c>
 1006ed8:	902d883a 	mov	r22,r18
 1006edc:	81000017 	ldw	r4,0(r16)
 1006ee0:	80800417 	ldw	r2,16(r16)
 1006ee4:	b02f883a 	mov	r23,r22
 1006ee8:	81c00517 	ldw	r7,20(r16)
 1006eec:	1100032e 	bgeu	r2,r4,1006efc <__sfvwrite_r+0x25c>
 1006ef0:	80c00217 	ldw	r3,8(r16)
 1006ef4:	38c7883a 	add	r3,r7,r3
 1006ef8:	1d801816 	blt	r3,r22,1006f5c <__sfvwrite_r+0x2bc>
 1006efc:	b1c03e16 	blt	r22,r7,1006ff8 <__sfvwrite_r+0x358>
 1006f00:	80800917 	ldw	r2,36(r16)
 1006f04:	81400717 	ldw	r5,28(r16)
 1006f08:	e00d883a 	mov	r6,fp
 1006f0c:	da000115 	stw	r8,4(sp)
 1006f10:	a809883a 	mov	r4,r21
 1006f14:	103ee83a 	callr	r2
 1006f18:	102f883a 	mov	r23,r2
 1006f1c:	da000117 	ldw	r8,4(sp)
 1006f20:	00bfe00e 	bge	zero,r2,1006ea4 <__alt_data_end+0xff806ea4>
 1006f24:	9de7c83a 	sub	r19,r19,r23
 1006f28:	98001f26 	beq	r19,zero,1006fa8 <__sfvwrite_r+0x308>
 1006f2c:	a0800217 	ldw	r2,8(r20)
 1006f30:	e5f9883a 	add	fp,fp,r23
 1006f34:	95e5c83a 	sub	r18,r18,r23
 1006f38:	15efc83a 	sub	r23,r2,r23
 1006f3c:	a5c00215 	stw	r23,8(r20)
 1006f40:	b83f8426 	beq	r23,zero,1006d54 <__alt_data_end+0xff806d54>
 1006f44:	903fe11e 	bne	r18,zero,1006ecc <__alt_data_end+0xff806ecc>
 1006f48:	8f000017 	ldw	fp,0(r17)
 1006f4c:	8c800117 	ldw	r18,4(r17)
 1006f50:	0011883a 	mov	r8,zero
 1006f54:	8c400204 	addi	r17,r17,8
 1006f58:	003fdb06 	br	1006ec8 <__alt_data_end+0xff806ec8>
 1006f5c:	180d883a 	mov	r6,r3
 1006f60:	e00b883a 	mov	r5,fp
 1006f64:	da000115 	stw	r8,4(sp)
 1006f68:	d8c00015 	stw	r3,0(sp)
 1006f6c:	1007fc00 	call	1007fc0 <memmove>
 1006f70:	d8c00017 	ldw	r3,0(sp)
 1006f74:	80800017 	ldw	r2,0(r16)
 1006f78:	800b883a 	mov	r5,r16
 1006f7c:	a809883a 	mov	r4,r21
 1006f80:	10c5883a 	add	r2,r2,r3
 1006f84:	80800015 	stw	r2,0(r16)
 1006f88:	d8c00015 	stw	r3,0(sp)
 1006f8c:	10064300 	call	1006430 <_fflush_r>
 1006f90:	d8c00017 	ldw	r3,0(sp)
 1006f94:	da000117 	ldw	r8,4(sp)
 1006f98:	103fc21e 	bne	r2,zero,1006ea4 <__alt_data_end+0xff806ea4>
 1006f9c:	182f883a 	mov	r23,r3
 1006fa0:	9de7c83a 	sub	r19,r19,r23
 1006fa4:	983fe11e 	bne	r19,zero,1006f2c <__alt_data_end+0xff806f2c>
 1006fa8:	800b883a 	mov	r5,r16
 1006fac:	a809883a 	mov	r4,r21
 1006fb0:	10064300 	call	1006430 <_fflush_r>
 1006fb4:	103fbb1e 	bne	r2,zero,1006ea4 <__alt_data_end+0xff806ea4>
 1006fb8:	0011883a 	mov	r8,zero
 1006fbc:	003fdb06 	br	1006f2c <__alt_data_end+0xff806f2c>
 1006fc0:	94c0012e 	bgeu	r18,r19,1006fc8 <__sfvwrite_r+0x328>
 1006fc4:	9027883a 	mov	r19,r18
 1006fc8:	980d883a 	mov	r6,r19
 1006fcc:	e00b883a 	mov	r5,fp
 1006fd0:	1007fc00 	call	1007fc0 <memmove>
 1006fd4:	80800217 	ldw	r2,8(r16)
 1006fd8:	80c00017 	ldw	r3,0(r16)
 1006fdc:	14c5c83a 	sub	r2,r2,r19
 1006fe0:	1cc7883a 	add	r3,r3,r19
 1006fe4:	80800215 	stw	r2,8(r16)
 1006fe8:	80c00015 	stw	r3,0(r16)
 1006fec:	10004326 	beq	r2,zero,10070fc <__sfvwrite_r+0x45c>
 1006ff0:	9805883a 	mov	r2,r19
 1006ff4:	003f8306 	br	1006e04 <__alt_data_end+0xff806e04>
 1006ff8:	b00d883a 	mov	r6,r22
 1006ffc:	e00b883a 	mov	r5,fp
 1007000:	da000115 	stw	r8,4(sp)
 1007004:	1007fc00 	call	1007fc0 <memmove>
 1007008:	80800217 	ldw	r2,8(r16)
 100700c:	80c00017 	ldw	r3,0(r16)
 1007010:	da000117 	ldw	r8,4(sp)
 1007014:	1585c83a 	sub	r2,r2,r22
 1007018:	1dad883a 	add	r22,r3,r22
 100701c:	80800215 	stw	r2,8(r16)
 1007020:	85800015 	stw	r22,0(r16)
 1007024:	003fbf06 	br	1006f24 <__alt_data_end+0xff806f24>
 1007028:	81000017 	ldw	r4,0(r16)
 100702c:	9027883a 	mov	r19,r18
 1007030:	902f883a 	mov	r23,r18
 1007034:	003f6906 	br	1006ddc <__alt_data_end+0xff806ddc>
 1007038:	900d883a 	mov	r6,r18
 100703c:	01400284 	movi	r5,10
 1007040:	e009883a 	mov	r4,fp
 1007044:	1007d940 	call	1007d94 <memchr>
 1007048:	10003e26 	beq	r2,zero,1007144 <__sfvwrite_r+0x4a4>
 100704c:	10800044 	addi	r2,r2,1
 1007050:	1727c83a 	sub	r19,r2,fp
 1007054:	02000044 	movi	r8,1
 1007058:	003f9d06 	br	1006ed0 <__alt_data_end+0xff806ed0>
 100705c:	80800517 	ldw	r2,20(r16)
 1007060:	81400417 	ldw	r5,16(r16)
 1007064:	81c00017 	ldw	r7,0(r16)
 1007068:	10a7883a 	add	r19,r2,r2
 100706c:	9885883a 	add	r2,r19,r2
 1007070:	1026d7fa 	srli	r19,r2,31
 1007074:	396dc83a 	sub	r22,r7,r5
 1007078:	b1000044 	addi	r4,r22,1
 100707c:	9885883a 	add	r2,r19,r2
 1007080:	1027d07a 	srai	r19,r2,1
 1007084:	2485883a 	add	r2,r4,r18
 1007088:	980d883a 	mov	r6,r19
 100708c:	9880022e 	bgeu	r19,r2,1007098 <__sfvwrite_r+0x3f8>
 1007090:	1027883a 	mov	r19,r2
 1007094:	100d883a 	mov	r6,r2
 1007098:	18c1000c 	andi	r3,r3,1024
 100709c:	18001c26 	beq	r3,zero,1007110 <__sfvwrite_r+0x470>
 10070a0:	300b883a 	mov	r5,r6
 10070a4:	a809883a 	mov	r4,r21
 10070a8:	10075880 	call	1007588 <_malloc_r>
 10070ac:	102f883a 	mov	r23,r2
 10070b0:	10002926 	beq	r2,zero,1007158 <__sfvwrite_r+0x4b8>
 10070b4:	81400417 	ldw	r5,16(r16)
 10070b8:	b00d883a 	mov	r6,r22
 10070bc:	1009883a 	mov	r4,r2
 10070c0:	1007e780 	call	1007e78 <memcpy>
 10070c4:	8080030b 	ldhu	r2,12(r16)
 10070c8:	00fedfc4 	movi	r3,-1153
 10070cc:	10c4703a 	and	r2,r2,r3
 10070d0:	10802014 	ori	r2,r2,128
 10070d4:	8080030d 	sth	r2,12(r16)
 10070d8:	bd89883a 	add	r4,r23,r22
 10070dc:	9d8fc83a 	sub	r7,r19,r22
 10070e0:	85c00415 	stw	r23,16(r16)
 10070e4:	84c00515 	stw	r19,20(r16)
 10070e8:	81000015 	stw	r4,0(r16)
 10070ec:	9027883a 	mov	r19,r18
 10070f0:	81c00215 	stw	r7,8(r16)
 10070f4:	902f883a 	mov	r23,r18
 10070f8:	003f3806 	br	1006ddc <__alt_data_end+0xff806ddc>
 10070fc:	800b883a 	mov	r5,r16
 1007100:	a809883a 	mov	r4,r21
 1007104:	10064300 	call	1006430 <_fflush_r>
 1007108:	103fb926 	beq	r2,zero,1006ff0 <__alt_data_end+0xff806ff0>
 100710c:	003f6506 	br	1006ea4 <__alt_data_end+0xff806ea4>
 1007110:	a809883a 	mov	r4,r21
 1007114:	10092fc0 	call	10092fc <_realloc_r>
 1007118:	102f883a 	mov	r23,r2
 100711c:	103fee1e 	bne	r2,zero,10070d8 <__alt_data_end+0xff8070d8>
 1007120:	81400417 	ldw	r5,16(r16)
 1007124:	a809883a 	mov	r4,r21
 1007128:	10069900 	call	1006990 <_free_r>
 100712c:	8080030b 	ldhu	r2,12(r16)
 1007130:	00ffdfc4 	movi	r3,-129
 1007134:	1884703a 	and	r2,r3,r2
 1007138:	00c00304 	movi	r3,12
 100713c:	a8c00015 	stw	r3,0(r21)
 1007140:	003f5906 	br	1006ea8 <__alt_data_end+0xff806ea8>
 1007144:	94c00044 	addi	r19,r18,1
 1007148:	02000044 	movi	r8,1
 100714c:	003f6006 	br	1006ed0 <__alt_data_end+0xff806ed0>
 1007150:	00bfffc4 	movi	r2,-1
 1007154:	003f0006 	br	1006d58 <__alt_data_end+0xff806d58>
 1007158:	00800304 	movi	r2,12
 100715c:	a8800015 	stw	r2,0(r21)
 1007160:	8080030b 	ldhu	r2,12(r16)
 1007164:	003f5006 	br	1006ea8 <__alt_data_end+0xff806ea8>

01007168 <_fwalk>:
 1007168:	defff704 	addi	sp,sp,-36
 100716c:	dd000415 	stw	r20,16(sp)
 1007170:	dfc00815 	stw	ra,32(sp)
 1007174:	ddc00715 	stw	r23,28(sp)
 1007178:	dd800615 	stw	r22,24(sp)
 100717c:	dd400515 	stw	r21,20(sp)
 1007180:	dcc00315 	stw	r19,12(sp)
 1007184:	dc800215 	stw	r18,8(sp)
 1007188:	dc400115 	stw	r17,4(sp)
 100718c:	dc000015 	stw	r16,0(sp)
 1007190:	2500b804 	addi	r20,r4,736
 1007194:	a0002326 	beq	r20,zero,1007224 <_fwalk+0xbc>
 1007198:	282b883a 	mov	r21,r5
 100719c:	002f883a 	mov	r23,zero
 10071a0:	05800044 	movi	r22,1
 10071a4:	04ffffc4 	movi	r19,-1
 10071a8:	a4400117 	ldw	r17,4(r20)
 10071ac:	a4800217 	ldw	r18,8(r20)
 10071b0:	8c7fffc4 	addi	r17,r17,-1
 10071b4:	88000d16 	blt	r17,zero,10071ec <_fwalk+0x84>
 10071b8:	94000304 	addi	r16,r18,12
 10071bc:	94800384 	addi	r18,r18,14
 10071c0:	8080000b 	ldhu	r2,0(r16)
 10071c4:	8c7fffc4 	addi	r17,r17,-1
 10071c8:	813ffd04 	addi	r4,r16,-12
 10071cc:	b080042e 	bgeu	r22,r2,10071e0 <_fwalk+0x78>
 10071d0:	9080000f 	ldh	r2,0(r18)
 10071d4:	14c00226 	beq	r2,r19,10071e0 <_fwalk+0x78>
 10071d8:	a83ee83a 	callr	r21
 10071dc:	b8aeb03a 	or	r23,r23,r2
 10071e0:	84001a04 	addi	r16,r16,104
 10071e4:	94801a04 	addi	r18,r18,104
 10071e8:	8cfff51e 	bne	r17,r19,10071c0 <__alt_data_end+0xff8071c0>
 10071ec:	a5000017 	ldw	r20,0(r20)
 10071f0:	a03fed1e 	bne	r20,zero,10071a8 <__alt_data_end+0xff8071a8>
 10071f4:	b805883a 	mov	r2,r23
 10071f8:	dfc00817 	ldw	ra,32(sp)
 10071fc:	ddc00717 	ldw	r23,28(sp)
 1007200:	dd800617 	ldw	r22,24(sp)
 1007204:	dd400517 	ldw	r21,20(sp)
 1007208:	dd000417 	ldw	r20,16(sp)
 100720c:	dcc00317 	ldw	r19,12(sp)
 1007210:	dc800217 	ldw	r18,8(sp)
 1007214:	dc400117 	ldw	r17,4(sp)
 1007218:	dc000017 	ldw	r16,0(sp)
 100721c:	dec00904 	addi	sp,sp,36
 1007220:	f800283a 	ret
 1007224:	002f883a 	mov	r23,zero
 1007228:	003ff206 	br	10071f4 <__alt_data_end+0xff8071f4>

0100722c <_fwalk_reent>:
 100722c:	defff704 	addi	sp,sp,-36
 1007230:	dd000415 	stw	r20,16(sp)
 1007234:	dfc00815 	stw	ra,32(sp)
 1007238:	ddc00715 	stw	r23,28(sp)
 100723c:	dd800615 	stw	r22,24(sp)
 1007240:	dd400515 	stw	r21,20(sp)
 1007244:	dcc00315 	stw	r19,12(sp)
 1007248:	dc800215 	stw	r18,8(sp)
 100724c:	dc400115 	stw	r17,4(sp)
 1007250:	dc000015 	stw	r16,0(sp)
 1007254:	2500b804 	addi	r20,r4,736
 1007258:	a0002326 	beq	r20,zero,10072e8 <_fwalk_reent+0xbc>
 100725c:	282b883a 	mov	r21,r5
 1007260:	2027883a 	mov	r19,r4
 1007264:	002f883a 	mov	r23,zero
 1007268:	05800044 	movi	r22,1
 100726c:	04bfffc4 	movi	r18,-1
 1007270:	a4400117 	ldw	r17,4(r20)
 1007274:	a4000217 	ldw	r16,8(r20)
 1007278:	8c7fffc4 	addi	r17,r17,-1
 100727c:	88000c16 	blt	r17,zero,10072b0 <_fwalk_reent+0x84>
 1007280:	84000304 	addi	r16,r16,12
 1007284:	8080000b 	ldhu	r2,0(r16)
 1007288:	8c7fffc4 	addi	r17,r17,-1
 100728c:	817ffd04 	addi	r5,r16,-12
 1007290:	b080052e 	bgeu	r22,r2,10072a8 <_fwalk_reent+0x7c>
 1007294:	8080008f 	ldh	r2,2(r16)
 1007298:	9809883a 	mov	r4,r19
 100729c:	14800226 	beq	r2,r18,10072a8 <_fwalk_reent+0x7c>
 10072a0:	a83ee83a 	callr	r21
 10072a4:	b8aeb03a 	or	r23,r23,r2
 10072a8:	84001a04 	addi	r16,r16,104
 10072ac:	8cbff51e 	bne	r17,r18,1007284 <__alt_data_end+0xff807284>
 10072b0:	a5000017 	ldw	r20,0(r20)
 10072b4:	a03fee1e 	bne	r20,zero,1007270 <__alt_data_end+0xff807270>
 10072b8:	b805883a 	mov	r2,r23
 10072bc:	dfc00817 	ldw	ra,32(sp)
 10072c0:	ddc00717 	ldw	r23,28(sp)
 10072c4:	dd800617 	ldw	r22,24(sp)
 10072c8:	dd400517 	ldw	r21,20(sp)
 10072cc:	dd000417 	ldw	r20,16(sp)
 10072d0:	dcc00317 	ldw	r19,12(sp)
 10072d4:	dc800217 	ldw	r18,8(sp)
 10072d8:	dc400117 	ldw	r17,4(sp)
 10072dc:	dc000017 	ldw	r16,0(sp)
 10072e0:	dec00904 	addi	sp,sp,36
 10072e4:	f800283a 	ret
 10072e8:	002f883a 	mov	r23,zero
 10072ec:	003ff206 	br	10072b8 <__alt_data_end+0xff8072b8>

010072f0 <_setlocale_r>:
 10072f0:	30001b26 	beq	r6,zero,1007360 <_setlocale_r+0x70>
 10072f4:	01404074 	movhi	r5,257
 10072f8:	defffe04 	addi	sp,sp,-8
 10072fc:	29487604 	addi	r5,r5,8664
 1007300:	3009883a 	mov	r4,r6
 1007304:	dc000015 	stw	r16,0(sp)
 1007308:	dfc00115 	stw	ra,4(sp)
 100730c:	3021883a 	mov	r16,r6
 1007310:	1009a640 	call	1009a64 <strcmp>
 1007314:	1000061e 	bne	r2,zero,1007330 <_setlocale_r+0x40>
 1007318:	00804074 	movhi	r2,257
 100731c:	10887504 	addi	r2,r2,8660
 1007320:	dfc00117 	ldw	ra,4(sp)
 1007324:	dc000017 	ldw	r16,0(sp)
 1007328:	dec00204 	addi	sp,sp,8
 100732c:	f800283a 	ret
 1007330:	01404074 	movhi	r5,257
 1007334:	29487504 	addi	r5,r5,8660
 1007338:	8009883a 	mov	r4,r16
 100733c:	1009a640 	call	1009a64 <strcmp>
 1007340:	103ff526 	beq	r2,zero,1007318 <__alt_data_end+0xff807318>
 1007344:	01404074 	movhi	r5,257
 1007348:	29486004 	addi	r5,r5,8576
 100734c:	8009883a 	mov	r4,r16
 1007350:	1009a640 	call	1009a64 <strcmp>
 1007354:	103ff026 	beq	r2,zero,1007318 <__alt_data_end+0xff807318>
 1007358:	0005883a 	mov	r2,zero
 100735c:	003ff006 	br	1007320 <__alt_data_end+0xff807320>
 1007360:	00804074 	movhi	r2,257
 1007364:	10887504 	addi	r2,r2,8660
 1007368:	f800283a 	ret

0100736c <__locale_charset>:
 100736c:	00804074 	movhi	r2,257
 1007370:	108a2804 	addi	r2,r2,10400
 1007374:	f800283a 	ret

01007378 <__locale_mb_cur_max>:
 1007378:	00804074 	movhi	r2,257
 100737c:	108fc404 	addi	r2,r2,16144
 1007380:	10800017 	ldw	r2,0(r2)
 1007384:	f800283a 	ret

01007388 <__locale_msgcharset>:
 1007388:	00804074 	movhi	r2,257
 100738c:	108a2004 	addi	r2,r2,10368
 1007390:	f800283a 	ret

01007394 <__locale_cjk_lang>:
 1007394:	0005883a 	mov	r2,zero
 1007398:	f800283a 	ret

0100739c <_localeconv_r>:
 100739c:	00804074 	movhi	r2,257
 10073a0:	108a3004 	addi	r2,r2,10432
 10073a4:	f800283a 	ret

010073a8 <setlocale>:
 10073a8:	00804074 	movhi	r2,257
 10073ac:	108fc304 	addi	r2,r2,16140
 10073b0:	280d883a 	mov	r6,r5
 10073b4:	200b883a 	mov	r5,r4
 10073b8:	11000017 	ldw	r4,0(r2)
 10073bc:	10072f01 	jmpi	10072f0 <_setlocale_r>

010073c0 <localeconv>:
 10073c0:	00804074 	movhi	r2,257
 10073c4:	108a3004 	addi	r2,r2,10432
 10073c8:	f800283a 	ret

010073cc <__smakebuf_r>:
 10073cc:	2880030b 	ldhu	r2,12(r5)
 10073d0:	10c0008c 	andi	r3,r2,2
 10073d4:	1800411e 	bne	r3,zero,10074dc <__smakebuf_r+0x110>
 10073d8:	deffec04 	addi	sp,sp,-80
 10073dc:	dc000f15 	stw	r16,60(sp)
 10073e0:	2821883a 	mov	r16,r5
 10073e4:	2940038f 	ldh	r5,14(r5)
 10073e8:	dc401015 	stw	r17,64(sp)
 10073ec:	dfc01315 	stw	ra,76(sp)
 10073f0:	dcc01215 	stw	r19,72(sp)
 10073f4:	dc801115 	stw	r18,68(sp)
 10073f8:	2023883a 	mov	r17,r4
 10073fc:	28001c16 	blt	r5,zero,1007470 <__smakebuf_r+0xa4>
 1007400:	d80d883a 	mov	r6,sp
 1007404:	100b6d40 	call	100b6d4 <_fstat_r>
 1007408:	10001816 	blt	r2,zero,100746c <__smakebuf_r+0xa0>
 100740c:	d8800117 	ldw	r2,4(sp)
 1007410:	00e00014 	movui	r3,32768
 1007414:	10bc000c 	andi	r2,r2,61440
 1007418:	14c80020 	cmpeqi	r19,r2,8192
 100741c:	10c03726 	beq	r2,r3,10074fc <__smakebuf_r+0x130>
 1007420:	80c0030b 	ldhu	r3,12(r16)
 1007424:	18c20014 	ori	r3,r3,2048
 1007428:	80c0030d 	sth	r3,12(r16)
 100742c:	00c80004 	movi	r3,8192
 1007430:	10c0521e 	bne	r2,r3,100757c <__smakebuf_r+0x1b0>
 1007434:	8140038f 	ldh	r5,14(r16)
 1007438:	8809883a 	mov	r4,r17
 100743c:	100b7300 	call	100b730 <_isatty_r>
 1007440:	10004c26 	beq	r2,zero,1007574 <__smakebuf_r+0x1a8>
 1007444:	8080030b 	ldhu	r2,12(r16)
 1007448:	80c010c4 	addi	r3,r16,67
 100744c:	80c00015 	stw	r3,0(r16)
 1007450:	10800054 	ori	r2,r2,1
 1007454:	8080030d 	sth	r2,12(r16)
 1007458:	00800044 	movi	r2,1
 100745c:	80c00415 	stw	r3,16(r16)
 1007460:	80800515 	stw	r2,20(r16)
 1007464:	04810004 	movi	r18,1024
 1007468:	00000706 	br	1007488 <__smakebuf_r+0xbc>
 100746c:	8080030b 	ldhu	r2,12(r16)
 1007470:	10c0200c 	andi	r3,r2,128
 1007474:	18001f1e 	bne	r3,zero,10074f4 <__smakebuf_r+0x128>
 1007478:	04810004 	movi	r18,1024
 100747c:	10820014 	ori	r2,r2,2048
 1007480:	8080030d 	sth	r2,12(r16)
 1007484:	0027883a 	mov	r19,zero
 1007488:	900b883a 	mov	r5,r18
 100748c:	8809883a 	mov	r4,r17
 1007490:	10075880 	call	1007588 <_malloc_r>
 1007494:	10002c26 	beq	r2,zero,1007548 <__smakebuf_r+0x17c>
 1007498:	80c0030b 	ldhu	r3,12(r16)
 100749c:	01004034 	movhi	r4,256
 10074a0:	21193104 	addi	r4,r4,25796
 10074a4:	89000f15 	stw	r4,60(r17)
 10074a8:	18c02014 	ori	r3,r3,128
 10074ac:	80c0030d 	sth	r3,12(r16)
 10074b0:	80800015 	stw	r2,0(r16)
 10074b4:	80800415 	stw	r2,16(r16)
 10074b8:	84800515 	stw	r18,20(r16)
 10074bc:	98001a1e 	bne	r19,zero,1007528 <__smakebuf_r+0x15c>
 10074c0:	dfc01317 	ldw	ra,76(sp)
 10074c4:	dcc01217 	ldw	r19,72(sp)
 10074c8:	dc801117 	ldw	r18,68(sp)
 10074cc:	dc401017 	ldw	r17,64(sp)
 10074d0:	dc000f17 	ldw	r16,60(sp)
 10074d4:	dec01404 	addi	sp,sp,80
 10074d8:	f800283a 	ret
 10074dc:	288010c4 	addi	r2,r5,67
 10074e0:	28800015 	stw	r2,0(r5)
 10074e4:	28800415 	stw	r2,16(r5)
 10074e8:	00800044 	movi	r2,1
 10074ec:	28800515 	stw	r2,20(r5)
 10074f0:	f800283a 	ret
 10074f4:	04801004 	movi	r18,64
 10074f8:	003fe006 	br	100747c <__alt_data_end+0xff80747c>
 10074fc:	81000a17 	ldw	r4,40(r16)
 1007500:	00c04074 	movhi	r3,257
 1007504:	18e68004 	addi	r3,r3,-26112
 1007508:	20ffc51e 	bne	r4,r3,1007420 <__alt_data_end+0xff807420>
 100750c:	8080030b 	ldhu	r2,12(r16)
 1007510:	04810004 	movi	r18,1024
 1007514:	84801315 	stw	r18,76(r16)
 1007518:	1484b03a 	or	r2,r2,r18
 100751c:	8080030d 	sth	r2,12(r16)
 1007520:	0027883a 	mov	r19,zero
 1007524:	003fd806 	br	1007488 <__alt_data_end+0xff807488>
 1007528:	8140038f 	ldh	r5,14(r16)
 100752c:	8809883a 	mov	r4,r17
 1007530:	100b7300 	call	100b730 <_isatty_r>
 1007534:	103fe226 	beq	r2,zero,10074c0 <__alt_data_end+0xff8074c0>
 1007538:	8080030b 	ldhu	r2,12(r16)
 100753c:	10800054 	ori	r2,r2,1
 1007540:	8080030d 	sth	r2,12(r16)
 1007544:	003fde06 	br	10074c0 <__alt_data_end+0xff8074c0>
 1007548:	8080030b 	ldhu	r2,12(r16)
 100754c:	10c0800c 	andi	r3,r2,512
 1007550:	183fdb1e 	bne	r3,zero,10074c0 <__alt_data_end+0xff8074c0>
 1007554:	10800094 	ori	r2,r2,2
 1007558:	80c010c4 	addi	r3,r16,67
 100755c:	8080030d 	sth	r2,12(r16)
 1007560:	00800044 	movi	r2,1
 1007564:	80c00015 	stw	r3,0(r16)
 1007568:	80c00415 	stw	r3,16(r16)
 100756c:	80800515 	stw	r2,20(r16)
 1007570:	003fd306 	br	10074c0 <__alt_data_end+0xff8074c0>
 1007574:	04810004 	movi	r18,1024
 1007578:	003fc306 	br	1007488 <__alt_data_end+0xff807488>
 100757c:	0027883a 	mov	r19,zero
 1007580:	04810004 	movi	r18,1024
 1007584:	003fc006 	br	1007488 <__alt_data_end+0xff807488>

01007588 <_malloc_r>:
 1007588:	defff504 	addi	sp,sp,-44
 100758c:	dc800315 	stw	r18,12(sp)
 1007590:	dfc00a15 	stw	ra,40(sp)
 1007594:	df000915 	stw	fp,36(sp)
 1007598:	ddc00815 	stw	r23,32(sp)
 100759c:	dd800715 	stw	r22,28(sp)
 10075a0:	dd400615 	stw	r21,24(sp)
 10075a4:	dd000515 	stw	r20,20(sp)
 10075a8:	dcc00415 	stw	r19,16(sp)
 10075ac:	dc400215 	stw	r17,8(sp)
 10075b0:	dc000115 	stw	r16,4(sp)
 10075b4:	288002c4 	addi	r2,r5,11
 10075b8:	00c00584 	movi	r3,22
 10075bc:	2025883a 	mov	r18,r4
 10075c0:	18807f2e 	bgeu	r3,r2,10077c0 <_malloc_r+0x238>
 10075c4:	047ffe04 	movi	r17,-8
 10075c8:	1462703a 	and	r17,r2,r17
 10075cc:	8800a316 	blt	r17,zero,100785c <_malloc_r+0x2d4>
 10075d0:	8940a236 	bltu	r17,r5,100785c <_malloc_r+0x2d4>
 10075d4:	100f7600 	call	100f760 <__malloc_lock>
 10075d8:	00807dc4 	movi	r2,503
 10075dc:	1441e92e 	bgeu	r2,r17,1007d84 <_malloc_r+0x7fc>
 10075e0:	8804d27a 	srli	r2,r17,9
 10075e4:	1000a126 	beq	r2,zero,100786c <_malloc_r+0x2e4>
 10075e8:	00c00104 	movi	r3,4
 10075ec:	18811e36 	bltu	r3,r2,1007a68 <_malloc_r+0x4e0>
 10075f0:	8804d1ba 	srli	r2,r17,6
 10075f4:	12000e44 	addi	r8,r2,57
 10075f8:	11c00e04 	addi	r7,r2,56
 10075fc:	4209883a 	add	r4,r8,r8
 1007600:	04c04074 	movhi	r19,257
 1007604:	2109883a 	add	r4,r4,r4
 1007608:	9cca3e04 	addi	r19,r19,10488
 100760c:	2109883a 	add	r4,r4,r4
 1007610:	9909883a 	add	r4,r19,r4
 1007614:	24000117 	ldw	r16,4(r4)
 1007618:	213ffe04 	addi	r4,r4,-8
 100761c:	24009726 	beq	r4,r16,100787c <_malloc_r+0x2f4>
 1007620:	80800117 	ldw	r2,4(r16)
 1007624:	01bfff04 	movi	r6,-4
 1007628:	014003c4 	movi	r5,15
 100762c:	1184703a 	and	r2,r2,r6
 1007630:	1447c83a 	sub	r3,r2,r17
 1007634:	28c00716 	blt	r5,r3,1007654 <_malloc_r+0xcc>
 1007638:	1800920e 	bge	r3,zero,1007884 <_malloc_r+0x2fc>
 100763c:	84000317 	ldw	r16,12(r16)
 1007640:	24008e26 	beq	r4,r16,100787c <_malloc_r+0x2f4>
 1007644:	80800117 	ldw	r2,4(r16)
 1007648:	1184703a 	and	r2,r2,r6
 100764c:	1447c83a 	sub	r3,r2,r17
 1007650:	28fff90e 	bge	r5,r3,1007638 <__alt_data_end+0xff807638>
 1007654:	3809883a 	mov	r4,r7
 1007658:	01804074 	movhi	r6,257
 100765c:	9c000417 	ldw	r16,16(r19)
 1007660:	318a3e04 	addi	r6,r6,10488
 1007664:	32000204 	addi	r8,r6,8
 1007668:	82013426 	beq	r16,r8,1007b3c <_malloc_r+0x5b4>
 100766c:	80c00117 	ldw	r3,4(r16)
 1007670:	00bfff04 	movi	r2,-4
 1007674:	188e703a 	and	r7,r3,r2
 1007678:	3c45c83a 	sub	r2,r7,r17
 100767c:	00c003c4 	movi	r3,15
 1007680:	18811f16 	blt	r3,r2,1007b00 <_malloc_r+0x578>
 1007684:	32000515 	stw	r8,20(r6)
 1007688:	32000415 	stw	r8,16(r6)
 100768c:	10007f0e 	bge	r2,zero,100788c <_malloc_r+0x304>
 1007690:	00807fc4 	movi	r2,511
 1007694:	11c0fd36 	bltu	r2,r7,1007a8c <_malloc_r+0x504>
 1007698:	3806d0fa 	srli	r3,r7,3
 100769c:	01c00044 	movi	r7,1
 10076a0:	30800117 	ldw	r2,4(r6)
 10076a4:	19400044 	addi	r5,r3,1
 10076a8:	294b883a 	add	r5,r5,r5
 10076ac:	1807d0ba 	srai	r3,r3,2
 10076b0:	294b883a 	add	r5,r5,r5
 10076b4:	294b883a 	add	r5,r5,r5
 10076b8:	298b883a 	add	r5,r5,r6
 10076bc:	38c6983a 	sll	r3,r7,r3
 10076c0:	29c00017 	ldw	r7,0(r5)
 10076c4:	2a7ffe04 	addi	r9,r5,-8
 10076c8:	1886b03a 	or	r3,r3,r2
 10076cc:	82400315 	stw	r9,12(r16)
 10076d0:	81c00215 	stw	r7,8(r16)
 10076d4:	30c00115 	stw	r3,4(r6)
 10076d8:	2c000015 	stw	r16,0(r5)
 10076dc:	3c000315 	stw	r16,12(r7)
 10076e0:	2005d0ba 	srai	r2,r4,2
 10076e4:	01400044 	movi	r5,1
 10076e8:	288a983a 	sll	r5,r5,r2
 10076ec:	19406f36 	bltu	r3,r5,10078ac <_malloc_r+0x324>
 10076f0:	28c4703a 	and	r2,r5,r3
 10076f4:	10000a1e 	bne	r2,zero,1007720 <_malloc_r+0x198>
 10076f8:	00bfff04 	movi	r2,-4
 10076fc:	294b883a 	add	r5,r5,r5
 1007700:	2088703a 	and	r4,r4,r2
 1007704:	28c4703a 	and	r2,r5,r3
 1007708:	21000104 	addi	r4,r4,4
 100770c:	1000041e 	bne	r2,zero,1007720 <_malloc_r+0x198>
 1007710:	294b883a 	add	r5,r5,r5
 1007714:	28c4703a 	and	r2,r5,r3
 1007718:	21000104 	addi	r4,r4,4
 100771c:	103ffc26 	beq	r2,zero,1007710 <__alt_data_end+0xff807710>
 1007720:	02bfff04 	movi	r10,-4
 1007724:	024003c4 	movi	r9,15
 1007728:	21800044 	addi	r6,r4,1
 100772c:	318d883a 	add	r6,r6,r6
 1007730:	318d883a 	add	r6,r6,r6
 1007734:	318d883a 	add	r6,r6,r6
 1007738:	998d883a 	add	r6,r19,r6
 100773c:	333ffe04 	addi	r12,r6,-8
 1007740:	2017883a 	mov	r11,r4
 1007744:	31800104 	addi	r6,r6,4
 1007748:	34000017 	ldw	r16,0(r6)
 100774c:	31fffd04 	addi	r7,r6,-12
 1007750:	81c0041e 	bne	r16,r7,1007764 <_malloc_r+0x1dc>
 1007754:	0000fb06 	br	1007b44 <_malloc_r+0x5bc>
 1007758:	1801030e 	bge	r3,zero,1007b68 <_malloc_r+0x5e0>
 100775c:	84000317 	ldw	r16,12(r16)
 1007760:	81c0f826 	beq	r16,r7,1007b44 <_malloc_r+0x5bc>
 1007764:	80800117 	ldw	r2,4(r16)
 1007768:	1284703a 	and	r2,r2,r10
 100776c:	1447c83a 	sub	r3,r2,r17
 1007770:	48fff90e 	bge	r9,r3,1007758 <__alt_data_end+0xff807758>
 1007774:	80800317 	ldw	r2,12(r16)
 1007778:	81000217 	ldw	r4,8(r16)
 100777c:	89400054 	ori	r5,r17,1
 1007780:	81400115 	stw	r5,4(r16)
 1007784:	20800315 	stw	r2,12(r4)
 1007788:	11000215 	stw	r4,8(r2)
 100778c:	8463883a 	add	r17,r16,r17
 1007790:	9c400515 	stw	r17,20(r19)
 1007794:	9c400415 	stw	r17,16(r19)
 1007798:	18800054 	ori	r2,r3,1
 100779c:	88800115 	stw	r2,4(r17)
 10077a0:	8a000315 	stw	r8,12(r17)
 10077a4:	8a000215 	stw	r8,8(r17)
 10077a8:	88e3883a 	add	r17,r17,r3
 10077ac:	88c00015 	stw	r3,0(r17)
 10077b0:	9009883a 	mov	r4,r18
 10077b4:	100f7840 	call	100f784 <__malloc_unlock>
 10077b8:	80800204 	addi	r2,r16,8
 10077bc:	00001b06 	br	100782c <_malloc_r+0x2a4>
 10077c0:	04400404 	movi	r17,16
 10077c4:	89402536 	bltu	r17,r5,100785c <_malloc_r+0x2d4>
 10077c8:	100f7600 	call	100f760 <__malloc_lock>
 10077cc:	00800184 	movi	r2,6
 10077d0:	01000084 	movi	r4,2
 10077d4:	04c04074 	movhi	r19,257
 10077d8:	1085883a 	add	r2,r2,r2
 10077dc:	9cca3e04 	addi	r19,r19,10488
 10077e0:	1085883a 	add	r2,r2,r2
 10077e4:	9885883a 	add	r2,r19,r2
 10077e8:	14000117 	ldw	r16,4(r2)
 10077ec:	10fffe04 	addi	r3,r2,-8
 10077f0:	80c0d926 	beq	r16,r3,1007b58 <_malloc_r+0x5d0>
 10077f4:	80c00117 	ldw	r3,4(r16)
 10077f8:	81000317 	ldw	r4,12(r16)
 10077fc:	00bfff04 	movi	r2,-4
 1007800:	1884703a 	and	r2,r3,r2
 1007804:	81400217 	ldw	r5,8(r16)
 1007808:	8085883a 	add	r2,r16,r2
 100780c:	10c00117 	ldw	r3,4(r2)
 1007810:	29000315 	stw	r4,12(r5)
 1007814:	21400215 	stw	r5,8(r4)
 1007818:	18c00054 	ori	r3,r3,1
 100781c:	10c00115 	stw	r3,4(r2)
 1007820:	9009883a 	mov	r4,r18
 1007824:	100f7840 	call	100f784 <__malloc_unlock>
 1007828:	80800204 	addi	r2,r16,8
 100782c:	dfc00a17 	ldw	ra,40(sp)
 1007830:	df000917 	ldw	fp,36(sp)
 1007834:	ddc00817 	ldw	r23,32(sp)
 1007838:	dd800717 	ldw	r22,28(sp)
 100783c:	dd400617 	ldw	r21,24(sp)
 1007840:	dd000517 	ldw	r20,20(sp)
 1007844:	dcc00417 	ldw	r19,16(sp)
 1007848:	dc800317 	ldw	r18,12(sp)
 100784c:	dc400217 	ldw	r17,8(sp)
 1007850:	dc000117 	ldw	r16,4(sp)
 1007854:	dec00b04 	addi	sp,sp,44
 1007858:	f800283a 	ret
 100785c:	00800304 	movi	r2,12
 1007860:	90800015 	stw	r2,0(r18)
 1007864:	0005883a 	mov	r2,zero
 1007868:	003ff006 	br	100782c <__alt_data_end+0xff80782c>
 100786c:	01002004 	movi	r4,128
 1007870:	02001004 	movi	r8,64
 1007874:	01c00fc4 	movi	r7,63
 1007878:	003f6106 	br	1007600 <__alt_data_end+0xff807600>
 100787c:	4009883a 	mov	r4,r8
 1007880:	003f7506 	br	1007658 <__alt_data_end+0xff807658>
 1007884:	81000317 	ldw	r4,12(r16)
 1007888:	003fde06 	br	1007804 <__alt_data_end+0xff807804>
 100788c:	81c5883a 	add	r2,r16,r7
 1007890:	11400117 	ldw	r5,4(r2)
 1007894:	9009883a 	mov	r4,r18
 1007898:	29400054 	ori	r5,r5,1
 100789c:	11400115 	stw	r5,4(r2)
 10078a0:	100f7840 	call	100f784 <__malloc_unlock>
 10078a4:	80800204 	addi	r2,r16,8
 10078a8:	003fe006 	br	100782c <__alt_data_end+0xff80782c>
 10078ac:	9c000217 	ldw	r16,8(r19)
 10078b0:	00bfff04 	movi	r2,-4
 10078b4:	85800117 	ldw	r22,4(r16)
 10078b8:	b0ac703a 	and	r22,r22,r2
 10078bc:	b4400336 	bltu	r22,r17,10078cc <_malloc_r+0x344>
 10078c0:	b445c83a 	sub	r2,r22,r17
 10078c4:	00c003c4 	movi	r3,15
 10078c8:	18805d16 	blt	r3,r2,1007a40 <_malloc_r+0x4b8>
 10078cc:	05c04074 	movhi	r23,257
 10078d0:	00804074 	movhi	r2,257
 10078d4:	10969304 	addi	r2,r2,23116
 10078d8:	bdcfc504 	addi	r23,r23,16148
 10078dc:	15400017 	ldw	r21,0(r2)
 10078e0:	b8c00017 	ldw	r3,0(r23)
 10078e4:	00bfffc4 	movi	r2,-1
 10078e8:	858d883a 	add	r6,r16,r22
 10078ec:	8d6b883a 	add	r21,r17,r21
 10078f0:	1880ea26 	beq	r3,r2,1007c9c <_malloc_r+0x714>
 10078f4:	ad4403c4 	addi	r21,r21,4111
 10078f8:	00bc0004 	movi	r2,-4096
 10078fc:	a8aa703a 	and	r21,r21,r2
 1007900:	a80b883a 	mov	r5,r21
 1007904:	9009883a 	mov	r4,r18
 1007908:	d9800015 	stw	r6,0(sp)
 100790c:	10098d40 	call	10098d4 <_sbrk_r>
 1007910:	1029883a 	mov	r20,r2
 1007914:	00bfffc4 	movi	r2,-1
 1007918:	d9800017 	ldw	r6,0(sp)
 100791c:	a080e826 	beq	r20,r2,1007cc0 <_malloc_r+0x738>
 1007920:	a180a636 	bltu	r20,r6,1007bbc <_malloc_r+0x634>
 1007924:	07004074 	movhi	fp,257
 1007928:	e7169c04 	addi	fp,fp,23152
 100792c:	e0800017 	ldw	r2,0(fp)
 1007930:	a887883a 	add	r3,r21,r2
 1007934:	e0c00015 	stw	r3,0(fp)
 1007938:	3500e626 	beq	r6,r20,1007cd4 <_malloc_r+0x74c>
 100793c:	b9000017 	ldw	r4,0(r23)
 1007940:	00bfffc4 	movi	r2,-1
 1007944:	2080ee26 	beq	r4,r2,1007d00 <_malloc_r+0x778>
 1007948:	a185c83a 	sub	r2,r20,r6
 100794c:	10c5883a 	add	r2,r2,r3
 1007950:	e0800015 	stw	r2,0(fp)
 1007954:	a0c001cc 	andi	r3,r20,7
 1007958:	1800bc26 	beq	r3,zero,1007c4c <_malloc_r+0x6c4>
 100795c:	a0e9c83a 	sub	r20,r20,r3
 1007960:	00840204 	movi	r2,4104
 1007964:	a5000204 	addi	r20,r20,8
 1007968:	10c7c83a 	sub	r3,r2,r3
 100796c:	a545883a 	add	r2,r20,r21
 1007970:	1083ffcc 	andi	r2,r2,4095
 1007974:	18abc83a 	sub	r21,r3,r2
 1007978:	a80b883a 	mov	r5,r21
 100797c:	9009883a 	mov	r4,r18
 1007980:	10098d40 	call	10098d4 <_sbrk_r>
 1007984:	00ffffc4 	movi	r3,-1
 1007988:	10c0e126 	beq	r2,r3,1007d10 <_malloc_r+0x788>
 100798c:	1505c83a 	sub	r2,r2,r20
 1007990:	1545883a 	add	r2,r2,r21
 1007994:	10800054 	ori	r2,r2,1
 1007998:	e0c00017 	ldw	r3,0(fp)
 100799c:	9d000215 	stw	r20,8(r19)
 10079a0:	a0800115 	stw	r2,4(r20)
 10079a4:	a8c7883a 	add	r3,r21,r3
 10079a8:	e0c00015 	stw	r3,0(fp)
 10079ac:	84c00e26 	beq	r16,r19,10079e8 <_malloc_r+0x460>
 10079b0:	018003c4 	movi	r6,15
 10079b4:	3580a72e 	bgeu	r6,r22,1007c54 <_malloc_r+0x6cc>
 10079b8:	81400117 	ldw	r5,4(r16)
 10079bc:	013ffe04 	movi	r4,-8
 10079c0:	b0bffd04 	addi	r2,r22,-12
 10079c4:	1104703a 	and	r2,r2,r4
 10079c8:	2900004c 	andi	r4,r5,1
 10079cc:	2088b03a 	or	r4,r4,r2
 10079d0:	81000115 	stw	r4,4(r16)
 10079d4:	01400144 	movi	r5,5
 10079d8:	8089883a 	add	r4,r16,r2
 10079dc:	21400115 	stw	r5,4(r4)
 10079e0:	21400215 	stw	r5,8(r4)
 10079e4:	3080cd36 	bltu	r6,r2,1007d1c <_malloc_r+0x794>
 10079e8:	00804074 	movhi	r2,257
 10079ec:	10969204 	addi	r2,r2,23112
 10079f0:	11000017 	ldw	r4,0(r2)
 10079f4:	20c0012e 	bgeu	r4,r3,10079fc <_malloc_r+0x474>
 10079f8:	10c00015 	stw	r3,0(r2)
 10079fc:	00804074 	movhi	r2,257
 1007a00:	10969104 	addi	r2,r2,23108
 1007a04:	11000017 	ldw	r4,0(r2)
 1007a08:	9c000217 	ldw	r16,8(r19)
 1007a0c:	20c0012e 	bgeu	r4,r3,1007a14 <_malloc_r+0x48c>
 1007a10:	10c00015 	stw	r3,0(r2)
 1007a14:	80c00117 	ldw	r3,4(r16)
 1007a18:	00bfff04 	movi	r2,-4
 1007a1c:	1886703a 	and	r3,r3,r2
 1007a20:	1c45c83a 	sub	r2,r3,r17
 1007a24:	1c400236 	bltu	r3,r17,1007a30 <_malloc_r+0x4a8>
 1007a28:	00c003c4 	movi	r3,15
 1007a2c:	18800416 	blt	r3,r2,1007a40 <_malloc_r+0x4b8>
 1007a30:	9009883a 	mov	r4,r18
 1007a34:	100f7840 	call	100f784 <__malloc_unlock>
 1007a38:	0005883a 	mov	r2,zero
 1007a3c:	003f7b06 	br	100782c <__alt_data_end+0xff80782c>
 1007a40:	88c00054 	ori	r3,r17,1
 1007a44:	80c00115 	stw	r3,4(r16)
 1007a48:	8463883a 	add	r17,r16,r17
 1007a4c:	10800054 	ori	r2,r2,1
 1007a50:	9c400215 	stw	r17,8(r19)
 1007a54:	88800115 	stw	r2,4(r17)
 1007a58:	9009883a 	mov	r4,r18
 1007a5c:	100f7840 	call	100f784 <__malloc_unlock>
 1007a60:	80800204 	addi	r2,r16,8
 1007a64:	003f7106 	br	100782c <__alt_data_end+0xff80782c>
 1007a68:	00c00504 	movi	r3,20
 1007a6c:	18804a2e 	bgeu	r3,r2,1007b98 <_malloc_r+0x610>
 1007a70:	00c01504 	movi	r3,84
 1007a74:	18806e36 	bltu	r3,r2,1007c30 <_malloc_r+0x6a8>
 1007a78:	8804d33a 	srli	r2,r17,12
 1007a7c:	12001bc4 	addi	r8,r2,111
 1007a80:	11c01b84 	addi	r7,r2,110
 1007a84:	4209883a 	add	r4,r8,r8
 1007a88:	003edd06 	br	1007600 <__alt_data_end+0xff807600>
 1007a8c:	3804d27a 	srli	r2,r7,9
 1007a90:	00c00104 	movi	r3,4
 1007a94:	1880442e 	bgeu	r3,r2,1007ba8 <_malloc_r+0x620>
 1007a98:	00c00504 	movi	r3,20
 1007a9c:	18808136 	bltu	r3,r2,1007ca4 <_malloc_r+0x71c>
 1007aa0:	11401704 	addi	r5,r2,92
 1007aa4:	10c016c4 	addi	r3,r2,91
 1007aa8:	294b883a 	add	r5,r5,r5
 1007aac:	294b883a 	add	r5,r5,r5
 1007ab0:	294b883a 	add	r5,r5,r5
 1007ab4:	994b883a 	add	r5,r19,r5
 1007ab8:	28800017 	ldw	r2,0(r5)
 1007abc:	01804074 	movhi	r6,257
 1007ac0:	297ffe04 	addi	r5,r5,-8
 1007ac4:	318a3e04 	addi	r6,r6,10488
 1007ac8:	28806526 	beq	r5,r2,1007c60 <_malloc_r+0x6d8>
 1007acc:	01bfff04 	movi	r6,-4
 1007ad0:	10c00117 	ldw	r3,4(r2)
 1007ad4:	1986703a 	and	r3,r3,r6
 1007ad8:	38c0022e 	bgeu	r7,r3,1007ae4 <_malloc_r+0x55c>
 1007adc:	10800217 	ldw	r2,8(r2)
 1007ae0:	28bffb1e 	bne	r5,r2,1007ad0 <__alt_data_end+0xff807ad0>
 1007ae4:	11400317 	ldw	r5,12(r2)
 1007ae8:	98c00117 	ldw	r3,4(r19)
 1007aec:	81400315 	stw	r5,12(r16)
 1007af0:	80800215 	stw	r2,8(r16)
 1007af4:	2c000215 	stw	r16,8(r5)
 1007af8:	14000315 	stw	r16,12(r2)
 1007afc:	003ef806 	br	10076e0 <__alt_data_end+0xff8076e0>
 1007b00:	88c00054 	ori	r3,r17,1
 1007b04:	80c00115 	stw	r3,4(r16)
 1007b08:	8463883a 	add	r17,r16,r17
 1007b0c:	34400515 	stw	r17,20(r6)
 1007b10:	34400415 	stw	r17,16(r6)
 1007b14:	10c00054 	ori	r3,r2,1
 1007b18:	8a000315 	stw	r8,12(r17)
 1007b1c:	8a000215 	stw	r8,8(r17)
 1007b20:	88c00115 	stw	r3,4(r17)
 1007b24:	88a3883a 	add	r17,r17,r2
 1007b28:	88800015 	stw	r2,0(r17)
 1007b2c:	9009883a 	mov	r4,r18
 1007b30:	100f7840 	call	100f784 <__malloc_unlock>
 1007b34:	80800204 	addi	r2,r16,8
 1007b38:	003f3c06 	br	100782c <__alt_data_end+0xff80782c>
 1007b3c:	30c00117 	ldw	r3,4(r6)
 1007b40:	003ee706 	br	10076e0 <__alt_data_end+0xff8076e0>
 1007b44:	5ac00044 	addi	r11,r11,1
 1007b48:	588000cc 	andi	r2,r11,3
 1007b4c:	31800204 	addi	r6,r6,8
 1007b50:	103efd1e 	bne	r2,zero,1007748 <__alt_data_end+0xff807748>
 1007b54:	00002406 	br	1007be8 <_malloc_r+0x660>
 1007b58:	14000317 	ldw	r16,12(r2)
 1007b5c:	143f251e 	bne	r2,r16,10077f4 <__alt_data_end+0xff8077f4>
 1007b60:	21000084 	addi	r4,r4,2
 1007b64:	003ebc06 	br	1007658 <__alt_data_end+0xff807658>
 1007b68:	8085883a 	add	r2,r16,r2
 1007b6c:	10c00117 	ldw	r3,4(r2)
 1007b70:	81000317 	ldw	r4,12(r16)
 1007b74:	81400217 	ldw	r5,8(r16)
 1007b78:	18c00054 	ori	r3,r3,1
 1007b7c:	10c00115 	stw	r3,4(r2)
 1007b80:	29000315 	stw	r4,12(r5)
 1007b84:	21400215 	stw	r5,8(r4)
 1007b88:	9009883a 	mov	r4,r18
 1007b8c:	100f7840 	call	100f784 <__malloc_unlock>
 1007b90:	80800204 	addi	r2,r16,8
 1007b94:	003f2506 	br	100782c <__alt_data_end+0xff80782c>
 1007b98:	12001704 	addi	r8,r2,92
 1007b9c:	11c016c4 	addi	r7,r2,91
 1007ba0:	4209883a 	add	r4,r8,r8
 1007ba4:	003e9606 	br	1007600 <__alt_data_end+0xff807600>
 1007ba8:	3804d1ba 	srli	r2,r7,6
 1007bac:	11400e44 	addi	r5,r2,57
 1007bb0:	10c00e04 	addi	r3,r2,56
 1007bb4:	294b883a 	add	r5,r5,r5
 1007bb8:	003fbc06 	br	1007aac <__alt_data_end+0xff807aac>
 1007bbc:	84ff5926 	beq	r16,r19,1007924 <__alt_data_end+0xff807924>
 1007bc0:	00804074 	movhi	r2,257
 1007bc4:	108a3e04 	addi	r2,r2,10488
 1007bc8:	14000217 	ldw	r16,8(r2)
 1007bcc:	00bfff04 	movi	r2,-4
 1007bd0:	80c00117 	ldw	r3,4(r16)
 1007bd4:	1886703a 	and	r3,r3,r2
 1007bd8:	003f9106 	br	1007a20 <__alt_data_end+0xff807a20>
 1007bdc:	60800217 	ldw	r2,8(r12)
 1007be0:	213fffc4 	addi	r4,r4,-1
 1007be4:	1300651e 	bne	r2,r12,1007d7c <_malloc_r+0x7f4>
 1007be8:	208000cc 	andi	r2,r4,3
 1007bec:	633ffe04 	addi	r12,r12,-8
 1007bf0:	103ffa1e 	bne	r2,zero,1007bdc <__alt_data_end+0xff807bdc>
 1007bf4:	98800117 	ldw	r2,4(r19)
 1007bf8:	0146303a 	nor	r3,zero,r5
 1007bfc:	1884703a 	and	r2,r3,r2
 1007c00:	98800115 	stw	r2,4(r19)
 1007c04:	294b883a 	add	r5,r5,r5
 1007c08:	117f2836 	bltu	r2,r5,10078ac <__alt_data_end+0xff8078ac>
 1007c0c:	283f2726 	beq	r5,zero,10078ac <__alt_data_end+0xff8078ac>
 1007c10:	2886703a 	and	r3,r5,r2
 1007c14:	5809883a 	mov	r4,r11
 1007c18:	183ec31e 	bne	r3,zero,1007728 <__alt_data_end+0xff807728>
 1007c1c:	294b883a 	add	r5,r5,r5
 1007c20:	2886703a 	and	r3,r5,r2
 1007c24:	21000104 	addi	r4,r4,4
 1007c28:	183ffc26 	beq	r3,zero,1007c1c <__alt_data_end+0xff807c1c>
 1007c2c:	003ebe06 	br	1007728 <__alt_data_end+0xff807728>
 1007c30:	00c05504 	movi	r3,340
 1007c34:	18801236 	bltu	r3,r2,1007c80 <_malloc_r+0x6f8>
 1007c38:	8804d3fa 	srli	r2,r17,15
 1007c3c:	12001e04 	addi	r8,r2,120
 1007c40:	11c01dc4 	addi	r7,r2,119
 1007c44:	4209883a 	add	r4,r8,r8
 1007c48:	003e6d06 	br	1007600 <__alt_data_end+0xff807600>
 1007c4c:	00c40004 	movi	r3,4096
 1007c50:	003f4606 	br	100796c <__alt_data_end+0xff80796c>
 1007c54:	00800044 	movi	r2,1
 1007c58:	a0800115 	stw	r2,4(r20)
 1007c5c:	003f7406 	br	1007a30 <__alt_data_end+0xff807a30>
 1007c60:	1805d0ba 	srai	r2,r3,2
 1007c64:	01c00044 	movi	r7,1
 1007c68:	30c00117 	ldw	r3,4(r6)
 1007c6c:	388e983a 	sll	r7,r7,r2
 1007c70:	2805883a 	mov	r2,r5
 1007c74:	38c6b03a 	or	r3,r7,r3
 1007c78:	30c00115 	stw	r3,4(r6)
 1007c7c:	003f9b06 	br	1007aec <__alt_data_end+0xff807aec>
 1007c80:	00c15504 	movi	r3,1364
 1007c84:	18801a36 	bltu	r3,r2,1007cf0 <_malloc_r+0x768>
 1007c88:	8804d4ba 	srli	r2,r17,18
 1007c8c:	12001f44 	addi	r8,r2,125
 1007c90:	11c01f04 	addi	r7,r2,124
 1007c94:	4209883a 	add	r4,r8,r8
 1007c98:	003e5906 	br	1007600 <__alt_data_end+0xff807600>
 1007c9c:	ad400404 	addi	r21,r21,16
 1007ca0:	003f1706 	br	1007900 <__alt_data_end+0xff807900>
 1007ca4:	00c01504 	movi	r3,84
 1007ca8:	18802336 	bltu	r3,r2,1007d38 <_malloc_r+0x7b0>
 1007cac:	3804d33a 	srli	r2,r7,12
 1007cb0:	11401bc4 	addi	r5,r2,111
 1007cb4:	10c01b84 	addi	r3,r2,110
 1007cb8:	294b883a 	add	r5,r5,r5
 1007cbc:	003f7b06 	br	1007aac <__alt_data_end+0xff807aac>
 1007cc0:	9c000217 	ldw	r16,8(r19)
 1007cc4:	00bfff04 	movi	r2,-4
 1007cc8:	80c00117 	ldw	r3,4(r16)
 1007ccc:	1886703a 	and	r3,r3,r2
 1007cd0:	003f5306 	br	1007a20 <__alt_data_end+0xff807a20>
 1007cd4:	3083ffcc 	andi	r2,r6,4095
 1007cd8:	103f181e 	bne	r2,zero,100793c <__alt_data_end+0xff80793c>
 1007cdc:	99000217 	ldw	r4,8(r19)
 1007ce0:	b545883a 	add	r2,r22,r21
 1007ce4:	10800054 	ori	r2,r2,1
 1007ce8:	20800115 	stw	r2,4(r4)
 1007cec:	003f3e06 	br	10079e8 <__alt_data_end+0xff8079e8>
 1007cf0:	01003f84 	movi	r4,254
 1007cf4:	02001fc4 	movi	r8,127
 1007cf8:	01c01f84 	movi	r7,126
 1007cfc:	003e4006 	br	1007600 <__alt_data_end+0xff807600>
 1007d00:	00804074 	movhi	r2,257
 1007d04:	108fc504 	addi	r2,r2,16148
 1007d08:	15000015 	stw	r20,0(r2)
 1007d0c:	003f1106 	br	1007954 <__alt_data_end+0xff807954>
 1007d10:	00800044 	movi	r2,1
 1007d14:	002b883a 	mov	r21,zero
 1007d18:	003f1f06 	br	1007998 <__alt_data_end+0xff807998>
 1007d1c:	81400204 	addi	r5,r16,8
 1007d20:	9009883a 	mov	r4,r18
 1007d24:	10069900 	call	1006990 <_free_r>
 1007d28:	00804074 	movhi	r2,257
 1007d2c:	10969c04 	addi	r2,r2,23152
 1007d30:	10c00017 	ldw	r3,0(r2)
 1007d34:	003f2c06 	br	10079e8 <__alt_data_end+0xff8079e8>
 1007d38:	00c05504 	movi	r3,340
 1007d3c:	18800536 	bltu	r3,r2,1007d54 <_malloc_r+0x7cc>
 1007d40:	3804d3fa 	srli	r2,r7,15
 1007d44:	11401e04 	addi	r5,r2,120
 1007d48:	10c01dc4 	addi	r3,r2,119
 1007d4c:	294b883a 	add	r5,r5,r5
 1007d50:	003f5606 	br	1007aac <__alt_data_end+0xff807aac>
 1007d54:	00c15504 	movi	r3,1364
 1007d58:	18800536 	bltu	r3,r2,1007d70 <_malloc_r+0x7e8>
 1007d5c:	3804d4ba 	srli	r2,r7,18
 1007d60:	11401f44 	addi	r5,r2,125
 1007d64:	10c01f04 	addi	r3,r2,124
 1007d68:	294b883a 	add	r5,r5,r5
 1007d6c:	003f4f06 	br	1007aac <__alt_data_end+0xff807aac>
 1007d70:	01403f84 	movi	r5,254
 1007d74:	00c01f84 	movi	r3,126
 1007d78:	003f4c06 	br	1007aac <__alt_data_end+0xff807aac>
 1007d7c:	98800117 	ldw	r2,4(r19)
 1007d80:	003fa006 	br	1007c04 <__alt_data_end+0xff807c04>
 1007d84:	8808d0fa 	srli	r4,r17,3
 1007d88:	20800044 	addi	r2,r4,1
 1007d8c:	1085883a 	add	r2,r2,r2
 1007d90:	003e9006 	br	10077d4 <__alt_data_end+0xff8077d4>

01007d94 <memchr>:
 1007d94:	208000cc 	andi	r2,r4,3
 1007d98:	280f883a 	mov	r7,r5
 1007d9c:	10003426 	beq	r2,zero,1007e70 <memchr+0xdc>
 1007da0:	30bfffc4 	addi	r2,r6,-1
 1007da4:	30001a26 	beq	r6,zero,1007e10 <memchr+0x7c>
 1007da8:	20c00003 	ldbu	r3,0(r4)
 1007dac:	29803fcc 	andi	r6,r5,255
 1007db0:	30c0051e 	bne	r6,r3,1007dc8 <memchr+0x34>
 1007db4:	00001806 	br	1007e18 <memchr+0x84>
 1007db8:	10001526 	beq	r2,zero,1007e10 <memchr+0x7c>
 1007dbc:	20c00003 	ldbu	r3,0(r4)
 1007dc0:	10bfffc4 	addi	r2,r2,-1
 1007dc4:	30c01426 	beq	r6,r3,1007e18 <memchr+0x84>
 1007dc8:	21000044 	addi	r4,r4,1
 1007dcc:	20c000cc 	andi	r3,r4,3
 1007dd0:	183ff91e 	bne	r3,zero,1007db8 <__alt_data_end+0xff807db8>
 1007dd4:	020000c4 	movi	r8,3
 1007dd8:	40801136 	bltu	r8,r2,1007e20 <memchr+0x8c>
 1007ddc:	10000c26 	beq	r2,zero,1007e10 <memchr+0x7c>
 1007de0:	20c00003 	ldbu	r3,0(r4)
 1007de4:	29403fcc 	andi	r5,r5,255
 1007de8:	28c00b26 	beq	r5,r3,1007e18 <memchr+0x84>
 1007dec:	20c00044 	addi	r3,r4,1
 1007df0:	39803fcc 	andi	r6,r7,255
 1007df4:	2089883a 	add	r4,r4,r2
 1007df8:	00000306 	br	1007e08 <memchr+0x74>
 1007dfc:	18c00044 	addi	r3,r3,1
 1007e00:	197fffc3 	ldbu	r5,-1(r3)
 1007e04:	31400526 	beq	r6,r5,1007e1c <memchr+0x88>
 1007e08:	1805883a 	mov	r2,r3
 1007e0c:	20fffb1e 	bne	r4,r3,1007dfc <__alt_data_end+0xff807dfc>
 1007e10:	0005883a 	mov	r2,zero
 1007e14:	f800283a 	ret
 1007e18:	2005883a 	mov	r2,r4
 1007e1c:	f800283a 	ret
 1007e20:	28c03fcc 	andi	r3,r5,255
 1007e24:	1812923a 	slli	r9,r3,8
 1007e28:	02ffbff4 	movhi	r11,65279
 1007e2c:	02a02074 	movhi	r10,32897
 1007e30:	48d2b03a 	or	r9,r9,r3
 1007e34:	4806943a 	slli	r3,r9,16
 1007e38:	5affbfc4 	addi	r11,r11,-257
 1007e3c:	52a02004 	addi	r10,r10,-32640
 1007e40:	48d2b03a 	or	r9,r9,r3
 1007e44:	20c00017 	ldw	r3,0(r4)
 1007e48:	48c6f03a 	xor	r3,r9,r3
 1007e4c:	1acd883a 	add	r6,r3,r11
 1007e50:	00c6303a 	nor	r3,zero,r3
 1007e54:	30c6703a 	and	r3,r6,r3
 1007e58:	1a86703a 	and	r3,r3,r10
 1007e5c:	183fe01e 	bne	r3,zero,1007de0 <__alt_data_end+0xff807de0>
 1007e60:	10bfff04 	addi	r2,r2,-4
 1007e64:	21000104 	addi	r4,r4,4
 1007e68:	40bff636 	bltu	r8,r2,1007e44 <__alt_data_end+0xff807e44>
 1007e6c:	003fdb06 	br	1007ddc <__alt_data_end+0xff807ddc>
 1007e70:	3005883a 	mov	r2,r6
 1007e74:	003fd706 	br	1007dd4 <__alt_data_end+0xff807dd4>

01007e78 <memcpy>:
 1007e78:	defffd04 	addi	sp,sp,-12
 1007e7c:	dfc00215 	stw	ra,8(sp)
 1007e80:	dc400115 	stw	r17,4(sp)
 1007e84:	dc000015 	stw	r16,0(sp)
 1007e88:	00c003c4 	movi	r3,15
 1007e8c:	2005883a 	mov	r2,r4
 1007e90:	1980452e 	bgeu	r3,r6,1007fa8 <memcpy+0x130>
 1007e94:	2906b03a 	or	r3,r5,r4
 1007e98:	18c000cc 	andi	r3,r3,3
 1007e9c:	1800441e 	bne	r3,zero,1007fb0 <memcpy+0x138>
 1007ea0:	347ffc04 	addi	r17,r6,-16
 1007ea4:	8822d13a 	srli	r17,r17,4
 1007ea8:	28c00104 	addi	r3,r5,4
 1007eac:	23400104 	addi	r13,r4,4
 1007eb0:	8820913a 	slli	r16,r17,4
 1007eb4:	2b000204 	addi	r12,r5,8
 1007eb8:	22c00204 	addi	r11,r4,8
 1007ebc:	84000504 	addi	r16,r16,20
 1007ec0:	2a800304 	addi	r10,r5,12
 1007ec4:	22400304 	addi	r9,r4,12
 1007ec8:	2c21883a 	add	r16,r5,r16
 1007ecc:	2811883a 	mov	r8,r5
 1007ed0:	200f883a 	mov	r7,r4
 1007ed4:	41000017 	ldw	r4,0(r8)
 1007ed8:	1fc00017 	ldw	ra,0(r3)
 1007edc:	63c00017 	ldw	r15,0(r12)
 1007ee0:	39000015 	stw	r4,0(r7)
 1007ee4:	53800017 	ldw	r14,0(r10)
 1007ee8:	6fc00015 	stw	ra,0(r13)
 1007eec:	5bc00015 	stw	r15,0(r11)
 1007ef0:	4b800015 	stw	r14,0(r9)
 1007ef4:	18c00404 	addi	r3,r3,16
 1007ef8:	39c00404 	addi	r7,r7,16
 1007efc:	42000404 	addi	r8,r8,16
 1007f00:	6b400404 	addi	r13,r13,16
 1007f04:	63000404 	addi	r12,r12,16
 1007f08:	5ac00404 	addi	r11,r11,16
 1007f0c:	52800404 	addi	r10,r10,16
 1007f10:	4a400404 	addi	r9,r9,16
 1007f14:	1c3fef1e 	bne	r3,r16,1007ed4 <__alt_data_end+0xff807ed4>
 1007f18:	89c00044 	addi	r7,r17,1
 1007f1c:	380e913a 	slli	r7,r7,4
 1007f20:	310003cc 	andi	r4,r6,15
 1007f24:	02c000c4 	movi	r11,3
 1007f28:	11c7883a 	add	r3,r2,r7
 1007f2c:	29cb883a 	add	r5,r5,r7
 1007f30:	5900212e 	bgeu	r11,r4,1007fb8 <memcpy+0x140>
 1007f34:	1813883a 	mov	r9,r3
 1007f38:	2811883a 	mov	r8,r5
 1007f3c:	200f883a 	mov	r7,r4
 1007f40:	42800017 	ldw	r10,0(r8)
 1007f44:	4a400104 	addi	r9,r9,4
 1007f48:	39ffff04 	addi	r7,r7,-4
 1007f4c:	4abfff15 	stw	r10,-4(r9)
 1007f50:	42000104 	addi	r8,r8,4
 1007f54:	59fffa36 	bltu	r11,r7,1007f40 <__alt_data_end+0xff807f40>
 1007f58:	213fff04 	addi	r4,r4,-4
 1007f5c:	2008d0ba 	srli	r4,r4,2
 1007f60:	318000cc 	andi	r6,r6,3
 1007f64:	21000044 	addi	r4,r4,1
 1007f68:	2109883a 	add	r4,r4,r4
 1007f6c:	2109883a 	add	r4,r4,r4
 1007f70:	1907883a 	add	r3,r3,r4
 1007f74:	290b883a 	add	r5,r5,r4
 1007f78:	30000626 	beq	r6,zero,1007f94 <memcpy+0x11c>
 1007f7c:	198d883a 	add	r6,r3,r6
 1007f80:	29c00003 	ldbu	r7,0(r5)
 1007f84:	18c00044 	addi	r3,r3,1
 1007f88:	29400044 	addi	r5,r5,1
 1007f8c:	19ffffc5 	stb	r7,-1(r3)
 1007f90:	19bffb1e 	bne	r3,r6,1007f80 <__alt_data_end+0xff807f80>
 1007f94:	dfc00217 	ldw	ra,8(sp)
 1007f98:	dc400117 	ldw	r17,4(sp)
 1007f9c:	dc000017 	ldw	r16,0(sp)
 1007fa0:	dec00304 	addi	sp,sp,12
 1007fa4:	f800283a 	ret
 1007fa8:	2007883a 	mov	r3,r4
 1007fac:	003ff206 	br	1007f78 <__alt_data_end+0xff807f78>
 1007fb0:	2007883a 	mov	r3,r4
 1007fb4:	003ff106 	br	1007f7c <__alt_data_end+0xff807f7c>
 1007fb8:	200d883a 	mov	r6,r4
 1007fbc:	003fee06 	br	1007f78 <__alt_data_end+0xff807f78>

01007fc0 <memmove>:
 1007fc0:	2005883a 	mov	r2,r4
 1007fc4:	29000b2e 	bgeu	r5,r4,1007ff4 <memmove+0x34>
 1007fc8:	298f883a 	add	r7,r5,r6
 1007fcc:	21c0092e 	bgeu	r4,r7,1007ff4 <memmove+0x34>
 1007fd0:	2187883a 	add	r3,r4,r6
 1007fd4:	198bc83a 	sub	r5,r3,r6
 1007fd8:	30004826 	beq	r6,zero,10080fc <memmove+0x13c>
 1007fdc:	39ffffc4 	addi	r7,r7,-1
 1007fe0:	39000003 	ldbu	r4,0(r7)
 1007fe4:	18ffffc4 	addi	r3,r3,-1
 1007fe8:	19000005 	stb	r4,0(r3)
 1007fec:	28fffb1e 	bne	r5,r3,1007fdc <__alt_data_end+0xff807fdc>
 1007ff0:	f800283a 	ret
 1007ff4:	00c003c4 	movi	r3,15
 1007ff8:	1980412e 	bgeu	r3,r6,1008100 <memmove+0x140>
 1007ffc:	2886b03a 	or	r3,r5,r2
 1008000:	18c000cc 	andi	r3,r3,3
 1008004:	1800401e 	bne	r3,zero,1008108 <memmove+0x148>
 1008008:	33fffc04 	addi	r15,r6,-16
 100800c:	781ed13a 	srli	r15,r15,4
 1008010:	28c00104 	addi	r3,r5,4
 1008014:	13400104 	addi	r13,r2,4
 1008018:	781c913a 	slli	r14,r15,4
 100801c:	2b000204 	addi	r12,r5,8
 1008020:	12c00204 	addi	r11,r2,8
 1008024:	73800504 	addi	r14,r14,20
 1008028:	2a800304 	addi	r10,r5,12
 100802c:	12400304 	addi	r9,r2,12
 1008030:	2b9d883a 	add	r14,r5,r14
 1008034:	2811883a 	mov	r8,r5
 1008038:	100f883a 	mov	r7,r2
 100803c:	41000017 	ldw	r4,0(r8)
 1008040:	39c00404 	addi	r7,r7,16
 1008044:	18c00404 	addi	r3,r3,16
 1008048:	393ffc15 	stw	r4,-16(r7)
 100804c:	193ffc17 	ldw	r4,-16(r3)
 1008050:	6b400404 	addi	r13,r13,16
 1008054:	5ac00404 	addi	r11,r11,16
 1008058:	693ffc15 	stw	r4,-16(r13)
 100805c:	61000017 	ldw	r4,0(r12)
 1008060:	4a400404 	addi	r9,r9,16
 1008064:	42000404 	addi	r8,r8,16
 1008068:	593ffc15 	stw	r4,-16(r11)
 100806c:	51000017 	ldw	r4,0(r10)
 1008070:	63000404 	addi	r12,r12,16
 1008074:	52800404 	addi	r10,r10,16
 1008078:	493ffc15 	stw	r4,-16(r9)
 100807c:	1bbfef1e 	bne	r3,r14,100803c <__alt_data_end+0xff80803c>
 1008080:	79000044 	addi	r4,r15,1
 1008084:	2008913a 	slli	r4,r4,4
 1008088:	328003cc 	andi	r10,r6,15
 100808c:	02c000c4 	movi	r11,3
 1008090:	1107883a 	add	r3,r2,r4
 1008094:	290b883a 	add	r5,r5,r4
 1008098:	5a801e2e 	bgeu	r11,r10,1008114 <memmove+0x154>
 100809c:	1813883a 	mov	r9,r3
 10080a0:	2811883a 	mov	r8,r5
 10080a4:	500f883a 	mov	r7,r10
 10080a8:	41000017 	ldw	r4,0(r8)
 10080ac:	4a400104 	addi	r9,r9,4
 10080b0:	39ffff04 	addi	r7,r7,-4
 10080b4:	493fff15 	stw	r4,-4(r9)
 10080b8:	42000104 	addi	r8,r8,4
 10080bc:	59fffa36 	bltu	r11,r7,10080a8 <__alt_data_end+0xff8080a8>
 10080c0:	513fff04 	addi	r4,r10,-4
 10080c4:	2008d0ba 	srli	r4,r4,2
 10080c8:	318000cc 	andi	r6,r6,3
 10080cc:	21000044 	addi	r4,r4,1
 10080d0:	2109883a 	add	r4,r4,r4
 10080d4:	2109883a 	add	r4,r4,r4
 10080d8:	1907883a 	add	r3,r3,r4
 10080dc:	290b883a 	add	r5,r5,r4
 10080e0:	30000b26 	beq	r6,zero,1008110 <memmove+0x150>
 10080e4:	198d883a 	add	r6,r3,r6
 10080e8:	29c00003 	ldbu	r7,0(r5)
 10080ec:	18c00044 	addi	r3,r3,1
 10080f0:	29400044 	addi	r5,r5,1
 10080f4:	19ffffc5 	stb	r7,-1(r3)
 10080f8:	19bffb1e 	bne	r3,r6,10080e8 <__alt_data_end+0xff8080e8>
 10080fc:	f800283a 	ret
 1008100:	1007883a 	mov	r3,r2
 1008104:	003ff606 	br	10080e0 <__alt_data_end+0xff8080e0>
 1008108:	1007883a 	mov	r3,r2
 100810c:	003ff506 	br	10080e4 <__alt_data_end+0xff8080e4>
 1008110:	f800283a 	ret
 1008114:	500d883a 	mov	r6,r10
 1008118:	003ff106 	br	10080e0 <__alt_data_end+0xff8080e0>

0100811c <memset>:
 100811c:	20c000cc 	andi	r3,r4,3
 1008120:	2005883a 	mov	r2,r4
 1008124:	18004426 	beq	r3,zero,1008238 <memset+0x11c>
 1008128:	31ffffc4 	addi	r7,r6,-1
 100812c:	30004026 	beq	r6,zero,1008230 <memset+0x114>
 1008130:	2813883a 	mov	r9,r5
 1008134:	200d883a 	mov	r6,r4
 1008138:	2007883a 	mov	r3,r4
 100813c:	00000406 	br	1008150 <memset+0x34>
 1008140:	3a3fffc4 	addi	r8,r7,-1
 1008144:	31800044 	addi	r6,r6,1
 1008148:	38003926 	beq	r7,zero,1008230 <memset+0x114>
 100814c:	400f883a 	mov	r7,r8
 1008150:	18c00044 	addi	r3,r3,1
 1008154:	32400005 	stb	r9,0(r6)
 1008158:	1a0000cc 	andi	r8,r3,3
 100815c:	403ff81e 	bne	r8,zero,1008140 <__alt_data_end+0xff808140>
 1008160:	010000c4 	movi	r4,3
 1008164:	21c02d2e 	bgeu	r4,r7,100821c <memset+0x100>
 1008168:	29003fcc 	andi	r4,r5,255
 100816c:	200c923a 	slli	r6,r4,8
 1008170:	3108b03a 	or	r4,r6,r4
 1008174:	200c943a 	slli	r6,r4,16
 1008178:	218cb03a 	or	r6,r4,r6
 100817c:	010003c4 	movi	r4,15
 1008180:	21c0182e 	bgeu	r4,r7,10081e4 <memset+0xc8>
 1008184:	3b3ffc04 	addi	r12,r7,-16
 1008188:	6018d13a 	srli	r12,r12,4
 100818c:	1a000104 	addi	r8,r3,4
 1008190:	1ac00204 	addi	r11,r3,8
 1008194:	6008913a 	slli	r4,r12,4
 1008198:	1a800304 	addi	r10,r3,12
 100819c:	1813883a 	mov	r9,r3
 10081a0:	21000504 	addi	r4,r4,20
 10081a4:	1909883a 	add	r4,r3,r4
 10081a8:	49800015 	stw	r6,0(r9)
 10081ac:	41800015 	stw	r6,0(r8)
 10081b0:	59800015 	stw	r6,0(r11)
 10081b4:	51800015 	stw	r6,0(r10)
 10081b8:	42000404 	addi	r8,r8,16
 10081bc:	4a400404 	addi	r9,r9,16
 10081c0:	5ac00404 	addi	r11,r11,16
 10081c4:	52800404 	addi	r10,r10,16
 10081c8:	413ff71e 	bne	r8,r4,10081a8 <__alt_data_end+0xff8081a8>
 10081cc:	63000044 	addi	r12,r12,1
 10081d0:	6018913a 	slli	r12,r12,4
 10081d4:	39c003cc 	andi	r7,r7,15
 10081d8:	010000c4 	movi	r4,3
 10081dc:	1b07883a 	add	r3,r3,r12
 10081e0:	21c00e2e 	bgeu	r4,r7,100821c <memset+0x100>
 10081e4:	1813883a 	mov	r9,r3
 10081e8:	3811883a 	mov	r8,r7
 10081ec:	010000c4 	movi	r4,3
 10081f0:	49800015 	stw	r6,0(r9)
 10081f4:	423fff04 	addi	r8,r8,-4
 10081f8:	4a400104 	addi	r9,r9,4
 10081fc:	223ffc36 	bltu	r4,r8,10081f0 <__alt_data_end+0xff8081f0>
 1008200:	393fff04 	addi	r4,r7,-4
 1008204:	2008d0ba 	srli	r4,r4,2
 1008208:	39c000cc 	andi	r7,r7,3
 100820c:	21000044 	addi	r4,r4,1
 1008210:	2109883a 	add	r4,r4,r4
 1008214:	2109883a 	add	r4,r4,r4
 1008218:	1907883a 	add	r3,r3,r4
 100821c:	38000526 	beq	r7,zero,1008234 <memset+0x118>
 1008220:	19cf883a 	add	r7,r3,r7
 1008224:	19400005 	stb	r5,0(r3)
 1008228:	18c00044 	addi	r3,r3,1
 100822c:	38fffd1e 	bne	r7,r3,1008224 <__alt_data_end+0xff808224>
 1008230:	f800283a 	ret
 1008234:	f800283a 	ret
 1008238:	2007883a 	mov	r3,r4
 100823c:	300f883a 	mov	r7,r6
 1008240:	003fc706 	br	1008160 <__alt_data_end+0xff808160>

01008244 <_Balloc>:
 1008244:	20801317 	ldw	r2,76(r4)
 1008248:	defffc04 	addi	sp,sp,-16
 100824c:	dc400115 	stw	r17,4(sp)
 1008250:	dc000015 	stw	r16,0(sp)
 1008254:	dfc00315 	stw	ra,12(sp)
 1008258:	dc800215 	stw	r18,8(sp)
 100825c:	2023883a 	mov	r17,r4
 1008260:	2821883a 	mov	r16,r5
 1008264:	10000f26 	beq	r2,zero,10082a4 <_Balloc+0x60>
 1008268:	8407883a 	add	r3,r16,r16
 100826c:	18c7883a 	add	r3,r3,r3
 1008270:	10c7883a 	add	r3,r2,r3
 1008274:	18800017 	ldw	r2,0(r3)
 1008278:	10001126 	beq	r2,zero,10082c0 <_Balloc+0x7c>
 100827c:	11000017 	ldw	r4,0(r2)
 1008280:	19000015 	stw	r4,0(r3)
 1008284:	10000415 	stw	zero,16(r2)
 1008288:	10000315 	stw	zero,12(r2)
 100828c:	dfc00317 	ldw	ra,12(sp)
 1008290:	dc800217 	ldw	r18,8(sp)
 1008294:	dc400117 	ldw	r17,4(sp)
 1008298:	dc000017 	ldw	r16,0(sp)
 100829c:	dec00404 	addi	sp,sp,16
 10082a0:	f800283a 	ret
 10082a4:	01800844 	movi	r6,33
 10082a8:	01400104 	movi	r5,4
 10082ac:	100b2ec0 	call	100b2ec <_calloc_r>
 10082b0:	88801315 	stw	r2,76(r17)
 10082b4:	103fec1e 	bne	r2,zero,1008268 <__alt_data_end+0xff808268>
 10082b8:	0005883a 	mov	r2,zero
 10082bc:	003ff306 	br	100828c <__alt_data_end+0xff80828c>
 10082c0:	01400044 	movi	r5,1
 10082c4:	2c24983a 	sll	r18,r5,r16
 10082c8:	8809883a 	mov	r4,r17
 10082cc:	91800144 	addi	r6,r18,5
 10082d0:	318d883a 	add	r6,r6,r6
 10082d4:	318d883a 	add	r6,r6,r6
 10082d8:	100b2ec0 	call	100b2ec <_calloc_r>
 10082dc:	103ff626 	beq	r2,zero,10082b8 <__alt_data_end+0xff8082b8>
 10082e0:	14000115 	stw	r16,4(r2)
 10082e4:	14800215 	stw	r18,8(r2)
 10082e8:	003fe606 	br	1008284 <__alt_data_end+0xff808284>

010082ec <_Bfree>:
 10082ec:	28000826 	beq	r5,zero,1008310 <_Bfree+0x24>
 10082f0:	28c00117 	ldw	r3,4(r5)
 10082f4:	20801317 	ldw	r2,76(r4)
 10082f8:	18c7883a 	add	r3,r3,r3
 10082fc:	18c7883a 	add	r3,r3,r3
 1008300:	10c5883a 	add	r2,r2,r3
 1008304:	10c00017 	ldw	r3,0(r2)
 1008308:	28c00015 	stw	r3,0(r5)
 100830c:	11400015 	stw	r5,0(r2)
 1008310:	f800283a 	ret

01008314 <__multadd>:
 1008314:	defff704 	addi	sp,sp,-36
 1008318:	dc800215 	stw	r18,8(sp)
 100831c:	2c800417 	ldw	r18,16(r5)
 1008320:	dd800615 	stw	r22,24(sp)
 1008324:	dd400515 	stw	r21,20(sp)
 1008328:	dd000415 	stw	r20,16(sp)
 100832c:	dcc00315 	stw	r19,12(sp)
 1008330:	dc400115 	stw	r17,4(sp)
 1008334:	dc000015 	stw	r16,0(sp)
 1008338:	dfc00815 	stw	ra,32(sp)
 100833c:	ddc00715 	stw	r23,28(sp)
 1008340:	2827883a 	mov	r19,r5
 1008344:	2029883a 	mov	r20,r4
 1008348:	3023883a 	mov	r17,r6
 100834c:	3821883a 	mov	r16,r7
 1008350:	2d400504 	addi	r21,r5,20
 1008354:	002d883a 	mov	r22,zero
 1008358:	adc00017 	ldw	r23,0(r21)
 100835c:	880b883a 	mov	r5,r17
 1008360:	ad400104 	addi	r21,r21,4
 1008364:	b93fffcc 	andi	r4,r23,65535
 1008368:	100c8f80 	call	100c8f8 <__mulsi3>
 100836c:	b808d43a 	srli	r4,r23,16
 1008370:	880b883a 	mov	r5,r17
 1008374:	1421883a 	add	r16,r2,r16
 1008378:	100c8f80 	call	100c8f8 <__mulsi3>
 100837c:	800ed43a 	srli	r7,r16,16
 1008380:	80ffffcc 	andi	r3,r16,65535
 1008384:	b5800044 	addi	r22,r22,1
 1008388:	11c5883a 	add	r2,r2,r7
 100838c:	100e943a 	slli	r7,r2,16
 1008390:	1020d43a 	srli	r16,r2,16
 1008394:	38c7883a 	add	r3,r7,r3
 1008398:	a8ffff15 	stw	r3,-4(r21)
 100839c:	b4bfee16 	blt	r22,r18,1008358 <__alt_data_end+0xff808358>
 10083a0:	80000926 	beq	r16,zero,10083c8 <__multadd+0xb4>
 10083a4:	98800217 	ldw	r2,8(r19)
 10083a8:	9080130e 	bge	r18,r2,10083f8 <__multadd+0xe4>
 10083ac:	90800144 	addi	r2,r18,5
 10083b0:	1085883a 	add	r2,r2,r2
 10083b4:	1085883a 	add	r2,r2,r2
 10083b8:	9885883a 	add	r2,r19,r2
 10083bc:	14000015 	stw	r16,0(r2)
 10083c0:	94800044 	addi	r18,r18,1
 10083c4:	9c800415 	stw	r18,16(r19)
 10083c8:	9805883a 	mov	r2,r19
 10083cc:	dfc00817 	ldw	ra,32(sp)
 10083d0:	ddc00717 	ldw	r23,28(sp)
 10083d4:	dd800617 	ldw	r22,24(sp)
 10083d8:	dd400517 	ldw	r21,20(sp)
 10083dc:	dd000417 	ldw	r20,16(sp)
 10083e0:	dcc00317 	ldw	r19,12(sp)
 10083e4:	dc800217 	ldw	r18,8(sp)
 10083e8:	dc400117 	ldw	r17,4(sp)
 10083ec:	dc000017 	ldw	r16,0(sp)
 10083f0:	dec00904 	addi	sp,sp,36
 10083f4:	f800283a 	ret
 10083f8:	99400117 	ldw	r5,4(r19)
 10083fc:	a009883a 	mov	r4,r20
 1008400:	29400044 	addi	r5,r5,1
 1008404:	10082440 	call	1008244 <_Balloc>
 1008408:	99800417 	ldw	r6,16(r19)
 100840c:	99400304 	addi	r5,r19,12
 1008410:	11000304 	addi	r4,r2,12
 1008414:	31800084 	addi	r6,r6,2
 1008418:	318d883a 	add	r6,r6,r6
 100841c:	318d883a 	add	r6,r6,r6
 1008420:	1023883a 	mov	r17,r2
 1008424:	1007e780 	call	1007e78 <memcpy>
 1008428:	98000a26 	beq	r19,zero,1008454 <__multadd+0x140>
 100842c:	98c00117 	ldw	r3,4(r19)
 1008430:	a0801317 	ldw	r2,76(r20)
 1008434:	18c7883a 	add	r3,r3,r3
 1008438:	18c7883a 	add	r3,r3,r3
 100843c:	10c5883a 	add	r2,r2,r3
 1008440:	10c00017 	ldw	r3,0(r2)
 1008444:	98c00015 	stw	r3,0(r19)
 1008448:	14c00015 	stw	r19,0(r2)
 100844c:	8827883a 	mov	r19,r17
 1008450:	003fd606 	br	10083ac <__alt_data_end+0xff8083ac>
 1008454:	8827883a 	mov	r19,r17
 1008458:	003fd406 	br	10083ac <__alt_data_end+0xff8083ac>

0100845c <__s2b>:
 100845c:	defff904 	addi	sp,sp,-28
 1008460:	dc400115 	stw	r17,4(sp)
 1008464:	dc000015 	stw	r16,0(sp)
 1008468:	2023883a 	mov	r17,r4
 100846c:	2821883a 	mov	r16,r5
 1008470:	39000204 	addi	r4,r7,8
 1008474:	01400244 	movi	r5,9
 1008478:	dcc00315 	stw	r19,12(sp)
 100847c:	dc800215 	stw	r18,8(sp)
 1008480:	dfc00615 	stw	ra,24(sp)
 1008484:	dd400515 	stw	r21,20(sp)
 1008488:	dd000415 	stw	r20,16(sp)
 100848c:	3825883a 	mov	r18,r7
 1008490:	3027883a 	mov	r19,r6
 1008494:	100c7440 	call	100c744 <__divsi3>
 1008498:	00c00044 	movi	r3,1
 100849c:	000b883a 	mov	r5,zero
 10084a0:	1880030e 	bge	r3,r2,10084b0 <__s2b+0x54>
 10084a4:	18c7883a 	add	r3,r3,r3
 10084a8:	29400044 	addi	r5,r5,1
 10084ac:	18bffd16 	blt	r3,r2,10084a4 <__alt_data_end+0xff8084a4>
 10084b0:	8809883a 	mov	r4,r17
 10084b4:	10082440 	call	1008244 <_Balloc>
 10084b8:	d8c00717 	ldw	r3,28(sp)
 10084bc:	10c00515 	stw	r3,20(r2)
 10084c0:	00c00044 	movi	r3,1
 10084c4:	10c00415 	stw	r3,16(r2)
 10084c8:	00c00244 	movi	r3,9
 10084cc:	1cc0210e 	bge	r3,r19,1008554 <__s2b+0xf8>
 10084d0:	80eb883a 	add	r21,r16,r3
 10084d4:	a829883a 	mov	r20,r21
 10084d8:	84e1883a 	add	r16,r16,r19
 10084dc:	a1c00007 	ldb	r7,0(r20)
 10084e0:	01800284 	movi	r6,10
 10084e4:	a5000044 	addi	r20,r20,1
 10084e8:	100b883a 	mov	r5,r2
 10084ec:	39fff404 	addi	r7,r7,-48
 10084f0:	8809883a 	mov	r4,r17
 10084f4:	10083140 	call	1008314 <__multadd>
 10084f8:	a43ff81e 	bne	r20,r16,10084dc <__alt_data_end+0xff8084dc>
 10084fc:	ace1883a 	add	r16,r21,r19
 1008500:	843ffe04 	addi	r16,r16,-8
 1008504:	9c800a0e 	bge	r19,r18,1008530 <__s2b+0xd4>
 1008508:	94e5c83a 	sub	r18,r18,r19
 100850c:	84a5883a 	add	r18,r16,r18
 1008510:	81c00007 	ldb	r7,0(r16)
 1008514:	01800284 	movi	r6,10
 1008518:	84000044 	addi	r16,r16,1
 100851c:	100b883a 	mov	r5,r2
 1008520:	39fff404 	addi	r7,r7,-48
 1008524:	8809883a 	mov	r4,r17
 1008528:	10083140 	call	1008314 <__multadd>
 100852c:	84bff81e 	bne	r16,r18,1008510 <__alt_data_end+0xff808510>
 1008530:	dfc00617 	ldw	ra,24(sp)
 1008534:	dd400517 	ldw	r21,20(sp)
 1008538:	dd000417 	ldw	r20,16(sp)
 100853c:	dcc00317 	ldw	r19,12(sp)
 1008540:	dc800217 	ldw	r18,8(sp)
 1008544:	dc400117 	ldw	r17,4(sp)
 1008548:	dc000017 	ldw	r16,0(sp)
 100854c:	dec00704 	addi	sp,sp,28
 1008550:	f800283a 	ret
 1008554:	84000284 	addi	r16,r16,10
 1008558:	1827883a 	mov	r19,r3
 100855c:	003fe906 	br	1008504 <__alt_data_end+0xff808504>

01008560 <__hi0bits>:
 1008560:	20bfffec 	andhi	r2,r4,65535
 1008564:	1000141e 	bne	r2,zero,10085b8 <__hi0bits+0x58>
 1008568:	2008943a 	slli	r4,r4,16
 100856c:	00800404 	movi	r2,16
 1008570:	20ffc02c 	andhi	r3,r4,65280
 1008574:	1800021e 	bne	r3,zero,1008580 <__hi0bits+0x20>
 1008578:	2008923a 	slli	r4,r4,8
 100857c:	10800204 	addi	r2,r2,8
 1008580:	20fc002c 	andhi	r3,r4,61440
 1008584:	1800021e 	bne	r3,zero,1008590 <__hi0bits+0x30>
 1008588:	2008913a 	slli	r4,r4,4
 100858c:	10800104 	addi	r2,r2,4
 1008590:	20f0002c 	andhi	r3,r4,49152
 1008594:	1800031e 	bne	r3,zero,10085a4 <__hi0bits+0x44>
 1008598:	2109883a 	add	r4,r4,r4
 100859c:	10800084 	addi	r2,r2,2
 10085a0:	2109883a 	add	r4,r4,r4
 10085a4:	20000316 	blt	r4,zero,10085b4 <__hi0bits+0x54>
 10085a8:	2110002c 	andhi	r4,r4,16384
 10085ac:	2000041e 	bne	r4,zero,10085c0 <__hi0bits+0x60>
 10085b0:	00800804 	movi	r2,32
 10085b4:	f800283a 	ret
 10085b8:	0005883a 	mov	r2,zero
 10085bc:	003fec06 	br	1008570 <__alt_data_end+0xff808570>
 10085c0:	10800044 	addi	r2,r2,1
 10085c4:	f800283a 	ret

010085c8 <__lo0bits>:
 10085c8:	20c00017 	ldw	r3,0(r4)
 10085cc:	188001cc 	andi	r2,r3,7
 10085d0:	10000826 	beq	r2,zero,10085f4 <__lo0bits+0x2c>
 10085d4:	1880004c 	andi	r2,r3,1
 10085d8:	1000211e 	bne	r2,zero,1008660 <__lo0bits+0x98>
 10085dc:	1880008c 	andi	r2,r3,2
 10085e0:	1000211e 	bne	r2,zero,1008668 <__lo0bits+0xa0>
 10085e4:	1806d0ba 	srli	r3,r3,2
 10085e8:	00800084 	movi	r2,2
 10085ec:	20c00015 	stw	r3,0(r4)
 10085f0:	f800283a 	ret
 10085f4:	18bfffcc 	andi	r2,r3,65535
 10085f8:	10001326 	beq	r2,zero,1008648 <__lo0bits+0x80>
 10085fc:	0005883a 	mov	r2,zero
 1008600:	19403fcc 	andi	r5,r3,255
 1008604:	2800021e 	bne	r5,zero,1008610 <__lo0bits+0x48>
 1008608:	1806d23a 	srli	r3,r3,8
 100860c:	10800204 	addi	r2,r2,8
 1008610:	194003cc 	andi	r5,r3,15
 1008614:	2800021e 	bne	r5,zero,1008620 <__lo0bits+0x58>
 1008618:	1806d13a 	srli	r3,r3,4
 100861c:	10800104 	addi	r2,r2,4
 1008620:	194000cc 	andi	r5,r3,3
 1008624:	2800021e 	bne	r5,zero,1008630 <__lo0bits+0x68>
 1008628:	1806d0ba 	srli	r3,r3,2
 100862c:	10800084 	addi	r2,r2,2
 1008630:	1940004c 	andi	r5,r3,1
 1008634:	2800081e 	bne	r5,zero,1008658 <__lo0bits+0x90>
 1008638:	1806d07a 	srli	r3,r3,1
 100863c:	1800051e 	bne	r3,zero,1008654 <__lo0bits+0x8c>
 1008640:	00800804 	movi	r2,32
 1008644:	f800283a 	ret
 1008648:	1806d43a 	srli	r3,r3,16
 100864c:	00800404 	movi	r2,16
 1008650:	003feb06 	br	1008600 <__alt_data_end+0xff808600>
 1008654:	10800044 	addi	r2,r2,1
 1008658:	20c00015 	stw	r3,0(r4)
 100865c:	f800283a 	ret
 1008660:	0005883a 	mov	r2,zero
 1008664:	f800283a 	ret
 1008668:	1806d07a 	srli	r3,r3,1
 100866c:	00800044 	movi	r2,1
 1008670:	20c00015 	stw	r3,0(r4)
 1008674:	f800283a 	ret

01008678 <__i2b>:
 1008678:	defffd04 	addi	sp,sp,-12
 100867c:	dc000015 	stw	r16,0(sp)
 1008680:	04000044 	movi	r16,1
 1008684:	dc400115 	stw	r17,4(sp)
 1008688:	2823883a 	mov	r17,r5
 100868c:	800b883a 	mov	r5,r16
 1008690:	dfc00215 	stw	ra,8(sp)
 1008694:	10082440 	call	1008244 <_Balloc>
 1008698:	14400515 	stw	r17,20(r2)
 100869c:	14000415 	stw	r16,16(r2)
 10086a0:	dfc00217 	ldw	ra,8(sp)
 10086a4:	dc400117 	ldw	r17,4(sp)
 10086a8:	dc000017 	ldw	r16,0(sp)
 10086ac:	dec00304 	addi	sp,sp,12
 10086b0:	f800283a 	ret

010086b4 <__multiply>:
 10086b4:	deffef04 	addi	sp,sp,-68
 10086b8:	dc400815 	stw	r17,32(sp)
 10086bc:	dc000715 	stw	r16,28(sp)
 10086c0:	34400417 	ldw	r17,16(r6)
 10086c4:	2c000417 	ldw	r16,16(r5)
 10086c8:	dd800d15 	stw	r22,52(sp)
 10086cc:	dc800915 	stw	r18,36(sp)
 10086d0:	dfc01015 	stw	ra,64(sp)
 10086d4:	df000f15 	stw	fp,60(sp)
 10086d8:	ddc00e15 	stw	r23,56(sp)
 10086dc:	dd400c15 	stw	r21,48(sp)
 10086e0:	dd000b15 	stw	r20,44(sp)
 10086e4:	dcc00a15 	stw	r19,40(sp)
 10086e8:	2825883a 	mov	r18,r5
 10086ec:	302d883a 	mov	r22,r6
 10086f0:	8440050e 	bge	r16,r17,1008708 <__multiply+0x54>
 10086f4:	8007883a 	mov	r3,r16
 10086f8:	3025883a 	mov	r18,r6
 10086fc:	8821883a 	mov	r16,r17
 1008700:	282d883a 	mov	r22,r5
 1008704:	1823883a 	mov	r17,r3
 1008708:	90800217 	ldw	r2,8(r18)
 100870c:	8447883a 	add	r3,r16,r17
 1008710:	d8c00215 	stw	r3,8(sp)
 1008714:	91400117 	ldw	r5,4(r18)
 1008718:	10c0010e 	bge	r2,r3,1008720 <__multiply+0x6c>
 100871c:	29400044 	addi	r5,r5,1
 1008720:	10082440 	call	1008244 <_Balloc>
 1008724:	d8c00217 	ldw	r3,8(sp)
 1008728:	d8800615 	stw	r2,24(sp)
 100872c:	18eb883a 	add	r21,r3,r3
 1008730:	ad6b883a 	add	r21,r21,r21
 1008734:	10c00504 	addi	r3,r2,20
 1008738:	1d6b883a 	add	r21,r3,r21
 100873c:	d8c00115 	stw	r3,4(sp)
 1008740:	dd400315 	stw	r21,12(sp)
 1008744:	1805883a 	mov	r2,r3
 1008748:	1d40042e 	bgeu	r3,r21,100875c <__multiply+0xa8>
 100874c:	d8c00317 	ldw	r3,12(sp)
 1008750:	10000015 	stw	zero,0(r2)
 1008754:	10800104 	addi	r2,r2,4
 1008758:	10fffc36 	bltu	r2,r3,100874c <__alt_data_end+0xff80874c>
 100875c:	8c63883a 	add	r17,r17,r17
 1008760:	b5800504 	addi	r22,r22,20
 1008764:	8c63883a 	add	r17,r17,r17
 1008768:	94800504 	addi	r18,r18,20
 100876c:	8421883a 	add	r16,r16,r16
 1008770:	b463883a 	add	r17,r22,r17
 1008774:	8421883a 	add	r16,r16,r16
 1008778:	dd800015 	stw	r22,0(sp)
 100877c:	dc800415 	stw	r18,16(sp)
 1008780:	dc400515 	stw	r17,20(sp)
 1008784:	9429883a 	add	r20,r18,r16
 1008788:	b4404f2e 	bgeu	r22,r17,10088c8 <__multiply+0x214>
 100878c:	d8c00017 	ldw	r3,0(sp)
 1008790:	1c800017 	ldw	r18,0(r3)
 1008794:	947fffcc 	andi	r17,r18,65535
 1008798:	88001e26 	beq	r17,zero,1008814 <__multiply+0x160>
 100879c:	dd800117 	ldw	r22,4(sp)
 10087a0:	dd400417 	ldw	r21,16(sp)
 10087a4:	0027883a 	mov	r19,zero
 10087a8:	ac800017 	ldw	r18,0(r21)
 10087ac:	b4000017 	ldw	r16,0(r22)
 10087b0:	880b883a 	mov	r5,r17
 10087b4:	913fffcc 	andi	r4,r18,65535
 10087b8:	100c8f80 	call	100c8f8 <__mulsi3>
 10087bc:	9008d43a 	srli	r4,r18,16
 10087c0:	84bfffcc 	andi	r18,r16,65535
 10087c4:	1485883a 	add	r2,r2,r18
 10087c8:	14e5883a 	add	r18,r2,r19
 10087cc:	8020d43a 	srli	r16,r16,16
 10087d0:	9026d43a 	srli	r19,r18,16
 10087d4:	880b883a 	mov	r5,r17
 10087d8:	100c8f80 	call	100c8f8 <__mulsi3>
 10087dc:	1405883a 	add	r2,r2,r16
 10087e0:	14e1883a 	add	r16,r2,r19
 10087e4:	90ffffcc 	andi	r3,r18,65535
 10087e8:	8024943a 	slli	r18,r16,16
 10087ec:	ad400104 	addi	r21,r21,4
 10087f0:	b005883a 	mov	r2,r22
 10087f4:	90c6b03a 	or	r3,r18,r3
 10087f8:	b0c00015 	stw	r3,0(r22)
 10087fc:	8026d43a 	srli	r19,r16,16
 1008800:	b5800104 	addi	r22,r22,4
 1008804:	ad3fe836 	bltu	r21,r20,10087a8 <__alt_data_end+0xff8087a8>
 1008808:	d8c00017 	ldw	r3,0(sp)
 100880c:	14c00115 	stw	r19,4(r2)
 1008810:	1c800017 	ldw	r18,0(r3)
 1008814:	9024d43a 	srli	r18,r18,16
 1008818:	90002226 	beq	r18,zero,10088a4 <__multiply+0x1f0>
 100881c:	d8c00117 	ldw	r3,4(sp)
 1008820:	dd800417 	ldw	r22,16(sp)
 1008824:	002f883a 	mov	r23,zero
 1008828:	1f000017 	ldw	fp,0(r3)
 100882c:	1823883a 	mov	r17,r3
 1008830:	182b883a 	mov	r21,r3
 1008834:	e021883a 	mov	r16,fp
 1008838:	00000106 	br	1008840 <__multiply+0x18c>
 100883c:	982b883a 	mov	r21,r19
 1008840:	b100000b 	ldhu	r4,0(r22)
 1008844:	8020d43a 	srli	r16,r16,16
 1008848:	900b883a 	mov	r5,r18
 100884c:	100c8f80 	call	100c8f8 <__mulsi3>
 1008850:	1405883a 	add	r2,r2,r16
 1008854:	15ef883a 	add	r23,r2,r23
 1008858:	b804943a 	slli	r2,r23,16
 100885c:	e0ffffcc 	andi	r3,fp,65535
 1008860:	8c400104 	addi	r17,r17,4
 1008864:	10c6b03a 	or	r3,r2,r3
 1008868:	88ffff15 	stw	r3,-4(r17)
 100886c:	b5800104 	addi	r22,r22,4
 1008870:	b13fff17 	ldw	r4,-4(r22)
 1008874:	acc00104 	addi	r19,r21,4
 1008878:	900b883a 	mov	r5,r18
 100887c:	2008d43a 	srli	r4,r4,16
 1008880:	9c000017 	ldw	r16,0(r19)
 1008884:	100c8f80 	call	100c8f8 <__mulsi3>
 1008888:	b806d43a 	srli	r3,r23,16
 100888c:	813fffcc 	andi	r4,r16,65535
 1008890:	1105883a 	add	r2,r2,r4
 1008894:	10f9883a 	add	fp,r2,r3
 1008898:	e02ed43a 	srli	r23,fp,16
 100889c:	b53fe736 	bltu	r22,r20,100883c <__alt_data_end+0xff80883c>
 10088a0:	af000115 	stw	fp,4(r21)
 10088a4:	d8c00017 	ldw	r3,0(sp)
 10088a8:	d9000517 	ldw	r4,20(sp)
 10088ac:	18c00104 	addi	r3,r3,4
 10088b0:	d8c00015 	stw	r3,0(sp)
 10088b4:	d8c00117 	ldw	r3,4(sp)
 10088b8:	18c00104 	addi	r3,r3,4
 10088bc:	d8c00115 	stw	r3,4(sp)
 10088c0:	d8c00017 	ldw	r3,0(sp)
 10088c4:	193fb136 	bltu	r3,r4,100878c <__alt_data_end+0xff80878c>
 10088c8:	d8c00217 	ldw	r3,8(sp)
 10088cc:	00c00c0e 	bge	zero,r3,1008900 <__multiply+0x24c>
 10088d0:	d8c00317 	ldw	r3,12(sp)
 10088d4:	18bfff17 	ldw	r2,-4(r3)
 10088d8:	1d7fff04 	addi	r21,r3,-4
 10088dc:	10000326 	beq	r2,zero,10088ec <__multiply+0x238>
 10088e0:	00000706 	br	1008900 <__multiply+0x24c>
 10088e4:	a8800017 	ldw	r2,0(r21)
 10088e8:	1000051e 	bne	r2,zero,1008900 <__multiply+0x24c>
 10088ec:	d8c00217 	ldw	r3,8(sp)
 10088f0:	ad7fff04 	addi	r21,r21,-4
 10088f4:	18ffffc4 	addi	r3,r3,-1
 10088f8:	d8c00215 	stw	r3,8(sp)
 10088fc:	183ff91e 	bne	r3,zero,10088e4 <__alt_data_end+0xff8088e4>
 1008900:	d8c00617 	ldw	r3,24(sp)
 1008904:	d9000217 	ldw	r4,8(sp)
 1008908:	1805883a 	mov	r2,r3
 100890c:	19000415 	stw	r4,16(r3)
 1008910:	dfc01017 	ldw	ra,64(sp)
 1008914:	df000f17 	ldw	fp,60(sp)
 1008918:	ddc00e17 	ldw	r23,56(sp)
 100891c:	dd800d17 	ldw	r22,52(sp)
 1008920:	dd400c17 	ldw	r21,48(sp)
 1008924:	dd000b17 	ldw	r20,44(sp)
 1008928:	dcc00a17 	ldw	r19,40(sp)
 100892c:	dc800917 	ldw	r18,36(sp)
 1008930:	dc400817 	ldw	r17,32(sp)
 1008934:	dc000717 	ldw	r16,28(sp)
 1008938:	dec01104 	addi	sp,sp,68
 100893c:	f800283a 	ret

01008940 <__pow5mult>:
 1008940:	defffa04 	addi	sp,sp,-24
 1008944:	dcc00315 	stw	r19,12(sp)
 1008948:	dc000015 	stw	r16,0(sp)
 100894c:	dfc00515 	stw	ra,20(sp)
 1008950:	dd000415 	stw	r20,16(sp)
 1008954:	dc800215 	stw	r18,8(sp)
 1008958:	dc400115 	stw	r17,4(sp)
 100895c:	308000cc 	andi	r2,r6,3
 1008960:	3021883a 	mov	r16,r6
 1008964:	2027883a 	mov	r19,r4
 1008968:	10002f1e 	bne	r2,zero,1008a28 <__pow5mult+0xe8>
 100896c:	2825883a 	mov	r18,r5
 1008970:	8021d0ba 	srai	r16,r16,2
 1008974:	80001a26 	beq	r16,zero,10089e0 <__pow5mult+0xa0>
 1008978:	9c401217 	ldw	r17,72(r19)
 100897c:	8800061e 	bne	r17,zero,1008998 <__pow5mult+0x58>
 1008980:	00003406 	br	1008a54 <__pow5mult+0x114>
 1008984:	8021d07a 	srai	r16,r16,1
 1008988:	80001526 	beq	r16,zero,10089e0 <__pow5mult+0xa0>
 100898c:	88800017 	ldw	r2,0(r17)
 1008990:	10001c26 	beq	r2,zero,1008a04 <__pow5mult+0xc4>
 1008994:	1023883a 	mov	r17,r2
 1008998:	8080004c 	andi	r2,r16,1
 100899c:	103ff926 	beq	r2,zero,1008984 <__alt_data_end+0xff808984>
 10089a0:	880d883a 	mov	r6,r17
 10089a4:	900b883a 	mov	r5,r18
 10089a8:	9809883a 	mov	r4,r19
 10089ac:	10086b40 	call	10086b4 <__multiply>
 10089b0:	90001b26 	beq	r18,zero,1008a20 <__pow5mult+0xe0>
 10089b4:	91000117 	ldw	r4,4(r18)
 10089b8:	98c01317 	ldw	r3,76(r19)
 10089bc:	8021d07a 	srai	r16,r16,1
 10089c0:	2109883a 	add	r4,r4,r4
 10089c4:	2109883a 	add	r4,r4,r4
 10089c8:	1907883a 	add	r3,r3,r4
 10089cc:	19000017 	ldw	r4,0(r3)
 10089d0:	91000015 	stw	r4,0(r18)
 10089d4:	1c800015 	stw	r18,0(r3)
 10089d8:	1025883a 	mov	r18,r2
 10089dc:	803feb1e 	bne	r16,zero,100898c <__alt_data_end+0xff80898c>
 10089e0:	9005883a 	mov	r2,r18
 10089e4:	dfc00517 	ldw	ra,20(sp)
 10089e8:	dd000417 	ldw	r20,16(sp)
 10089ec:	dcc00317 	ldw	r19,12(sp)
 10089f0:	dc800217 	ldw	r18,8(sp)
 10089f4:	dc400117 	ldw	r17,4(sp)
 10089f8:	dc000017 	ldw	r16,0(sp)
 10089fc:	dec00604 	addi	sp,sp,24
 1008a00:	f800283a 	ret
 1008a04:	880d883a 	mov	r6,r17
 1008a08:	880b883a 	mov	r5,r17
 1008a0c:	9809883a 	mov	r4,r19
 1008a10:	10086b40 	call	10086b4 <__multiply>
 1008a14:	88800015 	stw	r2,0(r17)
 1008a18:	10000015 	stw	zero,0(r2)
 1008a1c:	003fdd06 	br	1008994 <__alt_data_end+0xff808994>
 1008a20:	1025883a 	mov	r18,r2
 1008a24:	003fd706 	br	1008984 <__alt_data_end+0xff808984>
 1008a28:	10bfffc4 	addi	r2,r2,-1
 1008a2c:	1085883a 	add	r2,r2,r2
 1008a30:	00c04074 	movhi	r3,257
 1008a34:	18c87904 	addi	r3,r3,8676
 1008a38:	1085883a 	add	r2,r2,r2
 1008a3c:	1885883a 	add	r2,r3,r2
 1008a40:	11800017 	ldw	r6,0(r2)
 1008a44:	000f883a 	mov	r7,zero
 1008a48:	10083140 	call	1008314 <__multadd>
 1008a4c:	1025883a 	mov	r18,r2
 1008a50:	003fc706 	br	1008970 <__alt_data_end+0xff808970>
 1008a54:	05000044 	movi	r20,1
 1008a58:	a00b883a 	mov	r5,r20
 1008a5c:	9809883a 	mov	r4,r19
 1008a60:	10082440 	call	1008244 <_Balloc>
 1008a64:	1023883a 	mov	r17,r2
 1008a68:	00809c44 	movi	r2,625
 1008a6c:	88800515 	stw	r2,20(r17)
 1008a70:	8d000415 	stw	r20,16(r17)
 1008a74:	9c401215 	stw	r17,72(r19)
 1008a78:	88000015 	stw	zero,0(r17)
 1008a7c:	003fc606 	br	1008998 <__alt_data_end+0xff808998>

01008a80 <__lshift>:
 1008a80:	defff904 	addi	sp,sp,-28
 1008a84:	dd400515 	stw	r21,20(sp)
 1008a88:	dcc00315 	stw	r19,12(sp)
 1008a8c:	302bd17a 	srai	r21,r6,5
 1008a90:	2cc00417 	ldw	r19,16(r5)
 1008a94:	28800217 	ldw	r2,8(r5)
 1008a98:	dd000415 	stw	r20,16(sp)
 1008a9c:	ace7883a 	add	r19,r21,r19
 1008aa0:	dc800215 	stw	r18,8(sp)
 1008aa4:	dc400115 	stw	r17,4(sp)
 1008aa8:	dc000015 	stw	r16,0(sp)
 1008aac:	dfc00615 	stw	ra,24(sp)
 1008ab0:	9c000044 	addi	r16,r19,1
 1008ab4:	2823883a 	mov	r17,r5
 1008ab8:	3029883a 	mov	r20,r6
 1008abc:	2025883a 	mov	r18,r4
 1008ac0:	29400117 	ldw	r5,4(r5)
 1008ac4:	1400030e 	bge	r2,r16,1008ad4 <__lshift+0x54>
 1008ac8:	1085883a 	add	r2,r2,r2
 1008acc:	29400044 	addi	r5,r5,1
 1008ad0:	143ffd16 	blt	r2,r16,1008ac8 <__alt_data_end+0xff808ac8>
 1008ad4:	9009883a 	mov	r4,r18
 1008ad8:	10082440 	call	1008244 <_Balloc>
 1008adc:	10c00504 	addi	r3,r2,20
 1008ae0:	0540070e 	bge	zero,r21,1008b00 <__lshift+0x80>
 1008ae4:	ad6b883a 	add	r21,r21,r21
 1008ae8:	ad6b883a 	add	r21,r21,r21
 1008aec:	1809883a 	mov	r4,r3
 1008af0:	1d47883a 	add	r3,r3,r21
 1008af4:	20000015 	stw	zero,0(r4)
 1008af8:	21000104 	addi	r4,r4,4
 1008afc:	193ffd1e 	bne	r3,r4,1008af4 <__alt_data_end+0xff808af4>
 1008b00:	8a000417 	ldw	r8,16(r17)
 1008b04:	89000504 	addi	r4,r17,20
 1008b08:	a18007cc 	andi	r6,r20,31
 1008b0c:	4211883a 	add	r8,r8,r8
 1008b10:	4211883a 	add	r8,r8,r8
 1008b14:	2211883a 	add	r8,r4,r8
 1008b18:	30002326 	beq	r6,zero,1008ba8 <__lshift+0x128>
 1008b1c:	02400804 	movi	r9,32
 1008b20:	4993c83a 	sub	r9,r9,r6
 1008b24:	000b883a 	mov	r5,zero
 1008b28:	21c00017 	ldw	r7,0(r4)
 1008b2c:	1815883a 	mov	r10,r3
 1008b30:	18c00104 	addi	r3,r3,4
 1008b34:	398e983a 	sll	r7,r7,r6
 1008b38:	21000104 	addi	r4,r4,4
 1008b3c:	394ab03a 	or	r5,r7,r5
 1008b40:	197fff15 	stw	r5,-4(r3)
 1008b44:	217fff17 	ldw	r5,-4(r4)
 1008b48:	2a4ad83a 	srl	r5,r5,r9
 1008b4c:	223ff636 	bltu	r4,r8,1008b28 <__alt_data_end+0xff808b28>
 1008b50:	51400115 	stw	r5,4(r10)
 1008b54:	28001a1e 	bne	r5,zero,1008bc0 <__lshift+0x140>
 1008b58:	843fffc4 	addi	r16,r16,-1
 1008b5c:	14000415 	stw	r16,16(r2)
 1008b60:	88000826 	beq	r17,zero,1008b84 <__lshift+0x104>
 1008b64:	89000117 	ldw	r4,4(r17)
 1008b68:	90c01317 	ldw	r3,76(r18)
 1008b6c:	2109883a 	add	r4,r4,r4
 1008b70:	2109883a 	add	r4,r4,r4
 1008b74:	1907883a 	add	r3,r3,r4
 1008b78:	19000017 	ldw	r4,0(r3)
 1008b7c:	89000015 	stw	r4,0(r17)
 1008b80:	1c400015 	stw	r17,0(r3)
 1008b84:	dfc00617 	ldw	ra,24(sp)
 1008b88:	dd400517 	ldw	r21,20(sp)
 1008b8c:	dd000417 	ldw	r20,16(sp)
 1008b90:	dcc00317 	ldw	r19,12(sp)
 1008b94:	dc800217 	ldw	r18,8(sp)
 1008b98:	dc400117 	ldw	r17,4(sp)
 1008b9c:	dc000017 	ldw	r16,0(sp)
 1008ba0:	dec00704 	addi	sp,sp,28
 1008ba4:	f800283a 	ret
 1008ba8:	21400017 	ldw	r5,0(r4)
 1008bac:	18c00104 	addi	r3,r3,4
 1008bb0:	21000104 	addi	r4,r4,4
 1008bb4:	197fff15 	stw	r5,-4(r3)
 1008bb8:	223ffb36 	bltu	r4,r8,1008ba8 <__alt_data_end+0xff808ba8>
 1008bbc:	003fe606 	br	1008b58 <__alt_data_end+0xff808b58>
 1008bc0:	9c000084 	addi	r16,r19,2
 1008bc4:	003fe406 	br	1008b58 <__alt_data_end+0xff808b58>

01008bc8 <__mcmp>:
 1008bc8:	20800417 	ldw	r2,16(r4)
 1008bcc:	28c00417 	ldw	r3,16(r5)
 1008bd0:	10c5c83a 	sub	r2,r2,r3
 1008bd4:	1000111e 	bne	r2,zero,1008c1c <__mcmp+0x54>
 1008bd8:	18c7883a 	add	r3,r3,r3
 1008bdc:	18c7883a 	add	r3,r3,r3
 1008be0:	21000504 	addi	r4,r4,20
 1008be4:	29400504 	addi	r5,r5,20
 1008be8:	20c5883a 	add	r2,r4,r3
 1008bec:	28cb883a 	add	r5,r5,r3
 1008bf0:	00000106 	br	1008bf8 <__mcmp+0x30>
 1008bf4:	20800a2e 	bgeu	r4,r2,1008c20 <__mcmp+0x58>
 1008bf8:	10bfff04 	addi	r2,r2,-4
 1008bfc:	297fff04 	addi	r5,r5,-4
 1008c00:	11800017 	ldw	r6,0(r2)
 1008c04:	28c00017 	ldw	r3,0(r5)
 1008c08:	30fffa26 	beq	r6,r3,1008bf4 <__alt_data_end+0xff808bf4>
 1008c0c:	30c00236 	bltu	r6,r3,1008c18 <__mcmp+0x50>
 1008c10:	00800044 	movi	r2,1
 1008c14:	f800283a 	ret
 1008c18:	00bfffc4 	movi	r2,-1
 1008c1c:	f800283a 	ret
 1008c20:	0005883a 	mov	r2,zero
 1008c24:	f800283a 	ret

01008c28 <__mdiff>:
 1008c28:	28c00417 	ldw	r3,16(r5)
 1008c2c:	30800417 	ldw	r2,16(r6)
 1008c30:	defffa04 	addi	sp,sp,-24
 1008c34:	dcc00315 	stw	r19,12(sp)
 1008c38:	dc800215 	stw	r18,8(sp)
 1008c3c:	dfc00515 	stw	ra,20(sp)
 1008c40:	dd000415 	stw	r20,16(sp)
 1008c44:	dc400115 	stw	r17,4(sp)
 1008c48:	dc000015 	stw	r16,0(sp)
 1008c4c:	1887c83a 	sub	r3,r3,r2
 1008c50:	2825883a 	mov	r18,r5
 1008c54:	3027883a 	mov	r19,r6
 1008c58:	1800141e 	bne	r3,zero,1008cac <__mdiff+0x84>
 1008c5c:	1085883a 	add	r2,r2,r2
 1008c60:	1085883a 	add	r2,r2,r2
 1008c64:	2a000504 	addi	r8,r5,20
 1008c68:	34000504 	addi	r16,r6,20
 1008c6c:	4087883a 	add	r3,r8,r2
 1008c70:	8085883a 	add	r2,r16,r2
 1008c74:	00000106 	br	1008c7c <__mdiff+0x54>
 1008c78:	40c0592e 	bgeu	r8,r3,1008de0 <__mdiff+0x1b8>
 1008c7c:	18ffff04 	addi	r3,r3,-4
 1008c80:	10bfff04 	addi	r2,r2,-4
 1008c84:	19c00017 	ldw	r7,0(r3)
 1008c88:	11400017 	ldw	r5,0(r2)
 1008c8c:	397ffa26 	beq	r7,r5,1008c78 <__alt_data_end+0xff808c78>
 1008c90:	3940592e 	bgeu	r7,r5,1008df8 <__mdiff+0x1d0>
 1008c94:	9005883a 	mov	r2,r18
 1008c98:	4023883a 	mov	r17,r8
 1008c9c:	9825883a 	mov	r18,r19
 1008ca0:	05000044 	movi	r20,1
 1008ca4:	1027883a 	mov	r19,r2
 1008ca8:	00000406 	br	1008cbc <__mdiff+0x94>
 1008cac:	18005616 	blt	r3,zero,1008e08 <__mdiff+0x1e0>
 1008cb0:	34400504 	addi	r17,r6,20
 1008cb4:	2c000504 	addi	r16,r5,20
 1008cb8:	0029883a 	mov	r20,zero
 1008cbc:	91400117 	ldw	r5,4(r18)
 1008cc0:	10082440 	call	1008244 <_Balloc>
 1008cc4:	92400417 	ldw	r9,16(r18)
 1008cc8:	9b000417 	ldw	r12,16(r19)
 1008ccc:	12c00504 	addi	r11,r2,20
 1008cd0:	4a51883a 	add	r8,r9,r9
 1008cd4:	6319883a 	add	r12,r12,r12
 1008cd8:	4211883a 	add	r8,r8,r8
 1008cdc:	6319883a 	add	r12,r12,r12
 1008ce0:	15000315 	stw	r20,12(r2)
 1008ce4:	8211883a 	add	r8,r16,r8
 1008ce8:	8b19883a 	add	r12,r17,r12
 1008cec:	0007883a 	mov	r3,zero
 1008cf0:	81400017 	ldw	r5,0(r16)
 1008cf4:	89c00017 	ldw	r7,0(r17)
 1008cf8:	59800104 	addi	r6,r11,4
 1008cfc:	293fffcc 	andi	r4,r5,65535
 1008d00:	20c7883a 	add	r3,r4,r3
 1008d04:	393fffcc 	andi	r4,r7,65535
 1008d08:	1909c83a 	sub	r4,r3,r4
 1008d0c:	280ad43a 	srli	r5,r5,16
 1008d10:	380ed43a 	srli	r7,r7,16
 1008d14:	2007d43a 	srai	r3,r4,16
 1008d18:	213fffcc 	andi	r4,r4,65535
 1008d1c:	29cbc83a 	sub	r5,r5,r7
 1008d20:	28c7883a 	add	r3,r5,r3
 1008d24:	180a943a 	slli	r5,r3,16
 1008d28:	8c400104 	addi	r17,r17,4
 1008d2c:	84000104 	addi	r16,r16,4
 1008d30:	2908b03a 	or	r4,r5,r4
 1008d34:	59000015 	stw	r4,0(r11)
 1008d38:	1807d43a 	srai	r3,r3,16
 1008d3c:	3015883a 	mov	r10,r6
 1008d40:	3017883a 	mov	r11,r6
 1008d44:	8b3fea36 	bltu	r17,r12,1008cf0 <__alt_data_end+0xff808cf0>
 1008d48:	8200162e 	bgeu	r16,r8,1008da4 <__mdiff+0x17c>
 1008d4c:	8017883a 	mov	r11,r16
 1008d50:	59400017 	ldw	r5,0(r11)
 1008d54:	31800104 	addi	r6,r6,4
 1008d58:	5ac00104 	addi	r11,r11,4
 1008d5c:	293fffcc 	andi	r4,r5,65535
 1008d60:	20c7883a 	add	r3,r4,r3
 1008d64:	280ed43a 	srli	r7,r5,16
 1008d68:	180bd43a 	srai	r5,r3,16
 1008d6c:	193fffcc 	andi	r4,r3,65535
 1008d70:	3947883a 	add	r3,r7,r5
 1008d74:	180a943a 	slli	r5,r3,16
 1008d78:	1807d43a 	srai	r3,r3,16
 1008d7c:	2908b03a 	or	r4,r5,r4
 1008d80:	313fff15 	stw	r4,-4(r6)
 1008d84:	5a3ff236 	bltu	r11,r8,1008d50 <__alt_data_end+0xff808d50>
 1008d88:	0406303a 	nor	r3,zero,r16
 1008d8c:	1a07883a 	add	r3,r3,r8
 1008d90:	1806d0ba 	srli	r3,r3,2
 1008d94:	18c00044 	addi	r3,r3,1
 1008d98:	18c7883a 	add	r3,r3,r3
 1008d9c:	18c7883a 	add	r3,r3,r3
 1008da0:	50d5883a 	add	r10,r10,r3
 1008da4:	50ffff04 	addi	r3,r10,-4
 1008da8:	2000041e 	bne	r4,zero,1008dbc <__mdiff+0x194>
 1008dac:	18ffff04 	addi	r3,r3,-4
 1008db0:	19000017 	ldw	r4,0(r3)
 1008db4:	4a7fffc4 	addi	r9,r9,-1
 1008db8:	203ffc26 	beq	r4,zero,1008dac <__alt_data_end+0xff808dac>
 1008dbc:	12400415 	stw	r9,16(r2)
 1008dc0:	dfc00517 	ldw	ra,20(sp)
 1008dc4:	dd000417 	ldw	r20,16(sp)
 1008dc8:	dcc00317 	ldw	r19,12(sp)
 1008dcc:	dc800217 	ldw	r18,8(sp)
 1008dd0:	dc400117 	ldw	r17,4(sp)
 1008dd4:	dc000017 	ldw	r16,0(sp)
 1008dd8:	dec00604 	addi	sp,sp,24
 1008ddc:	f800283a 	ret
 1008de0:	000b883a 	mov	r5,zero
 1008de4:	10082440 	call	1008244 <_Balloc>
 1008de8:	00c00044 	movi	r3,1
 1008dec:	10c00415 	stw	r3,16(r2)
 1008df0:	10000515 	stw	zero,20(r2)
 1008df4:	003ff206 	br	1008dc0 <__alt_data_end+0xff808dc0>
 1008df8:	8023883a 	mov	r17,r16
 1008dfc:	0029883a 	mov	r20,zero
 1008e00:	4021883a 	mov	r16,r8
 1008e04:	003fad06 	br	1008cbc <__alt_data_end+0xff808cbc>
 1008e08:	9005883a 	mov	r2,r18
 1008e0c:	94400504 	addi	r17,r18,20
 1008e10:	9c000504 	addi	r16,r19,20
 1008e14:	9825883a 	mov	r18,r19
 1008e18:	05000044 	movi	r20,1
 1008e1c:	1027883a 	mov	r19,r2
 1008e20:	003fa606 	br	1008cbc <__alt_data_end+0xff808cbc>

01008e24 <__ulp>:
 1008e24:	295ffc2c 	andhi	r5,r5,32752
 1008e28:	00bf3034 	movhi	r2,64704
 1008e2c:	2887883a 	add	r3,r5,r2
 1008e30:	00c0020e 	bge	zero,r3,1008e3c <__ulp+0x18>
 1008e34:	0005883a 	mov	r2,zero
 1008e38:	f800283a 	ret
 1008e3c:	00c7c83a 	sub	r3,zero,r3
 1008e40:	1807d53a 	srai	r3,r3,20
 1008e44:	008004c4 	movi	r2,19
 1008e48:	10c00b0e 	bge	r2,r3,1008e78 <__ulp+0x54>
 1008e4c:	18bffb04 	addi	r2,r3,-20
 1008e50:	01000784 	movi	r4,30
 1008e54:	0007883a 	mov	r3,zero
 1008e58:	20800516 	blt	r4,r2,1008e70 <__ulp+0x4c>
 1008e5c:	010007c4 	movi	r4,31
 1008e60:	2089c83a 	sub	r4,r4,r2
 1008e64:	00800044 	movi	r2,1
 1008e68:	1104983a 	sll	r2,r2,r4
 1008e6c:	f800283a 	ret
 1008e70:	00800044 	movi	r2,1
 1008e74:	f800283a 	ret
 1008e78:	01400234 	movhi	r5,8
 1008e7c:	28c7d83a 	sra	r3,r5,r3
 1008e80:	0005883a 	mov	r2,zero
 1008e84:	f800283a 	ret

01008e88 <__b2d>:
 1008e88:	defffa04 	addi	sp,sp,-24
 1008e8c:	dc000015 	stw	r16,0(sp)
 1008e90:	24000417 	ldw	r16,16(r4)
 1008e94:	dc400115 	stw	r17,4(sp)
 1008e98:	24400504 	addi	r17,r4,20
 1008e9c:	8421883a 	add	r16,r16,r16
 1008ea0:	8421883a 	add	r16,r16,r16
 1008ea4:	8c21883a 	add	r16,r17,r16
 1008ea8:	dc800215 	stw	r18,8(sp)
 1008eac:	84bfff17 	ldw	r18,-4(r16)
 1008eb0:	dd000415 	stw	r20,16(sp)
 1008eb4:	dcc00315 	stw	r19,12(sp)
 1008eb8:	9009883a 	mov	r4,r18
 1008ebc:	2829883a 	mov	r20,r5
 1008ec0:	dfc00515 	stw	ra,20(sp)
 1008ec4:	10085600 	call	1008560 <__hi0bits>
 1008ec8:	00c00804 	movi	r3,32
 1008ecc:	1889c83a 	sub	r4,r3,r2
 1008ed0:	a1000015 	stw	r4,0(r20)
 1008ed4:	01000284 	movi	r4,10
 1008ed8:	84ffff04 	addi	r19,r16,-4
 1008edc:	20801216 	blt	r4,r2,1008f28 <__b2d+0xa0>
 1008ee0:	018002c4 	movi	r6,11
 1008ee4:	308dc83a 	sub	r6,r6,r2
 1008ee8:	9186d83a 	srl	r3,r18,r6
 1008eec:	18cffc34 	orhi	r3,r3,16368
 1008ef0:	8cc0212e 	bgeu	r17,r19,1008f78 <__b2d+0xf0>
 1008ef4:	813ffe17 	ldw	r4,-8(r16)
 1008ef8:	218cd83a 	srl	r6,r4,r6
 1008efc:	10800544 	addi	r2,r2,21
 1008f00:	9084983a 	sll	r2,r18,r2
 1008f04:	1184b03a 	or	r2,r2,r6
 1008f08:	dfc00517 	ldw	ra,20(sp)
 1008f0c:	dd000417 	ldw	r20,16(sp)
 1008f10:	dcc00317 	ldw	r19,12(sp)
 1008f14:	dc800217 	ldw	r18,8(sp)
 1008f18:	dc400117 	ldw	r17,4(sp)
 1008f1c:	dc000017 	ldw	r16,0(sp)
 1008f20:	dec00604 	addi	sp,sp,24
 1008f24:	f800283a 	ret
 1008f28:	8cc00f2e 	bgeu	r17,r19,1008f68 <__b2d+0xe0>
 1008f2c:	117ffd44 	addi	r5,r2,-11
 1008f30:	80bffe17 	ldw	r2,-8(r16)
 1008f34:	28000e26 	beq	r5,zero,1008f70 <__b2d+0xe8>
 1008f38:	1949c83a 	sub	r4,r3,r5
 1008f3c:	9164983a 	sll	r18,r18,r5
 1008f40:	1106d83a 	srl	r3,r2,r4
 1008f44:	81bffe04 	addi	r6,r16,-8
 1008f48:	948ffc34 	orhi	r18,r18,16368
 1008f4c:	90c6b03a 	or	r3,r18,r3
 1008f50:	89800e2e 	bgeu	r17,r6,1008f8c <__b2d+0x104>
 1008f54:	81bffd17 	ldw	r6,-12(r16)
 1008f58:	1144983a 	sll	r2,r2,r5
 1008f5c:	310ad83a 	srl	r5,r6,r4
 1008f60:	2884b03a 	or	r2,r5,r2
 1008f64:	003fe806 	br	1008f08 <__alt_data_end+0xff808f08>
 1008f68:	10bffd44 	addi	r2,r2,-11
 1008f6c:	1000041e 	bne	r2,zero,1008f80 <__b2d+0xf8>
 1008f70:	90cffc34 	orhi	r3,r18,16368
 1008f74:	003fe406 	br	1008f08 <__alt_data_end+0xff808f08>
 1008f78:	000d883a 	mov	r6,zero
 1008f7c:	003fdf06 	br	1008efc <__alt_data_end+0xff808efc>
 1008f80:	90a4983a 	sll	r18,r18,r2
 1008f84:	0005883a 	mov	r2,zero
 1008f88:	003ff906 	br	1008f70 <__alt_data_end+0xff808f70>
 1008f8c:	1144983a 	sll	r2,r2,r5
 1008f90:	003fdd06 	br	1008f08 <__alt_data_end+0xff808f08>

01008f94 <__d2b>:
 1008f94:	defff804 	addi	sp,sp,-32
 1008f98:	dc000215 	stw	r16,8(sp)
 1008f9c:	3021883a 	mov	r16,r6
 1008fa0:	dc400315 	stw	r17,12(sp)
 1008fa4:	8022907a 	slli	r17,r16,1
 1008fa8:	dd000615 	stw	r20,24(sp)
 1008fac:	2829883a 	mov	r20,r5
 1008fb0:	01400044 	movi	r5,1
 1008fb4:	dcc00515 	stw	r19,20(sp)
 1008fb8:	dc800415 	stw	r18,16(sp)
 1008fbc:	dfc00715 	stw	ra,28(sp)
 1008fc0:	3825883a 	mov	r18,r7
 1008fc4:	8822d57a 	srli	r17,r17,21
 1008fc8:	10082440 	call	1008244 <_Balloc>
 1008fcc:	1027883a 	mov	r19,r2
 1008fd0:	00800434 	movhi	r2,16
 1008fd4:	10bfffc4 	addi	r2,r2,-1
 1008fd8:	808c703a 	and	r6,r16,r2
 1008fdc:	88000126 	beq	r17,zero,1008fe4 <__d2b+0x50>
 1008fe0:	31800434 	orhi	r6,r6,16
 1008fe4:	d9800015 	stw	r6,0(sp)
 1008fe8:	a0002426 	beq	r20,zero,100907c <__d2b+0xe8>
 1008fec:	d9000104 	addi	r4,sp,4
 1008ff0:	dd000115 	stw	r20,4(sp)
 1008ff4:	10085c80 	call	10085c8 <__lo0bits>
 1008ff8:	d8c00017 	ldw	r3,0(sp)
 1008ffc:	10002f1e 	bne	r2,zero,10090bc <__d2b+0x128>
 1009000:	d9000117 	ldw	r4,4(sp)
 1009004:	99000515 	stw	r4,20(r19)
 1009008:	1821003a 	cmpeq	r16,r3,zero
 100900c:	01000084 	movi	r4,2
 1009010:	2421c83a 	sub	r16,r4,r16
 1009014:	98c00615 	stw	r3,24(r19)
 1009018:	9c000415 	stw	r16,16(r19)
 100901c:	88001f1e 	bne	r17,zero,100909c <__d2b+0x108>
 1009020:	10bef384 	addi	r2,r2,-1074
 1009024:	90800015 	stw	r2,0(r18)
 1009028:	00900034 	movhi	r2,16384
 100902c:	10bfffc4 	addi	r2,r2,-1
 1009030:	8085883a 	add	r2,r16,r2
 1009034:	1085883a 	add	r2,r2,r2
 1009038:	1085883a 	add	r2,r2,r2
 100903c:	9885883a 	add	r2,r19,r2
 1009040:	11000517 	ldw	r4,20(r2)
 1009044:	8020917a 	slli	r16,r16,5
 1009048:	10085600 	call	1008560 <__hi0bits>
 100904c:	d8c00817 	ldw	r3,32(sp)
 1009050:	8085c83a 	sub	r2,r16,r2
 1009054:	18800015 	stw	r2,0(r3)
 1009058:	9805883a 	mov	r2,r19
 100905c:	dfc00717 	ldw	ra,28(sp)
 1009060:	dd000617 	ldw	r20,24(sp)
 1009064:	dcc00517 	ldw	r19,20(sp)
 1009068:	dc800417 	ldw	r18,16(sp)
 100906c:	dc400317 	ldw	r17,12(sp)
 1009070:	dc000217 	ldw	r16,8(sp)
 1009074:	dec00804 	addi	sp,sp,32
 1009078:	f800283a 	ret
 100907c:	d809883a 	mov	r4,sp
 1009080:	10085c80 	call	10085c8 <__lo0bits>
 1009084:	d8c00017 	ldw	r3,0(sp)
 1009088:	04000044 	movi	r16,1
 100908c:	9c000415 	stw	r16,16(r19)
 1009090:	98c00515 	stw	r3,20(r19)
 1009094:	10800804 	addi	r2,r2,32
 1009098:	883fe126 	beq	r17,zero,1009020 <__alt_data_end+0xff809020>
 100909c:	00c00d44 	movi	r3,53
 10090a0:	8c7ef344 	addi	r17,r17,-1075
 10090a4:	88a3883a 	add	r17,r17,r2
 10090a8:	1885c83a 	sub	r2,r3,r2
 10090ac:	d8c00817 	ldw	r3,32(sp)
 10090b0:	94400015 	stw	r17,0(r18)
 10090b4:	18800015 	stw	r2,0(r3)
 10090b8:	003fe706 	br	1009058 <__alt_data_end+0xff809058>
 10090bc:	01000804 	movi	r4,32
 10090c0:	2089c83a 	sub	r4,r4,r2
 10090c4:	1908983a 	sll	r4,r3,r4
 10090c8:	d9400117 	ldw	r5,4(sp)
 10090cc:	1886d83a 	srl	r3,r3,r2
 10090d0:	2148b03a 	or	r4,r4,r5
 10090d4:	99000515 	stw	r4,20(r19)
 10090d8:	d8c00015 	stw	r3,0(sp)
 10090dc:	003fca06 	br	1009008 <__alt_data_end+0xff809008>

010090e0 <__ratio>:
 10090e0:	defff904 	addi	sp,sp,-28
 10090e4:	dc400315 	stw	r17,12(sp)
 10090e8:	2823883a 	mov	r17,r5
 10090ec:	d9400104 	addi	r5,sp,4
 10090f0:	dfc00615 	stw	ra,24(sp)
 10090f4:	dcc00515 	stw	r19,20(sp)
 10090f8:	dc800415 	stw	r18,16(sp)
 10090fc:	2027883a 	mov	r19,r4
 1009100:	dc000215 	stw	r16,8(sp)
 1009104:	1008e880 	call	1008e88 <__b2d>
 1009108:	d80b883a 	mov	r5,sp
 100910c:	8809883a 	mov	r4,r17
 1009110:	1025883a 	mov	r18,r2
 1009114:	1821883a 	mov	r16,r3
 1009118:	1008e880 	call	1008e88 <__b2d>
 100911c:	8a000417 	ldw	r8,16(r17)
 1009120:	99000417 	ldw	r4,16(r19)
 1009124:	d9400117 	ldw	r5,4(sp)
 1009128:	2209c83a 	sub	r4,r4,r8
 100912c:	2010917a 	slli	r8,r4,5
 1009130:	d9000017 	ldw	r4,0(sp)
 1009134:	2909c83a 	sub	r4,r5,r4
 1009138:	4109883a 	add	r4,r8,r4
 100913c:	01000e0e 	bge	zero,r4,1009178 <__ratio+0x98>
 1009140:	2008953a 	slli	r4,r4,20
 1009144:	2421883a 	add	r16,r4,r16
 1009148:	100d883a 	mov	r6,r2
 100914c:	180f883a 	mov	r7,r3
 1009150:	9009883a 	mov	r4,r18
 1009154:	800b883a 	mov	r5,r16
 1009158:	100d1cc0 	call	100d1cc <__divdf3>
 100915c:	dfc00617 	ldw	ra,24(sp)
 1009160:	dcc00517 	ldw	r19,20(sp)
 1009164:	dc800417 	ldw	r18,16(sp)
 1009168:	dc400317 	ldw	r17,12(sp)
 100916c:	dc000217 	ldw	r16,8(sp)
 1009170:	dec00704 	addi	sp,sp,28
 1009174:	f800283a 	ret
 1009178:	2008953a 	slli	r4,r4,20
 100917c:	1907c83a 	sub	r3,r3,r4
 1009180:	003ff106 	br	1009148 <__alt_data_end+0xff809148>

01009184 <_mprec_log10>:
 1009184:	defffe04 	addi	sp,sp,-8
 1009188:	dc000015 	stw	r16,0(sp)
 100918c:	dfc00115 	stw	ra,4(sp)
 1009190:	008005c4 	movi	r2,23
 1009194:	2021883a 	mov	r16,r4
 1009198:	11000d0e 	bge	r2,r4,10091d0 <_mprec_log10+0x4c>
 100919c:	0005883a 	mov	r2,zero
 10091a0:	00cffc34 	movhi	r3,16368
 10091a4:	843fffc4 	addi	r16,r16,-1
 10091a8:	000d883a 	mov	r6,zero
 10091ac:	01d00934 	movhi	r7,16420
 10091b0:	1009883a 	mov	r4,r2
 10091b4:	180b883a 	mov	r5,r3
 10091b8:	100ddf40 	call	100ddf4 <__muldf3>
 10091bc:	803ff91e 	bne	r16,zero,10091a4 <__alt_data_end+0xff8091a4>
 10091c0:	dfc00117 	ldw	ra,4(sp)
 10091c4:	dc000017 	ldw	r16,0(sp)
 10091c8:	dec00204 	addi	sp,sp,8
 10091cc:	f800283a 	ret
 10091d0:	202090fa 	slli	r16,r4,3
 10091d4:	00804074 	movhi	r2,257
 10091d8:	10889004 	addi	r2,r2,8768
 10091dc:	1421883a 	add	r16,r2,r16
 10091e0:	80800017 	ldw	r2,0(r16)
 10091e4:	80c00117 	ldw	r3,4(r16)
 10091e8:	dfc00117 	ldw	ra,4(sp)
 10091ec:	dc000017 	ldw	r16,0(sp)
 10091f0:	dec00204 	addi	sp,sp,8
 10091f4:	f800283a 	ret

010091f8 <__copybits>:
 10091f8:	297fffc4 	addi	r5,r5,-1
 10091fc:	280fd17a 	srai	r7,r5,5
 1009200:	30c00417 	ldw	r3,16(r6)
 1009204:	30800504 	addi	r2,r6,20
 1009208:	39c00044 	addi	r7,r7,1
 100920c:	18c7883a 	add	r3,r3,r3
 1009210:	39cf883a 	add	r7,r7,r7
 1009214:	18c7883a 	add	r3,r3,r3
 1009218:	39cf883a 	add	r7,r7,r7
 100921c:	10c7883a 	add	r3,r2,r3
 1009220:	21cf883a 	add	r7,r4,r7
 1009224:	10c00d2e 	bgeu	r2,r3,100925c <__copybits+0x64>
 1009228:	200b883a 	mov	r5,r4
 100922c:	12000017 	ldw	r8,0(r2)
 1009230:	29400104 	addi	r5,r5,4
 1009234:	10800104 	addi	r2,r2,4
 1009238:	2a3fff15 	stw	r8,-4(r5)
 100923c:	10fffb36 	bltu	r2,r3,100922c <__alt_data_end+0xff80922c>
 1009240:	1985c83a 	sub	r2,r3,r6
 1009244:	10bffac4 	addi	r2,r2,-21
 1009248:	1004d0ba 	srli	r2,r2,2
 100924c:	10800044 	addi	r2,r2,1
 1009250:	1085883a 	add	r2,r2,r2
 1009254:	1085883a 	add	r2,r2,r2
 1009258:	2089883a 	add	r4,r4,r2
 100925c:	21c0032e 	bgeu	r4,r7,100926c <__copybits+0x74>
 1009260:	20000015 	stw	zero,0(r4)
 1009264:	21000104 	addi	r4,r4,4
 1009268:	21fffd36 	bltu	r4,r7,1009260 <__alt_data_end+0xff809260>
 100926c:	f800283a 	ret

01009270 <__any_on>:
 1009270:	20c00417 	ldw	r3,16(r4)
 1009274:	2805d17a 	srai	r2,r5,5
 1009278:	21000504 	addi	r4,r4,20
 100927c:	18800d0e 	bge	r3,r2,10092b4 <__any_on+0x44>
 1009280:	18c7883a 	add	r3,r3,r3
 1009284:	18c7883a 	add	r3,r3,r3
 1009288:	20c7883a 	add	r3,r4,r3
 100928c:	20c0192e 	bgeu	r4,r3,10092f4 <__any_on+0x84>
 1009290:	18bfff17 	ldw	r2,-4(r3)
 1009294:	18ffff04 	addi	r3,r3,-4
 1009298:	1000041e 	bne	r2,zero,10092ac <__any_on+0x3c>
 100929c:	20c0142e 	bgeu	r4,r3,10092f0 <__any_on+0x80>
 10092a0:	18ffff04 	addi	r3,r3,-4
 10092a4:	19400017 	ldw	r5,0(r3)
 10092a8:	283ffc26 	beq	r5,zero,100929c <__alt_data_end+0xff80929c>
 10092ac:	00800044 	movi	r2,1
 10092b0:	f800283a 	ret
 10092b4:	10c00a0e 	bge	r2,r3,10092e0 <__any_on+0x70>
 10092b8:	1085883a 	add	r2,r2,r2
 10092bc:	1085883a 	add	r2,r2,r2
 10092c0:	294007cc 	andi	r5,r5,31
 10092c4:	2087883a 	add	r3,r4,r2
 10092c8:	283ff026 	beq	r5,zero,100928c <__alt_data_end+0xff80928c>
 10092cc:	19800017 	ldw	r6,0(r3)
 10092d0:	3144d83a 	srl	r2,r6,r5
 10092d4:	114a983a 	sll	r5,r2,r5
 10092d8:	317ff41e 	bne	r6,r5,10092ac <__alt_data_end+0xff8092ac>
 10092dc:	003feb06 	br	100928c <__alt_data_end+0xff80928c>
 10092e0:	1085883a 	add	r2,r2,r2
 10092e4:	1085883a 	add	r2,r2,r2
 10092e8:	2087883a 	add	r3,r4,r2
 10092ec:	003fe706 	br	100928c <__alt_data_end+0xff80928c>
 10092f0:	f800283a 	ret
 10092f4:	0005883a 	mov	r2,zero
 10092f8:	f800283a 	ret

010092fc <_realloc_r>:
 10092fc:	defff604 	addi	sp,sp,-40
 1009300:	dc800215 	stw	r18,8(sp)
 1009304:	dfc00915 	stw	ra,36(sp)
 1009308:	df000815 	stw	fp,32(sp)
 100930c:	ddc00715 	stw	r23,28(sp)
 1009310:	dd800615 	stw	r22,24(sp)
 1009314:	dd400515 	stw	r21,20(sp)
 1009318:	dd000415 	stw	r20,16(sp)
 100931c:	dcc00315 	stw	r19,12(sp)
 1009320:	dc400115 	stw	r17,4(sp)
 1009324:	dc000015 	stw	r16,0(sp)
 1009328:	3025883a 	mov	r18,r6
 100932c:	2800b726 	beq	r5,zero,100960c <_realloc_r+0x310>
 1009330:	282b883a 	mov	r21,r5
 1009334:	2029883a 	mov	r20,r4
 1009338:	100f7600 	call	100f760 <__malloc_lock>
 100933c:	a8bfff17 	ldw	r2,-4(r21)
 1009340:	043fff04 	movi	r16,-4
 1009344:	90c002c4 	addi	r3,r18,11
 1009348:	01000584 	movi	r4,22
 100934c:	acfffe04 	addi	r19,r21,-8
 1009350:	1420703a 	and	r16,r2,r16
 1009354:	20c0332e 	bgeu	r4,r3,1009424 <_realloc_r+0x128>
 1009358:	047ffe04 	movi	r17,-8
 100935c:	1c62703a 	and	r17,r3,r17
 1009360:	8807883a 	mov	r3,r17
 1009364:	88005816 	blt	r17,zero,10094c8 <_realloc_r+0x1cc>
 1009368:	8c805736 	bltu	r17,r18,10094c8 <_realloc_r+0x1cc>
 100936c:	80c0300e 	bge	r16,r3,1009430 <_realloc_r+0x134>
 1009370:	07004074 	movhi	fp,257
 1009374:	e70a3e04 	addi	fp,fp,10488
 1009378:	e1c00217 	ldw	r7,8(fp)
 100937c:	9c09883a 	add	r4,r19,r16
 1009380:	22000117 	ldw	r8,4(r4)
 1009384:	21c06326 	beq	r4,r7,1009514 <_realloc_r+0x218>
 1009388:	017fff84 	movi	r5,-2
 100938c:	414a703a 	and	r5,r8,r5
 1009390:	214b883a 	add	r5,r4,r5
 1009394:	29800117 	ldw	r6,4(r5)
 1009398:	3180004c 	andi	r6,r6,1
 100939c:	30003f26 	beq	r6,zero,100949c <_realloc_r+0x1a0>
 10093a0:	1080004c 	andi	r2,r2,1
 10093a4:	10008326 	beq	r2,zero,10095b4 <_realloc_r+0x2b8>
 10093a8:	900b883a 	mov	r5,r18
 10093ac:	a009883a 	mov	r4,r20
 10093b0:	10075880 	call	1007588 <_malloc_r>
 10093b4:	1025883a 	mov	r18,r2
 10093b8:	10011e26 	beq	r2,zero,1009834 <_realloc_r+0x538>
 10093bc:	a93fff17 	ldw	r4,-4(r21)
 10093c0:	10fffe04 	addi	r3,r2,-8
 10093c4:	00bfff84 	movi	r2,-2
 10093c8:	2084703a 	and	r2,r4,r2
 10093cc:	9885883a 	add	r2,r19,r2
 10093d0:	1880ee26 	beq	r3,r2,100978c <_realloc_r+0x490>
 10093d4:	81bfff04 	addi	r6,r16,-4
 10093d8:	00800904 	movi	r2,36
 10093dc:	1180b836 	bltu	r2,r6,10096c0 <_realloc_r+0x3c4>
 10093e0:	00c004c4 	movi	r3,19
 10093e4:	19809636 	bltu	r3,r6,1009640 <_realloc_r+0x344>
 10093e8:	9005883a 	mov	r2,r18
 10093ec:	a807883a 	mov	r3,r21
 10093f0:	19000017 	ldw	r4,0(r3)
 10093f4:	11000015 	stw	r4,0(r2)
 10093f8:	19000117 	ldw	r4,4(r3)
 10093fc:	11000115 	stw	r4,4(r2)
 1009400:	18c00217 	ldw	r3,8(r3)
 1009404:	10c00215 	stw	r3,8(r2)
 1009408:	a80b883a 	mov	r5,r21
 100940c:	a009883a 	mov	r4,r20
 1009410:	10069900 	call	1006990 <_free_r>
 1009414:	a009883a 	mov	r4,r20
 1009418:	100f7840 	call	100f784 <__malloc_unlock>
 100941c:	9005883a 	mov	r2,r18
 1009420:	00001206 	br	100946c <_realloc_r+0x170>
 1009424:	00c00404 	movi	r3,16
 1009428:	1823883a 	mov	r17,r3
 100942c:	003fce06 	br	1009368 <__alt_data_end+0xff809368>
 1009430:	a825883a 	mov	r18,r21
 1009434:	8445c83a 	sub	r2,r16,r17
 1009438:	00c003c4 	movi	r3,15
 100943c:	18802636 	bltu	r3,r2,10094d8 <_realloc_r+0x1dc>
 1009440:	99800117 	ldw	r6,4(r19)
 1009444:	9c07883a 	add	r3,r19,r16
 1009448:	3180004c 	andi	r6,r6,1
 100944c:	3420b03a 	or	r16,r6,r16
 1009450:	9c000115 	stw	r16,4(r19)
 1009454:	18800117 	ldw	r2,4(r3)
 1009458:	10800054 	ori	r2,r2,1
 100945c:	18800115 	stw	r2,4(r3)
 1009460:	a009883a 	mov	r4,r20
 1009464:	100f7840 	call	100f784 <__malloc_unlock>
 1009468:	9005883a 	mov	r2,r18
 100946c:	dfc00917 	ldw	ra,36(sp)
 1009470:	df000817 	ldw	fp,32(sp)
 1009474:	ddc00717 	ldw	r23,28(sp)
 1009478:	dd800617 	ldw	r22,24(sp)
 100947c:	dd400517 	ldw	r21,20(sp)
 1009480:	dd000417 	ldw	r20,16(sp)
 1009484:	dcc00317 	ldw	r19,12(sp)
 1009488:	dc800217 	ldw	r18,8(sp)
 100948c:	dc400117 	ldw	r17,4(sp)
 1009490:	dc000017 	ldw	r16,0(sp)
 1009494:	dec00a04 	addi	sp,sp,40
 1009498:	f800283a 	ret
 100949c:	017fff04 	movi	r5,-4
 10094a0:	414a703a 	and	r5,r8,r5
 10094a4:	814d883a 	add	r6,r16,r5
 10094a8:	30c01f16 	blt	r6,r3,1009528 <_realloc_r+0x22c>
 10094ac:	20800317 	ldw	r2,12(r4)
 10094b0:	20c00217 	ldw	r3,8(r4)
 10094b4:	a825883a 	mov	r18,r21
 10094b8:	3021883a 	mov	r16,r6
 10094bc:	18800315 	stw	r2,12(r3)
 10094c0:	10c00215 	stw	r3,8(r2)
 10094c4:	003fdb06 	br	1009434 <__alt_data_end+0xff809434>
 10094c8:	00800304 	movi	r2,12
 10094cc:	a0800015 	stw	r2,0(r20)
 10094d0:	0005883a 	mov	r2,zero
 10094d4:	003fe506 	br	100946c <__alt_data_end+0xff80946c>
 10094d8:	98c00117 	ldw	r3,4(r19)
 10094dc:	9c4b883a 	add	r5,r19,r17
 10094e0:	11000054 	ori	r4,r2,1
 10094e4:	18c0004c 	andi	r3,r3,1
 10094e8:	1c62b03a 	or	r17,r3,r17
 10094ec:	9c400115 	stw	r17,4(r19)
 10094f0:	29000115 	stw	r4,4(r5)
 10094f4:	2885883a 	add	r2,r5,r2
 10094f8:	10c00117 	ldw	r3,4(r2)
 10094fc:	29400204 	addi	r5,r5,8
 1009500:	a009883a 	mov	r4,r20
 1009504:	18c00054 	ori	r3,r3,1
 1009508:	10c00115 	stw	r3,4(r2)
 100950c:	10069900 	call	1006990 <_free_r>
 1009510:	003fd306 	br	1009460 <__alt_data_end+0xff809460>
 1009514:	017fff04 	movi	r5,-4
 1009518:	414a703a 	and	r5,r8,r5
 100951c:	89800404 	addi	r6,r17,16
 1009520:	8151883a 	add	r8,r16,r5
 1009524:	4180590e 	bge	r8,r6,100968c <_realloc_r+0x390>
 1009528:	1080004c 	andi	r2,r2,1
 100952c:	103f9e1e 	bne	r2,zero,10093a8 <__alt_data_end+0xff8093a8>
 1009530:	adbffe17 	ldw	r22,-8(r21)
 1009534:	00bfff04 	movi	r2,-4
 1009538:	9dadc83a 	sub	r22,r19,r22
 100953c:	b1800117 	ldw	r6,4(r22)
 1009540:	3084703a 	and	r2,r6,r2
 1009544:	20002026 	beq	r4,zero,10095c8 <_realloc_r+0x2cc>
 1009548:	80af883a 	add	r23,r16,r2
 100954c:	b96f883a 	add	r23,r23,r5
 1009550:	21c05f26 	beq	r4,r7,10096d0 <_realloc_r+0x3d4>
 1009554:	b8c01c16 	blt	r23,r3,10095c8 <_realloc_r+0x2cc>
 1009558:	20800317 	ldw	r2,12(r4)
 100955c:	20c00217 	ldw	r3,8(r4)
 1009560:	81bfff04 	addi	r6,r16,-4
 1009564:	01000904 	movi	r4,36
 1009568:	18800315 	stw	r2,12(r3)
 100956c:	10c00215 	stw	r3,8(r2)
 1009570:	b0c00217 	ldw	r3,8(r22)
 1009574:	b0800317 	ldw	r2,12(r22)
 1009578:	b4800204 	addi	r18,r22,8
 100957c:	18800315 	stw	r2,12(r3)
 1009580:	10c00215 	stw	r3,8(r2)
 1009584:	21801b36 	bltu	r4,r6,10095f4 <_realloc_r+0x2f8>
 1009588:	008004c4 	movi	r2,19
 100958c:	1180352e 	bgeu	r2,r6,1009664 <_realloc_r+0x368>
 1009590:	a8800017 	ldw	r2,0(r21)
 1009594:	b0800215 	stw	r2,8(r22)
 1009598:	a8800117 	ldw	r2,4(r21)
 100959c:	b0800315 	stw	r2,12(r22)
 10095a0:	008006c4 	movi	r2,27
 10095a4:	11807f36 	bltu	r2,r6,10097a4 <_realloc_r+0x4a8>
 10095a8:	b0800404 	addi	r2,r22,16
 10095ac:	ad400204 	addi	r21,r21,8
 10095b0:	00002d06 	br	1009668 <_realloc_r+0x36c>
 10095b4:	adbffe17 	ldw	r22,-8(r21)
 10095b8:	00bfff04 	movi	r2,-4
 10095bc:	9dadc83a 	sub	r22,r19,r22
 10095c0:	b1000117 	ldw	r4,4(r22)
 10095c4:	2084703a 	and	r2,r4,r2
 10095c8:	b03f7726 	beq	r22,zero,10093a8 <__alt_data_end+0xff8093a8>
 10095cc:	80af883a 	add	r23,r16,r2
 10095d0:	b8ff7516 	blt	r23,r3,10093a8 <__alt_data_end+0xff8093a8>
 10095d4:	b0800317 	ldw	r2,12(r22)
 10095d8:	b0c00217 	ldw	r3,8(r22)
 10095dc:	81bfff04 	addi	r6,r16,-4
 10095e0:	01000904 	movi	r4,36
 10095e4:	18800315 	stw	r2,12(r3)
 10095e8:	10c00215 	stw	r3,8(r2)
 10095ec:	b4800204 	addi	r18,r22,8
 10095f0:	21bfe52e 	bgeu	r4,r6,1009588 <__alt_data_end+0xff809588>
 10095f4:	a80b883a 	mov	r5,r21
 10095f8:	9009883a 	mov	r4,r18
 10095fc:	1007fc00 	call	1007fc0 <memmove>
 1009600:	b821883a 	mov	r16,r23
 1009604:	b027883a 	mov	r19,r22
 1009608:	003f8a06 	br	1009434 <__alt_data_end+0xff809434>
 100960c:	300b883a 	mov	r5,r6
 1009610:	dfc00917 	ldw	ra,36(sp)
 1009614:	df000817 	ldw	fp,32(sp)
 1009618:	ddc00717 	ldw	r23,28(sp)
 100961c:	dd800617 	ldw	r22,24(sp)
 1009620:	dd400517 	ldw	r21,20(sp)
 1009624:	dd000417 	ldw	r20,16(sp)
 1009628:	dcc00317 	ldw	r19,12(sp)
 100962c:	dc800217 	ldw	r18,8(sp)
 1009630:	dc400117 	ldw	r17,4(sp)
 1009634:	dc000017 	ldw	r16,0(sp)
 1009638:	dec00a04 	addi	sp,sp,40
 100963c:	10075881 	jmpi	1007588 <_malloc_r>
 1009640:	a8c00017 	ldw	r3,0(r21)
 1009644:	90c00015 	stw	r3,0(r18)
 1009648:	a8c00117 	ldw	r3,4(r21)
 100964c:	90c00115 	stw	r3,4(r18)
 1009650:	00c006c4 	movi	r3,27
 1009654:	19804536 	bltu	r3,r6,100976c <_realloc_r+0x470>
 1009658:	90800204 	addi	r2,r18,8
 100965c:	a8c00204 	addi	r3,r21,8
 1009660:	003f6306 	br	10093f0 <__alt_data_end+0xff8093f0>
 1009664:	9005883a 	mov	r2,r18
 1009668:	a8c00017 	ldw	r3,0(r21)
 100966c:	b821883a 	mov	r16,r23
 1009670:	b027883a 	mov	r19,r22
 1009674:	10c00015 	stw	r3,0(r2)
 1009678:	a8c00117 	ldw	r3,4(r21)
 100967c:	10c00115 	stw	r3,4(r2)
 1009680:	a8c00217 	ldw	r3,8(r21)
 1009684:	10c00215 	stw	r3,8(r2)
 1009688:	003f6a06 	br	1009434 <__alt_data_end+0xff809434>
 100968c:	9c67883a 	add	r19,r19,r17
 1009690:	4445c83a 	sub	r2,r8,r17
 1009694:	e4c00215 	stw	r19,8(fp)
 1009698:	10800054 	ori	r2,r2,1
 100969c:	98800115 	stw	r2,4(r19)
 10096a0:	a8bfff17 	ldw	r2,-4(r21)
 10096a4:	a009883a 	mov	r4,r20
 10096a8:	1080004c 	andi	r2,r2,1
 10096ac:	1462b03a 	or	r17,r2,r17
 10096b0:	ac7fff15 	stw	r17,-4(r21)
 10096b4:	100f7840 	call	100f784 <__malloc_unlock>
 10096b8:	a805883a 	mov	r2,r21
 10096bc:	003f6b06 	br	100946c <__alt_data_end+0xff80946c>
 10096c0:	a80b883a 	mov	r5,r21
 10096c4:	9009883a 	mov	r4,r18
 10096c8:	1007fc00 	call	1007fc0 <memmove>
 10096cc:	003f4e06 	br	1009408 <__alt_data_end+0xff809408>
 10096d0:	89000404 	addi	r4,r17,16
 10096d4:	b93fbc16 	blt	r23,r4,10095c8 <__alt_data_end+0xff8095c8>
 10096d8:	b0800317 	ldw	r2,12(r22)
 10096dc:	b0c00217 	ldw	r3,8(r22)
 10096e0:	81bfff04 	addi	r6,r16,-4
 10096e4:	01000904 	movi	r4,36
 10096e8:	18800315 	stw	r2,12(r3)
 10096ec:	10c00215 	stw	r3,8(r2)
 10096f0:	b4800204 	addi	r18,r22,8
 10096f4:	21804336 	bltu	r4,r6,1009804 <_realloc_r+0x508>
 10096f8:	008004c4 	movi	r2,19
 10096fc:	11803f2e 	bgeu	r2,r6,10097fc <_realloc_r+0x500>
 1009700:	a8800017 	ldw	r2,0(r21)
 1009704:	b0800215 	stw	r2,8(r22)
 1009708:	a8800117 	ldw	r2,4(r21)
 100970c:	b0800315 	stw	r2,12(r22)
 1009710:	008006c4 	movi	r2,27
 1009714:	11803f36 	bltu	r2,r6,1009814 <_realloc_r+0x518>
 1009718:	b0800404 	addi	r2,r22,16
 100971c:	ad400204 	addi	r21,r21,8
 1009720:	a8c00017 	ldw	r3,0(r21)
 1009724:	10c00015 	stw	r3,0(r2)
 1009728:	a8c00117 	ldw	r3,4(r21)
 100972c:	10c00115 	stw	r3,4(r2)
 1009730:	a8c00217 	ldw	r3,8(r21)
 1009734:	10c00215 	stw	r3,8(r2)
 1009738:	b447883a 	add	r3,r22,r17
 100973c:	bc45c83a 	sub	r2,r23,r17
 1009740:	e0c00215 	stw	r3,8(fp)
 1009744:	10800054 	ori	r2,r2,1
 1009748:	18800115 	stw	r2,4(r3)
 100974c:	b0800117 	ldw	r2,4(r22)
 1009750:	a009883a 	mov	r4,r20
 1009754:	1080004c 	andi	r2,r2,1
 1009758:	1462b03a 	or	r17,r2,r17
 100975c:	b4400115 	stw	r17,4(r22)
 1009760:	100f7840 	call	100f784 <__malloc_unlock>
 1009764:	9005883a 	mov	r2,r18
 1009768:	003f4006 	br	100946c <__alt_data_end+0xff80946c>
 100976c:	a8c00217 	ldw	r3,8(r21)
 1009770:	90c00215 	stw	r3,8(r18)
 1009774:	a8c00317 	ldw	r3,12(r21)
 1009778:	90c00315 	stw	r3,12(r18)
 100977c:	30801126 	beq	r6,r2,10097c4 <_realloc_r+0x4c8>
 1009780:	90800404 	addi	r2,r18,16
 1009784:	a8c00404 	addi	r3,r21,16
 1009788:	003f1906 	br	10093f0 <__alt_data_end+0xff8093f0>
 100978c:	90ffff17 	ldw	r3,-4(r18)
 1009790:	00bfff04 	movi	r2,-4
 1009794:	a825883a 	mov	r18,r21
 1009798:	1884703a 	and	r2,r3,r2
 100979c:	80a1883a 	add	r16,r16,r2
 10097a0:	003f2406 	br	1009434 <__alt_data_end+0xff809434>
 10097a4:	a8800217 	ldw	r2,8(r21)
 10097a8:	b0800415 	stw	r2,16(r22)
 10097ac:	a8800317 	ldw	r2,12(r21)
 10097b0:	b0800515 	stw	r2,20(r22)
 10097b4:	31000a26 	beq	r6,r4,10097e0 <_realloc_r+0x4e4>
 10097b8:	b0800604 	addi	r2,r22,24
 10097bc:	ad400404 	addi	r21,r21,16
 10097c0:	003fa906 	br	1009668 <__alt_data_end+0xff809668>
 10097c4:	a9000417 	ldw	r4,16(r21)
 10097c8:	90800604 	addi	r2,r18,24
 10097cc:	a8c00604 	addi	r3,r21,24
 10097d0:	91000415 	stw	r4,16(r18)
 10097d4:	a9000517 	ldw	r4,20(r21)
 10097d8:	91000515 	stw	r4,20(r18)
 10097dc:	003f0406 	br	10093f0 <__alt_data_end+0xff8093f0>
 10097e0:	a8c00417 	ldw	r3,16(r21)
 10097e4:	ad400604 	addi	r21,r21,24
 10097e8:	b0800804 	addi	r2,r22,32
 10097ec:	b0c00615 	stw	r3,24(r22)
 10097f0:	a8ffff17 	ldw	r3,-4(r21)
 10097f4:	b0c00715 	stw	r3,28(r22)
 10097f8:	003f9b06 	br	1009668 <__alt_data_end+0xff809668>
 10097fc:	9005883a 	mov	r2,r18
 1009800:	003fc706 	br	1009720 <__alt_data_end+0xff809720>
 1009804:	a80b883a 	mov	r5,r21
 1009808:	9009883a 	mov	r4,r18
 100980c:	1007fc00 	call	1007fc0 <memmove>
 1009810:	003fc906 	br	1009738 <__alt_data_end+0xff809738>
 1009814:	a8800217 	ldw	r2,8(r21)
 1009818:	b0800415 	stw	r2,16(r22)
 100981c:	a8800317 	ldw	r2,12(r21)
 1009820:	b0800515 	stw	r2,20(r22)
 1009824:	31000726 	beq	r6,r4,1009844 <_realloc_r+0x548>
 1009828:	b0800604 	addi	r2,r22,24
 100982c:	ad400404 	addi	r21,r21,16
 1009830:	003fbb06 	br	1009720 <__alt_data_end+0xff809720>
 1009834:	a009883a 	mov	r4,r20
 1009838:	100f7840 	call	100f784 <__malloc_unlock>
 100983c:	0005883a 	mov	r2,zero
 1009840:	003f0a06 	br	100946c <__alt_data_end+0xff80946c>
 1009844:	a8c00417 	ldw	r3,16(r21)
 1009848:	ad400604 	addi	r21,r21,24
 100984c:	b0800804 	addi	r2,r22,32
 1009850:	b0c00615 	stw	r3,24(r22)
 1009854:	a8ffff17 	ldw	r3,-4(r21)
 1009858:	b0c00715 	stw	r3,28(r22)
 100985c:	003fb006 	br	1009720 <__alt_data_end+0xff809720>

01009860 <__fpclassifyd>:
 1009860:	00a00034 	movhi	r2,32768
 1009864:	10bfffc4 	addi	r2,r2,-1
 1009868:	2884703a 	and	r2,r5,r2
 100986c:	10000726 	beq	r2,zero,100988c <__fpclassifyd+0x2c>
 1009870:	00fffc34 	movhi	r3,65520
 1009874:	019ff834 	movhi	r6,32736
 1009878:	28c7883a 	add	r3,r5,r3
 100987c:	31bfffc4 	addi	r6,r6,-1
 1009880:	30c00536 	bltu	r6,r3,1009898 <__fpclassifyd+0x38>
 1009884:	00800104 	movi	r2,4
 1009888:	f800283a 	ret
 100988c:	2000021e 	bne	r4,zero,1009898 <__fpclassifyd+0x38>
 1009890:	00800084 	movi	r2,2
 1009894:	f800283a 	ret
 1009898:	00dffc34 	movhi	r3,32752
 100989c:	019ff834 	movhi	r6,32736
 10098a0:	28cb883a 	add	r5,r5,r3
 10098a4:	31bfffc4 	addi	r6,r6,-1
 10098a8:	317ff62e 	bgeu	r6,r5,1009884 <__alt_data_end+0xff809884>
 10098ac:	01400434 	movhi	r5,16
 10098b0:	297fffc4 	addi	r5,r5,-1
 10098b4:	28800236 	bltu	r5,r2,10098c0 <__fpclassifyd+0x60>
 10098b8:	008000c4 	movi	r2,3
 10098bc:	f800283a 	ret
 10098c0:	10c00226 	beq	r2,r3,10098cc <__fpclassifyd+0x6c>
 10098c4:	0005883a 	mov	r2,zero
 10098c8:	f800283a 	ret
 10098cc:	2005003a 	cmpeq	r2,r4,zero
 10098d0:	f800283a 	ret

010098d4 <_sbrk_r>:
 10098d4:	defffd04 	addi	sp,sp,-12
 10098d8:	dc000015 	stw	r16,0(sp)
 10098dc:	04004074 	movhi	r16,257
 10098e0:	dc400115 	stw	r17,4(sp)
 10098e4:	84169404 	addi	r16,r16,23120
 10098e8:	2023883a 	mov	r17,r4
 10098ec:	2809883a 	mov	r4,r5
 10098f0:	dfc00215 	stw	ra,8(sp)
 10098f4:	80000015 	stw	zero,0(r16)
 10098f8:	100f96c0 	call	100f96c <sbrk>
 10098fc:	00ffffc4 	movi	r3,-1
 1009900:	10c00526 	beq	r2,r3,1009918 <_sbrk_r+0x44>
 1009904:	dfc00217 	ldw	ra,8(sp)
 1009908:	dc400117 	ldw	r17,4(sp)
 100990c:	dc000017 	ldw	r16,0(sp)
 1009910:	dec00304 	addi	sp,sp,12
 1009914:	f800283a 	ret
 1009918:	80c00017 	ldw	r3,0(r16)
 100991c:	183ff926 	beq	r3,zero,1009904 <__alt_data_end+0xff809904>
 1009920:	88c00015 	stw	r3,0(r17)
 1009924:	003ff706 	br	1009904 <__alt_data_end+0xff809904>

01009928 <__sread>:
 1009928:	defffe04 	addi	sp,sp,-8
 100992c:	dc000015 	stw	r16,0(sp)
 1009930:	2821883a 	mov	r16,r5
 1009934:	2940038f 	ldh	r5,14(r5)
 1009938:	dfc00115 	stw	ra,4(sp)
 100993c:	100b7e40 	call	100b7e4 <_read_r>
 1009940:	10000716 	blt	r2,zero,1009960 <__sread+0x38>
 1009944:	80c01417 	ldw	r3,80(r16)
 1009948:	1887883a 	add	r3,r3,r2
 100994c:	80c01415 	stw	r3,80(r16)
 1009950:	dfc00117 	ldw	ra,4(sp)
 1009954:	dc000017 	ldw	r16,0(sp)
 1009958:	dec00204 	addi	sp,sp,8
 100995c:	f800283a 	ret
 1009960:	80c0030b 	ldhu	r3,12(r16)
 1009964:	18fbffcc 	andi	r3,r3,61439
 1009968:	80c0030d 	sth	r3,12(r16)
 100996c:	dfc00117 	ldw	ra,4(sp)
 1009970:	dc000017 	ldw	r16,0(sp)
 1009974:	dec00204 	addi	sp,sp,8
 1009978:	f800283a 	ret

0100997c <__seofread>:
 100997c:	0005883a 	mov	r2,zero
 1009980:	f800283a 	ret

01009984 <__swrite>:
 1009984:	2880030b 	ldhu	r2,12(r5)
 1009988:	defffb04 	addi	sp,sp,-20
 100998c:	dcc00315 	stw	r19,12(sp)
 1009990:	dc800215 	stw	r18,8(sp)
 1009994:	dc400115 	stw	r17,4(sp)
 1009998:	dc000015 	stw	r16,0(sp)
 100999c:	dfc00415 	stw	ra,16(sp)
 10099a0:	10c0400c 	andi	r3,r2,256
 10099a4:	2821883a 	mov	r16,r5
 10099a8:	2023883a 	mov	r17,r4
 10099ac:	3025883a 	mov	r18,r6
 10099b0:	3827883a 	mov	r19,r7
 10099b4:	18000526 	beq	r3,zero,10099cc <__swrite+0x48>
 10099b8:	2940038f 	ldh	r5,14(r5)
 10099bc:	01c00084 	movi	r7,2
 10099c0:	000d883a 	mov	r6,zero
 10099c4:	100b7840 	call	100b784 <_lseek_r>
 10099c8:	8080030b 	ldhu	r2,12(r16)
 10099cc:	8140038f 	ldh	r5,14(r16)
 10099d0:	10bbffcc 	andi	r2,r2,61439
 10099d4:	980f883a 	mov	r7,r19
 10099d8:	900d883a 	mov	r6,r18
 10099dc:	8809883a 	mov	r4,r17
 10099e0:	8080030d 	sth	r2,12(r16)
 10099e4:	dfc00417 	ldw	ra,16(sp)
 10099e8:	dcc00317 	ldw	r19,12(sp)
 10099ec:	dc800217 	ldw	r18,8(sp)
 10099f0:	dc400117 	ldw	r17,4(sp)
 10099f4:	dc000017 	ldw	r16,0(sp)
 10099f8:	dec00504 	addi	sp,sp,20
 10099fc:	100b2381 	jmpi	100b238 <_write_r>

01009a00 <__sseek>:
 1009a00:	defffe04 	addi	sp,sp,-8
 1009a04:	dc000015 	stw	r16,0(sp)
 1009a08:	2821883a 	mov	r16,r5
 1009a0c:	2940038f 	ldh	r5,14(r5)
 1009a10:	dfc00115 	stw	ra,4(sp)
 1009a14:	100b7840 	call	100b784 <_lseek_r>
 1009a18:	00ffffc4 	movi	r3,-1
 1009a1c:	10c00826 	beq	r2,r3,1009a40 <__sseek+0x40>
 1009a20:	80c0030b 	ldhu	r3,12(r16)
 1009a24:	80801415 	stw	r2,80(r16)
 1009a28:	18c40014 	ori	r3,r3,4096
 1009a2c:	80c0030d 	sth	r3,12(r16)
 1009a30:	dfc00117 	ldw	ra,4(sp)
 1009a34:	dc000017 	ldw	r16,0(sp)
 1009a38:	dec00204 	addi	sp,sp,8
 1009a3c:	f800283a 	ret
 1009a40:	80c0030b 	ldhu	r3,12(r16)
 1009a44:	18fbffcc 	andi	r3,r3,61439
 1009a48:	80c0030d 	sth	r3,12(r16)
 1009a4c:	dfc00117 	ldw	ra,4(sp)
 1009a50:	dc000017 	ldw	r16,0(sp)
 1009a54:	dec00204 	addi	sp,sp,8
 1009a58:	f800283a 	ret

01009a5c <__sclose>:
 1009a5c:	2940038f 	ldh	r5,14(r5)
 1009a60:	100b2981 	jmpi	100b298 <_close_r>

01009a64 <strcmp>:
 1009a64:	2144b03a 	or	r2,r4,r5
 1009a68:	108000cc 	andi	r2,r2,3
 1009a6c:	1000171e 	bne	r2,zero,1009acc <strcmp+0x68>
 1009a70:	20800017 	ldw	r2,0(r4)
 1009a74:	28c00017 	ldw	r3,0(r5)
 1009a78:	10c0141e 	bne	r2,r3,1009acc <strcmp+0x68>
 1009a7c:	027fbff4 	movhi	r9,65279
 1009a80:	4a7fbfc4 	addi	r9,r9,-257
 1009a84:	0086303a 	nor	r3,zero,r2
 1009a88:	02202074 	movhi	r8,32897
 1009a8c:	1245883a 	add	r2,r2,r9
 1009a90:	42202004 	addi	r8,r8,-32640
 1009a94:	10c4703a 	and	r2,r2,r3
 1009a98:	1204703a 	and	r2,r2,r8
 1009a9c:	10000226 	beq	r2,zero,1009aa8 <strcmp+0x44>
 1009aa0:	00002306 	br	1009b30 <strcmp+0xcc>
 1009aa4:	1000221e 	bne	r2,zero,1009b30 <strcmp+0xcc>
 1009aa8:	21000104 	addi	r4,r4,4
 1009aac:	20c00017 	ldw	r3,0(r4)
 1009ab0:	29400104 	addi	r5,r5,4
 1009ab4:	29800017 	ldw	r6,0(r5)
 1009ab8:	1a4f883a 	add	r7,r3,r9
 1009abc:	00c4303a 	nor	r2,zero,r3
 1009ac0:	3884703a 	and	r2,r7,r2
 1009ac4:	1204703a 	and	r2,r2,r8
 1009ac8:	19bff626 	beq	r3,r6,1009aa4 <__alt_data_end+0xff809aa4>
 1009acc:	20800003 	ldbu	r2,0(r4)
 1009ad0:	10c03fcc 	andi	r3,r2,255
 1009ad4:	18c0201c 	xori	r3,r3,128
 1009ad8:	18ffe004 	addi	r3,r3,-128
 1009adc:	18000c26 	beq	r3,zero,1009b10 <strcmp+0xac>
 1009ae0:	29800007 	ldb	r6,0(r5)
 1009ae4:	19800326 	beq	r3,r6,1009af4 <strcmp+0x90>
 1009ae8:	00001306 	br	1009b38 <strcmp+0xd4>
 1009aec:	29800007 	ldb	r6,0(r5)
 1009af0:	11800b1e 	bne	r2,r6,1009b20 <strcmp+0xbc>
 1009af4:	21000044 	addi	r4,r4,1
 1009af8:	20c00003 	ldbu	r3,0(r4)
 1009afc:	29400044 	addi	r5,r5,1
 1009b00:	18803fcc 	andi	r2,r3,255
 1009b04:	1080201c 	xori	r2,r2,128
 1009b08:	10bfe004 	addi	r2,r2,-128
 1009b0c:	103ff71e 	bne	r2,zero,1009aec <__alt_data_end+0xff809aec>
 1009b10:	0007883a 	mov	r3,zero
 1009b14:	28800003 	ldbu	r2,0(r5)
 1009b18:	1885c83a 	sub	r2,r3,r2
 1009b1c:	f800283a 	ret
 1009b20:	28800003 	ldbu	r2,0(r5)
 1009b24:	18c03fcc 	andi	r3,r3,255
 1009b28:	1885c83a 	sub	r2,r3,r2
 1009b2c:	f800283a 	ret
 1009b30:	0005883a 	mov	r2,zero
 1009b34:	f800283a 	ret
 1009b38:	10c03fcc 	andi	r3,r2,255
 1009b3c:	003ff506 	br	1009b14 <__alt_data_end+0xff809b14>

01009b40 <__sprint_r.part.0>:
 1009b40:	28801917 	ldw	r2,100(r5)
 1009b44:	defff604 	addi	sp,sp,-40
 1009b48:	dd400515 	stw	r21,20(sp)
 1009b4c:	dfc00915 	stw	ra,36(sp)
 1009b50:	df000815 	stw	fp,32(sp)
 1009b54:	ddc00715 	stw	r23,28(sp)
 1009b58:	dd800615 	stw	r22,24(sp)
 1009b5c:	dd000415 	stw	r20,16(sp)
 1009b60:	dcc00315 	stw	r19,12(sp)
 1009b64:	dc800215 	stw	r18,8(sp)
 1009b68:	dc400115 	stw	r17,4(sp)
 1009b6c:	dc000015 	stw	r16,0(sp)
 1009b70:	1088000c 	andi	r2,r2,8192
 1009b74:	302b883a 	mov	r21,r6
 1009b78:	10002e26 	beq	r2,zero,1009c34 <__sprint_r.part.0+0xf4>
 1009b7c:	30800217 	ldw	r2,8(r6)
 1009b80:	35800017 	ldw	r22,0(r6)
 1009b84:	10002926 	beq	r2,zero,1009c2c <__sprint_r.part.0+0xec>
 1009b88:	2827883a 	mov	r19,r5
 1009b8c:	2029883a 	mov	r20,r4
 1009b90:	b5c00104 	addi	r23,r22,4
 1009b94:	04bfffc4 	movi	r18,-1
 1009b98:	bc400017 	ldw	r17,0(r23)
 1009b9c:	b4000017 	ldw	r16,0(r22)
 1009ba0:	0039883a 	mov	fp,zero
 1009ba4:	8822d0ba 	srli	r17,r17,2
 1009ba8:	8800031e 	bne	r17,zero,1009bb8 <__sprint_r.part.0+0x78>
 1009bac:	00001806 	br	1009c10 <__sprint_r.part.0+0xd0>
 1009bb0:	84000104 	addi	r16,r16,4
 1009bb4:	8f001526 	beq	r17,fp,1009c0c <__sprint_r.part.0+0xcc>
 1009bb8:	81400017 	ldw	r5,0(r16)
 1009bbc:	980d883a 	mov	r6,r19
 1009bc0:	a009883a 	mov	r4,r20
 1009bc4:	100b6300 	call	100b630 <_fputwc_r>
 1009bc8:	e7000044 	addi	fp,fp,1
 1009bcc:	14bff81e 	bne	r2,r18,1009bb0 <__alt_data_end+0xff809bb0>
 1009bd0:	9005883a 	mov	r2,r18
 1009bd4:	a8000215 	stw	zero,8(r21)
 1009bd8:	a8000115 	stw	zero,4(r21)
 1009bdc:	dfc00917 	ldw	ra,36(sp)
 1009be0:	df000817 	ldw	fp,32(sp)
 1009be4:	ddc00717 	ldw	r23,28(sp)
 1009be8:	dd800617 	ldw	r22,24(sp)
 1009bec:	dd400517 	ldw	r21,20(sp)
 1009bf0:	dd000417 	ldw	r20,16(sp)
 1009bf4:	dcc00317 	ldw	r19,12(sp)
 1009bf8:	dc800217 	ldw	r18,8(sp)
 1009bfc:	dc400117 	ldw	r17,4(sp)
 1009c00:	dc000017 	ldw	r16,0(sp)
 1009c04:	dec00a04 	addi	sp,sp,40
 1009c08:	f800283a 	ret
 1009c0c:	a8800217 	ldw	r2,8(r21)
 1009c10:	8c63883a 	add	r17,r17,r17
 1009c14:	8c63883a 	add	r17,r17,r17
 1009c18:	1445c83a 	sub	r2,r2,r17
 1009c1c:	a8800215 	stw	r2,8(r21)
 1009c20:	b5800204 	addi	r22,r22,8
 1009c24:	bdc00204 	addi	r23,r23,8
 1009c28:	103fdb1e 	bne	r2,zero,1009b98 <__alt_data_end+0xff809b98>
 1009c2c:	0005883a 	mov	r2,zero
 1009c30:	003fe806 	br	1009bd4 <__alt_data_end+0xff809bd4>
 1009c34:	1006ca00 	call	1006ca0 <__sfvwrite_r>
 1009c38:	003fe606 	br	1009bd4 <__alt_data_end+0xff809bd4>

01009c3c <__sprint_r>:
 1009c3c:	30c00217 	ldw	r3,8(r6)
 1009c40:	18000126 	beq	r3,zero,1009c48 <__sprint_r+0xc>
 1009c44:	1009b401 	jmpi	1009b40 <__sprint_r.part.0>
 1009c48:	30000115 	stw	zero,4(r6)
 1009c4c:	0005883a 	mov	r2,zero
 1009c50:	f800283a 	ret

01009c54 <___vfiprintf_internal_r>:
 1009c54:	deffca04 	addi	sp,sp,-216
 1009c58:	dd403115 	stw	r21,196(sp)
 1009c5c:	dfc03515 	stw	ra,212(sp)
 1009c60:	df003415 	stw	fp,208(sp)
 1009c64:	ddc03315 	stw	r23,204(sp)
 1009c68:	dd803215 	stw	r22,200(sp)
 1009c6c:	dd003015 	stw	r20,192(sp)
 1009c70:	dcc02f15 	stw	r19,188(sp)
 1009c74:	dc802e15 	stw	r18,184(sp)
 1009c78:	dc402d15 	stw	r17,180(sp)
 1009c7c:	dc002c15 	stw	r16,176(sp)
 1009c80:	d9002115 	stw	r4,132(sp)
 1009c84:	d9402015 	stw	r5,128(sp)
 1009c88:	d9c02215 	stw	r7,136(sp)
 1009c8c:	302b883a 	mov	r21,r6
 1009c90:	20000226 	beq	r4,zero,1009c9c <___vfiprintf_internal_r+0x48>
 1009c94:	20800e17 	ldw	r2,56(r4)
 1009c98:	1000cf26 	beq	r2,zero,1009fd8 <___vfiprintf_internal_r+0x384>
 1009c9c:	d8c02017 	ldw	r3,128(sp)
 1009ca0:	1880030b 	ldhu	r2,12(r3)
 1009ca4:	10c8000c 	andi	r3,r2,8192
 1009ca8:	1800071e 	bne	r3,zero,1009cc8 <___vfiprintf_internal_r+0x74>
 1009cac:	d9402017 	ldw	r5,128(sp)
 1009cb0:	00f7ffc4 	movi	r3,-8193
 1009cb4:	10880014 	ori	r2,r2,8192
 1009cb8:	29001917 	ldw	r4,100(r5)
 1009cbc:	2880030d 	sth	r2,12(r5)
 1009cc0:	20c6703a 	and	r3,r4,r3
 1009cc4:	28c01915 	stw	r3,100(r5)
 1009cc8:	10c0020c 	andi	r3,r2,8
 1009ccc:	1800a526 	beq	r3,zero,1009f64 <___vfiprintf_internal_r+0x310>
 1009cd0:	d9002017 	ldw	r4,128(sp)
 1009cd4:	20c00417 	ldw	r3,16(r4)
 1009cd8:	1800a226 	beq	r3,zero,1009f64 <___vfiprintf_internal_r+0x310>
 1009cdc:	1080068c 	andi	r2,r2,26
 1009ce0:	00c00284 	movi	r3,10
 1009ce4:	10c0a826 	beq	r2,r3,1009f88 <___vfiprintf_internal_r+0x334>
 1009ce8:	d9001a04 	addi	r4,sp,104
 1009cec:	d94019c4 	addi	r5,sp,103
 1009cf0:	04804074 	movhi	r18,257
 1009cf4:	2145c83a 	sub	r2,r4,r5
 1009cf8:	9488c204 	addi	r18,r18,8968
 1009cfc:	d9001e15 	stw	r4,120(sp)
 1009d00:	d9401f15 	stw	r5,124(sp)
 1009d04:	dec01a15 	stw	sp,104(sp)
 1009d08:	d8001c15 	stw	zero,112(sp)
 1009d0c:	d8001b15 	stw	zero,108(sp)
 1009d10:	d811883a 	mov	r8,sp
 1009d14:	d8002615 	stw	zero,152(sp)
 1009d18:	d8002415 	stw	zero,144(sp)
 1009d1c:	d8802815 	stw	r2,160(sp)
 1009d20:	a82d883a 	mov	r22,r21
 1009d24:	b0800007 	ldb	r2,0(r22)
 1009d28:	10040d26 	beq	r2,zero,100ad60 <___vfiprintf_internal_r+0x110c>
 1009d2c:	00c00944 	movi	r3,37
 1009d30:	b029883a 	mov	r20,r22
 1009d34:	10c0021e 	bne	r2,r3,1009d40 <___vfiprintf_internal_r+0xec>
 1009d38:	00001606 	br	1009d94 <___vfiprintf_internal_r+0x140>
 1009d3c:	10c00326 	beq	r2,r3,1009d4c <___vfiprintf_internal_r+0xf8>
 1009d40:	a5000044 	addi	r20,r20,1
 1009d44:	a0800007 	ldb	r2,0(r20)
 1009d48:	103ffc1e 	bne	r2,zero,1009d3c <__alt_data_end+0xff809d3c>
 1009d4c:	a5a1c83a 	sub	r16,r20,r22
 1009d50:	80001026 	beq	r16,zero,1009d94 <___vfiprintf_internal_r+0x140>
 1009d54:	d8c01c17 	ldw	r3,112(sp)
 1009d58:	d8801b17 	ldw	r2,108(sp)
 1009d5c:	45800015 	stw	r22,0(r8)
 1009d60:	80c7883a 	add	r3,r16,r3
 1009d64:	10800044 	addi	r2,r2,1
 1009d68:	44000115 	stw	r16,4(r8)
 1009d6c:	d8c01c15 	stw	r3,112(sp)
 1009d70:	d8801b15 	stw	r2,108(sp)
 1009d74:	010001c4 	movi	r4,7
 1009d78:	2080750e 	bge	r4,r2,1009f50 <___vfiprintf_internal_r+0x2fc>
 1009d7c:	1803951e 	bne	r3,zero,100abd4 <___vfiprintf_internal_r+0xf80>
 1009d80:	d8c02417 	ldw	r3,144(sp)
 1009d84:	d8001b15 	stw	zero,108(sp)
 1009d88:	d811883a 	mov	r8,sp
 1009d8c:	1c07883a 	add	r3,r3,r16
 1009d90:	d8c02415 	stw	r3,144(sp)
 1009d94:	a0800007 	ldb	r2,0(r20)
 1009d98:	1002e026 	beq	r2,zero,100a91c <___vfiprintf_internal_r+0xcc8>
 1009d9c:	a5800044 	addi	r22,r20,1
 1009da0:	a0c00047 	ldb	r3,1(r20)
 1009da4:	d8001d85 	stb	zero,118(sp)
 1009da8:	0027883a 	mov	r19,zero
 1009dac:	d8002305 	stb	zero,140(sp)
 1009db0:	043fffc4 	movi	r16,-1
 1009db4:	d8002515 	stw	zero,148(sp)
 1009db8:	0023883a 	mov	r17,zero
 1009dbc:	05001604 	movi	r20,88
 1009dc0:	05400244 	movi	r21,9
 1009dc4:	402f883a 	mov	r23,r8
 1009dc8:	b5800044 	addi	r22,r22,1
 1009dcc:	18bff804 	addi	r2,r3,-32
 1009dd0:	a0827736 	bltu	r20,r2,100a7b0 <___vfiprintf_internal_r+0xb5c>
 1009dd4:	100490ba 	slli	r2,r2,2
 1009dd8:	01004074 	movhi	r4,257
 1009ddc:	21277b04 	addi	r4,r4,-25108
 1009de0:	1105883a 	add	r2,r2,r4
 1009de4:	10800017 	ldw	r2,0(r2)
 1009de8:	1000683a 	jmp	r2
 1009dec:	0100a4b0 	cmpltui	r4,zero,658
 1009df0:	0100a7b0 	cmpltui	r4,zero,670
 1009df4:	0100a7b0 	cmpltui	r4,zero,670
 1009df8:	0100a4cc 	andi	r4,zero,659
 1009dfc:	0100a7b0 	cmpltui	r4,zero,670
 1009e00:	0100a7b0 	cmpltui	r4,zero,670
 1009e04:	0100a7b0 	cmpltui	r4,zero,670
 1009e08:	0100a7b0 	cmpltui	r4,zero,670
 1009e0c:	0100a7b0 	cmpltui	r4,zero,670
 1009e10:	0100a7b0 	cmpltui	r4,zero,670
 1009e14:	0100a6d4 	movui	r4,667
 1009e18:	0100a6f8 	rdprs	r4,zero,667
 1009e1c:	0100a7b0 	cmpltui	r4,zero,670
 1009e20:	01009ff0 	cmpltui	r4,zero,639
 1009e24:	0100a70c 	andi	r4,zero,668
 1009e28:	0100a7b0 	cmpltui	r4,zero,670
 1009e2c:	0100a4d8 	cmpnei	r4,zero,659
 1009e30:	0100a4e4 	muli	r4,zero,659
 1009e34:	0100a4e4 	muli	r4,zero,659
 1009e38:	0100a4e4 	muli	r4,zero,659
 1009e3c:	0100a4e4 	muli	r4,zero,659
 1009e40:	0100a4e4 	muli	r4,zero,659
 1009e44:	0100a4e4 	muli	r4,zero,659
 1009e48:	0100a4e4 	muli	r4,zero,659
 1009e4c:	0100a4e4 	muli	r4,zero,659
 1009e50:	0100a4e4 	muli	r4,zero,659
 1009e54:	0100a7b0 	cmpltui	r4,zero,670
 1009e58:	0100a7b0 	cmpltui	r4,zero,670
 1009e5c:	0100a7b0 	cmpltui	r4,zero,670
 1009e60:	0100a7b0 	cmpltui	r4,zero,670
 1009e64:	0100a7b0 	cmpltui	r4,zero,670
 1009e68:	0100a7b0 	cmpltui	r4,zero,670
 1009e6c:	0100a7b0 	cmpltui	r4,zero,670
 1009e70:	0100a7b0 	cmpltui	r4,zero,670
 1009e74:	0100a7b0 	cmpltui	r4,zero,670
 1009e78:	0100a7b0 	cmpltui	r4,zero,670
 1009e7c:	0100a524 	muli	r4,zero,660
 1009e80:	0100a7b0 	cmpltui	r4,zero,670
 1009e84:	0100a7b0 	cmpltui	r4,zero,670
 1009e88:	0100a7b0 	cmpltui	r4,zero,670
 1009e8c:	0100a7b0 	cmpltui	r4,zero,670
 1009e90:	0100a7b0 	cmpltui	r4,zero,670
 1009e94:	0100a7b0 	cmpltui	r4,zero,670
 1009e98:	0100a7b0 	cmpltui	r4,zero,670
 1009e9c:	0100a7b0 	cmpltui	r4,zero,670
 1009ea0:	0100a7b0 	cmpltui	r4,zero,670
 1009ea4:	0100a7b0 	cmpltui	r4,zero,670
 1009ea8:	0100a560 	cmpeqi	r4,zero,661
 1009eac:	0100a7b0 	cmpltui	r4,zero,670
 1009eb0:	0100a7b0 	cmpltui	r4,zero,670
 1009eb4:	0100a7b0 	cmpltui	r4,zero,670
 1009eb8:	0100a7b0 	cmpltui	r4,zero,670
 1009ebc:	0100a7b0 	cmpltui	r4,zero,670
 1009ec0:	0100a5bc 	xorhi	r4,zero,662
 1009ec4:	0100a7b0 	cmpltui	r4,zero,670
 1009ec8:	0100a7b0 	cmpltui	r4,zero,670
 1009ecc:	0100a630 	cmpltui	r4,zero,664
 1009ed0:	0100a7b0 	cmpltui	r4,zero,670
 1009ed4:	0100a7b0 	cmpltui	r4,zero,670
 1009ed8:	0100a7b0 	cmpltui	r4,zero,670
 1009edc:	0100a7b0 	cmpltui	r4,zero,670
 1009ee0:	0100a7b0 	cmpltui	r4,zero,670
 1009ee4:	0100a7b0 	cmpltui	r4,zero,670
 1009ee8:	0100a7b0 	cmpltui	r4,zero,670
 1009eec:	0100a7b0 	cmpltui	r4,zero,670
 1009ef0:	0100a7b0 	cmpltui	r4,zero,670
 1009ef4:	0100a7b0 	cmpltui	r4,zero,670
 1009ef8:	0100a3d8 	cmpnei	r4,zero,655
 1009efc:	0100a408 	cmpgei	r4,zero,656
 1009f00:	0100a7b0 	cmpltui	r4,zero,670
 1009f04:	0100a7b0 	cmpltui	r4,zero,670
 1009f08:	0100a7b0 	cmpltui	r4,zero,670
 1009f0c:	0100a758 	cmpnei	r4,zero,669
 1009f10:	0100a408 	cmpgei	r4,zero,656
 1009f14:	0100a7b0 	cmpltui	r4,zero,670
 1009f18:	0100a7b0 	cmpltui	r4,zero,670
 1009f1c:	0100a2b0 	cmpltui	r4,zero,650
 1009f20:	0100a7b0 	cmpltui	r4,zero,670
 1009f24:	0100a2c4 	movi	r4,651
 1009f28:	0100a2fc 	xorhi	r4,zero,651
 1009f2c:	01009ffc 	xorhi	r4,zero,639
 1009f30:	0100a2a4 	muli	r4,zero,650
 1009f34:	0100a7b0 	cmpltui	r4,zero,670
 1009f38:	0100a670 	cmpltui	r4,zero,665
 1009f3c:	0100a7b0 	cmpltui	r4,zero,670
 1009f40:	0100a6bc 	xorhi	r4,zero,666
 1009f44:	0100a7b0 	cmpltui	r4,zero,670
 1009f48:	0100a7b0 	cmpltui	r4,zero,670
 1009f4c:	0100a380 	call	100a38 <__alt_mem_onchip_memory2_0+0x100a38>
 1009f50:	42000204 	addi	r8,r8,8
 1009f54:	d8c02417 	ldw	r3,144(sp)
 1009f58:	1c07883a 	add	r3,r3,r16
 1009f5c:	d8c02415 	stw	r3,144(sp)
 1009f60:	003f8c06 	br	1009d94 <__alt_data_end+0xff809d94>
 1009f64:	d9402017 	ldw	r5,128(sp)
 1009f68:	d9002117 	ldw	r4,132(sp)
 1009f6c:	10048100 	call	1004810 <__swsetup_r>
 1009f70:	1003c11e 	bne	r2,zero,100ae78 <___vfiprintf_internal_r+0x1224>
 1009f74:	d9402017 	ldw	r5,128(sp)
 1009f78:	00c00284 	movi	r3,10
 1009f7c:	2880030b 	ldhu	r2,12(r5)
 1009f80:	1080068c 	andi	r2,r2,26
 1009f84:	10ff581e 	bne	r2,r3,1009ce8 <__alt_data_end+0xff809ce8>
 1009f88:	d8c02017 	ldw	r3,128(sp)
 1009f8c:	1880038f 	ldh	r2,14(r3)
 1009f90:	103f5516 	blt	r2,zero,1009ce8 <__alt_data_end+0xff809ce8>
 1009f94:	d9c02217 	ldw	r7,136(sp)
 1009f98:	d9002117 	ldw	r4,132(sp)
 1009f9c:	a80d883a 	mov	r6,r21
 1009fa0:	180b883a 	mov	r5,r3
 1009fa4:	100b17c0 	call	100b17c <__sbprintf>
 1009fa8:	dfc03517 	ldw	ra,212(sp)
 1009fac:	df003417 	ldw	fp,208(sp)
 1009fb0:	ddc03317 	ldw	r23,204(sp)
 1009fb4:	dd803217 	ldw	r22,200(sp)
 1009fb8:	dd403117 	ldw	r21,196(sp)
 1009fbc:	dd003017 	ldw	r20,192(sp)
 1009fc0:	dcc02f17 	ldw	r19,188(sp)
 1009fc4:	dc802e17 	ldw	r18,184(sp)
 1009fc8:	dc402d17 	ldw	r17,180(sp)
 1009fcc:	dc002c17 	ldw	r16,176(sp)
 1009fd0:	dec03604 	addi	sp,sp,216
 1009fd4:	f800283a 	ret
 1009fd8:	100681c0 	call	100681c <__sinit>
 1009fdc:	003f2f06 	br	1009c9c <__alt_data_end+0xff809c9c>
 1009fe0:	d8c02517 	ldw	r3,148(sp)
 1009fe4:	d8802215 	stw	r2,136(sp)
 1009fe8:	00c7c83a 	sub	r3,zero,r3
 1009fec:	d8c02515 	stw	r3,148(sp)
 1009ff0:	8c400114 	ori	r17,r17,4
 1009ff4:	b0c00007 	ldb	r3,0(r22)
 1009ff8:	003f7306 	br	1009dc8 <__alt_data_end+0xff809dc8>
 1009ffc:	00800c04 	movi	r2,48
 100a000:	d9402217 	ldw	r5,136(sp)
 100a004:	d8801d05 	stb	r2,116(sp)
 100a008:	00801e04 	movi	r2,120
 100a00c:	d8801d45 	stb	r2,117(sp)
 100a010:	d8001d85 	stb	zero,118(sp)
 100a014:	b811883a 	mov	r8,r23
 100a018:	28c00104 	addi	r3,r5,4
 100a01c:	2cc00017 	ldw	r19,0(r5)
 100a020:	0029883a 	mov	r20,zero
 100a024:	88800094 	ori	r2,r17,2
 100a028:	80032516 	blt	r16,zero,100acc0 <___vfiprintf_internal_r+0x106c>
 100a02c:	00bfdfc4 	movi	r2,-129
 100a030:	88a2703a 	and	r17,r17,r2
 100a034:	d8c02215 	stw	r3,136(sp)
 100a038:	8c400094 	ori	r17,r17,2
 100a03c:	98032a1e 	bne	r19,zero,100ace8 <___vfiprintf_internal_r+0x1094>
 100a040:	00804074 	movhi	r2,257
 100a044:	10886104 	addi	r2,r2,8580
 100a048:	d8802615 	stw	r2,152(sp)
 100a04c:	002b883a 	mov	r21,zero
 100a050:	8001741e 	bne	r16,zero,100a624 <___vfiprintf_internal_r+0x9d0>
 100a054:	0021883a 	mov	r16,zero
 100a058:	0029883a 	mov	r20,zero
 100a05c:	ddc01a04 	addi	r23,sp,104
 100a060:	8027883a 	mov	r19,r16
 100a064:	8500010e 	bge	r16,r20,100a06c <___vfiprintf_internal_r+0x418>
 100a068:	a027883a 	mov	r19,r20
 100a06c:	ad403fcc 	andi	r21,r21,255
 100a070:	ad40201c 	xori	r21,r21,128
 100a074:	ad7fe004 	addi	r21,r21,-128
 100a078:	a8000126 	beq	r21,zero,100a080 <___vfiprintf_internal_r+0x42c>
 100a07c:	9cc00044 	addi	r19,r19,1
 100a080:	89c0008c 	andi	r7,r17,2
 100a084:	38000126 	beq	r7,zero,100a08c <___vfiprintf_internal_r+0x438>
 100a088:	9cc00084 	addi	r19,r19,2
 100a08c:	88c0210c 	andi	r3,r17,132
 100a090:	1801dd1e 	bne	r3,zero,100a808 <___vfiprintf_internal_r+0xbb4>
 100a094:	d9402517 	ldw	r5,148(sp)
 100a098:	2cebc83a 	sub	r21,r5,r19
 100a09c:	0541da0e 	bge	zero,r21,100a808 <___vfiprintf_internal_r+0xbb4>
 100a0a0:	07000404 	movi	fp,16
 100a0a4:	d8801c17 	ldw	r2,112(sp)
 100a0a8:	e543be0e 	bge	fp,r21,100afa4 <___vfiprintf_internal_r+0x1350>
 100a0ac:	01404074 	movhi	r5,257
 100a0b0:	2948c604 	addi	r5,r5,8984
 100a0b4:	dc002715 	stw	r16,156(sp)
 100a0b8:	d9801b17 	ldw	r6,108(sp)
 100a0bc:	a821883a 	mov	r16,r21
 100a0c0:	d9402315 	stw	r5,140(sp)
 100a0c4:	028001c4 	movi	r10,7
 100a0c8:	d9c02915 	stw	r7,164(sp)
 100a0cc:	182b883a 	mov	r21,r3
 100a0d0:	00000506 	br	100a0e8 <___vfiprintf_internal_r+0x494>
 100a0d4:	31000084 	addi	r4,r6,2
 100a0d8:	42000204 	addi	r8,r8,8
 100a0dc:	180d883a 	mov	r6,r3
 100a0e0:	843ffc04 	addi	r16,r16,-16
 100a0e4:	e4000f0e 	bge	fp,r16,100a124 <___vfiprintf_internal_r+0x4d0>
 100a0e8:	01004074 	movhi	r4,257
 100a0ec:	10800404 	addi	r2,r2,16
 100a0f0:	30c00044 	addi	r3,r6,1
 100a0f4:	2108c604 	addi	r4,r4,8984
 100a0f8:	41000015 	stw	r4,0(r8)
 100a0fc:	47000115 	stw	fp,4(r8)
 100a100:	d8801c15 	stw	r2,112(sp)
 100a104:	d8c01b15 	stw	r3,108(sp)
 100a108:	50fff20e 	bge	r10,r3,100a0d4 <__alt_data_end+0xff80a0d4>
 100a10c:	1001b21e 	bne	r2,zero,100a7d8 <___vfiprintf_internal_r+0xb84>
 100a110:	843ffc04 	addi	r16,r16,-16
 100a114:	000d883a 	mov	r6,zero
 100a118:	01000044 	movi	r4,1
 100a11c:	d811883a 	mov	r8,sp
 100a120:	e43ff116 	blt	fp,r16,100a0e8 <__alt_data_end+0xff80a0e8>
 100a124:	a807883a 	mov	r3,r21
 100a128:	d9c02917 	ldw	r7,164(sp)
 100a12c:	802b883a 	mov	r21,r16
 100a130:	dc002717 	ldw	r16,156(sp)
 100a134:	d9402317 	ldw	r5,140(sp)
 100a138:	a885883a 	add	r2,r21,r2
 100a13c:	45400115 	stw	r21,4(r8)
 100a140:	41400015 	stw	r5,0(r8)
 100a144:	d8801c15 	stw	r2,112(sp)
 100a148:	d9001b15 	stw	r4,108(sp)
 100a14c:	014001c4 	movi	r5,7
 100a150:	29026216 	blt	r5,r4,100aadc <___vfiprintf_internal_r+0xe88>
 100a154:	d9801d87 	ldb	r6,118(sp)
 100a158:	42000204 	addi	r8,r8,8
 100a15c:	21400044 	addi	r5,r4,1
 100a160:	3001ae1e 	bne	r6,zero,100a81c <___vfiprintf_internal_r+0xbc8>
 100a164:	3801bb26 	beq	r7,zero,100a854 <___vfiprintf_internal_r+0xc00>
 100a168:	d9001d04 	addi	r4,sp,116
 100a16c:	10800084 	addi	r2,r2,2
 100a170:	41000015 	stw	r4,0(r8)
 100a174:	01000084 	movi	r4,2
 100a178:	41000115 	stw	r4,4(r8)
 100a17c:	d8801c15 	stw	r2,112(sp)
 100a180:	d9401b15 	stw	r5,108(sp)
 100a184:	010001c4 	movi	r4,7
 100a188:	2142680e 	bge	r4,r5,100ab2c <___vfiprintf_internal_r+0xed8>
 100a18c:	1002b11e 	bne	r2,zero,100ac54 <___vfiprintf_internal_r+0x1000>
 100a190:	01802004 	movi	r6,128
 100a194:	01400044 	movi	r5,1
 100a198:	0009883a 	mov	r4,zero
 100a19c:	d811883a 	mov	r8,sp
 100a1a0:	1981ae1e 	bne	r3,r6,100a85c <___vfiprintf_internal_r+0xc08>
 100a1a4:	d8c02517 	ldw	r3,148(sp)
 100a1a8:	1cf9c83a 	sub	fp,r3,r19
 100a1ac:	0701ab0e 	bge	zero,fp,100a85c <___vfiprintf_internal_r+0xc08>
 100a1b0:	05400404 	movi	r21,16
 100a1b4:	af03a90e 	bge	r21,fp,100b05c <___vfiprintf_internal_r+0x1408>
 100a1b8:	01404074 	movhi	r5,257
 100a1bc:	2948c204 	addi	r5,r5,8968
 100a1c0:	d9402315 	stw	r5,140(sp)
 100a1c4:	01c001c4 	movi	r7,7
 100a1c8:	00000506 	br	100a1e0 <___vfiprintf_internal_r+0x58c>
 100a1cc:	21800084 	addi	r6,r4,2
 100a1d0:	42000204 	addi	r8,r8,8
 100a1d4:	1809883a 	mov	r4,r3
 100a1d8:	e73ffc04 	addi	fp,fp,-16
 100a1dc:	af000d0e 	bge	r21,fp,100a214 <___vfiprintf_internal_r+0x5c0>
 100a1e0:	10800404 	addi	r2,r2,16
 100a1e4:	20c00044 	addi	r3,r4,1
 100a1e8:	44800015 	stw	r18,0(r8)
 100a1ec:	45400115 	stw	r21,4(r8)
 100a1f0:	d8801c15 	stw	r2,112(sp)
 100a1f4:	d8c01b15 	stw	r3,108(sp)
 100a1f8:	38fff40e 	bge	r7,r3,100a1cc <__alt_data_end+0xff80a1cc>
 100a1fc:	10022b1e 	bne	r2,zero,100aaac <___vfiprintf_internal_r+0xe58>
 100a200:	e73ffc04 	addi	fp,fp,-16
 100a204:	01800044 	movi	r6,1
 100a208:	0009883a 	mov	r4,zero
 100a20c:	d811883a 	mov	r8,sp
 100a210:	af3ff316 	blt	r21,fp,100a1e0 <__alt_data_end+0xff80a1e0>
 100a214:	d8c02317 	ldw	r3,140(sp)
 100a218:	1705883a 	add	r2,r2,fp
 100a21c:	47000115 	stw	fp,4(r8)
 100a220:	40c00015 	stw	r3,0(r8)
 100a224:	d8801c15 	stw	r2,112(sp)
 100a228:	d9801b15 	stw	r6,108(sp)
 100a22c:	00c001c4 	movi	r3,7
 100a230:	19829416 	blt	r3,r6,100ac84 <___vfiprintf_internal_r+0x1030>
 100a234:	8521c83a 	sub	r16,r16,r20
 100a238:	42000204 	addi	r8,r8,8
 100a23c:	31400044 	addi	r5,r6,1
 100a240:	3009883a 	mov	r4,r6
 100a244:	04018716 	blt	zero,r16,100a864 <___vfiprintf_internal_r+0xc10>
 100a248:	a085883a 	add	r2,r20,r2
 100a24c:	45c00015 	stw	r23,0(r8)
 100a250:	45000115 	stw	r20,4(r8)
 100a254:	d8801c15 	stw	r2,112(sp)
 100a258:	d9401b15 	stw	r5,108(sp)
 100a25c:	00c001c4 	movi	r3,7
 100a260:	1941c20e 	bge	r3,r5,100a96c <___vfiprintf_internal_r+0xd18>
 100a264:	1002531e 	bne	r2,zero,100abb4 <___vfiprintf_internal_r+0xf60>
 100a268:	d8001b15 	stw	zero,108(sp)
 100a26c:	8c40010c 	andi	r17,r17,4
 100a270:	88023226 	beq	r17,zero,100ab3c <___vfiprintf_internal_r+0xee8>
 100a274:	d9002517 	ldw	r4,148(sp)
 100a278:	24e3c83a 	sub	r17,r4,r19
 100a27c:	04432916 	blt	zero,r17,100af24 <___vfiprintf_internal_r+0x12d0>
 100a280:	d8802517 	ldw	r2,148(sp)
 100a284:	14c0010e 	bge	r2,r19,100a28c <___vfiprintf_internal_r+0x638>
 100a288:	9805883a 	mov	r2,r19
 100a28c:	d8c02417 	ldw	r3,144(sp)
 100a290:	1887883a 	add	r3,r3,r2
 100a294:	d8c02415 	stw	r3,144(sp)
 100a298:	d8001b15 	stw	zero,108(sp)
 100a29c:	d811883a 	mov	r8,sp
 100a2a0:	003ea006 	br	1009d24 <__alt_data_end+0xff809d24>
 100a2a4:	8c400814 	ori	r17,r17,32
 100a2a8:	b0c00007 	ldb	r3,0(r22)
 100a2ac:	003ec606 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100a2b0:	b0c00007 	ldb	r3,0(r22)
 100a2b4:	00801b04 	movi	r2,108
 100a2b8:	18832026 	beq	r3,r2,100af3c <___vfiprintf_internal_r+0x12e8>
 100a2bc:	8c400414 	ori	r17,r17,16
 100a2c0:	003ec106 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100a2c4:	9cc03fcc 	andi	r19,r19,255
 100a2c8:	b811883a 	mov	r8,r23
 100a2cc:	9803981e 	bne	r19,zero,100b130 <___vfiprintf_internal_r+0x14dc>
 100a2d0:	8880080c 	andi	r2,r17,32
 100a2d4:	1002be26 	beq	r2,zero,100add0 <___vfiprintf_internal_r+0x117c>
 100a2d8:	d9002217 	ldw	r4,136(sp)
 100a2dc:	d9402417 	ldw	r5,144(sp)
 100a2e0:	20800017 	ldw	r2,0(r4)
 100a2e4:	2807d7fa 	srai	r3,r5,31
 100a2e8:	21000104 	addi	r4,r4,4
 100a2ec:	d9002215 	stw	r4,136(sp)
 100a2f0:	11400015 	stw	r5,0(r2)
 100a2f4:	10c00115 	stw	r3,4(r2)
 100a2f8:	003e8a06 	br	1009d24 <__alt_data_end+0xff809d24>
 100a2fc:	9cc03fcc 	andi	r19,r19,255
 100a300:	b811883a 	mov	r8,r23
 100a304:	9803871e 	bne	r19,zero,100b124 <___vfiprintf_internal_r+0x14d0>
 100a308:	8880080c 	andi	r2,r17,32
 100a30c:	10009a26 	beq	r2,zero,100a578 <___vfiprintf_internal_r+0x924>
 100a310:	d9002217 	ldw	r4,136(sp)
 100a314:	d8001d85 	stb	zero,118(sp)
 100a318:	20800204 	addi	r2,r4,8
 100a31c:	24c00017 	ldw	r19,0(r4)
 100a320:	25000117 	ldw	r20,4(r4)
 100a324:	8002a416 	blt	r16,zero,100adb8 <___vfiprintf_internal_r+0x1164>
 100a328:	013fdfc4 	movi	r4,-129
 100a32c:	9d06b03a 	or	r3,r19,r20
 100a330:	d8802215 	stw	r2,136(sp)
 100a334:	8922703a 	and	r17,r17,r4
 100a338:	18009b26 	beq	r3,zero,100a5a8 <___vfiprintf_internal_r+0x954>
 100a33c:	002b883a 	mov	r21,zero
 100a340:	ddc01a04 	addi	r23,sp,104
 100a344:	9806d0fa 	srli	r3,r19,3
 100a348:	a008977a 	slli	r4,r20,29
 100a34c:	a028d0fa 	srli	r20,r20,3
 100a350:	9cc001cc 	andi	r19,r19,7
 100a354:	98800c04 	addi	r2,r19,48
 100a358:	bdffffc4 	addi	r23,r23,-1
 100a35c:	20e6b03a 	or	r19,r4,r3
 100a360:	b8800005 	stb	r2,0(r23)
 100a364:	9d06b03a 	or	r3,r19,r20
 100a368:	183ff61e 	bne	r3,zero,100a344 <__alt_data_end+0xff80a344>
 100a36c:	88c0004c 	andi	r3,r17,1
 100a370:	18021f1e 	bne	r3,zero,100abf0 <___vfiprintf_internal_r+0xf9c>
 100a374:	d9401e17 	ldw	r5,120(sp)
 100a378:	2de9c83a 	sub	r20,r5,r23
 100a37c:	003f3806 	br	100a060 <__alt_data_end+0xff80a060>
 100a380:	9cc03fcc 	andi	r19,r19,255
 100a384:	b811883a 	mov	r8,r23
 100a388:	98034f1e 	bne	r19,zero,100b0c8 <___vfiprintf_internal_r+0x1474>
 100a38c:	00804074 	movhi	r2,257
 100a390:	10886104 	addi	r2,r2,8580
 100a394:	d8802615 	stw	r2,152(sp)
 100a398:	8880080c 	andi	r2,r17,32
 100a39c:	1000ac26 	beq	r2,zero,100a650 <___vfiprintf_internal_r+0x9fc>
 100a3a0:	d9002217 	ldw	r4,136(sp)
 100a3a4:	24c00017 	ldw	r19,0(r4)
 100a3a8:	25000117 	ldw	r20,4(r4)
 100a3ac:	21000204 	addi	r4,r4,8
 100a3b0:	d9002215 	stw	r4,136(sp)
 100a3b4:	8880004c 	andi	r2,r17,1
 100a3b8:	1001e726 	beq	r2,zero,100ab58 <___vfiprintf_internal_r+0xf04>
 100a3bc:	9d04b03a 	or	r2,r19,r20
 100a3c0:	10025c1e 	bne	r2,zero,100ad34 <___vfiprintf_internal_r+0x10e0>
 100a3c4:	d8001d85 	stb	zero,118(sp)
 100a3c8:	80024416 	blt	r16,zero,100acdc <___vfiprintf_internal_r+0x1088>
 100a3cc:	00bfdfc4 	movi	r2,-129
 100a3d0:	88a2703a 	and	r17,r17,r2
 100a3d4:	003f1d06 	br	100a04c <__alt_data_end+0xff80a04c>
 100a3d8:	d8c02217 	ldw	r3,136(sp)
 100a3dc:	04c00044 	movi	r19,1
 100a3e0:	b811883a 	mov	r8,r23
 100a3e4:	18800017 	ldw	r2,0(r3)
 100a3e8:	18c00104 	addi	r3,r3,4
 100a3ec:	d8001d85 	stb	zero,118(sp)
 100a3f0:	d8801005 	stb	r2,64(sp)
 100a3f4:	d8c02215 	stw	r3,136(sp)
 100a3f8:	9829883a 	mov	r20,r19
 100a3fc:	ddc01004 	addi	r23,sp,64
 100a400:	0021883a 	mov	r16,zero
 100a404:	003f1e06 	br	100a080 <__alt_data_end+0xff80a080>
 100a408:	9cc03fcc 	andi	r19,r19,255
 100a40c:	b811883a 	mov	r8,r23
 100a410:	9803331e 	bne	r19,zero,100b0e0 <___vfiprintf_internal_r+0x148c>
 100a414:	8880080c 	andi	r2,r17,32
 100a418:	10004826 	beq	r2,zero,100a53c <___vfiprintf_internal_r+0x8e8>
 100a41c:	d9002217 	ldw	r4,136(sp)
 100a420:	20800117 	ldw	r2,4(r4)
 100a424:	24c00017 	ldw	r19,0(r4)
 100a428:	21000204 	addi	r4,r4,8
 100a42c:	d9002215 	stw	r4,136(sp)
 100a430:	1029883a 	mov	r20,r2
 100a434:	10024c16 	blt	r2,zero,100ad68 <___vfiprintf_internal_r+0x1114>
 100a438:	dd401d83 	ldbu	r21,118(sp)
 100a43c:	80007116 	blt	r16,zero,100a604 <___vfiprintf_internal_r+0x9b0>
 100a440:	00ffdfc4 	movi	r3,-129
 100a444:	9d04b03a 	or	r2,r19,r20
 100a448:	88e2703a 	and	r17,r17,r3
 100a44c:	1000d126 	beq	r2,zero,100a794 <___vfiprintf_internal_r+0xb40>
 100a450:	a0023526 	beq	r20,zero,100ad28 <___vfiprintf_internal_r+0x10d4>
 100a454:	ddc01a04 	addi	r23,sp,104
 100a458:	4039883a 	mov	fp,r8
 100a45c:	9809883a 	mov	r4,r19
 100a460:	a00b883a 	mov	r5,r20
 100a464:	01800284 	movi	r6,10
 100a468:	000f883a 	mov	r7,zero
 100a46c:	100c1800 	call	100c180 <__umoddi3>
 100a470:	10800c04 	addi	r2,r2,48
 100a474:	bdffffc4 	addi	r23,r23,-1
 100a478:	9809883a 	mov	r4,r19
 100a47c:	a00b883a 	mov	r5,r20
 100a480:	b8800005 	stb	r2,0(r23)
 100a484:	01800284 	movi	r6,10
 100a488:	000f883a 	mov	r7,zero
 100a48c:	100bb840 	call	100bb84 <__udivdi3>
 100a490:	1027883a 	mov	r19,r2
 100a494:	10c4b03a 	or	r2,r2,r3
 100a498:	1829883a 	mov	r20,r3
 100a49c:	103fef1e 	bne	r2,zero,100a45c <__alt_data_end+0xff80a45c>
 100a4a0:	d9001e17 	ldw	r4,120(sp)
 100a4a4:	e011883a 	mov	r8,fp
 100a4a8:	25e9c83a 	sub	r20,r4,r23
 100a4ac:	003eec06 	br	100a060 <__alt_data_end+0xff80a060>
 100a4b0:	d8802307 	ldb	r2,140(sp)
 100a4b4:	1002361e 	bne	r2,zero,100ad90 <___vfiprintf_internal_r+0x113c>
 100a4b8:	00c00804 	movi	r3,32
 100a4bc:	d8c02305 	stb	r3,140(sp)
 100a4c0:	04c00044 	movi	r19,1
 100a4c4:	b0c00007 	ldb	r3,0(r22)
 100a4c8:	003e3f06 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100a4cc:	8c400054 	ori	r17,r17,1
 100a4d0:	b0c00007 	ldb	r3,0(r22)
 100a4d4:	003e3c06 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100a4d8:	8c402014 	ori	r17,r17,128
 100a4dc:	b0c00007 	ldb	r3,0(r22)
 100a4e0:	003e3906 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100a4e4:	dc002715 	stw	r16,156(sp)
 100a4e8:	d8002515 	stw	zero,148(sp)
 100a4ec:	1f3ff404 	addi	fp,r3,-48
 100a4f0:	0009883a 	mov	r4,zero
 100a4f4:	b021883a 	mov	r16,r22
 100a4f8:	01400284 	movi	r5,10
 100a4fc:	100c8f80 	call	100c8f8 <__mulsi3>
 100a500:	80c00007 	ldb	r3,0(r16)
 100a504:	e089883a 	add	r4,fp,r2
 100a508:	b5800044 	addi	r22,r22,1
 100a50c:	1f3ff404 	addi	fp,r3,-48
 100a510:	b021883a 	mov	r16,r22
 100a514:	af3ff82e 	bgeu	r21,fp,100a4f8 <__alt_data_end+0xff80a4f8>
 100a518:	d9002515 	stw	r4,148(sp)
 100a51c:	dc002717 	ldw	r16,156(sp)
 100a520:	003e2a06 	br	1009dcc <__alt_data_end+0xff809dcc>
 100a524:	9cc03fcc 	andi	r19,r19,255
 100a528:	b811883a 	mov	r8,r23
 100a52c:	9802e91e 	bne	r19,zero,100b0d4 <___vfiprintf_internal_r+0x1480>
 100a530:	8c400414 	ori	r17,r17,16
 100a534:	8880080c 	andi	r2,r17,32
 100a538:	103fb81e 	bne	r2,zero,100a41c <__alt_data_end+0xff80a41c>
 100a53c:	8880040c 	andi	r2,r17,16
 100a540:	10022e26 	beq	r2,zero,100adfc <___vfiprintf_internal_r+0x11a8>
 100a544:	d9402217 	ldw	r5,136(sp)
 100a548:	2cc00017 	ldw	r19,0(r5)
 100a54c:	29400104 	addi	r5,r5,4
 100a550:	d9402215 	stw	r5,136(sp)
 100a554:	9829d7fa 	srai	r20,r19,31
 100a558:	a005883a 	mov	r2,r20
 100a55c:	003fb506 	br	100a434 <__alt_data_end+0xff80a434>
 100a560:	9cc03fcc 	andi	r19,r19,255
 100a564:	b811883a 	mov	r8,r23
 100a568:	9802fa1e 	bne	r19,zero,100b154 <___vfiprintf_internal_r+0x1500>
 100a56c:	8c400414 	ori	r17,r17,16
 100a570:	8880080c 	andi	r2,r17,32
 100a574:	103f661e 	bne	r2,zero,100a310 <__alt_data_end+0xff80a310>
 100a578:	8880040c 	andi	r2,r17,16
 100a57c:	10020626 	beq	r2,zero,100ad98 <___vfiprintf_internal_r+0x1144>
 100a580:	d9402217 	ldw	r5,136(sp)
 100a584:	d8001d85 	stb	zero,118(sp)
 100a588:	0029883a 	mov	r20,zero
 100a58c:	28800104 	addi	r2,r5,4
 100a590:	2cc00017 	ldw	r19,0(r5)
 100a594:	80020816 	blt	r16,zero,100adb8 <___vfiprintf_internal_r+0x1164>
 100a598:	00ffdfc4 	movi	r3,-129
 100a59c:	d8802215 	stw	r2,136(sp)
 100a5a0:	88e2703a 	and	r17,r17,r3
 100a5a4:	983f651e 	bne	r19,zero,100a33c <__alt_data_end+0xff80a33c>
 100a5a8:	002b883a 	mov	r21,zero
 100a5ac:	8002cf26 	beq	r16,zero,100b0ec <___vfiprintf_internal_r+0x1498>
 100a5b0:	0027883a 	mov	r19,zero
 100a5b4:	0029883a 	mov	r20,zero
 100a5b8:	003f6106 	br	100a340 <__alt_data_end+0xff80a340>
 100a5bc:	9cc03fcc 	andi	r19,r19,255
 100a5c0:	b811883a 	mov	r8,r23
 100a5c4:	9802e01e 	bne	r19,zero,100b148 <___vfiprintf_internal_r+0x14f4>
 100a5c8:	8c400414 	ori	r17,r17,16
 100a5cc:	8880080c 	andi	r2,r17,32
 100a5d0:	1000641e 	bne	r2,zero,100a764 <___vfiprintf_internal_r+0xb10>
 100a5d4:	8880040c 	andi	r2,r17,16
 100a5d8:	1001c81e 	bne	r2,zero,100acfc <___vfiprintf_internal_r+0x10a8>
 100a5dc:	8880100c 	andi	r2,r17,64
 100a5e0:	d8001d85 	stb	zero,118(sp)
 100a5e4:	1002281e 	bne	r2,zero,100ae88 <___vfiprintf_internal_r+0x1234>
 100a5e8:	d9002217 	ldw	r4,136(sp)
 100a5ec:	0029883a 	mov	r20,zero
 100a5f0:	20800104 	addi	r2,r4,4
 100a5f4:	24c00017 	ldw	r19,0(r4)
 100a5f8:	8001c60e 	bge	r16,zero,100ad14 <___vfiprintf_internal_r+0x10c0>
 100a5fc:	d8802215 	stw	r2,136(sp)
 100a600:	002b883a 	mov	r21,zero
 100a604:	9d04b03a 	or	r2,r19,r20
 100a608:	103f911e 	bne	r2,zero,100a450 <__alt_data_end+0xff80a450>
 100a60c:	00800044 	movi	r2,1
 100a610:	10803fcc 	andi	r2,r2,255
 100a614:	00c00044 	movi	r3,1
 100a618:	10c05f26 	beq	r2,r3,100a798 <___vfiprintf_internal_r+0xb44>
 100a61c:	00c00084 	movi	r3,2
 100a620:	10ffe31e 	bne	r2,r3,100a5b0 <__alt_data_end+0xff80a5b0>
 100a624:	0027883a 	mov	r19,zero
 100a628:	0029883a 	mov	r20,zero
 100a62c:	00015106 	br	100ab74 <___vfiprintf_internal_r+0xf20>
 100a630:	9cc03fcc 	andi	r19,r19,255
 100a634:	b811883a 	mov	r8,r23
 100a638:	9802c01e 	bne	r19,zero,100b13c <___vfiprintf_internal_r+0x14e8>
 100a63c:	01404074 	movhi	r5,257
 100a640:	29485c04 	addi	r5,r5,8560
 100a644:	d9402615 	stw	r5,152(sp)
 100a648:	8880080c 	andi	r2,r17,32
 100a64c:	103f541e 	bne	r2,zero,100a3a0 <__alt_data_end+0xff80a3a0>
 100a650:	8880040c 	andi	r2,r17,16
 100a654:	1001f226 	beq	r2,zero,100ae20 <___vfiprintf_internal_r+0x11cc>
 100a658:	d9402217 	ldw	r5,136(sp)
 100a65c:	0029883a 	mov	r20,zero
 100a660:	2cc00017 	ldw	r19,0(r5)
 100a664:	29400104 	addi	r5,r5,4
 100a668:	d9402215 	stw	r5,136(sp)
 100a66c:	003f5106 	br	100a3b4 <__alt_data_end+0xff80a3b4>
 100a670:	d8c02217 	ldw	r3,136(sp)
 100a674:	b811883a 	mov	r8,r23
 100a678:	d8001d85 	stb	zero,118(sp)
 100a67c:	1dc00017 	ldw	r23,0(r3)
 100a680:	1f000104 	addi	fp,r3,4
 100a684:	b8025926 	beq	r23,zero,100afec <___vfiprintf_internal_r+0x1398>
 100a688:	80023316 	blt	r16,zero,100af58 <___vfiprintf_internal_r+0x1304>
 100a68c:	800d883a 	mov	r6,r16
 100a690:	000b883a 	mov	r5,zero
 100a694:	b809883a 	mov	r4,r23
 100a698:	da002a15 	stw	r8,168(sp)
 100a69c:	1007d940 	call	1007d94 <memchr>
 100a6a0:	da002a17 	ldw	r8,168(sp)
 100a6a4:	10026826 	beq	r2,zero,100b048 <___vfiprintf_internal_r+0x13f4>
 100a6a8:	15e9c83a 	sub	r20,r2,r23
 100a6ac:	dd401d83 	ldbu	r21,118(sp)
 100a6b0:	df002215 	stw	fp,136(sp)
 100a6b4:	0021883a 	mov	r16,zero
 100a6b8:	003e6906 	br	100a060 <__alt_data_end+0xff80a060>
 100a6bc:	9cc03fcc 	andi	r19,r19,255
 100a6c0:	b811883a 	mov	r8,r23
 100a6c4:	983fc126 	beq	r19,zero,100a5cc <__alt_data_end+0xff80a5cc>
 100a6c8:	d8c02303 	ldbu	r3,140(sp)
 100a6cc:	d8c01d85 	stb	r3,118(sp)
 100a6d0:	003fbe06 	br	100a5cc <__alt_data_end+0xff80a5cc>
 100a6d4:	d9002217 	ldw	r4,136(sp)
 100a6d8:	d9402217 	ldw	r5,136(sp)
 100a6dc:	21000017 	ldw	r4,0(r4)
 100a6e0:	28800104 	addi	r2,r5,4
 100a6e4:	d9002515 	stw	r4,148(sp)
 100a6e8:	203e3d16 	blt	r4,zero,1009fe0 <__alt_data_end+0xff809fe0>
 100a6ec:	d8802215 	stw	r2,136(sp)
 100a6f0:	b0c00007 	ldb	r3,0(r22)
 100a6f4:	003db406 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100a6f8:	00c00ac4 	movi	r3,43
 100a6fc:	d8c02305 	stb	r3,140(sp)
 100a700:	04c00044 	movi	r19,1
 100a704:	b0c00007 	ldb	r3,0(r22)
 100a708:	003daf06 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100a70c:	b0c00007 	ldb	r3,0(r22)
 100a710:	01000a84 	movi	r4,42
 100a714:	b4000044 	addi	r16,r22,1
 100a718:	19025e26 	beq	r3,r4,100b094 <___vfiprintf_internal_r+0x1440>
 100a71c:	1f3ff404 	addi	fp,r3,-48
 100a720:	0009883a 	mov	r4,zero
 100a724:	af025236 	bltu	r21,fp,100b070 <___vfiprintf_internal_r+0x141c>
 100a728:	01400284 	movi	r5,10
 100a72c:	100c8f80 	call	100c8f8 <__mulsi3>
 100a730:	80c00007 	ldb	r3,0(r16)
 100a734:	1709883a 	add	r4,r2,fp
 100a738:	85800044 	addi	r22,r16,1
 100a73c:	1f3ff404 	addi	fp,r3,-48
 100a740:	b021883a 	mov	r16,r22
 100a744:	af3ff82e 	bgeu	r21,fp,100a728 <__alt_data_end+0xff80a728>
 100a748:	2021883a 	mov	r16,r4
 100a74c:	203d9f0e 	bge	r4,zero,1009dcc <__alt_data_end+0xff809dcc>
 100a750:	043fffc4 	movi	r16,-1
 100a754:	003d9d06 	br	1009dcc <__alt_data_end+0xff809dcc>
 100a758:	8c401014 	ori	r17,r17,64
 100a75c:	b0c00007 	ldb	r3,0(r22)
 100a760:	003d9906 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100a764:	d9002217 	ldw	r4,136(sp)
 100a768:	d8001d85 	stb	zero,118(sp)
 100a76c:	20c00204 	addi	r3,r4,8
 100a770:	24c00017 	ldw	r19,0(r4)
 100a774:	25000117 	ldw	r20,4(r4)
 100a778:	8001e716 	blt	r16,zero,100af18 <___vfiprintf_internal_r+0x12c4>
 100a77c:	013fdfc4 	movi	r4,-129
 100a780:	9d04b03a 	or	r2,r19,r20
 100a784:	d8c02215 	stw	r3,136(sp)
 100a788:	8922703a 	and	r17,r17,r4
 100a78c:	002b883a 	mov	r21,zero
 100a790:	103f2f1e 	bne	r2,zero,100a450 <__alt_data_end+0xff80a450>
 100a794:	803e2f26 	beq	r16,zero,100a054 <__alt_data_end+0xff80a054>
 100a798:	0027883a 	mov	r19,zero
 100a79c:	9cc00c04 	addi	r19,r19,48
 100a7a0:	dcc019c5 	stb	r19,103(sp)
 100a7a4:	dd002817 	ldw	r20,160(sp)
 100a7a8:	ddc019c4 	addi	r23,sp,103
 100a7ac:	003e2c06 	br	100a060 <__alt_data_end+0xff80a060>
 100a7b0:	9cc03fcc 	andi	r19,r19,255
 100a7b4:	b811883a 	mov	r8,r23
 100a7b8:	9802571e 	bne	r19,zero,100b118 <___vfiprintf_internal_r+0x14c4>
 100a7bc:	18005726 	beq	r3,zero,100a91c <___vfiprintf_internal_r+0xcc8>
 100a7c0:	04c00044 	movi	r19,1
 100a7c4:	d8c01005 	stb	r3,64(sp)
 100a7c8:	d8001d85 	stb	zero,118(sp)
 100a7cc:	9829883a 	mov	r20,r19
 100a7d0:	ddc01004 	addi	r23,sp,64
 100a7d4:	003f0a06 	br	100a400 <__alt_data_end+0xff80a400>
 100a7d8:	d9402017 	ldw	r5,128(sp)
 100a7dc:	d9002117 	ldw	r4,132(sp)
 100a7e0:	d9801a04 	addi	r6,sp,104
 100a7e4:	da802a15 	stw	r10,168(sp)
 100a7e8:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100a7ec:	da802a17 	ldw	r10,168(sp)
 100a7f0:	1000501e 	bne	r2,zero,100a934 <___vfiprintf_internal_r+0xce0>
 100a7f4:	d9801b17 	ldw	r6,108(sp)
 100a7f8:	d8801c17 	ldw	r2,112(sp)
 100a7fc:	d811883a 	mov	r8,sp
 100a800:	31000044 	addi	r4,r6,1
 100a804:	003e3606 	br	100a0e0 <__alt_data_end+0xff80a0e0>
 100a808:	d9001b17 	ldw	r4,108(sp)
 100a80c:	d8801c17 	ldw	r2,112(sp)
 100a810:	21400044 	addi	r5,r4,1
 100a814:	d9801d87 	ldb	r6,118(sp)
 100a818:	303e5226 	beq	r6,zero,100a164 <__alt_data_end+0xff80a164>
 100a81c:	01800044 	movi	r6,1
 100a820:	d9001d84 	addi	r4,sp,118
 100a824:	1185883a 	add	r2,r2,r6
 100a828:	41000015 	stw	r4,0(r8)
 100a82c:	41800115 	stw	r6,4(r8)
 100a830:	d8801c15 	stw	r2,112(sp)
 100a834:	d9401b15 	stw	r5,108(sp)
 100a838:	010001c4 	movi	r4,7
 100a83c:	2140b00e 	bge	r4,r5,100ab00 <___vfiprintf_internal_r+0xeac>
 100a840:	1000f61e 	bne	r2,zero,100ac1c <___vfiprintf_internal_r+0xfc8>
 100a844:	3800b31e 	bne	r7,zero,100ab14 <___vfiprintf_internal_r+0xec0>
 100a848:	0009883a 	mov	r4,zero
 100a84c:	300b883a 	mov	r5,r6
 100a850:	d811883a 	mov	r8,sp
 100a854:	01802004 	movi	r6,128
 100a858:	19be5226 	beq	r3,r6,100a1a4 <__alt_data_end+0xff80a1a4>
 100a85c:	8521c83a 	sub	r16,r16,r20
 100a860:	043e790e 	bge	zero,r16,100a248 <__alt_data_end+0xff80a248>
 100a864:	05400404 	movi	r21,16
 100a868:	ac01b00e 	bge	r21,r16,100af2c <___vfiprintf_internal_r+0x12d8>
 100a86c:	01404074 	movhi	r5,257
 100a870:	2948c204 	addi	r5,r5,8968
 100a874:	d9402315 	stw	r5,140(sp)
 100a878:	070001c4 	movi	fp,7
 100a87c:	00000506 	br	100a894 <___vfiprintf_internal_r+0xc40>
 100a880:	21400084 	addi	r5,r4,2
 100a884:	42000204 	addi	r8,r8,8
 100a888:	1809883a 	mov	r4,r3
 100a88c:	843ffc04 	addi	r16,r16,-16
 100a890:	ac000d0e 	bge	r21,r16,100a8c8 <___vfiprintf_internal_r+0xc74>
 100a894:	10800404 	addi	r2,r2,16
 100a898:	20c00044 	addi	r3,r4,1
 100a89c:	44800015 	stw	r18,0(r8)
 100a8a0:	45400115 	stw	r21,4(r8)
 100a8a4:	d8801c15 	stw	r2,112(sp)
 100a8a8:	d8c01b15 	stw	r3,108(sp)
 100a8ac:	e0fff40e 	bge	fp,r3,100a880 <__alt_data_end+0xff80a880>
 100a8b0:	1000101e 	bne	r2,zero,100a8f4 <___vfiprintf_internal_r+0xca0>
 100a8b4:	843ffc04 	addi	r16,r16,-16
 100a8b8:	01400044 	movi	r5,1
 100a8bc:	0009883a 	mov	r4,zero
 100a8c0:	d811883a 	mov	r8,sp
 100a8c4:	ac3ff316 	blt	r21,r16,100a894 <__alt_data_end+0xff80a894>
 100a8c8:	d8c02317 	ldw	r3,140(sp)
 100a8cc:	1405883a 	add	r2,r2,r16
 100a8d0:	44000115 	stw	r16,4(r8)
 100a8d4:	40c00015 	stw	r3,0(r8)
 100a8d8:	d8801c15 	stw	r2,112(sp)
 100a8dc:	d9401b15 	stw	r5,108(sp)
 100a8e0:	00c001c4 	movi	r3,7
 100a8e4:	19401916 	blt	r3,r5,100a94c <___vfiprintf_internal_r+0xcf8>
 100a8e8:	42000204 	addi	r8,r8,8
 100a8ec:	29400044 	addi	r5,r5,1
 100a8f0:	003e5506 	br	100a248 <__alt_data_end+0xff80a248>
 100a8f4:	d9402017 	ldw	r5,128(sp)
 100a8f8:	d9002117 	ldw	r4,132(sp)
 100a8fc:	d9801a04 	addi	r6,sp,104
 100a900:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100a904:	10000b1e 	bne	r2,zero,100a934 <___vfiprintf_internal_r+0xce0>
 100a908:	d9001b17 	ldw	r4,108(sp)
 100a90c:	d8801c17 	ldw	r2,112(sp)
 100a910:	d811883a 	mov	r8,sp
 100a914:	21400044 	addi	r5,r4,1
 100a918:	003fdc06 	br	100a88c <__alt_data_end+0xff80a88c>
 100a91c:	d8801c17 	ldw	r2,112(sp)
 100a920:	10000426 	beq	r2,zero,100a934 <___vfiprintf_internal_r+0xce0>
 100a924:	d9402017 	ldw	r5,128(sp)
 100a928:	d9002117 	ldw	r4,132(sp)
 100a92c:	d9801a04 	addi	r6,sp,104
 100a930:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100a934:	d9402017 	ldw	r5,128(sp)
 100a938:	2880030b 	ldhu	r2,12(r5)
 100a93c:	1080100c 	andi	r2,r2,64
 100a940:	10014d1e 	bne	r2,zero,100ae78 <___vfiprintf_internal_r+0x1224>
 100a944:	d8802417 	ldw	r2,144(sp)
 100a948:	003d9706 	br	1009fa8 <__alt_data_end+0xff809fa8>
 100a94c:	1000d21e 	bne	r2,zero,100ac98 <___vfiprintf_internal_r+0x1044>
 100a950:	00c00044 	movi	r3,1
 100a954:	a005883a 	mov	r2,r20
 100a958:	ddc00015 	stw	r23,0(sp)
 100a95c:	dd000115 	stw	r20,4(sp)
 100a960:	dd001c15 	stw	r20,112(sp)
 100a964:	d8c01b15 	stw	r3,108(sp)
 100a968:	d811883a 	mov	r8,sp
 100a96c:	42000204 	addi	r8,r8,8
 100a970:	8c40010c 	andi	r17,r17,4
 100a974:	88004026 	beq	r17,zero,100aa78 <___vfiprintf_internal_r+0xe24>
 100a978:	d9002517 	ldw	r4,148(sp)
 100a97c:	24e3c83a 	sub	r17,r4,r19
 100a980:	04403d0e 	bge	zero,r17,100aa78 <___vfiprintf_internal_r+0xe24>
 100a984:	04000404 	movi	r16,16
 100a988:	8441a90e 	bge	r16,r17,100b030 <___vfiprintf_internal_r+0x13dc>
 100a98c:	00c04074 	movhi	r3,257
 100a990:	18c8c604 	addi	r3,r3,8984
 100a994:	d9001b17 	ldw	r4,108(sp)
 100a998:	d8c02315 	stw	r3,140(sp)
 100a99c:	050001c4 	movi	r20,7
 100a9a0:	dd402117 	ldw	r21,132(sp)
 100a9a4:	ddc02017 	ldw	r23,128(sp)
 100a9a8:	00000506 	br	100a9c0 <___vfiprintf_internal_r+0xd6c>
 100a9ac:	21400084 	addi	r5,r4,2
 100a9b0:	42000204 	addi	r8,r8,8
 100a9b4:	1809883a 	mov	r4,r3
 100a9b8:	8c7ffc04 	addi	r17,r17,-16
 100a9bc:	84400f0e 	bge	r16,r17,100a9fc <___vfiprintf_internal_r+0xda8>
 100a9c0:	01404074 	movhi	r5,257
 100a9c4:	10800404 	addi	r2,r2,16
 100a9c8:	20c00044 	addi	r3,r4,1
 100a9cc:	2948c604 	addi	r5,r5,8984
 100a9d0:	41400015 	stw	r5,0(r8)
 100a9d4:	44000115 	stw	r16,4(r8)
 100a9d8:	d8801c15 	stw	r2,112(sp)
 100a9dc:	d8c01b15 	stw	r3,108(sp)
 100a9e0:	a0fff20e 	bge	r20,r3,100a9ac <__alt_data_end+0xff80a9ac>
 100a9e4:	1000141e 	bne	r2,zero,100aa38 <___vfiprintf_internal_r+0xde4>
 100a9e8:	8c7ffc04 	addi	r17,r17,-16
 100a9ec:	01400044 	movi	r5,1
 100a9f0:	0009883a 	mov	r4,zero
 100a9f4:	d811883a 	mov	r8,sp
 100a9f8:	847ff116 	blt	r16,r17,100a9c0 <__alt_data_end+0xff80a9c0>
 100a9fc:	d8c02317 	ldw	r3,140(sp)
 100aa00:	1445883a 	add	r2,r2,r17
 100aa04:	44400115 	stw	r17,4(r8)
 100aa08:	40c00015 	stw	r3,0(r8)
 100aa0c:	d8801c15 	stw	r2,112(sp)
 100aa10:	d9401b15 	stw	r5,108(sp)
 100aa14:	00c001c4 	movi	r3,7
 100aa18:	1940170e 	bge	r3,r5,100aa78 <___vfiprintf_internal_r+0xe24>
 100aa1c:	1000101e 	bne	r2,zero,100aa60 <___vfiprintf_internal_r+0xe0c>
 100aa20:	d8802517 	ldw	r2,148(sp)
 100aa24:	14c11616 	blt	r2,r19,100ae80 <___vfiprintf_internal_r+0x122c>
 100aa28:	d9002417 	ldw	r4,144(sp)
 100aa2c:	2089883a 	add	r4,r4,r2
 100aa30:	d9002415 	stw	r4,144(sp)
 100aa34:	003e1806 	br	100a298 <__alt_data_end+0xff80a298>
 100aa38:	d9801a04 	addi	r6,sp,104
 100aa3c:	b80b883a 	mov	r5,r23
 100aa40:	a809883a 	mov	r4,r21
 100aa44:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100aa48:	103fba1e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100aa4c:	d9001b17 	ldw	r4,108(sp)
 100aa50:	d8801c17 	ldw	r2,112(sp)
 100aa54:	d811883a 	mov	r8,sp
 100aa58:	21400044 	addi	r5,r4,1
 100aa5c:	003fd606 	br	100a9b8 <__alt_data_end+0xff80a9b8>
 100aa60:	d9402017 	ldw	r5,128(sp)
 100aa64:	d9002117 	ldw	r4,132(sp)
 100aa68:	d9801a04 	addi	r6,sp,104
 100aa6c:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100aa70:	103fb01e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100aa74:	d8801c17 	ldw	r2,112(sp)
 100aa78:	d8c02517 	ldw	r3,148(sp)
 100aa7c:	1cc0010e 	bge	r3,r19,100aa84 <___vfiprintf_internal_r+0xe30>
 100aa80:	9807883a 	mov	r3,r19
 100aa84:	d9002417 	ldw	r4,144(sp)
 100aa88:	20c9883a 	add	r4,r4,r3
 100aa8c:	d9002415 	stw	r4,144(sp)
 100aa90:	103e0126 	beq	r2,zero,100a298 <__alt_data_end+0xff80a298>
 100aa94:	d9402017 	ldw	r5,128(sp)
 100aa98:	d9002117 	ldw	r4,132(sp)
 100aa9c:	d9801a04 	addi	r6,sp,104
 100aaa0:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100aaa4:	103dfc26 	beq	r2,zero,100a298 <__alt_data_end+0xff80a298>
 100aaa8:	003fa206 	br	100a934 <__alt_data_end+0xff80a934>
 100aaac:	d9402017 	ldw	r5,128(sp)
 100aab0:	d9002117 	ldw	r4,132(sp)
 100aab4:	d9801a04 	addi	r6,sp,104
 100aab8:	d9c02b15 	stw	r7,172(sp)
 100aabc:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100aac0:	d9c02b17 	ldw	r7,172(sp)
 100aac4:	103f9b1e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100aac8:	d9001b17 	ldw	r4,108(sp)
 100aacc:	d8801c17 	ldw	r2,112(sp)
 100aad0:	d811883a 	mov	r8,sp
 100aad4:	21800044 	addi	r6,r4,1
 100aad8:	003dbf06 	br	100a1d8 <__alt_data_end+0xff80a1d8>
 100aadc:	1000d81e 	bne	r2,zero,100ae40 <___vfiprintf_internal_r+0x11ec>
 100aae0:	d9001d87 	ldb	r4,118(sp)
 100aae4:	20000a26 	beq	r4,zero,100ab10 <___vfiprintf_internal_r+0xebc>
 100aae8:	00800044 	movi	r2,1
 100aaec:	d9001d84 	addi	r4,sp,118
 100aaf0:	100b883a 	mov	r5,r2
 100aaf4:	d9000015 	stw	r4,0(sp)
 100aaf8:	d8800115 	stw	r2,4(sp)
 100aafc:	d811883a 	mov	r8,sp
 100ab00:	2809883a 	mov	r4,r5
 100ab04:	42000204 	addi	r8,r8,8
 100ab08:	29400044 	addi	r5,r5,1
 100ab0c:	003d9506 	br	100a164 <__alt_data_end+0xff80a164>
 100ab10:	3800fd26 	beq	r7,zero,100af08 <___vfiprintf_internal_r+0x12b4>
 100ab14:	00800084 	movi	r2,2
 100ab18:	d9001d04 	addi	r4,sp,116
 100ab1c:	d9000015 	stw	r4,0(sp)
 100ab20:	d8800115 	stw	r2,4(sp)
 100ab24:	01400044 	movi	r5,1
 100ab28:	d811883a 	mov	r8,sp
 100ab2c:	2809883a 	mov	r4,r5
 100ab30:	42000204 	addi	r8,r8,8
 100ab34:	29400044 	addi	r5,r5,1
 100ab38:	003f4606 	br	100a854 <__alt_data_end+0xff80a854>
 100ab3c:	d8802517 	ldw	r2,148(sp)
 100ab40:	14c0010e 	bge	r2,r19,100ab48 <___vfiprintf_internal_r+0xef4>
 100ab44:	9805883a 	mov	r2,r19
 100ab48:	d9402417 	ldw	r5,144(sp)
 100ab4c:	288b883a 	add	r5,r5,r2
 100ab50:	d9402415 	stw	r5,144(sp)
 100ab54:	003dd006 	br	100a298 <__alt_data_end+0xff80a298>
 100ab58:	d8001d85 	stb	zero,118(sp)
 100ab5c:	80005d16 	blt	r16,zero,100acd4 <___vfiprintf_internal_r+0x1080>
 100ab60:	00ffdfc4 	movi	r3,-129
 100ab64:	9d04b03a 	or	r2,r19,r20
 100ab68:	88e2703a 	and	r17,r17,r3
 100ab6c:	103d3726 	beq	r2,zero,100a04c <__alt_data_end+0xff80a04c>
 100ab70:	002b883a 	mov	r21,zero
 100ab74:	d9002617 	ldw	r4,152(sp)
 100ab78:	ddc01a04 	addi	r23,sp,104
 100ab7c:	988003cc 	andi	r2,r19,15
 100ab80:	a006973a 	slli	r3,r20,28
 100ab84:	2085883a 	add	r2,r4,r2
 100ab88:	9826d13a 	srli	r19,r19,4
 100ab8c:	10800003 	ldbu	r2,0(r2)
 100ab90:	a028d13a 	srli	r20,r20,4
 100ab94:	bdffffc4 	addi	r23,r23,-1
 100ab98:	1ce6b03a 	or	r19,r3,r19
 100ab9c:	b8800005 	stb	r2,0(r23)
 100aba0:	9d04b03a 	or	r2,r19,r20
 100aba4:	103ff51e 	bne	r2,zero,100ab7c <__alt_data_end+0xff80ab7c>
 100aba8:	d8801e17 	ldw	r2,120(sp)
 100abac:	15e9c83a 	sub	r20,r2,r23
 100abb0:	003d2b06 	br	100a060 <__alt_data_end+0xff80a060>
 100abb4:	d9402017 	ldw	r5,128(sp)
 100abb8:	d9002117 	ldw	r4,132(sp)
 100abbc:	d9801a04 	addi	r6,sp,104
 100abc0:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100abc4:	103f5b1e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100abc8:	d8801c17 	ldw	r2,112(sp)
 100abcc:	d811883a 	mov	r8,sp
 100abd0:	003f6706 	br	100a970 <__alt_data_end+0xff80a970>
 100abd4:	d9402017 	ldw	r5,128(sp)
 100abd8:	d9002117 	ldw	r4,132(sp)
 100abdc:	d9801a04 	addi	r6,sp,104
 100abe0:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100abe4:	103f531e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100abe8:	d811883a 	mov	r8,sp
 100abec:	003cd906 	br	1009f54 <__alt_data_end+0xff809f54>
 100abf0:	10803fcc 	andi	r2,r2,255
 100abf4:	1080201c 	xori	r2,r2,128
 100abf8:	10bfe004 	addi	r2,r2,-128
 100abfc:	00c00c04 	movi	r3,48
 100ac00:	10ffe926 	beq	r2,r3,100aba8 <__alt_data_end+0xff80aba8>
 100ac04:	b8ffffc5 	stb	r3,-1(r23)
 100ac08:	d8c01e17 	ldw	r3,120(sp)
 100ac0c:	b8bfffc4 	addi	r2,r23,-1
 100ac10:	102f883a 	mov	r23,r2
 100ac14:	18a9c83a 	sub	r20,r3,r2
 100ac18:	003d1106 	br	100a060 <__alt_data_end+0xff80a060>
 100ac1c:	d9402017 	ldw	r5,128(sp)
 100ac20:	d9002117 	ldw	r4,132(sp)
 100ac24:	d9801a04 	addi	r6,sp,104
 100ac28:	d8c02a15 	stw	r3,168(sp)
 100ac2c:	d9c02b15 	stw	r7,172(sp)
 100ac30:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100ac34:	d8c02a17 	ldw	r3,168(sp)
 100ac38:	d9c02b17 	ldw	r7,172(sp)
 100ac3c:	103f3d1e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100ac40:	d9001b17 	ldw	r4,108(sp)
 100ac44:	d8801c17 	ldw	r2,112(sp)
 100ac48:	d811883a 	mov	r8,sp
 100ac4c:	21400044 	addi	r5,r4,1
 100ac50:	003d4406 	br	100a164 <__alt_data_end+0xff80a164>
 100ac54:	d9402017 	ldw	r5,128(sp)
 100ac58:	d9002117 	ldw	r4,132(sp)
 100ac5c:	d9801a04 	addi	r6,sp,104
 100ac60:	d8c02a15 	stw	r3,168(sp)
 100ac64:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100ac68:	d8c02a17 	ldw	r3,168(sp)
 100ac6c:	103f311e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100ac70:	d9001b17 	ldw	r4,108(sp)
 100ac74:	d8801c17 	ldw	r2,112(sp)
 100ac78:	d811883a 	mov	r8,sp
 100ac7c:	21400044 	addi	r5,r4,1
 100ac80:	003ef406 	br	100a854 <__alt_data_end+0xff80a854>
 100ac84:	1000bd1e 	bne	r2,zero,100af7c <___vfiprintf_internal_r+0x1328>
 100ac88:	01400044 	movi	r5,1
 100ac8c:	0009883a 	mov	r4,zero
 100ac90:	d811883a 	mov	r8,sp
 100ac94:	003ef106 	br	100a85c <__alt_data_end+0xff80a85c>
 100ac98:	d9402017 	ldw	r5,128(sp)
 100ac9c:	d9002117 	ldw	r4,132(sp)
 100aca0:	d9801a04 	addi	r6,sp,104
 100aca4:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100aca8:	103f221e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100acac:	d9401b17 	ldw	r5,108(sp)
 100acb0:	d8801c17 	ldw	r2,112(sp)
 100acb4:	d811883a 	mov	r8,sp
 100acb8:	29400044 	addi	r5,r5,1
 100acbc:	003d6206 	br	100a248 <__alt_data_end+0xff80a248>
 100acc0:	01404074 	movhi	r5,257
 100acc4:	29486104 	addi	r5,r5,8580
 100acc8:	d9402615 	stw	r5,152(sp)
 100accc:	d8c02215 	stw	r3,136(sp)
 100acd0:	1023883a 	mov	r17,r2
 100acd4:	9d04b03a 	or	r2,r19,r20
 100acd8:	103fa51e 	bne	r2,zero,100ab70 <__alt_data_end+0xff80ab70>
 100acdc:	002b883a 	mov	r21,zero
 100ace0:	00800084 	movi	r2,2
 100ace4:	003e4a06 	br	100a610 <__alt_data_end+0xff80a610>
 100ace8:	01404074 	movhi	r5,257
 100acec:	29486104 	addi	r5,r5,8580
 100acf0:	002b883a 	mov	r21,zero
 100acf4:	d9402615 	stw	r5,152(sp)
 100acf8:	003f9e06 	br	100ab74 <__alt_data_end+0xff80ab74>
 100acfc:	d9402217 	ldw	r5,136(sp)
 100ad00:	d8001d85 	stb	zero,118(sp)
 100ad04:	0029883a 	mov	r20,zero
 100ad08:	28800104 	addi	r2,r5,4
 100ad0c:	2cc00017 	ldw	r19,0(r5)
 100ad10:	803e3a16 	blt	r16,zero,100a5fc <__alt_data_end+0xff80a5fc>
 100ad14:	00ffdfc4 	movi	r3,-129
 100ad18:	d8802215 	stw	r2,136(sp)
 100ad1c:	88e2703a 	and	r17,r17,r3
 100ad20:	002b883a 	mov	r21,zero
 100ad24:	983e9b26 	beq	r19,zero,100a794 <__alt_data_end+0xff80a794>
 100ad28:	00800244 	movi	r2,9
 100ad2c:	14fdc936 	bltu	r2,r19,100a454 <__alt_data_end+0xff80a454>
 100ad30:	003e9a06 	br	100a79c <__alt_data_end+0xff80a79c>
 100ad34:	00800c04 	movi	r2,48
 100ad38:	d8c01d45 	stb	r3,117(sp)
 100ad3c:	d8801d05 	stb	r2,116(sp)
 100ad40:	d8001d85 	stb	zero,118(sp)
 100ad44:	88c00094 	ori	r3,r17,2
 100ad48:	80009c16 	blt	r16,zero,100afbc <___vfiprintf_internal_r+0x1368>
 100ad4c:	00bfdfc4 	movi	r2,-129
 100ad50:	88a2703a 	and	r17,r17,r2
 100ad54:	8c400094 	ori	r17,r17,2
 100ad58:	002b883a 	mov	r21,zero
 100ad5c:	003f8506 	br	100ab74 <__alt_data_end+0xff80ab74>
 100ad60:	b029883a 	mov	r20,r22
 100ad64:	003c0b06 	br	1009d94 <__alt_data_end+0xff809d94>
 100ad68:	04e7c83a 	sub	r19,zero,r19
 100ad6c:	05400b44 	movi	r21,45
 100ad70:	9804c03a 	cmpne	r2,r19,zero
 100ad74:	0529c83a 	sub	r20,zero,r20
 100ad78:	dd401d85 	stb	r21,118(sp)
 100ad7c:	a0a9c83a 	sub	r20,r20,r2
 100ad80:	80009716 	blt	r16,zero,100afe0 <___vfiprintf_internal_r+0x138c>
 100ad84:	00bfdfc4 	movi	r2,-129
 100ad88:	88a2703a 	and	r17,r17,r2
 100ad8c:	003db006 	br	100a450 <__alt_data_end+0xff80a450>
 100ad90:	b0c00007 	ldb	r3,0(r22)
 100ad94:	003c0c06 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100ad98:	8880100c 	andi	r2,r17,64
 100ad9c:	d8001d85 	stb	zero,118(sp)
 100ada0:	1000461e 	bne	r2,zero,100aebc <___vfiprintf_internal_r+0x1268>
 100ada4:	d9002217 	ldw	r4,136(sp)
 100ada8:	0029883a 	mov	r20,zero
 100adac:	20800104 	addi	r2,r4,4
 100adb0:	24c00017 	ldw	r19,0(r4)
 100adb4:	803df80e 	bge	r16,zero,100a598 <__alt_data_end+0xff80a598>
 100adb8:	9d06b03a 	or	r3,r19,r20
 100adbc:	d8802215 	stw	r2,136(sp)
 100adc0:	183d5e1e 	bne	r3,zero,100a33c <__alt_data_end+0xff80a33c>
 100adc4:	002b883a 	mov	r21,zero
 100adc8:	0005883a 	mov	r2,zero
 100adcc:	003e1006 	br	100a610 <__alt_data_end+0xff80a610>
 100add0:	8880040c 	andi	r2,r17,16
 100add4:	1000321e 	bne	r2,zero,100aea0 <___vfiprintf_internal_r+0x124c>
 100add8:	8c40100c 	andi	r17,r17,64
 100addc:	88008d26 	beq	r17,zero,100b014 <___vfiprintf_internal_r+0x13c0>
 100ade0:	d9402217 	ldw	r5,136(sp)
 100ade4:	d8c02417 	ldw	r3,144(sp)
 100ade8:	28800017 	ldw	r2,0(r5)
 100adec:	29400104 	addi	r5,r5,4
 100adf0:	d9402215 	stw	r5,136(sp)
 100adf4:	10c0000d 	sth	r3,0(r2)
 100adf8:	003bca06 	br	1009d24 <__alt_data_end+0xff809d24>
 100adfc:	8880100c 	andi	r2,r17,64
 100ae00:	10003a26 	beq	r2,zero,100aeec <___vfiprintf_internal_r+0x1298>
 100ae04:	d8802217 	ldw	r2,136(sp)
 100ae08:	14c0000f 	ldh	r19,0(r2)
 100ae0c:	10800104 	addi	r2,r2,4
 100ae10:	d8802215 	stw	r2,136(sp)
 100ae14:	9829d7fa 	srai	r20,r19,31
 100ae18:	a005883a 	mov	r2,r20
 100ae1c:	003d8506 	br	100a434 <__alt_data_end+0xff80a434>
 100ae20:	8880100c 	andi	r2,r17,64
 100ae24:	10002b26 	beq	r2,zero,100aed4 <___vfiprintf_internal_r+0x1280>
 100ae28:	d8802217 	ldw	r2,136(sp)
 100ae2c:	0029883a 	mov	r20,zero
 100ae30:	14c0000b 	ldhu	r19,0(r2)
 100ae34:	10800104 	addi	r2,r2,4
 100ae38:	d8802215 	stw	r2,136(sp)
 100ae3c:	003d5d06 	br	100a3b4 <__alt_data_end+0xff80a3b4>
 100ae40:	d9402017 	ldw	r5,128(sp)
 100ae44:	d9002117 	ldw	r4,132(sp)
 100ae48:	d9801a04 	addi	r6,sp,104
 100ae4c:	d8c02a15 	stw	r3,168(sp)
 100ae50:	d9c02b15 	stw	r7,172(sp)
 100ae54:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100ae58:	d8c02a17 	ldw	r3,168(sp)
 100ae5c:	d9c02b17 	ldw	r7,172(sp)
 100ae60:	103eb41e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100ae64:	d9001b17 	ldw	r4,108(sp)
 100ae68:	d8801c17 	ldw	r2,112(sp)
 100ae6c:	d811883a 	mov	r8,sp
 100ae70:	21400044 	addi	r5,r4,1
 100ae74:	003e6706 	br	100a814 <__alt_data_end+0xff80a814>
 100ae78:	00bfffc4 	movi	r2,-1
 100ae7c:	003c4a06 	br	1009fa8 <__alt_data_end+0xff809fa8>
 100ae80:	9805883a 	mov	r2,r19
 100ae84:	003ee806 	br	100aa28 <__alt_data_end+0xff80aa28>
 100ae88:	d8c02217 	ldw	r3,136(sp)
 100ae8c:	0029883a 	mov	r20,zero
 100ae90:	18800104 	addi	r2,r3,4
 100ae94:	1cc0000b 	ldhu	r19,0(r3)
 100ae98:	803f9e0e 	bge	r16,zero,100ad14 <__alt_data_end+0xff80ad14>
 100ae9c:	003dd706 	br	100a5fc <__alt_data_end+0xff80a5fc>
 100aea0:	d8c02217 	ldw	r3,136(sp)
 100aea4:	d9002417 	ldw	r4,144(sp)
 100aea8:	18800017 	ldw	r2,0(r3)
 100aeac:	18c00104 	addi	r3,r3,4
 100aeb0:	d8c02215 	stw	r3,136(sp)
 100aeb4:	11000015 	stw	r4,0(r2)
 100aeb8:	003b9a06 	br	1009d24 <__alt_data_end+0xff809d24>
 100aebc:	d8c02217 	ldw	r3,136(sp)
 100aec0:	0029883a 	mov	r20,zero
 100aec4:	18800104 	addi	r2,r3,4
 100aec8:	1cc0000b 	ldhu	r19,0(r3)
 100aecc:	803db20e 	bge	r16,zero,100a598 <__alt_data_end+0xff80a598>
 100aed0:	003fb906 	br	100adb8 <__alt_data_end+0xff80adb8>
 100aed4:	d9002217 	ldw	r4,136(sp)
 100aed8:	0029883a 	mov	r20,zero
 100aedc:	24c00017 	ldw	r19,0(r4)
 100aee0:	21000104 	addi	r4,r4,4
 100aee4:	d9002215 	stw	r4,136(sp)
 100aee8:	003d3206 	br	100a3b4 <__alt_data_end+0xff80a3b4>
 100aeec:	d8c02217 	ldw	r3,136(sp)
 100aef0:	1cc00017 	ldw	r19,0(r3)
 100aef4:	18c00104 	addi	r3,r3,4
 100aef8:	d8c02215 	stw	r3,136(sp)
 100aefc:	9829d7fa 	srai	r20,r19,31
 100af00:	a005883a 	mov	r2,r20
 100af04:	003d4b06 	br	100a434 <__alt_data_end+0xff80a434>
 100af08:	0009883a 	mov	r4,zero
 100af0c:	01400044 	movi	r5,1
 100af10:	d811883a 	mov	r8,sp
 100af14:	003e4f06 	br	100a854 <__alt_data_end+0xff80a854>
 100af18:	d8c02215 	stw	r3,136(sp)
 100af1c:	002b883a 	mov	r21,zero
 100af20:	003db806 	br	100a604 <__alt_data_end+0xff80a604>
 100af24:	d811883a 	mov	r8,sp
 100af28:	003e9606 	br	100a984 <__alt_data_end+0xff80a984>
 100af2c:	01004074 	movhi	r4,257
 100af30:	2108c204 	addi	r4,r4,8968
 100af34:	d9002315 	stw	r4,140(sp)
 100af38:	003e6306 	br	100a8c8 <__alt_data_end+0xff80a8c8>
 100af3c:	b0c00043 	ldbu	r3,1(r22)
 100af40:	8c400814 	ori	r17,r17,32
 100af44:	b5800044 	addi	r22,r22,1
 100af48:	18c03fcc 	andi	r3,r3,255
 100af4c:	18c0201c 	xori	r3,r3,128
 100af50:	18ffe004 	addi	r3,r3,-128
 100af54:	003b9c06 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100af58:	b809883a 	mov	r4,r23
 100af5c:	da002a15 	stw	r8,168(sp)
 100af60:	10023c40 	call	10023c4 <strlen>
 100af64:	1029883a 	mov	r20,r2
 100af68:	dd401d83 	ldbu	r21,118(sp)
 100af6c:	df002215 	stw	fp,136(sp)
 100af70:	0021883a 	mov	r16,zero
 100af74:	da002a17 	ldw	r8,168(sp)
 100af78:	003c3906 	br	100a060 <__alt_data_end+0xff80a060>
 100af7c:	d9402017 	ldw	r5,128(sp)
 100af80:	d9002117 	ldw	r4,132(sp)
 100af84:	d9801a04 	addi	r6,sp,104
 100af88:	1009b400 	call	1009b40 <__sprint_r.part.0>
 100af8c:	103e691e 	bne	r2,zero,100a934 <__alt_data_end+0xff80a934>
 100af90:	d9001b17 	ldw	r4,108(sp)
 100af94:	d8801c17 	ldw	r2,112(sp)
 100af98:	d811883a 	mov	r8,sp
 100af9c:	21400044 	addi	r5,r4,1
 100afa0:	003e2e06 	br	100a85c <__alt_data_end+0xff80a85c>
 100afa4:	01004074 	movhi	r4,257
 100afa8:	2108c604 	addi	r4,r4,8984
 100afac:	d9002315 	stw	r4,140(sp)
 100afb0:	d9001b17 	ldw	r4,108(sp)
 100afb4:	21000044 	addi	r4,r4,1
 100afb8:	003c5e06 	br	100a134 <__alt_data_end+0xff80a134>
 100afbc:	002b883a 	mov	r21,zero
 100afc0:	00800084 	movi	r2,2
 100afc4:	10803fcc 	andi	r2,r2,255
 100afc8:	01000044 	movi	r4,1
 100afcc:	11002b26 	beq	r2,r4,100b07c <___vfiprintf_internal_r+0x1428>
 100afd0:	01000084 	movi	r4,2
 100afd4:	11002b1e 	bne	r2,r4,100b084 <___vfiprintf_internal_r+0x1430>
 100afd8:	1823883a 	mov	r17,r3
 100afdc:	003ee506 	br	100ab74 <__alt_data_end+0xff80ab74>
 100afe0:	8807883a 	mov	r3,r17
 100afe4:	00800044 	movi	r2,1
 100afe8:	003ff606 	br	100afc4 <__alt_data_end+0xff80afc4>
 100afec:	00800184 	movi	r2,6
 100aff0:	1400012e 	bgeu	r2,r16,100aff8 <___vfiprintf_internal_r+0x13a4>
 100aff4:	1021883a 	mov	r16,r2
 100aff8:	8029883a 	mov	r20,r16
 100affc:	8027883a 	mov	r19,r16
 100b000:	80002216 	blt	r16,zero,100b08c <___vfiprintf_internal_r+0x1438>
 100b004:	05c04074 	movhi	r23,257
 100b008:	df002215 	stw	fp,136(sp)
 100b00c:	bdc86604 	addi	r23,r23,8600
 100b010:	003cfb06 	br	100a400 <__alt_data_end+0xff80a400>
 100b014:	d9002217 	ldw	r4,136(sp)
 100b018:	d9402417 	ldw	r5,144(sp)
 100b01c:	20800017 	ldw	r2,0(r4)
 100b020:	21000104 	addi	r4,r4,4
 100b024:	d9002215 	stw	r4,136(sp)
 100b028:	11400015 	stw	r5,0(r2)
 100b02c:	003b3d06 	br	1009d24 <__alt_data_end+0xff809d24>
 100b030:	01404074 	movhi	r5,257
 100b034:	2948c604 	addi	r5,r5,8984
 100b038:	d9402315 	stw	r5,140(sp)
 100b03c:	d9401b17 	ldw	r5,108(sp)
 100b040:	29400044 	addi	r5,r5,1
 100b044:	003e6d06 	br	100a9fc <__alt_data_end+0xff80a9fc>
 100b048:	8029883a 	mov	r20,r16
 100b04c:	dd401d83 	ldbu	r21,118(sp)
 100b050:	df002215 	stw	fp,136(sp)
 100b054:	0021883a 	mov	r16,zero
 100b058:	003c0106 	br	100a060 <__alt_data_end+0xff80a060>
 100b05c:	00c04074 	movhi	r3,257
 100b060:	18c8c204 	addi	r3,r3,8968
 100b064:	d8c02315 	stw	r3,140(sp)
 100b068:	280d883a 	mov	r6,r5
 100b06c:	003c6906 	br	100a214 <__alt_data_end+0xff80a214>
 100b070:	802d883a 	mov	r22,r16
 100b074:	0021883a 	mov	r16,zero
 100b078:	003b5406 	br	1009dcc <__alt_data_end+0xff809dcc>
 100b07c:	1823883a 	mov	r17,r3
 100b080:	003cf306 	br	100a450 <__alt_data_end+0xff80a450>
 100b084:	1823883a 	mov	r17,r3
 100b088:	003cad06 	br	100a340 <__alt_data_end+0xff80a340>
 100b08c:	0027883a 	mov	r19,zero
 100b090:	003fdc06 	br	100b004 <__alt_data_end+0xff80b004>
 100b094:	d9402217 	ldw	r5,136(sp)
 100b098:	8005883a 	mov	r2,r16
 100b09c:	b0c00043 	ldbu	r3,1(r22)
 100b0a0:	2c000017 	ldw	r16,0(r5)
 100b0a4:	29000104 	addi	r4,r5,4
 100b0a8:	d9002215 	stw	r4,136(sp)
 100b0ac:	102d883a 	mov	r22,r2
 100b0b0:	803fa50e 	bge	r16,zero,100af48 <__alt_data_end+0xff80af48>
 100b0b4:	18c03fcc 	andi	r3,r3,255
 100b0b8:	18c0201c 	xori	r3,r3,128
 100b0bc:	043fffc4 	movi	r16,-1
 100b0c0:	18ffe004 	addi	r3,r3,-128
 100b0c4:	003b4006 	br	1009dc8 <__alt_data_end+0xff809dc8>
 100b0c8:	d9402303 	ldbu	r5,140(sp)
 100b0cc:	d9401d85 	stb	r5,118(sp)
 100b0d0:	003cae06 	br	100a38c <__alt_data_end+0xff80a38c>
 100b0d4:	d8c02303 	ldbu	r3,140(sp)
 100b0d8:	d8c01d85 	stb	r3,118(sp)
 100b0dc:	003d1406 	br	100a530 <__alt_data_end+0xff80a530>
 100b0e0:	d8c02303 	ldbu	r3,140(sp)
 100b0e4:	d8c01d85 	stb	r3,118(sp)
 100b0e8:	003cca06 	br	100a414 <__alt_data_end+0xff80a414>
 100b0ec:	8880004c 	andi	r2,r17,1
 100b0f0:	002b883a 	mov	r21,zero
 100b0f4:	10000526 	beq	r2,zero,100b10c <___vfiprintf_internal_r+0x14b8>
 100b0f8:	00800c04 	movi	r2,48
 100b0fc:	d88019c5 	stb	r2,103(sp)
 100b100:	dd002817 	ldw	r20,160(sp)
 100b104:	ddc019c4 	addi	r23,sp,103
 100b108:	003bd506 	br	100a060 <__alt_data_end+0xff80a060>
 100b10c:	0029883a 	mov	r20,zero
 100b110:	ddc01a04 	addi	r23,sp,104
 100b114:	003bd206 	br	100a060 <__alt_data_end+0xff80a060>
 100b118:	d9002303 	ldbu	r4,140(sp)
 100b11c:	d9001d85 	stb	r4,118(sp)
 100b120:	003da606 	br	100a7bc <__alt_data_end+0xff80a7bc>
 100b124:	d8c02303 	ldbu	r3,140(sp)
 100b128:	d8c01d85 	stb	r3,118(sp)
 100b12c:	003c7606 	br	100a308 <__alt_data_end+0xff80a308>
 100b130:	d8c02303 	ldbu	r3,140(sp)
 100b134:	d8c01d85 	stb	r3,118(sp)
 100b138:	003c6506 	br	100a2d0 <__alt_data_end+0xff80a2d0>
 100b13c:	d9002303 	ldbu	r4,140(sp)
 100b140:	d9001d85 	stb	r4,118(sp)
 100b144:	003d3d06 	br	100a63c <__alt_data_end+0xff80a63c>
 100b148:	d8c02303 	ldbu	r3,140(sp)
 100b14c:	d8c01d85 	stb	r3,118(sp)
 100b150:	003d1d06 	br	100a5c8 <__alt_data_end+0xff80a5c8>
 100b154:	d8c02303 	ldbu	r3,140(sp)
 100b158:	d8c01d85 	stb	r3,118(sp)
 100b15c:	003d0306 	br	100a56c <__alt_data_end+0xff80a56c>

0100b160 <__vfiprintf_internal>:
 100b160:	00804074 	movhi	r2,257
 100b164:	108fc304 	addi	r2,r2,16140
 100b168:	300f883a 	mov	r7,r6
 100b16c:	280d883a 	mov	r6,r5
 100b170:	200b883a 	mov	r5,r4
 100b174:	11000017 	ldw	r4,0(r2)
 100b178:	1009c541 	jmpi	1009c54 <___vfiprintf_internal_r>

0100b17c <__sbprintf>:
 100b17c:	2880030b 	ldhu	r2,12(r5)
 100b180:	2ac01917 	ldw	r11,100(r5)
 100b184:	2a80038b 	ldhu	r10,14(r5)
 100b188:	2a400717 	ldw	r9,28(r5)
 100b18c:	2a000917 	ldw	r8,36(r5)
 100b190:	defee204 	addi	sp,sp,-1144
 100b194:	00c10004 	movi	r3,1024
 100b198:	dc011a15 	stw	r16,1128(sp)
 100b19c:	10bfff4c 	andi	r2,r2,65533
 100b1a0:	2821883a 	mov	r16,r5
 100b1a4:	d8cb883a 	add	r5,sp,r3
 100b1a8:	dc811c15 	stw	r18,1136(sp)
 100b1ac:	dc411b15 	stw	r17,1132(sp)
 100b1b0:	dfc11d15 	stw	ra,1140(sp)
 100b1b4:	2025883a 	mov	r18,r4
 100b1b8:	d881030d 	sth	r2,1036(sp)
 100b1bc:	dac11915 	stw	r11,1124(sp)
 100b1c0:	da81038d 	sth	r10,1038(sp)
 100b1c4:	da410715 	stw	r9,1052(sp)
 100b1c8:	da010915 	stw	r8,1060(sp)
 100b1cc:	dec10015 	stw	sp,1024(sp)
 100b1d0:	dec10415 	stw	sp,1040(sp)
 100b1d4:	d8c10215 	stw	r3,1032(sp)
 100b1d8:	d8c10515 	stw	r3,1044(sp)
 100b1dc:	d8010615 	stw	zero,1048(sp)
 100b1e0:	1009c540 	call	1009c54 <___vfiprintf_internal_r>
 100b1e4:	1023883a 	mov	r17,r2
 100b1e8:	10000416 	blt	r2,zero,100b1fc <__sbprintf+0x80>
 100b1ec:	d9410004 	addi	r5,sp,1024
 100b1f0:	9009883a 	mov	r4,r18
 100b1f4:	10064300 	call	1006430 <_fflush_r>
 100b1f8:	10000d1e 	bne	r2,zero,100b230 <__sbprintf+0xb4>
 100b1fc:	d881030b 	ldhu	r2,1036(sp)
 100b200:	1080100c 	andi	r2,r2,64
 100b204:	10000326 	beq	r2,zero,100b214 <__sbprintf+0x98>
 100b208:	8080030b 	ldhu	r2,12(r16)
 100b20c:	10801014 	ori	r2,r2,64
 100b210:	8080030d 	sth	r2,12(r16)
 100b214:	8805883a 	mov	r2,r17
 100b218:	dfc11d17 	ldw	ra,1140(sp)
 100b21c:	dc811c17 	ldw	r18,1136(sp)
 100b220:	dc411b17 	ldw	r17,1132(sp)
 100b224:	dc011a17 	ldw	r16,1128(sp)
 100b228:	dec11e04 	addi	sp,sp,1144
 100b22c:	f800283a 	ret
 100b230:	047fffc4 	movi	r17,-1
 100b234:	003ff106 	br	100b1fc <__alt_data_end+0xff80b1fc>

0100b238 <_write_r>:
 100b238:	defffd04 	addi	sp,sp,-12
 100b23c:	2805883a 	mov	r2,r5
 100b240:	dc000015 	stw	r16,0(sp)
 100b244:	04004074 	movhi	r16,257
 100b248:	dc400115 	stw	r17,4(sp)
 100b24c:	300b883a 	mov	r5,r6
 100b250:	84169404 	addi	r16,r16,23120
 100b254:	2023883a 	mov	r17,r4
 100b258:	380d883a 	mov	r6,r7
 100b25c:	1009883a 	mov	r4,r2
 100b260:	dfc00215 	stw	ra,8(sp)
 100b264:	80000015 	stw	zero,0(r16)
 100b268:	100fa880 	call	100fa88 <write>
 100b26c:	00ffffc4 	movi	r3,-1
 100b270:	10c00526 	beq	r2,r3,100b288 <_write_r+0x50>
 100b274:	dfc00217 	ldw	ra,8(sp)
 100b278:	dc400117 	ldw	r17,4(sp)
 100b27c:	dc000017 	ldw	r16,0(sp)
 100b280:	dec00304 	addi	sp,sp,12
 100b284:	f800283a 	ret
 100b288:	80c00017 	ldw	r3,0(r16)
 100b28c:	183ff926 	beq	r3,zero,100b274 <__alt_data_end+0xff80b274>
 100b290:	88c00015 	stw	r3,0(r17)
 100b294:	003ff706 	br	100b274 <__alt_data_end+0xff80b274>

0100b298 <_close_r>:
 100b298:	defffd04 	addi	sp,sp,-12
 100b29c:	dc000015 	stw	r16,0(sp)
 100b2a0:	04004074 	movhi	r16,257
 100b2a4:	dc400115 	stw	r17,4(sp)
 100b2a8:	84169404 	addi	r16,r16,23120
 100b2ac:	2023883a 	mov	r17,r4
 100b2b0:	2809883a 	mov	r4,r5
 100b2b4:	dfc00215 	stw	ra,8(sp)
 100b2b8:	80000015 	stw	zero,0(r16)
 100b2bc:	100f2000 	call	100f200 <close>
 100b2c0:	00ffffc4 	movi	r3,-1
 100b2c4:	10c00526 	beq	r2,r3,100b2dc <_close_r+0x44>
 100b2c8:	dfc00217 	ldw	ra,8(sp)
 100b2cc:	dc400117 	ldw	r17,4(sp)
 100b2d0:	dc000017 	ldw	r16,0(sp)
 100b2d4:	dec00304 	addi	sp,sp,12
 100b2d8:	f800283a 	ret
 100b2dc:	80c00017 	ldw	r3,0(r16)
 100b2e0:	183ff926 	beq	r3,zero,100b2c8 <__alt_data_end+0xff80b2c8>
 100b2e4:	88c00015 	stw	r3,0(r17)
 100b2e8:	003ff706 	br	100b2c8 <__alt_data_end+0xff80b2c8>

0100b2ec <_calloc_r>:
 100b2ec:	defffe04 	addi	sp,sp,-8
 100b2f0:	2805883a 	mov	r2,r5
 100b2f4:	dc000015 	stw	r16,0(sp)
 100b2f8:	300b883a 	mov	r5,r6
 100b2fc:	2021883a 	mov	r16,r4
 100b300:	1009883a 	mov	r4,r2
 100b304:	dfc00115 	stw	ra,4(sp)
 100b308:	100c8f80 	call	100c8f8 <__mulsi3>
 100b30c:	100b883a 	mov	r5,r2
 100b310:	8009883a 	mov	r4,r16
 100b314:	10075880 	call	1007588 <_malloc_r>
 100b318:	10002926 	beq	r2,zero,100b3c0 <_calloc_r+0xd4>
 100b31c:	11bfff17 	ldw	r6,-4(r2)
 100b320:	1021883a 	mov	r16,r2
 100b324:	00bfff04 	movi	r2,-4
 100b328:	308c703a 	and	r6,r6,r2
 100b32c:	00c00904 	movi	r3,36
 100b330:	308d883a 	add	r6,r6,r2
 100b334:	19801636 	bltu	r3,r6,100b390 <_calloc_r+0xa4>
 100b338:	008004c4 	movi	r2,19
 100b33c:	11800b2e 	bgeu	r2,r6,100b36c <_calloc_r+0x80>
 100b340:	80000015 	stw	zero,0(r16)
 100b344:	80000115 	stw	zero,4(r16)
 100b348:	008006c4 	movi	r2,27
 100b34c:	11801a2e 	bgeu	r2,r6,100b3b8 <_calloc_r+0xcc>
 100b350:	80000215 	stw	zero,8(r16)
 100b354:	80000315 	stw	zero,12(r16)
 100b358:	30c0151e 	bne	r6,r3,100b3b0 <_calloc_r+0xc4>
 100b35c:	80000415 	stw	zero,16(r16)
 100b360:	80800604 	addi	r2,r16,24
 100b364:	80000515 	stw	zero,20(r16)
 100b368:	00000106 	br	100b370 <_calloc_r+0x84>
 100b36c:	8005883a 	mov	r2,r16
 100b370:	10000015 	stw	zero,0(r2)
 100b374:	10000115 	stw	zero,4(r2)
 100b378:	10000215 	stw	zero,8(r2)
 100b37c:	8005883a 	mov	r2,r16
 100b380:	dfc00117 	ldw	ra,4(sp)
 100b384:	dc000017 	ldw	r16,0(sp)
 100b388:	dec00204 	addi	sp,sp,8
 100b38c:	f800283a 	ret
 100b390:	000b883a 	mov	r5,zero
 100b394:	8009883a 	mov	r4,r16
 100b398:	100811c0 	call	100811c <memset>
 100b39c:	8005883a 	mov	r2,r16
 100b3a0:	dfc00117 	ldw	ra,4(sp)
 100b3a4:	dc000017 	ldw	r16,0(sp)
 100b3a8:	dec00204 	addi	sp,sp,8
 100b3ac:	f800283a 	ret
 100b3b0:	80800404 	addi	r2,r16,16
 100b3b4:	003fee06 	br	100b370 <__alt_data_end+0xff80b370>
 100b3b8:	80800204 	addi	r2,r16,8
 100b3bc:	003fec06 	br	100b370 <__alt_data_end+0xff80b370>
 100b3c0:	0005883a 	mov	r2,zero
 100b3c4:	003fee06 	br	100b380 <__alt_data_end+0xff80b380>

0100b3c8 <_fclose_r>:
 100b3c8:	28003926 	beq	r5,zero,100b4b0 <_fclose_r+0xe8>
 100b3cc:	defffc04 	addi	sp,sp,-16
 100b3d0:	dc400115 	stw	r17,4(sp)
 100b3d4:	dc000015 	stw	r16,0(sp)
 100b3d8:	dfc00315 	stw	ra,12(sp)
 100b3dc:	dc800215 	stw	r18,8(sp)
 100b3e0:	2023883a 	mov	r17,r4
 100b3e4:	2821883a 	mov	r16,r5
 100b3e8:	20000226 	beq	r4,zero,100b3f4 <_fclose_r+0x2c>
 100b3ec:	20800e17 	ldw	r2,56(r4)
 100b3f0:	10002726 	beq	r2,zero,100b490 <_fclose_r+0xc8>
 100b3f4:	8080030f 	ldh	r2,12(r16)
 100b3f8:	1000071e 	bne	r2,zero,100b418 <_fclose_r+0x50>
 100b3fc:	0005883a 	mov	r2,zero
 100b400:	dfc00317 	ldw	ra,12(sp)
 100b404:	dc800217 	ldw	r18,8(sp)
 100b408:	dc400117 	ldw	r17,4(sp)
 100b40c:	dc000017 	ldw	r16,0(sp)
 100b410:	dec00404 	addi	sp,sp,16
 100b414:	f800283a 	ret
 100b418:	800b883a 	mov	r5,r16
 100b41c:	8809883a 	mov	r4,r17
 100b420:	10062140 	call	1006214 <__sflush_r>
 100b424:	1025883a 	mov	r18,r2
 100b428:	80800b17 	ldw	r2,44(r16)
 100b42c:	10000426 	beq	r2,zero,100b440 <_fclose_r+0x78>
 100b430:	81400717 	ldw	r5,28(r16)
 100b434:	8809883a 	mov	r4,r17
 100b438:	103ee83a 	callr	r2
 100b43c:	10001616 	blt	r2,zero,100b498 <_fclose_r+0xd0>
 100b440:	8080030b 	ldhu	r2,12(r16)
 100b444:	1080200c 	andi	r2,r2,128
 100b448:	1000151e 	bne	r2,zero,100b4a0 <_fclose_r+0xd8>
 100b44c:	81400c17 	ldw	r5,48(r16)
 100b450:	28000526 	beq	r5,zero,100b468 <_fclose_r+0xa0>
 100b454:	80801004 	addi	r2,r16,64
 100b458:	28800226 	beq	r5,r2,100b464 <_fclose_r+0x9c>
 100b45c:	8809883a 	mov	r4,r17
 100b460:	10069900 	call	1006990 <_free_r>
 100b464:	80000c15 	stw	zero,48(r16)
 100b468:	81401117 	ldw	r5,68(r16)
 100b46c:	28000326 	beq	r5,zero,100b47c <_fclose_r+0xb4>
 100b470:	8809883a 	mov	r4,r17
 100b474:	10069900 	call	1006990 <_free_r>
 100b478:	80001115 	stw	zero,68(r16)
 100b47c:	100682c0 	call	100682c <__sfp_lock_acquire>
 100b480:	8000030d 	sth	zero,12(r16)
 100b484:	10068300 	call	1006830 <__sfp_lock_release>
 100b488:	9005883a 	mov	r2,r18
 100b48c:	003fdc06 	br	100b400 <__alt_data_end+0xff80b400>
 100b490:	100681c0 	call	100681c <__sinit>
 100b494:	003fd706 	br	100b3f4 <__alt_data_end+0xff80b3f4>
 100b498:	04bfffc4 	movi	r18,-1
 100b49c:	003fe806 	br	100b440 <__alt_data_end+0xff80b440>
 100b4a0:	81400417 	ldw	r5,16(r16)
 100b4a4:	8809883a 	mov	r4,r17
 100b4a8:	10069900 	call	1006990 <_free_r>
 100b4ac:	003fe706 	br	100b44c <__alt_data_end+0xff80b44c>
 100b4b0:	0005883a 	mov	r2,zero
 100b4b4:	f800283a 	ret

0100b4b8 <fclose>:
 100b4b8:	00804074 	movhi	r2,257
 100b4bc:	108fc304 	addi	r2,r2,16140
 100b4c0:	200b883a 	mov	r5,r4
 100b4c4:	11000017 	ldw	r4,0(r2)
 100b4c8:	100b3c81 	jmpi	100b3c8 <_fclose_r>

0100b4cc <__fputwc>:
 100b4cc:	defff804 	addi	sp,sp,-32
 100b4d0:	dcc00415 	stw	r19,16(sp)
 100b4d4:	dc800315 	stw	r18,12(sp)
 100b4d8:	dc000115 	stw	r16,4(sp)
 100b4dc:	dfc00715 	stw	ra,28(sp)
 100b4e0:	dd400615 	stw	r21,24(sp)
 100b4e4:	dd000515 	stw	r20,20(sp)
 100b4e8:	dc400215 	stw	r17,8(sp)
 100b4ec:	2027883a 	mov	r19,r4
 100b4f0:	2825883a 	mov	r18,r5
 100b4f4:	3021883a 	mov	r16,r6
 100b4f8:	10073780 	call	1007378 <__locale_mb_cur_max>
 100b4fc:	00c00044 	movi	r3,1
 100b500:	10c03e26 	beq	r2,r3,100b5fc <__fputwc+0x130>
 100b504:	81c01704 	addi	r7,r16,92
 100b508:	900d883a 	mov	r6,r18
 100b50c:	d80b883a 	mov	r5,sp
 100b510:	9809883a 	mov	r4,r19
 100b514:	100b99c0 	call	100b99c <_wcrtomb_r>
 100b518:	1029883a 	mov	r20,r2
 100b51c:	00bfffc4 	movi	r2,-1
 100b520:	a0802026 	beq	r20,r2,100b5a4 <__fputwc+0xd8>
 100b524:	d9400003 	ldbu	r5,0(sp)
 100b528:	a0001c26 	beq	r20,zero,100b59c <__fputwc+0xd0>
 100b52c:	0023883a 	mov	r17,zero
 100b530:	05400284 	movi	r21,10
 100b534:	00000906 	br	100b55c <__fputwc+0x90>
 100b538:	80800017 	ldw	r2,0(r16)
 100b53c:	11400005 	stb	r5,0(r2)
 100b540:	80c00017 	ldw	r3,0(r16)
 100b544:	18c00044 	addi	r3,r3,1
 100b548:	80c00015 	stw	r3,0(r16)
 100b54c:	8c400044 	addi	r17,r17,1
 100b550:	dc45883a 	add	r2,sp,r17
 100b554:	8d00112e 	bgeu	r17,r20,100b59c <__fputwc+0xd0>
 100b558:	11400003 	ldbu	r5,0(r2)
 100b55c:	80c00217 	ldw	r3,8(r16)
 100b560:	18ffffc4 	addi	r3,r3,-1
 100b564:	80c00215 	stw	r3,8(r16)
 100b568:	183ff30e 	bge	r3,zero,100b538 <__alt_data_end+0xff80b538>
 100b56c:	80800617 	ldw	r2,24(r16)
 100b570:	18801916 	blt	r3,r2,100b5d8 <__fputwc+0x10c>
 100b574:	80800017 	ldw	r2,0(r16)
 100b578:	11400005 	stb	r5,0(r2)
 100b57c:	80800017 	ldw	r2,0(r16)
 100b580:	10c00003 	ldbu	r3,0(r2)
 100b584:	10800044 	addi	r2,r2,1
 100b588:	1d402326 	beq	r3,r21,100b618 <__fputwc+0x14c>
 100b58c:	80800015 	stw	r2,0(r16)
 100b590:	8c400044 	addi	r17,r17,1
 100b594:	dc45883a 	add	r2,sp,r17
 100b598:	8d3fef36 	bltu	r17,r20,100b558 <__alt_data_end+0xff80b558>
 100b59c:	9005883a 	mov	r2,r18
 100b5a0:	00000406 	br	100b5b4 <__fputwc+0xe8>
 100b5a4:	80c0030b 	ldhu	r3,12(r16)
 100b5a8:	a005883a 	mov	r2,r20
 100b5ac:	18c01014 	ori	r3,r3,64
 100b5b0:	80c0030d 	sth	r3,12(r16)
 100b5b4:	dfc00717 	ldw	ra,28(sp)
 100b5b8:	dd400617 	ldw	r21,24(sp)
 100b5bc:	dd000517 	ldw	r20,20(sp)
 100b5c0:	dcc00417 	ldw	r19,16(sp)
 100b5c4:	dc800317 	ldw	r18,12(sp)
 100b5c8:	dc400217 	ldw	r17,8(sp)
 100b5cc:	dc000117 	ldw	r16,4(sp)
 100b5d0:	dec00804 	addi	sp,sp,32
 100b5d4:	f800283a 	ret
 100b5d8:	800d883a 	mov	r6,r16
 100b5dc:	29403fcc 	andi	r5,r5,255
 100b5e0:	9809883a 	mov	r4,r19
 100b5e4:	100b8440 	call	100b844 <__swbuf_r>
 100b5e8:	10bfffe0 	cmpeqi	r2,r2,-1
 100b5ec:	10803fcc 	andi	r2,r2,255
 100b5f0:	103fd626 	beq	r2,zero,100b54c <__alt_data_end+0xff80b54c>
 100b5f4:	00bfffc4 	movi	r2,-1
 100b5f8:	003fee06 	br	100b5b4 <__alt_data_end+0xff80b5b4>
 100b5fc:	90ffffc4 	addi	r3,r18,-1
 100b600:	01003f84 	movi	r4,254
 100b604:	20ffbf36 	bltu	r4,r3,100b504 <__alt_data_end+0xff80b504>
 100b608:	900b883a 	mov	r5,r18
 100b60c:	dc800005 	stb	r18,0(sp)
 100b610:	1029883a 	mov	r20,r2
 100b614:	003fc506 	br	100b52c <__alt_data_end+0xff80b52c>
 100b618:	800d883a 	mov	r6,r16
 100b61c:	a80b883a 	mov	r5,r21
 100b620:	9809883a 	mov	r4,r19
 100b624:	100b8440 	call	100b844 <__swbuf_r>
 100b628:	10bfffe0 	cmpeqi	r2,r2,-1
 100b62c:	003fef06 	br	100b5ec <__alt_data_end+0xff80b5ec>

0100b630 <_fputwc_r>:
 100b630:	3080030b 	ldhu	r2,12(r6)
 100b634:	10c8000c 	andi	r3,r2,8192
 100b638:	1800051e 	bne	r3,zero,100b650 <_fputwc_r+0x20>
 100b63c:	30c01917 	ldw	r3,100(r6)
 100b640:	10880014 	ori	r2,r2,8192
 100b644:	3080030d 	sth	r2,12(r6)
 100b648:	18880014 	ori	r2,r3,8192
 100b64c:	30801915 	stw	r2,100(r6)
 100b650:	100b4cc1 	jmpi	100b4cc <__fputwc>

0100b654 <fputwc>:
 100b654:	00804074 	movhi	r2,257
 100b658:	defffc04 	addi	sp,sp,-16
 100b65c:	108fc304 	addi	r2,r2,16140
 100b660:	dc000115 	stw	r16,4(sp)
 100b664:	14000017 	ldw	r16,0(r2)
 100b668:	dc400215 	stw	r17,8(sp)
 100b66c:	dfc00315 	stw	ra,12(sp)
 100b670:	2023883a 	mov	r17,r4
 100b674:	80000226 	beq	r16,zero,100b680 <fputwc+0x2c>
 100b678:	80800e17 	ldw	r2,56(r16)
 100b67c:	10001026 	beq	r2,zero,100b6c0 <fputwc+0x6c>
 100b680:	2880030b 	ldhu	r2,12(r5)
 100b684:	10c8000c 	andi	r3,r2,8192
 100b688:	1800051e 	bne	r3,zero,100b6a0 <fputwc+0x4c>
 100b68c:	28c01917 	ldw	r3,100(r5)
 100b690:	10880014 	ori	r2,r2,8192
 100b694:	2880030d 	sth	r2,12(r5)
 100b698:	18880014 	ori	r2,r3,8192
 100b69c:	28801915 	stw	r2,100(r5)
 100b6a0:	280d883a 	mov	r6,r5
 100b6a4:	8009883a 	mov	r4,r16
 100b6a8:	880b883a 	mov	r5,r17
 100b6ac:	dfc00317 	ldw	ra,12(sp)
 100b6b0:	dc400217 	ldw	r17,8(sp)
 100b6b4:	dc000117 	ldw	r16,4(sp)
 100b6b8:	dec00404 	addi	sp,sp,16
 100b6bc:	100b4cc1 	jmpi	100b4cc <__fputwc>
 100b6c0:	8009883a 	mov	r4,r16
 100b6c4:	d9400015 	stw	r5,0(sp)
 100b6c8:	100681c0 	call	100681c <__sinit>
 100b6cc:	d9400017 	ldw	r5,0(sp)
 100b6d0:	003feb06 	br	100b680 <__alt_data_end+0xff80b680>

0100b6d4 <_fstat_r>:
 100b6d4:	defffd04 	addi	sp,sp,-12
 100b6d8:	2805883a 	mov	r2,r5
 100b6dc:	dc000015 	stw	r16,0(sp)
 100b6e0:	04004074 	movhi	r16,257
 100b6e4:	dc400115 	stw	r17,4(sp)
 100b6e8:	84169404 	addi	r16,r16,23120
 100b6ec:	2023883a 	mov	r17,r4
 100b6f0:	300b883a 	mov	r5,r6
 100b6f4:	1009883a 	mov	r4,r2
 100b6f8:	dfc00215 	stw	ra,8(sp)
 100b6fc:	80000015 	stw	zero,0(r16)
 100b700:	100f3400 	call	100f340 <fstat>
 100b704:	00ffffc4 	movi	r3,-1
 100b708:	10c00526 	beq	r2,r3,100b720 <_fstat_r+0x4c>
 100b70c:	dfc00217 	ldw	ra,8(sp)
 100b710:	dc400117 	ldw	r17,4(sp)
 100b714:	dc000017 	ldw	r16,0(sp)
 100b718:	dec00304 	addi	sp,sp,12
 100b71c:	f800283a 	ret
 100b720:	80c00017 	ldw	r3,0(r16)
 100b724:	183ff926 	beq	r3,zero,100b70c <__alt_data_end+0xff80b70c>
 100b728:	88c00015 	stw	r3,0(r17)
 100b72c:	003ff706 	br	100b70c <__alt_data_end+0xff80b70c>

0100b730 <_isatty_r>:
 100b730:	defffd04 	addi	sp,sp,-12
 100b734:	dc000015 	stw	r16,0(sp)
 100b738:	04004074 	movhi	r16,257
 100b73c:	dc400115 	stw	r17,4(sp)
 100b740:	84169404 	addi	r16,r16,23120
 100b744:	2023883a 	mov	r17,r4
 100b748:	2809883a 	mov	r4,r5
 100b74c:	dfc00215 	stw	ra,8(sp)
 100b750:	80000015 	stw	zero,0(r16)
 100b754:	100f4340 	call	100f434 <isatty>
 100b758:	00ffffc4 	movi	r3,-1
 100b75c:	10c00526 	beq	r2,r3,100b774 <_isatty_r+0x44>
 100b760:	dfc00217 	ldw	ra,8(sp)
 100b764:	dc400117 	ldw	r17,4(sp)
 100b768:	dc000017 	ldw	r16,0(sp)
 100b76c:	dec00304 	addi	sp,sp,12
 100b770:	f800283a 	ret
 100b774:	80c00017 	ldw	r3,0(r16)
 100b778:	183ff926 	beq	r3,zero,100b760 <__alt_data_end+0xff80b760>
 100b77c:	88c00015 	stw	r3,0(r17)
 100b780:	003ff706 	br	100b760 <__alt_data_end+0xff80b760>

0100b784 <_lseek_r>:
 100b784:	defffd04 	addi	sp,sp,-12
 100b788:	2805883a 	mov	r2,r5
 100b78c:	dc000015 	stw	r16,0(sp)
 100b790:	04004074 	movhi	r16,257
 100b794:	dc400115 	stw	r17,4(sp)
 100b798:	300b883a 	mov	r5,r6
 100b79c:	84169404 	addi	r16,r16,23120
 100b7a0:	2023883a 	mov	r17,r4
 100b7a4:	380d883a 	mov	r6,r7
 100b7a8:	1009883a 	mov	r4,r2
 100b7ac:	dfc00215 	stw	ra,8(sp)
 100b7b0:	80000015 	stw	zero,0(r16)
 100b7b4:	100f6080 	call	100f608 <lseek>
 100b7b8:	00ffffc4 	movi	r3,-1
 100b7bc:	10c00526 	beq	r2,r3,100b7d4 <_lseek_r+0x50>
 100b7c0:	dfc00217 	ldw	ra,8(sp)
 100b7c4:	dc400117 	ldw	r17,4(sp)
 100b7c8:	dc000017 	ldw	r16,0(sp)
 100b7cc:	dec00304 	addi	sp,sp,12
 100b7d0:	f800283a 	ret
 100b7d4:	80c00017 	ldw	r3,0(r16)
 100b7d8:	183ff926 	beq	r3,zero,100b7c0 <__alt_data_end+0xff80b7c0>
 100b7dc:	88c00015 	stw	r3,0(r17)
 100b7e0:	003ff706 	br	100b7c0 <__alt_data_end+0xff80b7c0>

0100b7e4 <_read_r>:
 100b7e4:	defffd04 	addi	sp,sp,-12
 100b7e8:	2805883a 	mov	r2,r5
 100b7ec:	dc000015 	stw	r16,0(sp)
 100b7f0:	04004074 	movhi	r16,257
 100b7f4:	dc400115 	stw	r17,4(sp)
 100b7f8:	300b883a 	mov	r5,r6
 100b7fc:	84169404 	addi	r16,r16,23120
 100b800:	2023883a 	mov	r17,r4
 100b804:	380d883a 	mov	r6,r7
 100b808:	1009883a 	mov	r4,r2
 100b80c:	dfc00215 	stw	ra,8(sp)
 100b810:	80000015 	stw	zero,0(r16)
 100b814:	100f7e40 	call	100f7e4 <read>
 100b818:	00ffffc4 	movi	r3,-1
 100b81c:	10c00526 	beq	r2,r3,100b834 <_read_r+0x50>
 100b820:	dfc00217 	ldw	ra,8(sp)
 100b824:	dc400117 	ldw	r17,4(sp)
 100b828:	dc000017 	ldw	r16,0(sp)
 100b82c:	dec00304 	addi	sp,sp,12
 100b830:	f800283a 	ret
 100b834:	80c00017 	ldw	r3,0(r16)
 100b838:	183ff926 	beq	r3,zero,100b820 <__alt_data_end+0xff80b820>
 100b83c:	88c00015 	stw	r3,0(r17)
 100b840:	003ff706 	br	100b820 <__alt_data_end+0xff80b820>

0100b844 <__swbuf_r>:
 100b844:	defffb04 	addi	sp,sp,-20
 100b848:	dcc00315 	stw	r19,12(sp)
 100b84c:	dc800215 	stw	r18,8(sp)
 100b850:	dc000015 	stw	r16,0(sp)
 100b854:	dfc00415 	stw	ra,16(sp)
 100b858:	dc400115 	stw	r17,4(sp)
 100b85c:	2025883a 	mov	r18,r4
 100b860:	2827883a 	mov	r19,r5
 100b864:	3021883a 	mov	r16,r6
 100b868:	20000226 	beq	r4,zero,100b874 <__swbuf_r+0x30>
 100b86c:	20800e17 	ldw	r2,56(r4)
 100b870:	10004226 	beq	r2,zero,100b97c <__swbuf_r+0x138>
 100b874:	80800617 	ldw	r2,24(r16)
 100b878:	8100030b 	ldhu	r4,12(r16)
 100b87c:	80800215 	stw	r2,8(r16)
 100b880:	2080020c 	andi	r2,r4,8
 100b884:	10003626 	beq	r2,zero,100b960 <__swbuf_r+0x11c>
 100b888:	80c00417 	ldw	r3,16(r16)
 100b88c:	18003426 	beq	r3,zero,100b960 <__swbuf_r+0x11c>
 100b890:	2088000c 	andi	r2,r4,8192
 100b894:	9c403fcc 	andi	r17,r19,255
 100b898:	10001a26 	beq	r2,zero,100b904 <__swbuf_r+0xc0>
 100b89c:	80800017 	ldw	r2,0(r16)
 100b8a0:	81000517 	ldw	r4,20(r16)
 100b8a4:	10c7c83a 	sub	r3,r2,r3
 100b8a8:	1900200e 	bge	r3,r4,100b92c <__swbuf_r+0xe8>
 100b8ac:	18c00044 	addi	r3,r3,1
 100b8b0:	81000217 	ldw	r4,8(r16)
 100b8b4:	11400044 	addi	r5,r2,1
 100b8b8:	81400015 	stw	r5,0(r16)
 100b8bc:	213fffc4 	addi	r4,r4,-1
 100b8c0:	81000215 	stw	r4,8(r16)
 100b8c4:	14c00005 	stb	r19,0(r2)
 100b8c8:	80800517 	ldw	r2,20(r16)
 100b8cc:	10c01e26 	beq	r2,r3,100b948 <__swbuf_r+0x104>
 100b8d0:	8080030b 	ldhu	r2,12(r16)
 100b8d4:	1080004c 	andi	r2,r2,1
 100b8d8:	10000226 	beq	r2,zero,100b8e4 <__swbuf_r+0xa0>
 100b8dc:	00800284 	movi	r2,10
 100b8e0:	88801926 	beq	r17,r2,100b948 <__swbuf_r+0x104>
 100b8e4:	8805883a 	mov	r2,r17
 100b8e8:	dfc00417 	ldw	ra,16(sp)
 100b8ec:	dcc00317 	ldw	r19,12(sp)
 100b8f0:	dc800217 	ldw	r18,8(sp)
 100b8f4:	dc400117 	ldw	r17,4(sp)
 100b8f8:	dc000017 	ldw	r16,0(sp)
 100b8fc:	dec00504 	addi	sp,sp,20
 100b900:	f800283a 	ret
 100b904:	81401917 	ldw	r5,100(r16)
 100b908:	00b7ffc4 	movi	r2,-8193
 100b90c:	21080014 	ori	r4,r4,8192
 100b910:	2884703a 	and	r2,r5,r2
 100b914:	80801915 	stw	r2,100(r16)
 100b918:	80800017 	ldw	r2,0(r16)
 100b91c:	8100030d 	sth	r4,12(r16)
 100b920:	81000517 	ldw	r4,20(r16)
 100b924:	10c7c83a 	sub	r3,r2,r3
 100b928:	193fe016 	blt	r3,r4,100b8ac <__alt_data_end+0xff80b8ac>
 100b92c:	800b883a 	mov	r5,r16
 100b930:	9009883a 	mov	r4,r18
 100b934:	10064300 	call	1006430 <_fflush_r>
 100b938:	1000071e 	bne	r2,zero,100b958 <__swbuf_r+0x114>
 100b93c:	80800017 	ldw	r2,0(r16)
 100b940:	00c00044 	movi	r3,1
 100b944:	003fda06 	br	100b8b0 <__alt_data_end+0xff80b8b0>
 100b948:	800b883a 	mov	r5,r16
 100b94c:	9009883a 	mov	r4,r18
 100b950:	10064300 	call	1006430 <_fflush_r>
 100b954:	103fe326 	beq	r2,zero,100b8e4 <__alt_data_end+0xff80b8e4>
 100b958:	00bfffc4 	movi	r2,-1
 100b95c:	003fe206 	br	100b8e8 <__alt_data_end+0xff80b8e8>
 100b960:	800b883a 	mov	r5,r16
 100b964:	9009883a 	mov	r4,r18
 100b968:	10048100 	call	1004810 <__swsetup_r>
 100b96c:	103ffa1e 	bne	r2,zero,100b958 <__alt_data_end+0xff80b958>
 100b970:	8100030b 	ldhu	r4,12(r16)
 100b974:	80c00417 	ldw	r3,16(r16)
 100b978:	003fc506 	br	100b890 <__alt_data_end+0xff80b890>
 100b97c:	100681c0 	call	100681c <__sinit>
 100b980:	003fbc06 	br	100b874 <__alt_data_end+0xff80b874>

0100b984 <__swbuf>:
 100b984:	00804074 	movhi	r2,257
 100b988:	108fc304 	addi	r2,r2,16140
 100b98c:	280d883a 	mov	r6,r5
 100b990:	200b883a 	mov	r5,r4
 100b994:	11000017 	ldw	r4,0(r2)
 100b998:	100b8441 	jmpi	100b844 <__swbuf_r>

0100b99c <_wcrtomb_r>:
 100b99c:	defff604 	addi	sp,sp,-40
 100b9a0:	00804074 	movhi	r2,257
 100b9a4:	dc800815 	stw	r18,32(sp)
 100b9a8:	dc400715 	stw	r17,28(sp)
 100b9ac:	dc000615 	stw	r16,24(sp)
 100b9b0:	108fc704 	addi	r2,r2,16156
 100b9b4:	dfc00915 	stw	ra,36(sp)
 100b9b8:	2021883a 	mov	r16,r4
 100b9bc:	3823883a 	mov	r17,r7
 100b9c0:	14800017 	ldw	r18,0(r2)
 100b9c4:	28001426 	beq	r5,zero,100ba18 <_wcrtomb_r+0x7c>
 100b9c8:	d9400415 	stw	r5,16(sp)
 100b9cc:	d9800515 	stw	r6,20(sp)
 100b9d0:	100736c0 	call	100736c <__locale_charset>
 100b9d4:	d9800517 	ldw	r6,20(sp)
 100b9d8:	d9400417 	ldw	r5,16(sp)
 100b9dc:	100f883a 	mov	r7,r2
 100b9e0:	dc400015 	stw	r17,0(sp)
 100b9e4:	8009883a 	mov	r4,r16
 100b9e8:	903ee83a 	callr	r18
 100b9ec:	00ffffc4 	movi	r3,-1
 100b9f0:	10c0031e 	bne	r2,r3,100ba00 <_wcrtomb_r+0x64>
 100b9f4:	88000015 	stw	zero,0(r17)
 100b9f8:	00c02284 	movi	r3,138
 100b9fc:	80c00015 	stw	r3,0(r16)
 100ba00:	dfc00917 	ldw	ra,36(sp)
 100ba04:	dc800817 	ldw	r18,32(sp)
 100ba08:	dc400717 	ldw	r17,28(sp)
 100ba0c:	dc000617 	ldw	r16,24(sp)
 100ba10:	dec00a04 	addi	sp,sp,40
 100ba14:	f800283a 	ret
 100ba18:	100736c0 	call	100736c <__locale_charset>
 100ba1c:	100f883a 	mov	r7,r2
 100ba20:	dc400015 	stw	r17,0(sp)
 100ba24:	000d883a 	mov	r6,zero
 100ba28:	d9400104 	addi	r5,sp,4
 100ba2c:	8009883a 	mov	r4,r16
 100ba30:	903ee83a 	callr	r18
 100ba34:	003fed06 	br	100b9ec <__alt_data_end+0xff80b9ec>

0100ba38 <wcrtomb>:
 100ba38:	defff604 	addi	sp,sp,-40
 100ba3c:	00804074 	movhi	r2,257
 100ba40:	dc800615 	stw	r18,24(sp)
 100ba44:	dc400515 	stw	r17,20(sp)
 100ba48:	108fc304 	addi	r2,r2,16140
 100ba4c:	dfc00915 	stw	ra,36(sp)
 100ba50:	dd000815 	stw	r20,32(sp)
 100ba54:	dcc00715 	stw	r19,28(sp)
 100ba58:	dc000415 	stw	r16,16(sp)
 100ba5c:	3025883a 	mov	r18,r6
 100ba60:	14400017 	ldw	r17,0(r2)
 100ba64:	20001926 	beq	r4,zero,100bacc <wcrtomb+0x94>
 100ba68:	00804074 	movhi	r2,257
 100ba6c:	108fc704 	addi	r2,r2,16156
 100ba70:	15000017 	ldw	r20,0(r2)
 100ba74:	2021883a 	mov	r16,r4
 100ba78:	2827883a 	mov	r19,r5
 100ba7c:	100736c0 	call	100736c <__locale_charset>
 100ba80:	100f883a 	mov	r7,r2
 100ba84:	dc800015 	stw	r18,0(sp)
 100ba88:	980d883a 	mov	r6,r19
 100ba8c:	800b883a 	mov	r5,r16
 100ba90:	8809883a 	mov	r4,r17
 100ba94:	a03ee83a 	callr	r20
 100ba98:	00ffffc4 	movi	r3,-1
 100ba9c:	10c0031e 	bne	r2,r3,100baac <wcrtomb+0x74>
 100baa0:	90000015 	stw	zero,0(r18)
 100baa4:	00c02284 	movi	r3,138
 100baa8:	88c00015 	stw	r3,0(r17)
 100baac:	dfc00917 	ldw	ra,36(sp)
 100bab0:	dd000817 	ldw	r20,32(sp)
 100bab4:	dcc00717 	ldw	r19,28(sp)
 100bab8:	dc800617 	ldw	r18,24(sp)
 100babc:	dc400517 	ldw	r17,20(sp)
 100bac0:	dc000417 	ldw	r16,16(sp)
 100bac4:	dec00a04 	addi	sp,sp,40
 100bac8:	f800283a 	ret
 100bacc:	00804074 	movhi	r2,257
 100bad0:	108fc704 	addi	r2,r2,16156
 100bad4:	14000017 	ldw	r16,0(r2)
 100bad8:	100736c0 	call	100736c <__locale_charset>
 100badc:	100f883a 	mov	r7,r2
 100bae0:	dc800015 	stw	r18,0(sp)
 100bae4:	000d883a 	mov	r6,zero
 100bae8:	d9400104 	addi	r5,sp,4
 100baec:	8809883a 	mov	r4,r17
 100baf0:	803ee83a 	callr	r16
 100baf4:	003fe806 	br	100ba98 <__alt_data_end+0xff80ba98>

0100baf8 <__ascii_wctomb>:
 100baf8:	28000526 	beq	r5,zero,100bb10 <__ascii_wctomb+0x18>
 100bafc:	00803fc4 	movi	r2,255
 100bb00:	11800536 	bltu	r2,r6,100bb18 <__ascii_wctomb+0x20>
 100bb04:	29800005 	stb	r6,0(r5)
 100bb08:	00800044 	movi	r2,1
 100bb0c:	f800283a 	ret
 100bb10:	0005883a 	mov	r2,zero
 100bb14:	f800283a 	ret
 100bb18:	00802284 	movi	r2,138
 100bb1c:	20800015 	stw	r2,0(r4)
 100bb20:	00bfffc4 	movi	r2,-1
 100bb24:	f800283a 	ret

0100bb28 <_wctomb_r>:
 100bb28:	00804074 	movhi	r2,257
 100bb2c:	defff904 	addi	sp,sp,-28
 100bb30:	108fc704 	addi	r2,r2,16156
 100bb34:	dfc00615 	stw	ra,24(sp)
 100bb38:	dc400515 	stw	r17,20(sp)
 100bb3c:	dc000415 	stw	r16,16(sp)
 100bb40:	3823883a 	mov	r17,r7
 100bb44:	14000017 	ldw	r16,0(r2)
 100bb48:	d9000115 	stw	r4,4(sp)
 100bb4c:	d9400215 	stw	r5,8(sp)
 100bb50:	d9800315 	stw	r6,12(sp)
 100bb54:	100736c0 	call	100736c <__locale_charset>
 100bb58:	d9800317 	ldw	r6,12(sp)
 100bb5c:	d9400217 	ldw	r5,8(sp)
 100bb60:	d9000117 	ldw	r4,4(sp)
 100bb64:	100f883a 	mov	r7,r2
 100bb68:	dc400015 	stw	r17,0(sp)
 100bb6c:	803ee83a 	callr	r16
 100bb70:	dfc00617 	ldw	ra,24(sp)
 100bb74:	dc400517 	ldw	r17,20(sp)
 100bb78:	dc000417 	ldw	r16,16(sp)
 100bb7c:	dec00704 	addi	sp,sp,28
 100bb80:	f800283a 	ret

0100bb84 <__udivdi3>:
 100bb84:	defff404 	addi	sp,sp,-48
 100bb88:	dcc00515 	stw	r19,20(sp)
 100bb8c:	dc000215 	stw	r16,8(sp)
 100bb90:	dfc00b15 	stw	ra,44(sp)
 100bb94:	df000a15 	stw	fp,40(sp)
 100bb98:	ddc00915 	stw	r23,36(sp)
 100bb9c:	dd800815 	stw	r22,32(sp)
 100bba0:	dd400715 	stw	r21,28(sp)
 100bba4:	dd000615 	stw	r20,24(sp)
 100bba8:	dc800415 	stw	r18,16(sp)
 100bbac:	dc400315 	stw	r17,12(sp)
 100bbb0:	2027883a 	mov	r19,r4
 100bbb4:	2821883a 	mov	r16,r5
 100bbb8:	3800461e 	bne	r7,zero,100bcd4 <__udivdi3+0x150>
 100bbbc:	3023883a 	mov	r17,r6
 100bbc0:	2025883a 	mov	r18,r4
 100bbc4:	2980572e 	bgeu	r5,r6,100bd24 <__udivdi3+0x1a0>
 100bbc8:	00bfffd4 	movui	r2,65535
 100bbcc:	282d883a 	mov	r22,r5
 100bbd0:	1180b236 	bltu	r2,r6,100be9c <__udivdi3+0x318>
 100bbd4:	00803fc4 	movi	r2,255
 100bbd8:	1185803a 	cmpltu	r2,r2,r6
 100bbdc:	100490fa 	slli	r2,r2,3
 100bbe0:	3086d83a 	srl	r3,r6,r2
 100bbe4:	01004074 	movhi	r4,257
 100bbe8:	2108ca04 	addi	r4,r4,9000
 100bbec:	20c7883a 	add	r3,r4,r3
 100bbf0:	18c00003 	ldbu	r3,0(r3)
 100bbf4:	1885883a 	add	r2,r3,r2
 100bbf8:	00c00804 	movi	r3,32
 100bbfc:	1887c83a 	sub	r3,r3,r2
 100bc00:	18000526 	beq	r3,zero,100bc18 <__udivdi3+0x94>
 100bc04:	80e0983a 	sll	r16,r16,r3
 100bc08:	9884d83a 	srl	r2,r19,r2
 100bc0c:	30e2983a 	sll	r17,r6,r3
 100bc10:	98e4983a 	sll	r18,r19,r3
 100bc14:	142cb03a 	or	r22,r2,r16
 100bc18:	882ad43a 	srli	r21,r17,16
 100bc1c:	b009883a 	mov	r4,r22
 100bc20:	8d3fffcc 	andi	r20,r17,65535
 100bc24:	a80b883a 	mov	r5,r21
 100bc28:	100c8a00 	call	100c8a0 <__umodsi3>
 100bc2c:	b009883a 	mov	r4,r22
 100bc30:	a80b883a 	mov	r5,r21
 100bc34:	1027883a 	mov	r19,r2
 100bc38:	100c83c0 	call	100c83c <__udivsi3>
 100bc3c:	100b883a 	mov	r5,r2
 100bc40:	a009883a 	mov	r4,r20
 100bc44:	102d883a 	mov	r22,r2
 100bc48:	100c8f80 	call	100c8f8 <__mulsi3>
 100bc4c:	9826943a 	slli	r19,r19,16
 100bc50:	9006d43a 	srli	r3,r18,16
 100bc54:	1cc6b03a 	or	r3,r3,r19
 100bc58:	1880052e 	bgeu	r3,r2,100bc70 <__udivdi3+0xec>
 100bc5c:	1c47883a 	add	r3,r3,r17
 100bc60:	b13fffc4 	addi	r4,r22,-1
 100bc64:	1c400136 	bltu	r3,r17,100bc6c <__udivdi3+0xe8>
 100bc68:	18814236 	bltu	r3,r2,100c174 <__udivdi3+0x5f0>
 100bc6c:	202d883a 	mov	r22,r4
 100bc70:	18a1c83a 	sub	r16,r3,r2
 100bc74:	8009883a 	mov	r4,r16
 100bc78:	a80b883a 	mov	r5,r21
 100bc7c:	100c8a00 	call	100c8a0 <__umodsi3>
 100bc80:	1027883a 	mov	r19,r2
 100bc84:	8009883a 	mov	r4,r16
 100bc88:	a80b883a 	mov	r5,r21
 100bc8c:	9826943a 	slli	r19,r19,16
 100bc90:	100c83c0 	call	100c83c <__udivsi3>
 100bc94:	100b883a 	mov	r5,r2
 100bc98:	a009883a 	mov	r4,r20
 100bc9c:	94bfffcc 	andi	r18,r18,65535
 100bca0:	1021883a 	mov	r16,r2
 100bca4:	94e4b03a 	or	r18,r18,r19
 100bca8:	100c8f80 	call	100c8f8 <__mulsi3>
 100bcac:	9080052e 	bgeu	r18,r2,100bcc4 <__udivdi3+0x140>
 100bcb0:	8ca5883a 	add	r18,r17,r18
 100bcb4:	80ffffc4 	addi	r3,r16,-1
 100bcb8:	94410c36 	bltu	r18,r17,100c0ec <__udivdi3+0x568>
 100bcbc:	90810b2e 	bgeu	r18,r2,100c0ec <__udivdi3+0x568>
 100bcc0:	843fff84 	addi	r16,r16,-2
 100bcc4:	b004943a 	slli	r2,r22,16
 100bcc8:	0007883a 	mov	r3,zero
 100bccc:	1404b03a 	or	r2,r2,r16
 100bcd0:	00005e06 	br	100be4c <__udivdi3+0x2c8>
 100bcd4:	29c05b36 	bltu	r5,r7,100be44 <__udivdi3+0x2c0>
 100bcd8:	00bfffd4 	movui	r2,65535
 100bcdc:	11c0672e 	bgeu	r2,r7,100be7c <__udivdi3+0x2f8>
 100bce0:	00804034 	movhi	r2,256
 100bce4:	10bfffc4 	addi	r2,r2,-1
 100bce8:	11c10a36 	bltu	r2,r7,100c114 <__udivdi3+0x590>
 100bcec:	00800404 	movi	r2,16
 100bcf0:	3886d83a 	srl	r3,r7,r2
 100bcf4:	01004074 	movhi	r4,257
 100bcf8:	2108ca04 	addi	r4,r4,9000
 100bcfc:	20c7883a 	add	r3,r4,r3
 100bd00:	18c00003 	ldbu	r3,0(r3)
 100bd04:	05c00804 	movi	r23,32
 100bd08:	1885883a 	add	r2,r3,r2
 100bd0c:	b8afc83a 	sub	r23,r23,r2
 100bd10:	b800671e 	bne	r23,zero,100beb0 <__udivdi3+0x32c>
 100bd14:	3c010536 	bltu	r7,r16,100c12c <__udivdi3+0x5a8>
 100bd18:	9985403a 	cmpgeu	r2,r19,r6
 100bd1c:	0007883a 	mov	r3,zero
 100bd20:	00004a06 	br	100be4c <__udivdi3+0x2c8>
 100bd24:	3000041e 	bne	r6,zero,100bd38 <__udivdi3+0x1b4>
 100bd28:	000b883a 	mov	r5,zero
 100bd2c:	01000044 	movi	r4,1
 100bd30:	100c83c0 	call	100c83c <__udivsi3>
 100bd34:	1023883a 	mov	r17,r2
 100bd38:	00bfffd4 	movui	r2,65535
 100bd3c:	1440532e 	bgeu	r2,r17,100be8c <__udivdi3+0x308>
 100bd40:	00804034 	movhi	r2,256
 100bd44:	10bfffc4 	addi	r2,r2,-1
 100bd48:	1440f436 	bltu	r2,r17,100c11c <__udivdi3+0x598>
 100bd4c:	00800404 	movi	r2,16
 100bd50:	8886d83a 	srl	r3,r17,r2
 100bd54:	01004074 	movhi	r4,257
 100bd58:	2108ca04 	addi	r4,r4,9000
 100bd5c:	20c7883a 	add	r3,r4,r3
 100bd60:	18c00003 	ldbu	r3,0(r3)
 100bd64:	1885883a 	add	r2,r3,r2
 100bd68:	00c00804 	movi	r3,32
 100bd6c:	1887c83a 	sub	r3,r3,r2
 100bd70:	1800a51e 	bne	r3,zero,100c008 <__udivdi3+0x484>
 100bd74:	882ad43a 	srli	r21,r17,16
 100bd78:	8461c83a 	sub	r16,r16,r17
 100bd7c:	8d3fffcc 	andi	r20,r17,65535
 100bd80:	00c00044 	movi	r3,1
 100bd84:	a80b883a 	mov	r5,r21
 100bd88:	8009883a 	mov	r4,r16
 100bd8c:	d8c00115 	stw	r3,4(sp)
 100bd90:	100c8a00 	call	100c8a0 <__umodsi3>
 100bd94:	a80b883a 	mov	r5,r21
 100bd98:	8009883a 	mov	r4,r16
 100bd9c:	1027883a 	mov	r19,r2
 100bda0:	100c83c0 	call	100c83c <__udivsi3>
 100bda4:	a00b883a 	mov	r5,r20
 100bda8:	1009883a 	mov	r4,r2
 100bdac:	102d883a 	mov	r22,r2
 100bdb0:	100c8f80 	call	100c8f8 <__mulsi3>
 100bdb4:	9826943a 	slli	r19,r19,16
 100bdb8:	900ed43a 	srli	r7,r18,16
 100bdbc:	d8c00117 	ldw	r3,4(sp)
 100bdc0:	3cceb03a 	or	r7,r7,r19
 100bdc4:	3880052e 	bgeu	r7,r2,100bddc <__udivdi3+0x258>
 100bdc8:	3c4f883a 	add	r7,r7,r17
 100bdcc:	b13fffc4 	addi	r4,r22,-1
 100bdd0:	3c400136 	bltu	r7,r17,100bdd8 <__udivdi3+0x254>
 100bdd4:	3880e436 	bltu	r7,r2,100c168 <__udivdi3+0x5e4>
 100bdd8:	202d883a 	mov	r22,r4
 100bddc:	38a1c83a 	sub	r16,r7,r2
 100bde0:	8009883a 	mov	r4,r16
 100bde4:	a80b883a 	mov	r5,r21
 100bde8:	d8c00115 	stw	r3,4(sp)
 100bdec:	100c8a00 	call	100c8a0 <__umodsi3>
 100bdf0:	1027883a 	mov	r19,r2
 100bdf4:	8009883a 	mov	r4,r16
 100bdf8:	a80b883a 	mov	r5,r21
 100bdfc:	9826943a 	slli	r19,r19,16
 100be00:	100c83c0 	call	100c83c <__udivsi3>
 100be04:	a00b883a 	mov	r5,r20
 100be08:	1009883a 	mov	r4,r2
 100be0c:	94bfffcc 	andi	r18,r18,65535
 100be10:	1021883a 	mov	r16,r2
 100be14:	94e4b03a 	or	r18,r18,r19
 100be18:	100c8f80 	call	100c8f8 <__mulsi3>
 100be1c:	d8c00117 	ldw	r3,4(sp)
 100be20:	9080052e 	bgeu	r18,r2,100be38 <__udivdi3+0x2b4>
 100be24:	8ca5883a 	add	r18,r17,r18
 100be28:	813fffc4 	addi	r4,r16,-1
 100be2c:	9440ad36 	bltu	r18,r17,100c0e4 <__udivdi3+0x560>
 100be30:	9080ac2e 	bgeu	r18,r2,100c0e4 <__udivdi3+0x560>
 100be34:	843fff84 	addi	r16,r16,-2
 100be38:	b004943a 	slli	r2,r22,16
 100be3c:	1404b03a 	or	r2,r2,r16
 100be40:	00000206 	br	100be4c <__udivdi3+0x2c8>
 100be44:	0007883a 	mov	r3,zero
 100be48:	0005883a 	mov	r2,zero
 100be4c:	dfc00b17 	ldw	ra,44(sp)
 100be50:	df000a17 	ldw	fp,40(sp)
 100be54:	ddc00917 	ldw	r23,36(sp)
 100be58:	dd800817 	ldw	r22,32(sp)
 100be5c:	dd400717 	ldw	r21,28(sp)
 100be60:	dd000617 	ldw	r20,24(sp)
 100be64:	dcc00517 	ldw	r19,20(sp)
 100be68:	dc800417 	ldw	r18,16(sp)
 100be6c:	dc400317 	ldw	r17,12(sp)
 100be70:	dc000217 	ldw	r16,8(sp)
 100be74:	dec00c04 	addi	sp,sp,48
 100be78:	f800283a 	ret
 100be7c:	00803fc4 	movi	r2,255
 100be80:	11c5803a 	cmpltu	r2,r2,r7
 100be84:	100490fa 	slli	r2,r2,3
 100be88:	003f9906 	br	100bcf0 <__alt_data_end+0xff80bcf0>
 100be8c:	00803fc4 	movi	r2,255
 100be90:	1445803a 	cmpltu	r2,r2,r17
 100be94:	100490fa 	slli	r2,r2,3
 100be98:	003fad06 	br	100bd50 <__alt_data_end+0xff80bd50>
 100be9c:	00804034 	movhi	r2,256
 100bea0:	10bfffc4 	addi	r2,r2,-1
 100bea4:	11809f36 	bltu	r2,r6,100c124 <__udivdi3+0x5a0>
 100bea8:	00800404 	movi	r2,16
 100beac:	003f4c06 	br	100bbe0 <__alt_data_end+0xff80bbe0>
 100beb0:	3dce983a 	sll	r7,r7,r23
 100beb4:	30b8d83a 	srl	fp,r6,r2
 100beb8:	80a2d83a 	srl	r17,r16,r2
 100bebc:	35cc983a 	sll	r6,r6,r23
 100bec0:	3f38b03a 	or	fp,r7,fp
 100bec4:	e024d43a 	srli	r18,fp,16
 100bec8:	9884d83a 	srl	r2,r19,r2
 100becc:	85e0983a 	sll	r16,r16,r23
 100bed0:	8809883a 	mov	r4,r17
 100bed4:	900b883a 	mov	r5,r18
 100bed8:	d9800015 	stw	r6,0(sp)
 100bedc:	1420b03a 	or	r16,r2,r16
 100bee0:	100c8a00 	call	100c8a0 <__umodsi3>
 100bee4:	900b883a 	mov	r5,r18
 100bee8:	8809883a 	mov	r4,r17
 100beec:	1029883a 	mov	r20,r2
 100bef0:	e5bfffcc 	andi	r22,fp,65535
 100bef4:	100c83c0 	call	100c83c <__udivsi3>
 100bef8:	100b883a 	mov	r5,r2
 100befc:	b009883a 	mov	r4,r22
 100bf00:	102b883a 	mov	r21,r2
 100bf04:	100c8f80 	call	100c8f8 <__mulsi3>
 100bf08:	a028943a 	slli	r20,r20,16
 100bf0c:	8006d43a 	srli	r3,r16,16
 100bf10:	1d06b03a 	or	r3,r3,r20
 100bf14:	1880042e 	bgeu	r3,r2,100bf28 <__udivdi3+0x3a4>
 100bf18:	1f07883a 	add	r3,r3,fp
 100bf1c:	a93fffc4 	addi	r4,r21,-1
 100bf20:	1f00892e 	bgeu	r3,fp,100c148 <__udivdi3+0x5c4>
 100bf24:	202b883a 	mov	r21,r4
 100bf28:	18a3c83a 	sub	r17,r3,r2
 100bf2c:	8809883a 	mov	r4,r17
 100bf30:	900b883a 	mov	r5,r18
 100bf34:	100c8a00 	call	100c8a0 <__umodsi3>
 100bf38:	1029883a 	mov	r20,r2
 100bf3c:	8809883a 	mov	r4,r17
 100bf40:	900b883a 	mov	r5,r18
 100bf44:	a028943a 	slli	r20,r20,16
 100bf48:	100c83c0 	call	100c83c <__udivsi3>
 100bf4c:	100b883a 	mov	r5,r2
 100bf50:	b009883a 	mov	r4,r22
 100bf54:	843fffcc 	andi	r16,r16,65535
 100bf58:	1023883a 	mov	r17,r2
 100bf5c:	8520b03a 	or	r16,r16,r20
 100bf60:	100c8f80 	call	100c8f8 <__mulsi3>
 100bf64:	8080042e 	bgeu	r16,r2,100bf78 <__udivdi3+0x3f4>
 100bf68:	8721883a 	add	r16,r16,fp
 100bf6c:	88ffffc4 	addi	r3,r17,-1
 100bf70:	8700712e 	bgeu	r16,fp,100c138 <__udivdi3+0x5b4>
 100bf74:	1823883a 	mov	r17,r3
 100bf78:	a80e943a 	slli	r7,r21,16
 100bf7c:	d8c00017 	ldw	r3,0(sp)
 100bf80:	80a1c83a 	sub	r16,r16,r2
 100bf84:	3c64b03a 	or	r18,r7,r17
 100bf88:	1d3fffcc 	andi	r20,r3,65535
 100bf8c:	9022d43a 	srli	r17,r18,16
 100bf90:	95bfffcc 	andi	r22,r18,65535
 100bf94:	a00b883a 	mov	r5,r20
 100bf98:	b009883a 	mov	r4,r22
 100bf9c:	182ad43a 	srli	r21,r3,16
 100bfa0:	100c8f80 	call	100c8f8 <__mulsi3>
 100bfa4:	a00b883a 	mov	r5,r20
 100bfa8:	8809883a 	mov	r4,r17
 100bfac:	1039883a 	mov	fp,r2
 100bfb0:	100c8f80 	call	100c8f8 <__mulsi3>
 100bfb4:	8809883a 	mov	r4,r17
 100bfb8:	a80b883a 	mov	r5,r21
 100bfbc:	1029883a 	mov	r20,r2
 100bfc0:	100c8f80 	call	100c8f8 <__mulsi3>
 100bfc4:	a80b883a 	mov	r5,r21
 100bfc8:	b009883a 	mov	r4,r22
 100bfcc:	1023883a 	mov	r17,r2
 100bfd0:	100c8f80 	call	100c8f8 <__mulsi3>
 100bfd4:	e006d43a 	srli	r3,fp,16
 100bfd8:	1505883a 	add	r2,r2,r20
 100bfdc:	1887883a 	add	r3,r3,r2
 100bfe0:	1d00022e 	bgeu	r3,r20,100bfec <__udivdi3+0x468>
 100bfe4:	00800074 	movhi	r2,1
 100bfe8:	88a3883a 	add	r17,r17,r2
 100bfec:	1804d43a 	srli	r2,r3,16
 100bff0:	1463883a 	add	r17,r2,r17
 100bff4:	84404436 	bltu	r16,r17,100c108 <__udivdi3+0x584>
 100bff8:	84403e26 	beq	r16,r17,100c0f4 <__udivdi3+0x570>
 100bffc:	9005883a 	mov	r2,r18
 100c000:	0007883a 	mov	r3,zero
 100c004:	003f9106 	br	100be4c <__alt_data_end+0xff80be4c>
 100c008:	88e2983a 	sll	r17,r17,r3
 100c00c:	80aed83a 	srl	r23,r16,r2
 100c010:	80e0983a 	sll	r16,r16,r3
 100c014:	882ad43a 	srli	r21,r17,16
 100c018:	9884d83a 	srl	r2,r19,r2
 100c01c:	b809883a 	mov	r4,r23
 100c020:	a80b883a 	mov	r5,r21
 100c024:	98e4983a 	sll	r18,r19,r3
 100c028:	142cb03a 	or	r22,r2,r16
 100c02c:	100c8a00 	call	100c8a0 <__umodsi3>
 100c030:	b809883a 	mov	r4,r23
 100c034:	a80b883a 	mov	r5,r21
 100c038:	1027883a 	mov	r19,r2
 100c03c:	8d3fffcc 	andi	r20,r17,65535
 100c040:	100c83c0 	call	100c83c <__udivsi3>
 100c044:	a009883a 	mov	r4,r20
 100c048:	100b883a 	mov	r5,r2
 100c04c:	102f883a 	mov	r23,r2
 100c050:	100c8f80 	call	100c8f8 <__mulsi3>
 100c054:	9826943a 	slli	r19,r19,16
 100c058:	b008d43a 	srli	r4,r22,16
 100c05c:	24c8b03a 	or	r4,r4,r19
 100c060:	2080062e 	bgeu	r4,r2,100c07c <__udivdi3+0x4f8>
 100c064:	2449883a 	add	r4,r4,r17
 100c068:	b8ffffc4 	addi	r3,r23,-1
 100c06c:	24403c36 	bltu	r4,r17,100c160 <__udivdi3+0x5dc>
 100c070:	20803b2e 	bgeu	r4,r2,100c160 <__udivdi3+0x5dc>
 100c074:	bdffff84 	addi	r23,r23,-2
 100c078:	2449883a 	add	r4,r4,r17
 100c07c:	20a1c83a 	sub	r16,r4,r2
 100c080:	a80b883a 	mov	r5,r21
 100c084:	8009883a 	mov	r4,r16
 100c088:	100c8a00 	call	100c8a0 <__umodsi3>
 100c08c:	a80b883a 	mov	r5,r21
 100c090:	8009883a 	mov	r4,r16
 100c094:	1027883a 	mov	r19,r2
 100c098:	100c83c0 	call	100c83c <__udivsi3>
 100c09c:	a009883a 	mov	r4,r20
 100c0a0:	100b883a 	mov	r5,r2
 100c0a4:	9826943a 	slli	r19,r19,16
 100c0a8:	1039883a 	mov	fp,r2
 100c0ac:	100c8f80 	call	100c8f8 <__mulsi3>
 100c0b0:	b13fffcc 	andi	r4,r22,65535
 100c0b4:	24c8b03a 	or	r4,r4,r19
 100c0b8:	2080062e 	bgeu	r4,r2,100c0d4 <__udivdi3+0x550>
 100c0bc:	2449883a 	add	r4,r4,r17
 100c0c0:	e0ffffc4 	addi	r3,fp,-1
 100c0c4:	24402436 	bltu	r4,r17,100c158 <__udivdi3+0x5d4>
 100c0c8:	2080232e 	bgeu	r4,r2,100c158 <__udivdi3+0x5d4>
 100c0cc:	e73fff84 	addi	fp,fp,-2
 100c0d0:	2449883a 	add	r4,r4,r17
 100c0d4:	b82e943a 	slli	r23,r23,16
 100c0d8:	20a1c83a 	sub	r16,r4,r2
 100c0dc:	bf06b03a 	or	r3,r23,fp
 100c0e0:	003f2806 	br	100bd84 <__alt_data_end+0xff80bd84>
 100c0e4:	2021883a 	mov	r16,r4
 100c0e8:	003f5306 	br	100be38 <__alt_data_end+0xff80be38>
 100c0ec:	1821883a 	mov	r16,r3
 100c0f0:	003ef406 	br	100bcc4 <__alt_data_end+0xff80bcc4>
 100c0f4:	1806943a 	slli	r3,r3,16
 100c0f8:	9de6983a 	sll	r19,r19,r23
 100c0fc:	e73fffcc 	andi	fp,fp,65535
 100c100:	1f07883a 	add	r3,r3,fp
 100c104:	98ffbd2e 	bgeu	r19,r3,100bffc <__alt_data_end+0xff80bffc>
 100c108:	90bfffc4 	addi	r2,r18,-1
 100c10c:	0007883a 	mov	r3,zero
 100c110:	003f4e06 	br	100be4c <__alt_data_end+0xff80be4c>
 100c114:	00800604 	movi	r2,24
 100c118:	003ef506 	br	100bcf0 <__alt_data_end+0xff80bcf0>
 100c11c:	00800604 	movi	r2,24
 100c120:	003f0b06 	br	100bd50 <__alt_data_end+0xff80bd50>
 100c124:	00800604 	movi	r2,24
 100c128:	003ead06 	br	100bbe0 <__alt_data_end+0xff80bbe0>
 100c12c:	0007883a 	mov	r3,zero
 100c130:	00800044 	movi	r2,1
 100c134:	003f4506 	br	100be4c <__alt_data_end+0xff80be4c>
 100c138:	80bf8e2e 	bgeu	r16,r2,100bf74 <__alt_data_end+0xff80bf74>
 100c13c:	8c7fff84 	addi	r17,r17,-2
 100c140:	8721883a 	add	r16,r16,fp
 100c144:	003f8c06 	br	100bf78 <__alt_data_end+0xff80bf78>
 100c148:	18bf762e 	bgeu	r3,r2,100bf24 <__alt_data_end+0xff80bf24>
 100c14c:	ad7fff84 	addi	r21,r21,-2
 100c150:	1f07883a 	add	r3,r3,fp
 100c154:	003f7406 	br	100bf28 <__alt_data_end+0xff80bf28>
 100c158:	1839883a 	mov	fp,r3
 100c15c:	003fdd06 	br	100c0d4 <__alt_data_end+0xff80c0d4>
 100c160:	182f883a 	mov	r23,r3
 100c164:	003fc506 	br	100c07c <__alt_data_end+0xff80c07c>
 100c168:	b5bfff84 	addi	r22,r22,-2
 100c16c:	3c4f883a 	add	r7,r7,r17
 100c170:	003f1a06 	br	100bddc <__alt_data_end+0xff80bddc>
 100c174:	b5bfff84 	addi	r22,r22,-2
 100c178:	1c47883a 	add	r3,r3,r17
 100c17c:	003ebc06 	br	100bc70 <__alt_data_end+0xff80bc70>

0100c180 <__umoddi3>:
 100c180:	defff304 	addi	sp,sp,-52
 100c184:	df000b15 	stw	fp,44(sp)
 100c188:	dc400415 	stw	r17,16(sp)
 100c18c:	dc000315 	stw	r16,12(sp)
 100c190:	dfc00c15 	stw	ra,48(sp)
 100c194:	ddc00a15 	stw	r23,40(sp)
 100c198:	dd800915 	stw	r22,36(sp)
 100c19c:	dd400815 	stw	r21,32(sp)
 100c1a0:	dd000715 	stw	r20,28(sp)
 100c1a4:	dcc00615 	stw	r19,24(sp)
 100c1a8:	dc800515 	stw	r18,20(sp)
 100c1ac:	2021883a 	mov	r16,r4
 100c1b0:	2823883a 	mov	r17,r5
 100c1b4:	2839883a 	mov	fp,r5
 100c1b8:	3800401e 	bne	r7,zero,100c2bc <__umoddi3+0x13c>
 100c1bc:	3027883a 	mov	r19,r6
 100c1c0:	2029883a 	mov	r20,r4
 100c1c4:	2980552e 	bgeu	r5,r6,100c31c <__umoddi3+0x19c>
 100c1c8:	00bfffd4 	movui	r2,65535
 100c1cc:	1180a236 	bltu	r2,r6,100c458 <__umoddi3+0x2d8>
 100c1d0:	01003fc4 	movi	r4,255
 100c1d4:	2189803a 	cmpltu	r4,r4,r6
 100c1d8:	200890fa 	slli	r4,r4,3
 100c1dc:	3104d83a 	srl	r2,r6,r4
 100c1e0:	00c04074 	movhi	r3,257
 100c1e4:	18c8ca04 	addi	r3,r3,9000
 100c1e8:	1885883a 	add	r2,r3,r2
 100c1ec:	10c00003 	ldbu	r3,0(r2)
 100c1f0:	00800804 	movi	r2,32
 100c1f4:	1909883a 	add	r4,r3,r4
 100c1f8:	1125c83a 	sub	r18,r2,r4
 100c1fc:	90000526 	beq	r18,zero,100c214 <__umoddi3+0x94>
 100c200:	8ca2983a 	sll	r17,r17,r18
 100c204:	8108d83a 	srl	r4,r16,r4
 100c208:	34a6983a 	sll	r19,r6,r18
 100c20c:	84a8983a 	sll	r20,r16,r18
 100c210:	2478b03a 	or	fp,r4,r17
 100c214:	982cd43a 	srli	r22,r19,16
 100c218:	e009883a 	mov	r4,fp
 100c21c:	9dffffcc 	andi	r23,r19,65535
 100c220:	b00b883a 	mov	r5,r22
 100c224:	100c8a00 	call	100c8a0 <__umodsi3>
 100c228:	b00b883a 	mov	r5,r22
 100c22c:	e009883a 	mov	r4,fp
 100c230:	102b883a 	mov	r21,r2
 100c234:	100c83c0 	call	100c83c <__udivsi3>
 100c238:	100b883a 	mov	r5,r2
 100c23c:	b809883a 	mov	r4,r23
 100c240:	100c8f80 	call	100c8f8 <__mulsi3>
 100c244:	a82a943a 	slli	r21,r21,16
 100c248:	a006d43a 	srli	r3,r20,16
 100c24c:	1d46b03a 	or	r3,r3,r21
 100c250:	1880032e 	bgeu	r3,r2,100c260 <__umoddi3+0xe0>
 100c254:	1cc7883a 	add	r3,r3,r19
 100c258:	1cc00136 	bltu	r3,r19,100c260 <__umoddi3+0xe0>
 100c25c:	18813136 	bltu	r3,r2,100c724 <__umoddi3+0x5a4>
 100c260:	18a1c83a 	sub	r16,r3,r2
 100c264:	b00b883a 	mov	r5,r22
 100c268:	8009883a 	mov	r4,r16
 100c26c:	100c8a00 	call	100c8a0 <__umodsi3>
 100c270:	b00b883a 	mov	r5,r22
 100c274:	8009883a 	mov	r4,r16
 100c278:	1023883a 	mov	r17,r2
 100c27c:	100c83c0 	call	100c83c <__udivsi3>
 100c280:	100b883a 	mov	r5,r2
 100c284:	b809883a 	mov	r4,r23
 100c288:	8822943a 	slli	r17,r17,16
 100c28c:	100c8f80 	call	100c8f8 <__mulsi3>
 100c290:	a0ffffcc 	andi	r3,r20,65535
 100c294:	1c46b03a 	or	r3,r3,r17
 100c298:	1880042e 	bgeu	r3,r2,100c2ac <__umoddi3+0x12c>
 100c29c:	1cc7883a 	add	r3,r3,r19
 100c2a0:	1cc00236 	bltu	r3,r19,100c2ac <__umoddi3+0x12c>
 100c2a4:	1880012e 	bgeu	r3,r2,100c2ac <__umoddi3+0x12c>
 100c2a8:	1cc7883a 	add	r3,r3,r19
 100c2ac:	1885c83a 	sub	r2,r3,r2
 100c2b0:	1484d83a 	srl	r2,r2,r18
 100c2b4:	0007883a 	mov	r3,zero
 100c2b8:	00005306 	br	100c408 <__umoddi3+0x288>
 100c2bc:	29c05036 	bltu	r5,r7,100c400 <__umoddi3+0x280>
 100c2c0:	00bfffd4 	movui	r2,65535
 100c2c4:	11c05c2e 	bgeu	r2,r7,100c438 <__umoddi3+0x2b8>
 100c2c8:	00804034 	movhi	r2,256
 100c2cc:	10bfffc4 	addi	r2,r2,-1
 100c2d0:	11c10636 	bltu	r2,r7,100c6ec <__umoddi3+0x56c>
 100c2d4:	01000404 	movi	r4,16
 100c2d8:	3904d83a 	srl	r2,r7,r4
 100c2dc:	00c04074 	movhi	r3,257
 100c2e0:	18c8ca04 	addi	r3,r3,9000
 100c2e4:	1885883a 	add	r2,r3,r2
 100c2e8:	14c00003 	ldbu	r19,0(r2)
 100c2ec:	00c00804 	movi	r3,32
 100c2f0:	9927883a 	add	r19,r19,r4
 100c2f4:	1ce9c83a 	sub	r20,r3,r19
 100c2f8:	a0005c1e 	bne	r20,zero,100c46c <__umoddi3+0x2ec>
 100c2fc:	3c400136 	bltu	r7,r17,100c304 <__umoddi3+0x184>
 100c300:	81810a36 	bltu	r16,r6,100c72c <__umoddi3+0x5ac>
 100c304:	8185c83a 	sub	r2,r16,r6
 100c308:	89e3c83a 	sub	r17,r17,r7
 100c30c:	8089803a 	cmpltu	r4,r16,r2
 100c310:	8939c83a 	sub	fp,r17,r4
 100c314:	e007883a 	mov	r3,fp
 100c318:	00003b06 	br	100c408 <__umoddi3+0x288>
 100c31c:	3000041e 	bne	r6,zero,100c330 <__umoddi3+0x1b0>
 100c320:	000b883a 	mov	r5,zero
 100c324:	01000044 	movi	r4,1
 100c328:	100c83c0 	call	100c83c <__udivsi3>
 100c32c:	1027883a 	mov	r19,r2
 100c330:	00bfffd4 	movui	r2,65535
 100c334:	14c0442e 	bgeu	r2,r19,100c448 <__umoddi3+0x2c8>
 100c338:	00804034 	movhi	r2,256
 100c33c:	10bfffc4 	addi	r2,r2,-1
 100c340:	14c0ec36 	bltu	r2,r19,100c6f4 <__umoddi3+0x574>
 100c344:	00800404 	movi	r2,16
 100c348:	9886d83a 	srl	r3,r19,r2
 100c34c:	01004074 	movhi	r4,257
 100c350:	2108ca04 	addi	r4,r4,9000
 100c354:	20c7883a 	add	r3,r4,r3
 100c358:	18c00003 	ldbu	r3,0(r3)
 100c35c:	1887883a 	add	r3,r3,r2
 100c360:	00800804 	movi	r2,32
 100c364:	10e5c83a 	sub	r18,r2,r3
 100c368:	9000ab1e 	bne	r18,zero,100c618 <__umoddi3+0x498>
 100c36c:	982cd43a 	srli	r22,r19,16
 100c370:	8ce3c83a 	sub	r17,r17,r19
 100c374:	9dffffcc 	andi	r23,r19,65535
 100c378:	b00b883a 	mov	r5,r22
 100c37c:	8809883a 	mov	r4,r17
 100c380:	100c8a00 	call	100c8a0 <__umodsi3>
 100c384:	b00b883a 	mov	r5,r22
 100c388:	8809883a 	mov	r4,r17
 100c38c:	102b883a 	mov	r21,r2
 100c390:	100c83c0 	call	100c83c <__udivsi3>
 100c394:	b80b883a 	mov	r5,r23
 100c398:	1009883a 	mov	r4,r2
 100c39c:	100c8f80 	call	100c8f8 <__mulsi3>
 100c3a0:	a82a943a 	slli	r21,r21,16
 100c3a4:	a006d43a 	srli	r3,r20,16
 100c3a8:	1d46b03a 	or	r3,r3,r21
 100c3ac:	1880042e 	bgeu	r3,r2,100c3c0 <__umoddi3+0x240>
 100c3b0:	1cc7883a 	add	r3,r3,r19
 100c3b4:	1cc00236 	bltu	r3,r19,100c3c0 <__umoddi3+0x240>
 100c3b8:	1880012e 	bgeu	r3,r2,100c3c0 <__umoddi3+0x240>
 100c3bc:	1cc7883a 	add	r3,r3,r19
 100c3c0:	18a1c83a 	sub	r16,r3,r2
 100c3c4:	b00b883a 	mov	r5,r22
 100c3c8:	8009883a 	mov	r4,r16
 100c3cc:	100c8a00 	call	100c8a0 <__umodsi3>
 100c3d0:	1023883a 	mov	r17,r2
 100c3d4:	b00b883a 	mov	r5,r22
 100c3d8:	8009883a 	mov	r4,r16
 100c3dc:	100c83c0 	call	100c83c <__udivsi3>
 100c3e0:	8822943a 	slli	r17,r17,16
 100c3e4:	b80b883a 	mov	r5,r23
 100c3e8:	1009883a 	mov	r4,r2
 100c3ec:	100c8f80 	call	100c8f8 <__mulsi3>
 100c3f0:	a53fffcc 	andi	r20,r20,65535
 100c3f4:	a446b03a 	or	r3,r20,r17
 100c3f8:	18bfac2e 	bgeu	r3,r2,100c2ac <__alt_data_end+0xff80c2ac>
 100c3fc:	003fa706 	br	100c29c <__alt_data_end+0xff80c29c>
 100c400:	2005883a 	mov	r2,r4
 100c404:	2807883a 	mov	r3,r5
 100c408:	dfc00c17 	ldw	ra,48(sp)
 100c40c:	df000b17 	ldw	fp,44(sp)
 100c410:	ddc00a17 	ldw	r23,40(sp)
 100c414:	dd800917 	ldw	r22,36(sp)
 100c418:	dd400817 	ldw	r21,32(sp)
 100c41c:	dd000717 	ldw	r20,28(sp)
 100c420:	dcc00617 	ldw	r19,24(sp)
 100c424:	dc800517 	ldw	r18,20(sp)
 100c428:	dc400417 	ldw	r17,16(sp)
 100c42c:	dc000317 	ldw	r16,12(sp)
 100c430:	dec00d04 	addi	sp,sp,52
 100c434:	f800283a 	ret
 100c438:	04c03fc4 	movi	r19,255
 100c43c:	99c9803a 	cmpltu	r4,r19,r7
 100c440:	200890fa 	slli	r4,r4,3
 100c444:	003fa406 	br	100c2d8 <__alt_data_end+0xff80c2d8>
 100c448:	00803fc4 	movi	r2,255
 100c44c:	14c5803a 	cmpltu	r2,r2,r19
 100c450:	100490fa 	slli	r2,r2,3
 100c454:	003fbc06 	br	100c348 <__alt_data_end+0xff80c348>
 100c458:	00804034 	movhi	r2,256
 100c45c:	10bfffc4 	addi	r2,r2,-1
 100c460:	1180a636 	bltu	r2,r6,100c6fc <__umoddi3+0x57c>
 100c464:	01000404 	movi	r4,16
 100c468:	003f5c06 	br	100c1dc <__alt_data_end+0xff80c1dc>
 100c46c:	3d0e983a 	sll	r7,r7,r20
 100c470:	34ead83a 	srl	r21,r6,r19
 100c474:	8cc6d83a 	srl	r3,r17,r19
 100c478:	8d10983a 	sll	r8,r17,r20
 100c47c:	3d6ab03a 	or	r21,r7,r21
 100c480:	a82cd43a 	srli	r22,r21,16
 100c484:	84e2d83a 	srl	r17,r16,r19
 100c488:	1809883a 	mov	r4,r3
 100c48c:	b00b883a 	mov	r5,r22
 100c490:	8a22b03a 	or	r17,r17,r8
 100c494:	3524983a 	sll	r18,r6,r20
 100c498:	dc400015 	stw	r17,0(sp)
 100c49c:	d8c00115 	stw	r3,4(sp)
 100c4a0:	100c8a00 	call	100c8a0 <__umodsi3>
 100c4a4:	d8c00117 	ldw	r3,4(sp)
 100c4a8:	b00b883a 	mov	r5,r22
 100c4ac:	1039883a 	mov	fp,r2
 100c4b0:	1809883a 	mov	r4,r3
 100c4b4:	100c83c0 	call	100c83c <__udivsi3>
 100c4b8:	adffffcc 	andi	r23,r21,65535
 100c4bc:	100b883a 	mov	r5,r2
 100c4c0:	b809883a 	mov	r4,r23
 100c4c4:	1023883a 	mov	r17,r2
 100c4c8:	100c8f80 	call	100c8f8 <__mulsi3>
 100c4cc:	d9400017 	ldw	r5,0(sp)
 100c4d0:	e008943a 	slli	r4,fp,16
 100c4d4:	8520983a 	sll	r16,r16,r20
 100c4d8:	2806d43a 	srli	r3,r5,16
 100c4dc:	1906b03a 	or	r3,r3,r4
 100c4e0:	1880042e 	bgeu	r3,r2,100c4f4 <__umoddi3+0x374>
 100c4e4:	1d47883a 	add	r3,r3,r21
 100c4e8:	893fffc4 	addi	r4,r17,-1
 100c4ec:	1d40892e 	bgeu	r3,r21,100c714 <__umoddi3+0x594>
 100c4f0:	2023883a 	mov	r17,r4
 100c4f4:	18b9c83a 	sub	fp,r3,r2
 100c4f8:	b00b883a 	mov	r5,r22
 100c4fc:	e009883a 	mov	r4,fp
 100c500:	100c8a00 	call	100c8a0 <__umodsi3>
 100c504:	b00b883a 	mov	r5,r22
 100c508:	e009883a 	mov	r4,fp
 100c50c:	d8800215 	stw	r2,8(sp)
 100c510:	100c83c0 	call	100c83c <__udivsi3>
 100c514:	100b883a 	mov	r5,r2
 100c518:	b809883a 	mov	r4,r23
 100c51c:	102d883a 	mov	r22,r2
 100c520:	100c8f80 	call	100c8f8 <__mulsi3>
 100c524:	d9800217 	ldw	r6,8(sp)
 100c528:	d8c00017 	ldw	r3,0(sp)
 100c52c:	300c943a 	slli	r6,r6,16
 100c530:	1a3fffcc 	andi	r8,r3,65535
 100c534:	4190b03a 	or	r8,r8,r6
 100c538:	4080042e 	bgeu	r8,r2,100c54c <__umoddi3+0x3cc>
 100c53c:	4551883a 	add	r8,r8,r21
 100c540:	b0ffffc4 	addi	r3,r22,-1
 100c544:	45406f2e 	bgeu	r8,r21,100c704 <__umoddi3+0x584>
 100c548:	182d883a 	mov	r22,r3
 100c54c:	880e943a 	slli	r7,r17,16
 100c550:	9006d43a 	srli	r3,r18,16
 100c554:	91bfffcc 	andi	r6,r18,65535
 100c558:	3dacb03a 	or	r22,r7,r22
 100c55c:	b02ed43a 	srli	r23,r22,16
 100c560:	b5bfffcc 	andi	r22,r22,65535
 100c564:	300b883a 	mov	r5,r6
 100c568:	b009883a 	mov	r4,r22
 100c56c:	40a3c83a 	sub	r17,r8,r2
 100c570:	d8c00115 	stw	r3,4(sp)
 100c574:	d9800215 	stw	r6,8(sp)
 100c578:	100c8f80 	call	100c8f8 <__mulsi3>
 100c57c:	d9800217 	ldw	r6,8(sp)
 100c580:	b809883a 	mov	r4,r23
 100c584:	1039883a 	mov	fp,r2
 100c588:	300b883a 	mov	r5,r6
 100c58c:	100c8f80 	call	100c8f8 <__mulsi3>
 100c590:	d8c00117 	ldw	r3,4(sp)
 100c594:	b809883a 	mov	r4,r23
 100c598:	d8800215 	stw	r2,8(sp)
 100c59c:	180b883a 	mov	r5,r3
 100c5a0:	100c8f80 	call	100c8f8 <__mulsi3>
 100c5a4:	d8c00117 	ldw	r3,4(sp)
 100c5a8:	b009883a 	mov	r4,r22
 100c5ac:	102f883a 	mov	r23,r2
 100c5b0:	180b883a 	mov	r5,r3
 100c5b4:	100c8f80 	call	100c8f8 <__mulsi3>
 100c5b8:	d9800217 	ldw	r6,8(sp)
 100c5bc:	e006d43a 	srli	r3,fp,16
 100c5c0:	1185883a 	add	r2,r2,r6
 100c5c4:	1885883a 	add	r2,r3,r2
 100c5c8:	1180022e 	bgeu	r2,r6,100c5d4 <__umoddi3+0x454>
 100c5cc:	00c00074 	movhi	r3,1
 100c5d0:	b8ef883a 	add	r23,r23,r3
 100c5d4:	1006d43a 	srli	r3,r2,16
 100c5d8:	1004943a 	slli	r2,r2,16
 100c5dc:	e73fffcc 	andi	fp,fp,65535
 100c5e0:	1dc7883a 	add	r3,r3,r23
 100c5e4:	1739883a 	add	fp,r2,fp
 100c5e8:	88c03a36 	bltu	r17,r3,100c6d4 <__umoddi3+0x554>
 100c5ec:	88c05126 	beq	r17,r3,100c734 <__umoddi3+0x5b4>
 100c5f0:	88c9c83a 	sub	r4,r17,r3
 100c5f4:	e00f883a 	mov	r7,fp
 100c5f8:	81cfc83a 	sub	r7,r16,r7
 100c5fc:	81c7803a 	cmpltu	r3,r16,r7
 100c600:	20c7c83a 	sub	r3,r4,r3
 100c604:	1cc4983a 	sll	r2,r3,r19
 100c608:	3d0ed83a 	srl	r7,r7,r20
 100c60c:	1d06d83a 	srl	r3,r3,r20
 100c610:	11c4b03a 	or	r2,r2,r7
 100c614:	003f7c06 	br	100c408 <__alt_data_end+0xff80c408>
 100c618:	9ca6983a 	sll	r19,r19,r18
 100c61c:	88f8d83a 	srl	fp,r17,r3
 100c620:	80c4d83a 	srl	r2,r16,r3
 100c624:	982cd43a 	srli	r22,r19,16
 100c628:	8ca2983a 	sll	r17,r17,r18
 100c62c:	e009883a 	mov	r4,fp
 100c630:	b00b883a 	mov	r5,r22
 100c634:	146ab03a 	or	r21,r2,r17
 100c638:	100c8a00 	call	100c8a0 <__umodsi3>
 100c63c:	b00b883a 	mov	r5,r22
 100c640:	e009883a 	mov	r4,fp
 100c644:	1029883a 	mov	r20,r2
 100c648:	9dffffcc 	andi	r23,r19,65535
 100c64c:	100c83c0 	call	100c83c <__udivsi3>
 100c650:	b809883a 	mov	r4,r23
 100c654:	100b883a 	mov	r5,r2
 100c658:	100c8f80 	call	100c8f8 <__mulsi3>
 100c65c:	a008943a 	slli	r4,r20,16
 100c660:	a806d43a 	srli	r3,r21,16
 100c664:	84a8983a 	sll	r20,r16,r18
 100c668:	1906b03a 	or	r3,r3,r4
 100c66c:	1880042e 	bgeu	r3,r2,100c680 <__umoddi3+0x500>
 100c670:	1cc7883a 	add	r3,r3,r19
 100c674:	1cc00236 	bltu	r3,r19,100c680 <__umoddi3+0x500>
 100c678:	1880012e 	bgeu	r3,r2,100c680 <__umoddi3+0x500>
 100c67c:	1cc7883a 	add	r3,r3,r19
 100c680:	18a3c83a 	sub	r17,r3,r2
 100c684:	b00b883a 	mov	r5,r22
 100c688:	8809883a 	mov	r4,r17
 100c68c:	100c8a00 	call	100c8a0 <__umodsi3>
 100c690:	b00b883a 	mov	r5,r22
 100c694:	8809883a 	mov	r4,r17
 100c698:	1021883a 	mov	r16,r2
 100c69c:	100c83c0 	call	100c83c <__udivsi3>
 100c6a0:	100b883a 	mov	r5,r2
 100c6a4:	b809883a 	mov	r4,r23
 100c6a8:	8020943a 	slli	r16,r16,16
 100c6ac:	100c8f80 	call	100c8f8 <__mulsi3>
 100c6b0:	a8ffffcc 	andi	r3,r21,65535
 100c6b4:	1c06b03a 	or	r3,r3,r16
 100c6b8:	1880042e 	bgeu	r3,r2,100c6cc <__umoddi3+0x54c>
 100c6bc:	1cc7883a 	add	r3,r3,r19
 100c6c0:	1cc00236 	bltu	r3,r19,100c6cc <__umoddi3+0x54c>
 100c6c4:	1880012e 	bgeu	r3,r2,100c6cc <__umoddi3+0x54c>
 100c6c8:	1cc7883a 	add	r3,r3,r19
 100c6cc:	18a3c83a 	sub	r17,r3,r2
 100c6d0:	003f2906 	br	100c378 <__alt_data_end+0xff80c378>
 100c6d4:	e48fc83a 	sub	r7,fp,r18
 100c6d8:	1d49c83a 	sub	r4,r3,r21
 100c6dc:	e1f9803a 	cmpltu	fp,fp,r7
 100c6e0:	2739c83a 	sub	fp,r4,fp
 100c6e4:	8f09c83a 	sub	r4,r17,fp
 100c6e8:	003fc306 	br	100c5f8 <__alt_data_end+0xff80c5f8>
 100c6ec:	01000604 	movi	r4,24
 100c6f0:	003ef906 	br	100c2d8 <__alt_data_end+0xff80c2d8>
 100c6f4:	00800604 	movi	r2,24
 100c6f8:	003f1306 	br	100c348 <__alt_data_end+0xff80c348>
 100c6fc:	01000604 	movi	r4,24
 100c700:	003eb606 	br	100c1dc <__alt_data_end+0xff80c1dc>
 100c704:	40bf902e 	bgeu	r8,r2,100c548 <__alt_data_end+0xff80c548>
 100c708:	b5bfff84 	addi	r22,r22,-2
 100c70c:	4551883a 	add	r8,r8,r21
 100c710:	003f8e06 	br	100c54c <__alt_data_end+0xff80c54c>
 100c714:	18bf762e 	bgeu	r3,r2,100c4f0 <__alt_data_end+0xff80c4f0>
 100c718:	8c7fff84 	addi	r17,r17,-2
 100c71c:	1d47883a 	add	r3,r3,r21
 100c720:	003f7406 	br	100c4f4 <__alt_data_end+0xff80c4f4>
 100c724:	1cc7883a 	add	r3,r3,r19
 100c728:	003ecd06 	br	100c260 <__alt_data_end+0xff80c260>
 100c72c:	8005883a 	mov	r2,r16
 100c730:	003ef806 	br	100c314 <__alt_data_end+0xff80c314>
 100c734:	873fe736 	bltu	r16,fp,100c6d4 <__alt_data_end+0xff80c6d4>
 100c738:	e00f883a 	mov	r7,fp
 100c73c:	0009883a 	mov	r4,zero
 100c740:	003fad06 	br	100c5f8 <__alt_data_end+0xff80c5f8>

0100c744 <__divsi3>:
 100c744:	20001b16 	blt	r4,zero,100c7b4 <__divsi3+0x70>
 100c748:	000f883a 	mov	r7,zero
 100c74c:	28001616 	blt	r5,zero,100c7a8 <__divsi3+0x64>
 100c750:	200d883a 	mov	r6,r4
 100c754:	29001a2e 	bgeu	r5,r4,100c7c0 <__divsi3+0x7c>
 100c758:	00800804 	movi	r2,32
 100c75c:	00c00044 	movi	r3,1
 100c760:	00000106 	br	100c768 <__divsi3+0x24>
 100c764:	10000d26 	beq	r2,zero,100c79c <__divsi3+0x58>
 100c768:	294b883a 	add	r5,r5,r5
 100c76c:	10bfffc4 	addi	r2,r2,-1
 100c770:	18c7883a 	add	r3,r3,r3
 100c774:	293ffb36 	bltu	r5,r4,100c764 <__alt_data_end+0xff80c764>
 100c778:	0005883a 	mov	r2,zero
 100c77c:	18000726 	beq	r3,zero,100c79c <__divsi3+0x58>
 100c780:	0005883a 	mov	r2,zero
 100c784:	31400236 	bltu	r6,r5,100c790 <__divsi3+0x4c>
 100c788:	314dc83a 	sub	r6,r6,r5
 100c78c:	10c4b03a 	or	r2,r2,r3
 100c790:	1806d07a 	srli	r3,r3,1
 100c794:	280ad07a 	srli	r5,r5,1
 100c798:	183ffa1e 	bne	r3,zero,100c784 <__alt_data_end+0xff80c784>
 100c79c:	38000126 	beq	r7,zero,100c7a4 <__divsi3+0x60>
 100c7a0:	0085c83a 	sub	r2,zero,r2
 100c7a4:	f800283a 	ret
 100c7a8:	014bc83a 	sub	r5,zero,r5
 100c7ac:	39c0005c 	xori	r7,r7,1
 100c7b0:	003fe706 	br	100c750 <__alt_data_end+0xff80c750>
 100c7b4:	0109c83a 	sub	r4,zero,r4
 100c7b8:	01c00044 	movi	r7,1
 100c7bc:	003fe306 	br	100c74c <__alt_data_end+0xff80c74c>
 100c7c0:	00c00044 	movi	r3,1
 100c7c4:	003fee06 	br	100c780 <__alt_data_end+0xff80c780>

0100c7c8 <__modsi3>:
 100c7c8:	20001716 	blt	r4,zero,100c828 <__modsi3+0x60>
 100c7cc:	000f883a 	mov	r7,zero
 100c7d0:	2005883a 	mov	r2,r4
 100c7d4:	28001216 	blt	r5,zero,100c820 <__modsi3+0x58>
 100c7d8:	2900162e 	bgeu	r5,r4,100c834 <__modsi3+0x6c>
 100c7dc:	01800804 	movi	r6,32
 100c7e0:	00c00044 	movi	r3,1
 100c7e4:	00000106 	br	100c7ec <__modsi3+0x24>
 100c7e8:	30000a26 	beq	r6,zero,100c814 <__modsi3+0x4c>
 100c7ec:	294b883a 	add	r5,r5,r5
 100c7f0:	31bfffc4 	addi	r6,r6,-1
 100c7f4:	18c7883a 	add	r3,r3,r3
 100c7f8:	293ffb36 	bltu	r5,r4,100c7e8 <__alt_data_end+0xff80c7e8>
 100c7fc:	18000526 	beq	r3,zero,100c814 <__modsi3+0x4c>
 100c800:	1806d07a 	srli	r3,r3,1
 100c804:	11400136 	bltu	r2,r5,100c80c <__modsi3+0x44>
 100c808:	1145c83a 	sub	r2,r2,r5
 100c80c:	280ad07a 	srli	r5,r5,1
 100c810:	183ffb1e 	bne	r3,zero,100c800 <__alt_data_end+0xff80c800>
 100c814:	38000126 	beq	r7,zero,100c81c <__modsi3+0x54>
 100c818:	0085c83a 	sub	r2,zero,r2
 100c81c:	f800283a 	ret
 100c820:	014bc83a 	sub	r5,zero,r5
 100c824:	003fec06 	br	100c7d8 <__alt_data_end+0xff80c7d8>
 100c828:	0109c83a 	sub	r4,zero,r4
 100c82c:	01c00044 	movi	r7,1
 100c830:	003fe706 	br	100c7d0 <__alt_data_end+0xff80c7d0>
 100c834:	00c00044 	movi	r3,1
 100c838:	003ff106 	br	100c800 <__alt_data_end+0xff80c800>

0100c83c <__udivsi3>:
 100c83c:	200d883a 	mov	r6,r4
 100c840:	2900152e 	bgeu	r5,r4,100c898 <__udivsi3+0x5c>
 100c844:	28001416 	blt	r5,zero,100c898 <__udivsi3+0x5c>
 100c848:	00800804 	movi	r2,32
 100c84c:	00c00044 	movi	r3,1
 100c850:	00000206 	br	100c85c <__udivsi3+0x20>
 100c854:	10000e26 	beq	r2,zero,100c890 <__udivsi3+0x54>
 100c858:	28000516 	blt	r5,zero,100c870 <__udivsi3+0x34>
 100c85c:	294b883a 	add	r5,r5,r5
 100c860:	10bfffc4 	addi	r2,r2,-1
 100c864:	18c7883a 	add	r3,r3,r3
 100c868:	293ffa36 	bltu	r5,r4,100c854 <__alt_data_end+0xff80c854>
 100c86c:	18000826 	beq	r3,zero,100c890 <__udivsi3+0x54>
 100c870:	0005883a 	mov	r2,zero
 100c874:	31400236 	bltu	r6,r5,100c880 <__udivsi3+0x44>
 100c878:	314dc83a 	sub	r6,r6,r5
 100c87c:	10c4b03a 	or	r2,r2,r3
 100c880:	1806d07a 	srli	r3,r3,1
 100c884:	280ad07a 	srli	r5,r5,1
 100c888:	183ffa1e 	bne	r3,zero,100c874 <__alt_data_end+0xff80c874>
 100c88c:	f800283a 	ret
 100c890:	0005883a 	mov	r2,zero
 100c894:	f800283a 	ret
 100c898:	00c00044 	movi	r3,1
 100c89c:	003ff406 	br	100c870 <__alt_data_end+0xff80c870>

0100c8a0 <__umodsi3>:
 100c8a0:	2005883a 	mov	r2,r4
 100c8a4:	2900122e 	bgeu	r5,r4,100c8f0 <__umodsi3+0x50>
 100c8a8:	28001116 	blt	r5,zero,100c8f0 <__umodsi3+0x50>
 100c8ac:	01800804 	movi	r6,32
 100c8b0:	00c00044 	movi	r3,1
 100c8b4:	00000206 	br	100c8c0 <__umodsi3+0x20>
 100c8b8:	30000c26 	beq	r6,zero,100c8ec <__umodsi3+0x4c>
 100c8bc:	28000516 	blt	r5,zero,100c8d4 <__umodsi3+0x34>
 100c8c0:	294b883a 	add	r5,r5,r5
 100c8c4:	31bfffc4 	addi	r6,r6,-1
 100c8c8:	18c7883a 	add	r3,r3,r3
 100c8cc:	293ffa36 	bltu	r5,r4,100c8b8 <__alt_data_end+0xff80c8b8>
 100c8d0:	18000626 	beq	r3,zero,100c8ec <__umodsi3+0x4c>
 100c8d4:	1806d07a 	srli	r3,r3,1
 100c8d8:	11400136 	bltu	r2,r5,100c8e0 <__umodsi3+0x40>
 100c8dc:	1145c83a 	sub	r2,r2,r5
 100c8e0:	280ad07a 	srli	r5,r5,1
 100c8e4:	183ffb1e 	bne	r3,zero,100c8d4 <__alt_data_end+0xff80c8d4>
 100c8e8:	f800283a 	ret
 100c8ec:	f800283a 	ret
 100c8f0:	00c00044 	movi	r3,1
 100c8f4:	003ff706 	br	100c8d4 <__alt_data_end+0xff80c8d4>

0100c8f8 <__mulsi3>:
 100c8f8:	0005883a 	mov	r2,zero
 100c8fc:	20000726 	beq	r4,zero,100c91c <__mulsi3+0x24>
 100c900:	20c0004c 	andi	r3,r4,1
 100c904:	2008d07a 	srli	r4,r4,1
 100c908:	18000126 	beq	r3,zero,100c910 <__mulsi3+0x18>
 100c90c:	1145883a 	add	r2,r2,r5
 100c910:	294b883a 	add	r5,r5,r5
 100c914:	203ffa1e 	bne	r4,zero,100c900 <__alt_data_end+0xff80c900>
 100c918:	f800283a 	ret
 100c91c:	f800283a 	ret

0100c920 <__adddf3>:
 100c920:	02c00434 	movhi	r11,16
 100c924:	5affffc4 	addi	r11,r11,-1
 100c928:	2806d7fa 	srli	r3,r5,31
 100c92c:	2ad4703a 	and	r10,r5,r11
 100c930:	3ad2703a 	and	r9,r7,r11
 100c934:	3804d53a 	srli	r2,r7,20
 100c938:	3018d77a 	srli	r12,r6,29
 100c93c:	280ad53a 	srli	r5,r5,20
 100c940:	501490fa 	slli	r10,r10,3
 100c944:	2010d77a 	srli	r8,r4,29
 100c948:	481290fa 	slli	r9,r9,3
 100c94c:	380ed7fa 	srli	r7,r7,31
 100c950:	defffb04 	addi	sp,sp,-20
 100c954:	dc800215 	stw	r18,8(sp)
 100c958:	dc400115 	stw	r17,4(sp)
 100c95c:	dc000015 	stw	r16,0(sp)
 100c960:	dfc00415 	stw	ra,16(sp)
 100c964:	dcc00315 	stw	r19,12(sp)
 100c968:	1c803fcc 	andi	r18,r3,255
 100c96c:	2c01ffcc 	andi	r16,r5,2047
 100c970:	5210b03a 	or	r8,r10,r8
 100c974:	202290fa 	slli	r17,r4,3
 100c978:	1081ffcc 	andi	r2,r2,2047
 100c97c:	4b12b03a 	or	r9,r9,r12
 100c980:	300c90fa 	slli	r6,r6,3
 100c984:	91c07526 	beq	r18,r7,100cb5c <__adddf3+0x23c>
 100c988:	8087c83a 	sub	r3,r16,r2
 100c98c:	00c0ab0e 	bge	zero,r3,100cc3c <__adddf3+0x31c>
 100c990:	10002a1e 	bne	r2,zero,100ca3c <__adddf3+0x11c>
 100c994:	4984b03a 	or	r2,r9,r6
 100c998:	1000961e 	bne	r2,zero,100cbf4 <__adddf3+0x2d4>
 100c99c:	888001cc 	andi	r2,r17,7
 100c9a0:	10000726 	beq	r2,zero,100c9c0 <__adddf3+0xa0>
 100c9a4:	888003cc 	andi	r2,r17,15
 100c9a8:	00c00104 	movi	r3,4
 100c9ac:	10c00426 	beq	r2,r3,100c9c0 <__adddf3+0xa0>
 100c9b0:	88c7883a 	add	r3,r17,r3
 100c9b4:	1c63803a 	cmpltu	r17,r3,r17
 100c9b8:	4451883a 	add	r8,r8,r17
 100c9bc:	1823883a 	mov	r17,r3
 100c9c0:	4080202c 	andhi	r2,r8,128
 100c9c4:	10005926 	beq	r2,zero,100cb2c <__adddf3+0x20c>
 100c9c8:	84000044 	addi	r16,r16,1
 100c9cc:	0081ffc4 	movi	r2,2047
 100c9d0:	8080ba26 	beq	r16,r2,100ccbc <__adddf3+0x39c>
 100c9d4:	00bfe034 	movhi	r2,65408
 100c9d8:	10bfffc4 	addi	r2,r2,-1
 100c9dc:	4090703a 	and	r8,r8,r2
 100c9e0:	4004977a 	slli	r2,r8,29
 100c9e4:	4010927a 	slli	r8,r8,9
 100c9e8:	8822d0fa 	srli	r17,r17,3
 100c9ec:	8401ffcc 	andi	r16,r16,2047
 100c9f0:	4010d33a 	srli	r8,r8,12
 100c9f4:	9007883a 	mov	r3,r18
 100c9f8:	1444b03a 	or	r2,r2,r17
 100c9fc:	8401ffcc 	andi	r16,r16,2047
 100ca00:	8020953a 	slli	r16,r16,20
 100ca04:	18c03fcc 	andi	r3,r3,255
 100ca08:	01000434 	movhi	r4,16
 100ca0c:	213fffc4 	addi	r4,r4,-1
 100ca10:	180697fa 	slli	r3,r3,31
 100ca14:	4110703a 	and	r8,r8,r4
 100ca18:	4410b03a 	or	r8,r8,r16
 100ca1c:	40c6b03a 	or	r3,r8,r3
 100ca20:	dfc00417 	ldw	ra,16(sp)
 100ca24:	dcc00317 	ldw	r19,12(sp)
 100ca28:	dc800217 	ldw	r18,8(sp)
 100ca2c:	dc400117 	ldw	r17,4(sp)
 100ca30:	dc000017 	ldw	r16,0(sp)
 100ca34:	dec00504 	addi	sp,sp,20
 100ca38:	f800283a 	ret
 100ca3c:	0081ffc4 	movi	r2,2047
 100ca40:	80bfd626 	beq	r16,r2,100c99c <__alt_data_end+0xff80c99c>
 100ca44:	4a402034 	orhi	r9,r9,128
 100ca48:	00800e04 	movi	r2,56
 100ca4c:	10c09f16 	blt	r2,r3,100cccc <__adddf3+0x3ac>
 100ca50:	008007c4 	movi	r2,31
 100ca54:	10c0c216 	blt	r2,r3,100cd60 <__adddf3+0x440>
 100ca58:	00800804 	movi	r2,32
 100ca5c:	10c5c83a 	sub	r2,r2,r3
 100ca60:	488a983a 	sll	r5,r9,r2
 100ca64:	30c8d83a 	srl	r4,r6,r3
 100ca68:	3084983a 	sll	r2,r6,r2
 100ca6c:	48c6d83a 	srl	r3,r9,r3
 100ca70:	290cb03a 	or	r6,r5,r4
 100ca74:	1004c03a 	cmpne	r2,r2,zero
 100ca78:	308cb03a 	or	r6,r6,r2
 100ca7c:	898dc83a 	sub	r6,r17,r6
 100ca80:	89a3803a 	cmpltu	r17,r17,r6
 100ca84:	40d1c83a 	sub	r8,r8,r3
 100ca88:	4451c83a 	sub	r8,r8,r17
 100ca8c:	3023883a 	mov	r17,r6
 100ca90:	4080202c 	andhi	r2,r8,128
 100ca94:	10002326 	beq	r2,zero,100cb24 <__adddf3+0x204>
 100ca98:	04c02034 	movhi	r19,128
 100ca9c:	9cffffc4 	addi	r19,r19,-1
 100caa0:	44e6703a 	and	r19,r8,r19
 100caa4:	98007626 	beq	r19,zero,100cc80 <__adddf3+0x360>
 100caa8:	9809883a 	mov	r4,r19
 100caac:	100f1600 	call	100f160 <__clzsi2>
 100cab0:	10fffe04 	addi	r3,r2,-8
 100cab4:	010007c4 	movi	r4,31
 100cab8:	20c07716 	blt	r4,r3,100cc98 <__adddf3+0x378>
 100cabc:	00800804 	movi	r2,32
 100cac0:	10c5c83a 	sub	r2,r2,r3
 100cac4:	8884d83a 	srl	r2,r17,r2
 100cac8:	98d0983a 	sll	r8,r19,r3
 100cacc:	88e2983a 	sll	r17,r17,r3
 100cad0:	1204b03a 	or	r2,r2,r8
 100cad4:	1c007416 	blt	r3,r16,100cca8 <__adddf3+0x388>
 100cad8:	1c21c83a 	sub	r16,r3,r16
 100cadc:	82000044 	addi	r8,r16,1
 100cae0:	00c007c4 	movi	r3,31
 100cae4:	1a009116 	blt	r3,r8,100cd2c <__adddf3+0x40c>
 100cae8:	00c00804 	movi	r3,32
 100caec:	1a07c83a 	sub	r3,r3,r8
 100caf0:	8a08d83a 	srl	r4,r17,r8
 100caf4:	88e2983a 	sll	r17,r17,r3
 100caf8:	10c6983a 	sll	r3,r2,r3
 100cafc:	1210d83a 	srl	r8,r2,r8
 100cb00:	8804c03a 	cmpne	r2,r17,zero
 100cb04:	1906b03a 	or	r3,r3,r4
 100cb08:	18a2b03a 	or	r17,r3,r2
 100cb0c:	0021883a 	mov	r16,zero
 100cb10:	003fa206 	br	100c99c <__alt_data_end+0xff80c99c>
 100cb14:	1890b03a 	or	r8,r3,r2
 100cb18:	40017d26 	beq	r8,zero,100d110 <__adddf3+0x7f0>
 100cb1c:	1011883a 	mov	r8,r2
 100cb20:	1823883a 	mov	r17,r3
 100cb24:	888001cc 	andi	r2,r17,7
 100cb28:	103f9e1e 	bne	r2,zero,100c9a4 <__alt_data_end+0xff80c9a4>
 100cb2c:	4004977a 	slli	r2,r8,29
 100cb30:	8822d0fa 	srli	r17,r17,3
 100cb34:	4010d0fa 	srli	r8,r8,3
 100cb38:	9007883a 	mov	r3,r18
 100cb3c:	1444b03a 	or	r2,r2,r17
 100cb40:	0101ffc4 	movi	r4,2047
 100cb44:	81002426 	beq	r16,r4,100cbd8 <__adddf3+0x2b8>
 100cb48:	8120703a 	and	r16,r16,r4
 100cb4c:	01000434 	movhi	r4,16
 100cb50:	213fffc4 	addi	r4,r4,-1
 100cb54:	4110703a 	and	r8,r8,r4
 100cb58:	003fa806 	br	100c9fc <__alt_data_end+0xff80c9fc>
 100cb5c:	8089c83a 	sub	r4,r16,r2
 100cb60:	01005e0e 	bge	zero,r4,100ccdc <__adddf3+0x3bc>
 100cb64:	10002b26 	beq	r2,zero,100cc14 <__adddf3+0x2f4>
 100cb68:	0081ffc4 	movi	r2,2047
 100cb6c:	80bf8b26 	beq	r16,r2,100c99c <__alt_data_end+0xff80c99c>
 100cb70:	4a402034 	orhi	r9,r9,128
 100cb74:	00800e04 	movi	r2,56
 100cb78:	1100a40e 	bge	r2,r4,100ce0c <__adddf3+0x4ec>
 100cb7c:	498cb03a 	or	r6,r9,r6
 100cb80:	300ac03a 	cmpne	r5,r6,zero
 100cb84:	0013883a 	mov	r9,zero
 100cb88:	2c4b883a 	add	r5,r5,r17
 100cb8c:	2c63803a 	cmpltu	r17,r5,r17
 100cb90:	4a11883a 	add	r8,r9,r8
 100cb94:	8a11883a 	add	r8,r17,r8
 100cb98:	2823883a 	mov	r17,r5
 100cb9c:	4080202c 	andhi	r2,r8,128
 100cba0:	103fe026 	beq	r2,zero,100cb24 <__alt_data_end+0xff80cb24>
 100cba4:	84000044 	addi	r16,r16,1
 100cba8:	0081ffc4 	movi	r2,2047
 100cbac:	8080d226 	beq	r16,r2,100cef8 <__adddf3+0x5d8>
 100cbb0:	00bfe034 	movhi	r2,65408
 100cbb4:	10bfffc4 	addi	r2,r2,-1
 100cbb8:	4090703a 	and	r8,r8,r2
 100cbbc:	880ad07a 	srli	r5,r17,1
 100cbc0:	400897fa 	slli	r4,r8,31
 100cbc4:	88c0004c 	andi	r3,r17,1
 100cbc8:	28e2b03a 	or	r17,r5,r3
 100cbcc:	4010d07a 	srli	r8,r8,1
 100cbd0:	2462b03a 	or	r17,r4,r17
 100cbd4:	003f7106 	br	100c99c <__alt_data_end+0xff80c99c>
 100cbd8:	4088b03a 	or	r4,r8,r2
 100cbdc:	20014526 	beq	r4,zero,100d0f4 <__adddf3+0x7d4>
 100cbe0:	01000434 	movhi	r4,16
 100cbe4:	42000234 	orhi	r8,r8,8
 100cbe8:	213fffc4 	addi	r4,r4,-1
 100cbec:	4110703a 	and	r8,r8,r4
 100cbf0:	003f8206 	br	100c9fc <__alt_data_end+0xff80c9fc>
 100cbf4:	18ffffc4 	addi	r3,r3,-1
 100cbf8:	1800491e 	bne	r3,zero,100cd20 <__adddf3+0x400>
 100cbfc:	898bc83a 	sub	r5,r17,r6
 100cc00:	8963803a 	cmpltu	r17,r17,r5
 100cc04:	4251c83a 	sub	r8,r8,r9
 100cc08:	4451c83a 	sub	r8,r8,r17
 100cc0c:	2823883a 	mov	r17,r5
 100cc10:	003f9f06 	br	100ca90 <__alt_data_end+0xff80ca90>
 100cc14:	4984b03a 	or	r2,r9,r6
 100cc18:	103f6026 	beq	r2,zero,100c99c <__alt_data_end+0xff80c99c>
 100cc1c:	213fffc4 	addi	r4,r4,-1
 100cc20:	2000931e 	bne	r4,zero,100ce70 <__adddf3+0x550>
 100cc24:	898d883a 	add	r6,r17,r6
 100cc28:	3463803a 	cmpltu	r17,r6,r17
 100cc2c:	4251883a 	add	r8,r8,r9
 100cc30:	8a11883a 	add	r8,r17,r8
 100cc34:	3023883a 	mov	r17,r6
 100cc38:	003fd806 	br	100cb9c <__alt_data_end+0xff80cb9c>
 100cc3c:	1800541e 	bne	r3,zero,100cd90 <__adddf3+0x470>
 100cc40:	80800044 	addi	r2,r16,1
 100cc44:	1081ffcc 	andi	r2,r2,2047
 100cc48:	00c00044 	movi	r3,1
 100cc4c:	1880a00e 	bge	r3,r2,100ced0 <__adddf3+0x5b0>
 100cc50:	8989c83a 	sub	r4,r17,r6
 100cc54:	8905803a 	cmpltu	r2,r17,r4
 100cc58:	4267c83a 	sub	r19,r8,r9
 100cc5c:	98a7c83a 	sub	r19,r19,r2
 100cc60:	9880202c 	andhi	r2,r19,128
 100cc64:	10006326 	beq	r2,zero,100cdf4 <__adddf3+0x4d4>
 100cc68:	3463c83a 	sub	r17,r6,r17
 100cc6c:	4a07c83a 	sub	r3,r9,r8
 100cc70:	344d803a 	cmpltu	r6,r6,r17
 100cc74:	19a7c83a 	sub	r19,r3,r6
 100cc78:	3825883a 	mov	r18,r7
 100cc7c:	983f8a1e 	bne	r19,zero,100caa8 <__alt_data_end+0xff80caa8>
 100cc80:	8809883a 	mov	r4,r17
 100cc84:	100f1600 	call	100f160 <__clzsi2>
 100cc88:	10800804 	addi	r2,r2,32
 100cc8c:	10fffe04 	addi	r3,r2,-8
 100cc90:	010007c4 	movi	r4,31
 100cc94:	20ff890e 	bge	r4,r3,100cabc <__alt_data_end+0xff80cabc>
 100cc98:	10bff604 	addi	r2,r2,-40
 100cc9c:	8884983a 	sll	r2,r17,r2
 100cca0:	0023883a 	mov	r17,zero
 100cca4:	1c3f8c0e 	bge	r3,r16,100cad8 <__alt_data_end+0xff80cad8>
 100cca8:	023fe034 	movhi	r8,65408
 100ccac:	423fffc4 	addi	r8,r8,-1
 100ccb0:	80e1c83a 	sub	r16,r16,r3
 100ccb4:	1210703a 	and	r8,r2,r8
 100ccb8:	003f3806 	br	100c99c <__alt_data_end+0xff80c99c>
 100ccbc:	9007883a 	mov	r3,r18
 100ccc0:	0011883a 	mov	r8,zero
 100ccc4:	0005883a 	mov	r2,zero
 100ccc8:	003f4c06 	br	100c9fc <__alt_data_end+0xff80c9fc>
 100cccc:	498cb03a 	or	r6,r9,r6
 100ccd0:	300cc03a 	cmpne	r6,r6,zero
 100ccd4:	0007883a 	mov	r3,zero
 100ccd8:	003f6806 	br	100ca7c <__alt_data_end+0xff80ca7c>
 100ccdc:	20009c1e 	bne	r4,zero,100cf50 <__adddf3+0x630>
 100cce0:	80800044 	addi	r2,r16,1
 100cce4:	1141ffcc 	andi	r5,r2,2047
 100cce8:	01000044 	movi	r4,1
 100ccec:	2140670e 	bge	r4,r5,100ce8c <__adddf3+0x56c>
 100ccf0:	0101ffc4 	movi	r4,2047
 100ccf4:	11007f26 	beq	r2,r4,100cef4 <__adddf3+0x5d4>
 100ccf8:	898d883a 	add	r6,r17,r6
 100ccfc:	4247883a 	add	r3,r8,r9
 100cd00:	3451803a 	cmpltu	r8,r6,r17
 100cd04:	40d1883a 	add	r8,r8,r3
 100cd08:	402297fa 	slli	r17,r8,31
 100cd0c:	300cd07a 	srli	r6,r6,1
 100cd10:	4010d07a 	srli	r8,r8,1
 100cd14:	1021883a 	mov	r16,r2
 100cd18:	89a2b03a 	or	r17,r17,r6
 100cd1c:	003f1f06 	br	100c99c <__alt_data_end+0xff80c99c>
 100cd20:	0081ffc4 	movi	r2,2047
 100cd24:	80bf481e 	bne	r16,r2,100ca48 <__alt_data_end+0xff80ca48>
 100cd28:	003f1c06 	br	100c99c <__alt_data_end+0xff80c99c>
 100cd2c:	843ff844 	addi	r16,r16,-31
 100cd30:	01000804 	movi	r4,32
 100cd34:	1406d83a 	srl	r3,r2,r16
 100cd38:	41005026 	beq	r8,r4,100ce7c <__adddf3+0x55c>
 100cd3c:	01001004 	movi	r4,64
 100cd40:	2211c83a 	sub	r8,r4,r8
 100cd44:	1204983a 	sll	r2,r2,r8
 100cd48:	88a2b03a 	or	r17,r17,r2
 100cd4c:	8822c03a 	cmpne	r17,r17,zero
 100cd50:	1c62b03a 	or	r17,r3,r17
 100cd54:	0011883a 	mov	r8,zero
 100cd58:	0021883a 	mov	r16,zero
 100cd5c:	003f7106 	br	100cb24 <__alt_data_end+0xff80cb24>
 100cd60:	193ff804 	addi	r4,r3,-32
 100cd64:	00800804 	movi	r2,32
 100cd68:	4908d83a 	srl	r4,r9,r4
 100cd6c:	18804526 	beq	r3,r2,100ce84 <__adddf3+0x564>
 100cd70:	00801004 	movi	r2,64
 100cd74:	10c5c83a 	sub	r2,r2,r3
 100cd78:	4886983a 	sll	r3,r9,r2
 100cd7c:	198cb03a 	or	r6,r3,r6
 100cd80:	300cc03a 	cmpne	r6,r6,zero
 100cd84:	218cb03a 	or	r6,r4,r6
 100cd88:	0007883a 	mov	r3,zero
 100cd8c:	003f3b06 	br	100ca7c <__alt_data_end+0xff80ca7c>
 100cd90:	80002a26 	beq	r16,zero,100ce3c <__adddf3+0x51c>
 100cd94:	0101ffc4 	movi	r4,2047
 100cd98:	11006826 	beq	r2,r4,100cf3c <__adddf3+0x61c>
 100cd9c:	00c7c83a 	sub	r3,zero,r3
 100cda0:	42002034 	orhi	r8,r8,128
 100cda4:	01000e04 	movi	r4,56
 100cda8:	20c07c16 	blt	r4,r3,100cf9c <__adddf3+0x67c>
 100cdac:	010007c4 	movi	r4,31
 100cdb0:	20c0da16 	blt	r4,r3,100d11c <__adddf3+0x7fc>
 100cdb4:	01000804 	movi	r4,32
 100cdb8:	20c9c83a 	sub	r4,r4,r3
 100cdbc:	4114983a 	sll	r10,r8,r4
 100cdc0:	88cad83a 	srl	r5,r17,r3
 100cdc4:	8908983a 	sll	r4,r17,r4
 100cdc8:	40c6d83a 	srl	r3,r8,r3
 100cdcc:	5162b03a 	or	r17,r10,r5
 100cdd0:	2008c03a 	cmpne	r4,r4,zero
 100cdd4:	8922b03a 	or	r17,r17,r4
 100cdd8:	3463c83a 	sub	r17,r6,r17
 100cddc:	48c7c83a 	sub	r3,r9,r3
 100cde0:	344d803a 	cmpltu	r6,r6,r17
 100cde4:	1991c83a 	sub	r8,r3,r6
 100cde8:	1021883a 	mov	r16,r2
 100cdec:	3825883a 	mov	r18,r7
 100cdf0:	003f2706 	br	100ca90 <__alt_data_end+0xff80ca90>
 100cdf4:	24d0b03a 	or	r8,r4,r19
 100cdf8:	40001b1e 	bne	r8,zero,100ce68 <__adddf3+0x548>
 100cdfc:	0005883a 	mov	r2,zero
 100ce00:	0007883a 	mov	r3,zero
 100ce04:	0021883a 	mov	r16,zero
 100ce08:	003f4d06 	br	100cb40 <__alt_data_end+0xff80cb40>
 100ce0c:	008007c4 	movi	r2,31
 100ce10:	11003c16 	blt	r2,r4,100cf04 <__adddf3+0x5e4>
 100ce14:	00800804 	movi	r2,32
 100ce18:	1105c83a 	sub	r2,r2,r4
 100ce1c:	488e983a 	sll	r7,r9,r2
 100ce20:	310ad83a 	srl	r5,r6,r4
 100ce24:	3084983a 	sll	r2,r6,r2
 100ce28:	4912d83a 	srl	r9,r9,r4
 100ce2c:	394ab03a 	or	r5,r7,r5
 100ce30:	1004c03a 	cmpne	r2,r2,zero
 100ce34:	288ab03a 	or	r5,r5,r2
 100ce38:	003f5306 	br	100cb88 <__alt_data_end+0xff80cb88>
 100ce3c:	4448b03a 	or	r4,r8,r17
 100ce40:	20003e26 	beq	r4,zero,100cf3c <__adddf3+0x61c>
 100ce44:	00c6303a 	nor	r3,zero,r3
 100ce48:	18003a1e 	bne	r3,zero,100cf34 <__adddf3+0x614>
 100ce4c:	3463c83a 	sub	r17,r6,r17
 100ce50:	4a07c83a 	sub	r3,r9,r8
 100ce54:	344d803a 	cmpltu	r6,r6,r17
 100ce58:	1991c83a 	sub	r8,r3,r6
 100ce5c:	1021883a 	mov	r16,r2
 100ce60:	3825883a 	mov	r18,r7
 100ce64:	003f0a06 	br	100ca90 <__alt_data_end+0xff80ca90>
 100ce68:	2023883a 	mov	r17,r4
 100ce6c:	003f0d06 	br	100caa4 <__alt_data_end+0xff80caa4>
 100ce70:	0081ffc4 	movi	r2,2047
 100ce74:	80bf3f1e 	bne	r16,r2,100cb74 <__alt_data_end+0xff80cb74>
 100ce78:	003ec806 	br	100c99c <__alt_data_end+0xff80c99c>
 100ce7c:	0005883a 	mov	r2,zero
 100ce80:	003fb106 	br	100cd48 <__alt_data_end+0xff80cd48>
 100ce84:	0007883a 	mov	r3,zero
 100ce88:	003fbc06 	br	100cd7c <__alt_data_end+0xff80cd7c>
 100ce8c:	4444b03a 	or	r2,r8,r17
 100ce90:	8000871e 	bne	r16,zero,100d0b0 <__adddf3+0x790>
 100ce94:	1000ba26 	beq	r2,zero,100d180 <__adddf3+0x860>
 100ce98:	4984b03a 	or	r2,r9,r6
 100ce9c:	103ebf26 	beq	r2,zero,100c99c <__alt_data_end+0xff80c99c>
 100cea0:	8985883a 	add	r2,r17,r6
 100cea4:	4247883a 	add	r3,r8,r9
 100cea8:	1451803a 	cmpltu	r8,r2,r17
 100ceac:	40d1883a 	add	r8,r8,r3
 100ceb0:	40c0202c 	andhi	r3,r8,128
 100ceb4:	1023883a 	mov	r17,r2
 100ceb8:	183f1a26 	beq	r3,zero,100cb24 <__alt_data_end+0xff80cb24>
 100cebc:	00bfe034 	movhi	r2,65408
 100cec0:	10bfffc4 	addi	r2,r2,-1
 100cec4:	2021883a 	mov	r16,r4
 100cec8:	4090703a 	and	r8,r8,r2
 100cecc:	003eb306 	br	100c99c <__alt_data_end+0xff80c99c>
 100ced0:	4444b03a 	or	r2,r8,r17
 100ced4:	8000291e 	bne	r16,zero,100cf7c <__adddf3+0x65c>
 100ced8:	10004b1e 	bne	r2,zero,100d008 <__adddf3+0x6e8>
 100cedc:	4990b03a 	or	r8,r9,r6
 100cee0:	40008b26 	beq	r8,zero,100d110 <__adddf3+0x7f0>
 100cee4:	4811883a 	mov	r8,r9
 100cee8:	3023883a 	mov	r17,r6
 100ceec:	3825883a 	mov	r18,r7
 100cef0:	003eaa06 	br	100c99c <__alt_data_end+0xff80c99c>
 100cef4:	1021883a 	mov	r16,r2
 100cef8:	0011883a 	mov	r8,zero
 100cefc:	0005883a 	mov	r2,zero
 100cf00:	003f0f06 	br	100cb40 <__alt_data_end+0xff80cb40>
 100cf04:	217ff804 	addi	r5,r4,-32
 100cf08:	00800804 	movi	r2,32
 100cf0c:	494ad83a 	srl	r5,r9,r5
 100cf10:	20807d26 	beq	r4,r2,100d108 <__adddf3+0x7e8>
 100cf14:	00801004 	movi	r2,64
 100cf18:	1109c83a 	sub	r4,r2,r4
 100cf1c:	4912983a 	sll	r9,r9,r4
 100cf20:	498cb03a 	or	r6,r9,r6
 100cf24:	300cc03a 	cmpne	r6,r6,zero
 100cf28:	298ab03a 	or	r5,r5,r6
 100cf2c:	0013883a 	mov	r9,zero
 100cf30:	003f1506 	br	100cb88 <__alt_data_end+0xff80cb88>
 100cf34:	0101ffc4 	movi	r4,2047
 100cf38:	113f9a1e 	bne	r2,r4,100cda4 <__alt_data_end+0xff80cda4>
 100cf3c:	4811883a 	mov	r8,r9
 100cf40:	3023883a 	mov	r17,r6
 100cf44:	1021883a 	mov	r16,r2
 100cf48:	3825883a 	mov	r18,r7
 100cf4c:	003e9306 	br	100c99c <__alt_data_end+0xff80c99c>
 100cf50:	8000161e 	bne	r16,zero,100cfac <__adddf3+0x68c>
 100cf54:	444ab03a 	or	r5,r8,r17
 100cf58:	28005126 	beq	r5,zero,100d0a0 <__adddf3+0x780>
 100cf5c:	0108303a 	nor	r4,zero,r4
 100cf60:	20004d1e 	bne	r4,zero,100d098 <__adddf3+0x778>
 100cf64:	89a3883a 	add	r17,r17,r6
 100cf68:	4253883a 	add	r9,r8,r9
 100cf6c:	898d803a 	cmpltu	r6,r17,r6
 100cf70:	3251883a 	add	r8,r6,r9
 100cf74:	1021883a 	mov	r16,r2
 100cf78:	003f0806 	br	100cb9c <__alt_data_end+0xff80cb9c>
 100cf7c:	1000301e 	bne	r2,zero,100d040 <__adddf3+0x720>
 100cf80:	4984b03a 	or	r2,r9,r6
 100cf84:	10007126 	beq	r2,zero,100d14c <__adddf3+0x82c>
 100cf88:	4811883a 	mov	r8,r9
 100cf8c:	3023883a 	mov	r17,r6
 100cf90:	3825883a 	mov	r18,r7
 100cf94:	0401ffc4 	movi	r16,2047
 100cf98:	003e8006 	br	100c99c <__alt_data_end+0xff80c99c>
 100cf9c:	4462b03a 	or	r17,r8,r17
 100cfa0:	8822c03a 	cmpne	r17,r17,zero
 100cfa4:	0007883a 	mov	r3,zero
 100cfa8:	003f8b06 	br	100cdd8 <__alt_data_end+0xff80cdd8>
 100cfac:	0141ffc4 	movi	r5,2047
 100cfb0:	11403b26 	beq	r2,r5,100d0a0 <__adddf3+0x780>
 100cfb4:	0109c83a 	sub	r4,zero,r4
 100cfb8:	42002034 	orhi	r8,r8,128
 100cfbc:	01400e04 	movi	r5,56
 100cfc0:	29006716 	blt	r5,r4,100d160 <__adddf3+0x840>
 100cfc4:	014007c4 	movi	r5,31
 100cfc8:	29007016 	blt	r5,r4,100d18c <__adddf3+0x86c>
 100cfcc:	01400804 	movi	r5,32
 100cfd0:	290bc83a 	sub	r5,r5,r4
 100cfd4:	4154983a 	sll	r10,r8,r5
 100cfd8:	890ed83a 	srl	r7,r17,r4
 100cfdc:	894a983a 	sll	r5,r17,r5
 100cfe0:	4108d83a 	srl	r4,r8,r4
 100cfe4:	51e2b03a 	or	r17,r10,r7
 100cfe8:	280ac03a 	cmpne	r5,r5,zero
 100cfec:	8962b03a 	or	r17,r17,r5
 100cff0:	89a3883a 	add	r17,r17,r6
 100cff4:	2253883a 	add	r9,r4,r9
 100cff8:	898d803a 	cmpltu	r6,r17,r6
 100cffc:	3251883a 	add	r8,r6,r9
 100d000:	1021883a 	mov	r16,r2
 100d004:	003ee506 	br	100cb9c <__alt_data_end+0xff80cb9c>
 100d008:	4984b03a 	or	r2,r9,r6
 100d00c:	103e6326 	beq	r2,zero,100c99c <__alt_data_end+0xff80c99c>
 100d010:	8987c83a 	sub	r3,r17,r6
 100d014:	88c9803a 	cmpltu	r4,r17,r3
 100d018:	4245c83a 	sub	r2,r8,r9
 100d01c:	1105c83a 	sub	r2,r2,r4
 100d020:	1100202c 	andhi	r4,r2,128
 100d024:	203ebb26 	beq	r4,zero,100cb14 <__alt_data_end+0xff80cb14>
 100d028:	3463c83a 	sub	r17,r6,r17
 100d02c:	4a07c83a 	sub	r3,r9,r8
 100d030:	344d803a 	cmpltu	r6,r6,r17
 100d034:	1991c83a 	sub	r8,r3,r6
 100d038:	3825883a 	mov	r18,r7
 100d03c:	003e5706 	br	100c99c <__alt_data_end+0xff80c99c>
 100d040:	4984b03a 	or	r2,r9,r6
 100d044:	10002e26 	beq	r2,zero,100d100 <__adddf3+0x7e0>
 100d048:	4004d0fa 	srli	r2,r8,3
 100d04c:	8822d0fa 	srli	r17,r17,3
 100d050:	4010977a 	slli	r8,r8,29
 100d054:	10c0022c 	andhi	r3,r2,8
 100d058:	4462b03a 	or	r17,r8,r17
 100d05c:	18000826 	beq	r3,zero,100d080 <__adddf3+0x760>
 100d060:	4808d0fa 	srli	r4,r9,3
 100d064:	20c0022c 	andhi	r3,r4,8
 100d068:	1800051e 	bne	r3,zero,100d080 <__adddf3+0x760>
 100d06c:	300cd0fa 	srli	r6,r6,3
 100d070:	4806977a 	slli	r3,r9,29
 100d074:	2005883a 	mov	r2,r4
 100d078:	3825883a 	mov	r18,r7
 100d07c:	19a2b03a 	or	r17,r3,r6
 100d080:	8810d77a 	srli	r8,r17,29
 100d084:	100490fa 	slli	r2,r2,3
 100d088:	882290fa 	slli	r17,r17,3
 100d08c:	0401ffc4 	movi	r16,2047
 100d090:	4090b03a 	or	r8,r8,r2
 100d094:	003e4106 	br	100c99c <__alt_data_end+0xff80c99c>
 100d098:	0141ffc4 	movi	r5,2047
 100d09c:	117fc71e 	bne	r2,r5,100cfbc <__alt_data_end+0xff80cfbc>
 100d0a0:	4811883a 	mov	r8,r9
 100d0a4:	3023883a 	mov	r17,r6
 100d0a8:	1021883a 	mov	r16,r2
 100d0ac:	003e3b06 	br	100c99c <__alt_data_end+0xff80c99c>
 100d0b0:	10002f26 	beq	r2,zero,100d170 <__adddf3+0x850>
 100d0b4:	4984b03a 	or	r2,r9,r6
 100d0b8:	10001126 	beq	r2,zero,100d100 <__adddf3+0x7e0>
 100d0bc:	4004d0fa 	srli	r2,r8,3
 100d0c0:	8822d0fa 	srli	r17,r17,3
 100d0c4:	4010977a 	slli	r8,r8,29
 100d0c8:	10c0022c 	andhi	r3,r2,8
 100d0cc:	4462b03a 	or	r17,r8,r17
 100d0d0:	183feb26 	beq	r3,zero,100d080 <__alt_data_end+0xff80d080>
 100d0d4:	4808d0fa 	srli	r4,r9,3
 100d0d8:	20c0022c 	andhi	r3,r4,8
 100d0dc:	183fe81e 	bne	r3,zero,100d080 <__alt_data_end+0xff80d080>
 100d0e0:	300cd0fa 	srli	r6,r6,3
 100d0e4:	4806977a 	slli	r3,r9,29
 100d0e8:	2005883a 	mov	r2,r4
 100d0ec:	19a2b03a 	or	r17,r3,r6
 100d0f0:	003fe306 	br	100d080 <__alt_data_end+0xff80d080>
 100d0f4:	0011883a 	mov	r8,zero
 100d0f8:	0005883a 	mov	r2,zero
 100d0fc:	003e3f06 	br	100c9fc <__alt_data_end+0xff80c9fc>
 100d100:	0401ffc4 	movi	r16,2047
 100d104:	003e2506 	br	100c99c <__alt_data_end+0xff80c99c>
 100d108:	0013883a 	mov	r9,zero
 100d10c:	003f8406 	br	100cf20 <__alt_data_end+0xff80cf20>
 100d110:	0005883a 	mov	r2,zero
 100d114:	0007883a 	mov	r3,zero
 100d118:	003e8906 	br	100cb40 <__alt_data_end+0xff80cb40>
 100d11c:	197ff804 	addi	r5,r3,-32
 100d120:	01000804 	movi	r4,32
 100d124:	414ad83a 	srl	r5,r8,r5
 100d128:	19002426 	beq	r3,r4,100d1bc <__adddf3+0x89c>
 100d12c:	01001004 	movi	r4,64
 100d130:	20c7c83a 	sub	r3,r4,r3
 100d134:	40c6983a 	sll	r3,r8,r3
 100d138:	1c46b03a 	or	r3,r3,r17
 100d13c:	1806c03a 	cmpne	r3,r3,zero
 100d140:	28e2b03a 	or	r17,r5,r3
 100d144:	0007883a 	mov	r3,zero
 100d148:	003f2306 	br	100cdd8 <__alt_data_end+0xff80cdd8>
 100d14c:	0007883a 	mov	r3,zero
 100d150:	5811883a 	mov	r8,r11
 100d154:	00bfffc4 	movi	r2,-1
 100d158:	0401ffc4 	movi	r16,2047
 100d15c:	003e7806 	br	100cb40 <__alt_data_end+0xff80cb40>
 100d160:	4462b03a 	or	r17,r8,r17
 100d164:	8822c03a 	cmpne	r17,r17,zero
 100d168:	0009883a 	mov	r4,zero
 100d16c:	003fa006 	br	100cff0 <__alt_data_end+0xff80cff0>
 100d170:	4811883a 	mov	r8,r9
 100d174:	3023883a 	mov	r17,r6
 100d178:	0401ffc4 	movi	r16,2047
 100d17c:	003e0706 	br	100c99c <__alt_data_end+0xff80c99c>
 100d180:	4811883a 	mov	r8,r9
 100d184:	3023883a 	mov	r17,r6
 100d188:	003e0406 	br	100c99c <__alt_data_end+0xff80c99c>
 100d18c:	21fff804 	addi	r7,r4,-32
 100d190:	01400804 	movi	r5,32
 100d194:	41ced83a 	srl	r7,r8,r7
 100d198:	21400a26 	beq	r4,r5,100d1c4 <__adddf3+0x8a4>
 100d19c:	01401004 	movi	r5,64
 100d1a0:	2909c83a 	sub	r4,r5,r4
 100d1a4:	4108983a 	sll	r4,r8,r4
 100d1a8:	2448b03a 	or	r4,r4,r17
 100d1ac:	2008c03a 	cmpne	r4,r4,zero
 100d1b0:	3922b03a 	or	r17,r7,r4
 100d1b4:	0009883a 	mov	r4,zero
 100d1b8:	003f8d06 	br	100cff0 <__alt_data_end+0xff80cff0>
 100d1bc:	0007883a 	mov	r3,zero
 100d1c0:	003fdd06 	br	100d138 <__alt_data_end+0xff80d138>
 100d1c4:	0009883a 	mov	r4,zero
 100d1c8:	003ff706 	br	100d1a8 <__alt_data_end+0xff80d1a8>

0100d1cc <__divdf3>:
 100d1cc:	defff004 	addi	sp,sp,-64
 100d1d0:	dc800815 	stw	r18,32(sp)
 100d1d4:	2824d53a 	srli	r18,r5,20
 100d1d8:	dd800c15 	stw	r22,48(sp)
 100d1dc:	282cd7fa 	srli	r22,r5,31
 100d1e0:	dc000615 	stw	r16,24(sp)
 100d1e4:	04000434 	movhi	r16,16
 100d1e8:	843fffc4 	addi	r16,r16,-1
 100d1ec:	dfc00f15 	stw	ra,60(sp)
 100d1f0:	df000e15 	stw	fp,56(sp)
 100d1f4:	ddc00d15 	stw	r23,52(sp)
 100d1f8:	dd400b15 	stw	r21,44(sp)
 100d1fc:	dd000a15 	stw	r20,40(sp)
 100d200:	dcc00915 	stw	r19,36(sp)
 100d204:	dc400715 	stw	r17,28(sp)
 100d208:	9481ffcc 	andi	r18,r18,2047
 100d20c:	2c20703a 	and	r16,r5,r16
 100d210:	b2003fcc 	andi	r8,r22,255
 100d214:	90006126 	beq	r18,zero,100d39c <__divdf3+0x1d0>
 100d218:	0081ffc4 	movi	r2,2047
 100d21c:	202b883a 	mov	r21,r4
 100d220:	90803726 	beq	r18,r2,100d300 <__divdf3+0x134>
 100d224:	80800434 	orhi	r2,r16,16
 100d228:	100490fa 	slli	r2,r2,3
 100d22c:	2020d77a 	srli	r16,r4,29
 100d230:	202a90fa 	slli	r21,r4,3
 100d234:	94bf0044 	addi	r18,r18,-1023
 100d238:	80a0b03a 	or	r16,r16,r2
 100d23c:	0013883a 	mov	r9,zero
 100d240:	000b883a 	mov	r5,zero
 100d244:	3806d53a 	srli	r3,r7,20
 100d248:	382ed7fa 	srli	r23,r7,31
 100d24c:	04400434 	movhi	r17,16
 100d250:	8c7fffc4 	addi	r17,r17,-1
 100d254:	18c1ffcc 	andi	r3,r3,2047
 100d258:	3029883a 	mov	r20,r6
 100d25c:	3c62703a 	and	r17,r7,r17
 100d260:	bf003fcc 	andi	fp,r23,255
 100d264:	18006e26 	beq	r3,zero,100d420 <__divdf3+0x254>
 100d268:	0081ffc4 	movi	r2,2047
 100d26c:	18806626 	beq	r3,r2,100d408 <__divdf3+0x23c>
 100d270:	88800434 	orhi	r2,r17,16
 100d274:	100490fa 	slli	r2,r2,3
 100d278:	3022d77a 	srli	r17,r6,29
 100d27c:	302890fa 	slli	r20,r6,3
 100d280:	18ff0044 	addi	r3,r3,-1023
 100d284:	88a2b03a 	or	r17,r17,r2
 100d288:	000f883a 	mov	r7,zero
 100d28c:	b5e6f03a 	xor	r19,r22,r23
 100d290:	3a4cb03a 	or	r6,r7,r9
 100d294:	008003c4 	movi	r2,15
 100d298:	9809883a 	mov	r4,r19
 100d29c:	90c7c83a 	sub	r3,r18,r3
 100d2a0:	9cc03fcc 	andi	r19,r19,255
 100d2a4:	11809636 	bltu	r2,r6,100d500 <__divdf3+0x334>
 100d2a8:	300c90ba 	slli	r6,r6,2
 100d2ac:	00804074 	movhi	r2,257
 100d2b0:	10b4b004 	addi	r2,r2,-11584
 100d2b4:	308d883a 	add	r6,r6,r2
 100d2b8:	30800017 	ldw	r2,0(r6)
 100d2bc:	1000683a 	jmp	r2
 100d2c0:	0100d500 	call	100d50 <__alt_mem_onchip_memory2_0+0x100d50>
 100d2c4:	0100d338 	rdprs	r4,zero,844
 100d2c8:	0100d4f0 	cmpltui	r4,zero,851
 100d2cc:	0100d32c 	andhi	r4,zero,844
 100d2d0:	0100d4f0 	cmpltui	r4,zero,851
 100d2d4:	0100d4c4 	movi	r4,851
 100d2d8:	0100d4f0 	cmpltui	r4,zero,851
 100d2dc:	0100d32c 	andhi	r4,zero,844
 100d2e0:	0100d338 	rdprs	r4,zero,844
 100d2e4:	0100d338 	rdprs	r4,zero,844
 100d2e8:	0100d4c4 	movi	r4,851
 100d2ec:	0100d32c 	andhi	r4,zero,844
 100d2f0:	0100d31c 	xori	r4,zero,844
 100d2f4:	0100d31c 	xori	r4,zero,844
 100d2f8:	0100d31c 	xori	r4,zero,844
 100d2fc:	0100d888 	cmpgei	r4,zero,866
 100d300:	2404b03a 	or	r2,r4,r16
 100d304:	10006c1e 	bne	r2,zero,100d4b8 <__divdf3+0x2ec>
 100d308:	02400204 	movi	r9,8
 100d30c:	0021883a 	mov	r16,zero
 100d310:	002b883a 	mov	r21,zero
 100d314:	01400084 	movi	r5,2
 100d318:	003fca06 	br	100d244 <__alt_data_end+0xff80d244>
 100d31c:	8023883a 	mov	r17,r16
 100d320:	a829883a 	mov	r20,r21
 100d324:	4039883a 	mov	fp,r8
 100d328:	280f883a 	mov	r7,r5
 100d32c:	00800084 	movi	r2,2
 100d330:	3881601e 	bne	r7,r2,100d8b4 <__divdf3+0x6e8>
 100d334:	e027883a 	mov	r19,fp
 100d338:	9900004c 	andi	r4,r19,1
 100d33c:	0081ffc4 	movi	r2,2047
 100d340:	0021883a 	mov	r16,zero
 100d344:	002b883a 	mov	r21,zero
 100d348:	1004953a 	slli	r2,r2,20
 100d34c:	20c03fcc 	andi	r3,r4,255
 100d350:	01400434 	movhi	r5,16
 100d354:	297fffc4 	addi	r5,r5,-1
 100d358:	180697fa 	slli	r3,r3,31
 100d35c:	8160703a 	and	r16,r16,r5
 100d360:	80a0b03a 	or	r16,r16,r2
 100d364:	80c6b03a 	or	r3,r16,r3
 100d368:	a805883a 	mov	r2,r21
 100d36c:	dfc00f17 	ldw	ra,60(sp)
 100d370:	df000e17 	ldw	fp,56(sp)
 100d374:	ddc00d17 	ldw	r23,52(sp)
 100d378:	dd800c17 	ldw	r22,48(sp)
 100d37c:	dd400b17 	ldw	r21,44(sp)
 100d380:	dd000a17 	ldw	r20,40(sp)
 100d384:	dcc00917 	ldw	r19,36(sp)
 100d388:	dc800817 	ldw	r18,32(sp)
 100d38c:	dc400717 	ldw	r17,28(sp)
 100d390:	dc000617 	ldw	r16,24(sp)
 100d394:	dec01004 	addi	sp,sp,64
 100d398:	f800283a 	ret
 100d39c:	2404b03a 	or	r2,r4,r16
 100d3a0:	2023883a 	mov	r17,r4
 100d3a4:	10003f26 	beq	r2,zero,100d4a4 <__divdf3+0x2d8>
 100d3a8:	80015e26 	beq	r16,zero,100d924 <__divdf3+0x758>
 100d3ac:	8009883a 	mov	r4,r16
 100d3b0:	d9800215 	stw	r6,8(sp)
 100d3b4:	d9c00515 	stw	r7,20(sp)
 100d3b8:	da000415 	stw	r8,16(sp)
 100d3bc:	100f1600 	call	100f160 <__clzsi2>
 100d3c0:	d9800217 	ldw	r6,8(sp)
 100d3c4:	d9c00517 	ldw	r7,20(sp)
 100d3c8:	da000417 	ldw	r8,16(sp)
 100d3cc:	113ffd44 	addi	r4,r2,-11
 100d3d0:	00c00704 	movi	r3,28
 100d3d4:	19014f16 	blt	r3,r4,100d914 <__divdf3+0x748>
 100d3d8:	00c00744 	movi	r3,29
 100d3dc:	157ffe04 	addi	r21,r2,-8
 100d3e0:	1907c83a 	sub	r3,r3,r4
 100d3e4:	8560983a 	sll	r16,r16,r21
 100d3e8:	88c6d83a 	srl	r3,r17,r3
 100d3ec:	8d6a983a 	sll	r21,r17,r21
 100d3f0:	1c20b03a 	or	r16,r3,r16
 100d3f4:	1080fcc4 	addi	r2,r2,1011
 100d3f8:	00a5c83a 	sub	r18,zero,r2
 100d3fc:	0013883a 	mov	r9,zero
 100d400:	000b883a 	mov	r5,zero
 100d404:	003f8f06 	br	100d244 <__alt_data_end+0xff80d244>
 100d408:	3444b03a 	or	r2,r6,r17
 100d40c:	1000231e 	bne	r2,zero,100d49c <__divdf3+0x2d0>
 100d410:	0023883a 	mov	r17,zero
 100d414:	0029883a 	mov	r20,zero
 100d418:	01c00084 	movi	r7,2
 100d41c:	003f9b06 	br	100d28c <__alt_data_end+0xff80d28c>
 100d420:	3444b03a 	or	r2,r6,r17
 100d424:	10001926 	beq	r2,zero,100d48c <__divdf3+0x2c0>
 100d428:	88014b26 	beq	r17,zero,100d958 <__divdf3+0x78c>
 100d42c:	8809883a 	mov	r4,r17
 100d430:	d9400115 	stw	r5,4(sp)
 100d434:	d9800215 	stw	r6,8(sp)
 100d438:	da000415 	stw	r8,16(sp)
 100d43c:	da400315 	stw	r9,12(sp)
 100d440:	100f1600 	call	100f160 <__clzsi2>
 100d444:	d9400117 	ldw	r5,4(sp)
 100d448:	d9800217 	ldw	r6,8(sp)
 100d44c:	da000417 	ldw	r8,16(sp)
 100d450:	da400317 	ldw	r9,12(sp)
 100d454:	113ffd44 	addi	r4,r2,-11
 100d458:	00c00704 	movi	r3,28
 100d45c:	19013a16 	blt	r3,r4,100d948 <__divdf3+0x77c>
 100d460:	00c00744 	movi	r3,29
 100d464:	153ffe04 	addi	r20,r2,-8
 100d468:	1907c83a 	sub	r3,r3,r4
 100d46c:	8d22983a 	sll	r17,r17,r20
 100d470:	30c6d83a 	srl	r3,r6,r3
 100d474:	3528983a 	sll	r20,r6,r20
 100d478:	1c62b03a 	or	r17,r3,r17
 100d47c:	1080fcc4 	addi	r2,r2,1011
 100d480:	0087c83a 	sub	r3,zero,r2
 100d484:	000f883a 	mov	r7,zero
 100d488:	003f8006 	br	100d28c <__alt_data_end+0xff80d28c>
 100d48c:	0023883a 	mov	r17,zero
 100d490:	0029883a 	mov	r20,zero
 100d494:	01c00044 	movi	r7,1
 100d498:	003f7c06 	br	100d28c <__alt_data_end+0xff80d28c>
 100d49c:	01c000c4 	movi	r7,3
 100d4a0:	003f7a06 	br	100d28c <__alt_data_end+0xff80d28c>
 100d4a4:	02400104 	movi	r9,4
 100d4a8:	0021883a 	mov	r16,zero
 100d4ac:	002b883a 	mov	r21,zero
 100d4b0:	01400044 	movi	r5,1
 100d4b4:	003f6306 	br	100d244 <__alt_data_end+0xff80d244>
 100d4b8:	02400304 	movi	r9,12
 100d4bc:	014000c4 	movi	r5,3
 100d4c0:	003f6006 	br	100d244 <__alt_data_end+0xff80d244>
 100d4c4:	04000434 	movhi	r16,16
 100d4c8:	0009883a 	mov	r4,zero
 100d4cc:	843fffc4 	addi	r16,r16,-1
 100d4d0:	057fffc4 	movi	r21,-1
 100d4d4:	0081ffc4 	movi	r2,2047
 100d4d8:	003f9b06 	br	100d348 <__alt_data_end+0xff80d348>
 100d4dc:	00c00044 	movi	r3,1
 100d4e0:	1887c83a 	sub	r3,r3,r2
 100d4e4:	01000e04 	movi	r4,56
 100d4e8:	20c1530e 	bge	r4,r3,100da38 <__divdf3+0x86c>
 100d4ec:	9900004c 	andi	r4,r19,1
 100d4f0:	0005883a 	mov	r2,zero
 100d4f4:	0021883a 	mov	r16,zero
 100d4f8:	002b883a 	mov	r21,zero
 100d4fc:	003f9206 	br	100d348 <__alt_data_end+0xff80d348>
 100d500:	8c012e36 	bltu	r17,r16,100d9bc <__divdf3+0x7f0>
 100d504:	84412c26 	beq	r16,r17,100d9b8 <__divdf3+0x7ec>
 100d508:	a82f883a 	mov	r23,r21
 100d50c:	18ffffc4 	addi	r3,r3,-1
 100d510:	002b883a 	mov	r21,zero
 100d514:	a004d63a 	srli	r2,r20,24
 100d518:	8822923a 	slli	r17,r17,8
 100d51c:	a028923a 	slli	r20,r20,8
 100d520:	8009883a 	mov	r4,r16
 100d524:	88acb03a 	or	r22,r17,r2
 100d528:	dd000015 	stw	r20,0(sp)
 100d52c:	b028d43a 	srli	r20,r22,16
 100d530:	d8c00215 	stw	r3,8(sp)
 100d534:	b4bfffcc 	andi	r18,r22,65535
 100d538:	a00b883a 	mov	r5,r20
 100d53c:	100c83c0 	call	100c83c <__udivsi3>
 100d540:	100b883a 	mov	r5,r2
 100d544:	9009883a 	mov	r4,r18
 100d548:	1023883a 	mov	r17,r2
 100d54c:	100c8f80 	call	100c8f8 <__mulsi3>
 100d550:	8009883a 	mov	r4,r16
 100d554:	a00b883a 	mov	r5,r20
 100d558:	1039883a 	mov	fp,r2
 100d55c:	100c8a00 	call	100c8a0 <__umodsi3>
 100d560:	1004943a 	slli	r2,r2,16
 100d564:	b808d43a 	srli	r4,r23,16
 100d568:	d8c00217 	ldw	r3,8(sp)
 100d56c:	2084b03a 	or	r2,r4,r2
 100d570:	1700062e 	bgeu	r2,fp,100d58c <__divdf3+0x3c0>
 100d574:	1585883a 	add	r2,r2,r22
 100d578:	893fffc4 	addi	r4,r17,-1
 100d57c:	15811d36 	bltu	r2,r22,100d9f4 <__divdf3+0x828>
 100d580:	17011c2e 	bgeu	r2,fp,100d9f4 <__divdf3+0x828>
 100d584:	8c7fff84 	addi	r17,r17,-2
 100d588:	1585883a 	add	r2,r2,r22
 100d58c:	1739c83a 	sub	fp,r2,fp
 100d590:	a00b883a 	mov	r5,r20
 100d594:	e009883a 	mov	r4,fp
 100d598:	d8c00215 	stw	r3,8(sp)
 100d59c:	100c83c0 	call	100c83c <__udivsi3>
 100d5a0:	100b883a 	mov	r5,r2
 100d5a4:	9009883a 	mov	r4,r18
 100d5a8:	1021883a 	mov	r16,r2
 100d5ac:	100c8f80 	call	100c8f8 <__mulsi3>
 100d5b0:	a00b883a 	mov	r5,r20
 100d5b4:	e009883a 	mov	r4,fp
 100d5b8:	d8800415 	stw	r2,16(sp)
 100d5bc:	100c8a00 	call	100c8a0 <__umodsi3>
 100d5c0:	1004943a 	slli	r2,r2,16
 100d5c4:	da000417 	ldw	r8,16(sp)
 100d5c8:	bdffffcc 	andi	r23,r23,65535
 100d5cc:	b884b03a 	or	r2,r23,r2
 100d5d0:	d8c00217 	ldw	r3,8(sp)
 100d5d4:	1200062e 	bgeu	r2,r8,100d5f0 <__divdf3+0x424>
 100d5d8:	1585883a 	add	r2,r2,r22
 100d5dc:	813fffc4 	addi	r4,r16,-1
 100d5e0:	15810236 	bltu	r2,r22,100d9ec <__divdf3+0x820>
 100d5e4:	1201012e 	bgeu	r2,r8,100d9ec <__divdf3+0x820>
 100d5e8:	843fff84 	addi	r16,r16,-2
 100d5ec:	1585883a 	add	r2,r2,r22
 100d5f0:	8822943a 	slli	r17,r17,16
 100d5f4:	d9800017 	ldw	r6,0(sp)
 100d5f8:	1211c83a 	sub	r8,r2,r8
 100d5fc:	8c22b03a 	or	r17,r17,r16
 100d600:	373fffcc 	andi	fp,r6,65535
 100d604:	8abfffcc 	andi	r10,r17,65535
 100d608:	8820d43a 	srli	r16,r17,16
 100d60c:	5009883a 	mov	r4,r10
 100d610:	e00b883a 	mov	r5,fp
 100d614:	302ed43a 	srli	r23,r6,16
 100d618:	d8c00215 	stw	r3,8(sp)
 100d61c:	da000415 	stw	r8,16(sp)
 100d620:	da800115 	stw	r10,4(sp)
 100d624:	100c8f80 	call	100c8f8 <__mulsi3>
 100d628:	800b883a 	mov	r5,r16
 100d62c:	e009883a 	mov	r4,fp
 100d630:	d8800515 	stw	r2,20(sp)
 100d634:	100c8f80 	call	100c8f8 <__mulsi3>
 100d638:	8009883a 	mov	r4,r16
 100d63c:	b80b883a 	mov	r5,r23
 100d640:	d8800315 	stw	r2,12(sp)
 100d644:	100c8f80 	call	100c8f8 <__mulsi3>
 100d648:	da800117 	ldw	r10,4(sp)
 100d64c:	b80b883a 	mov	r5,r23
 100d650:	1021883a 	mov	r16,r2
 100d654:	5009883a 	mov	r4,r10
 100d658:	100c8f80 	call	100c8f8 <__mulsi3>
 100d65c:	d9c00517 	ldw	r7,20(sp)
 100d660:	da400317 	ldw	r9,12(sp)
 100d664:	d8c00217 	ldw	r3,8(sp)
 100d668:	3808d43a 	srli	r4,r7,16
 100d66c:	1245883a 	add	r2,r2,r9
 100d670:	da000417 	ldw	r8,16(sp)
 100d674:	2085883a 	add	r2,r4,r2
 100d678:	1240022e 	bgeu	r2,r9,100d684 <__divdf3+0x4b8>
 100d67c:	01000074 	movhi	r4,1
 100d680:	8121883a 	add	r16,r16,r4
 100d684:	1008d43a 	srli	r4,r2,16
 100d688:	1004943a 	slli	r2,r2,16
 100d68c:	39ffffcc 	andi	r7,r7,65535
 100d690:	2409883a 	add	r4,r4,r16
 100d694:	11c5883a 	add	r2,r2,r7
 100d698:	4100bb36 	bltu	r8,r4,100d988 <__divdf3+0x7bc>
 100d69c:	4100d726 	beq	r8,r4,100d9fc <__divdf3+0x830>
 100d6a0:	4109c83a 	sub	r4,r8,r4
 100d6a4:	a8a1c83a 	sub	r16,r21,r2
 100d6a8:	ac2b803a 	cmpltu	r21,r21,r16
 100d6ac:	256bc83a 	sub	r21,r4,r21
 100d6b0:	b540d926 	beq	r22,r21,100da18 <__divdf3+0x84c>
 100d6b4:	a00b883a 	mov	r5,r20
 100d6b8:	a809883a 	mov	r4,r21
 100d6bc:	d8c00215 	stw	r3,8(sp)
 100d6c0:	100c83c0 	call	100c83c <__udivsi3>
 100d6c4:	100b883a 	mov	r5,r2
 100d6c8:	9009883a 	mov	r4,r18
 100d6cc:	d8800515 	stw	r2,20(sp)
 100d6d0:	100c8f80 	call	100c8f8 <__mulsi3>
 100d6d4:	a809883a 	mov	r4,r21
 100d6d8:	a00b883a 	mov	r5,r20
 100d6dc:	d8800415 	stw	r2,16(sp)
 100d6e0:	100c8a00 	call	100c8a0 <__umodsi3>
 100d6e4:	1004943a 	slli	r2,r2,16
 100d6e8:	8008d43a 	srli	r4,r16,16
 100d6ec:	da000417 	ldw	r8,16(sp)
 100d6f0:	d8c00217 	ldw	r3,8(sp)
 100d6f4:	2084b03a 	or	r2,r4,r2
 100d6f8:	d9c00517 	ldw	r7,20(sp)
 100d6fc:	1200062e 	bgeu	r2,r8,100d718 <__divdf3+0x54c>
 100d700:	1585883a 	add	r2,r2,r22
 100d704:	393fffc4 	addi	r4,r7,-1
 100d708:	1580c536 	bltu	r2,r22,100da20 <__divdf3+0x854>
 100d70c:	1200c42e 	bgeu	r2,r8,100da20 <__divdf3+0x854>
 100d710:	39ffff84 	addi	r7,r7,-2
 100d714:	1585883a 	add	r2,r2,r22
 100d718:	122bc83a 	sub	r21,r2,r8
 100d71c:	a00b883a 	mov	r5,r20
 100d720:	a809883a 	mov	r4,r21
 100d724:	d8c00215 	stw	r3,8(sp)
 100d728:	d9c00515 	stw	r7,20(sp)
 100d72c:	100c83c0 	call	100c83c <__udivsi3>
 100d730:	9009883a 	mov	r4,r18
 100d734:	100b883a 	mov	r5,r2
 100d738:	d8800415 	stw	r2,16(sp)
 100d73c:	100c8f80 	call	100c8f8 <__mulsi3>
 100d740:	a809883a 	mov	r4,r21
 100d744:	a00b883a 	mov	r5,r20
 100d748:	1025883a 	mov	r18,r2
 100d74c:	100c8a00 	call	100c8a0 <__umodsi3>
 100d750:	1004943a 	slli	r2,r2,16
 100d754:	813fffcc 	andi	r4,r16,65535
 100d758:	d8c00217 	ldw	r3,8(sp)
 100d75c:	20a0b03a 	or	r16,r4,r2
 100d760:	d9c00517 	ldw	r7,20(sp)
 100d764:	da000417 	ldw	r8,16(sp)
 100d768:	8480062e 	bgeu	r16,r18,100d784 <__divdf3+0x5b8>
 100d76c:	85a1883a 	add	r16,r16,r22
 100d770:	40bfffc4 	addi	r2,r8,-1
 100d774:	8580ac36 	bltu	r16,r22,100da28 <__divdf3+0x85c>
 100d778:	8480ab2e 	bgeu	r16,r18,100da28 <__divdf3+0x85c>
 100d77c:	423fff84 	addi	r8,r8,-2
 100d780:	85a1883a 	add	r16,r16,r22
 100d784:	3804943a 	slli	r2,r7,16
 100d788:	84a1c83a 	sub	r16,r16,r18
 100d78c:	e009883a 	mov	r4,fp
 100d790:	1228b03a 	or	r20,r2,r8
 100d794:	a1ffffcc 	andi	r7,r20,65535
 100d798:	a024d43a 	srli	r18,r20,16
 100d79c:	380b883a 	mov	r5,r7
 100d7a0:	d8c00215 	stw	r3,8(sp)
 100d7a4:	d9c00515 	stw	r7,20(sp)
 100d7a8:	100c8f80 	call	100c8f8 <__mulsi3>
 100d7ac:	900b883a 	mov	r5,r18
 100d7b0:	e009883a 	mov	r4,fp
 100d7b4:	102b883a 	mov	r21,r2
 100d7b8:	100c8f80 	call	100c8f8 <__mulsi3>
 100d7bc:	900b883a 	mov	r5,r18
 100d7c0:	b809883a 	mov	r4,r23
 100d7c4:	1039883a 	mov	fp,r2
 100d7c8:	100c8f80 	call	100c8f8 <__mulsi3>
 100d7cc:	d9c00517 	ldw	r7,20(sp)
 100d7d0:	b80b883a 	mov	r5,r23
 100d7d4:	1025883a 	mov	r18,r2
 100d7d8:	3809883a 	mov	r4,r7
 100d7dc:	100c8f80 	call	100c8f8 <__mulsi3>
 100d7e0:	a808d43a 	srli	r4,r21,16
 100d7e4:	1705883a 	add	r2,r2,fp
 100d7e8:	d8c00217 	ldw	r3,8(sp)
 100d7ec:	2085883a 	add	r2,r4,r2
 100d7f0:	1700022e 	bgeu	r2,fp,100d7fc <__divdf3+0x630>
 100d7f4:	01000074 	movhi	r4,1
 100d7f8:	9125883a 	add	r18,r18,r4
 100d7fc:	1008d43a 	srli	r4,r2,16
 100d800:	1004943a 	slli	r2,r2,16
 100d804:	ad7fffcc 	andi	r21,r21,65535
 100d808:	2489883a 	add	r4,r4,r18
 100d80c:	1545883a 	add	r2,r2,r21
 100d810:	81003836 	bltu	r16,r4,100d8f4 <__divdf3+0x728>
 100d814:	81003626 	beq	r16,r4,100d8f0 <__divdf3+0x724>
 100d818:	a5000054 	ori	r20,r20,1
 100d81c:	1880ffc4 	addi	r2,r3,1023
 100d820:	00bf2e0e 	bge	zero,r2,100d4dc <__alt_data_end+0xff80d4dc>
 100d824:	a10001cc 	andi	r4,r20,7
 100d828:	20000726 	beq	r4,zero,100d848 <__divdf3+0x67c>
 100d82c:	a10003cc 	andi	r4,r20,15
 100d830:	01400104 	movi	r5,4
 100d834:	21400426 	beq	r4,r5,100d848 <__divdf3+0x67c>
 100d838:	a149883a 	add	r4,r20,r5
 100d83c:	2529803a 	cmpltu	r20,r4,r20
 100d840:	8d23883a 	add	r17,r17,r20
 100d844:	2029883a 	mov	r20,r4
 100d848:	8900402c 	andhi	r4,r17,256
 100d84c:	20000426 	beq	r4,zero,100d860 <__divdf3+0x694>
 100d850:	18810004 	addi	r2,r3,1024
 100d854:	00ffc034 	movhi	r3,65280
 100d858:	18ffffc4 	addi	r3,r3,-1
 100d85c:	88e2703a 	and	r17,r17,r3
 100d860:	00c1ff84 	movi	r3,2046
 100d864:	18beb416 	blt	r3,r2,100d338 <__alt_data_end+0xff80d338>
 100d868:	a028d0fa 	srli	r20,r20,3
 100d86c:	882a977a 	slli	r21,r17,29
 100d870:	8820927a 	slli	r16,r17,9
 100d874:	1081ffcc 	andi	r2,r2,2047
 100d878:	ad2ab03a 	or	r21,r21,r20
 100d87c:	8020d33a 	srli	r16,r16,12
 100d880:	9900004c 	andi	r4,r19,1
 100d884:	003eb006 	br	100d348 <__alt_data_end+0xff80d348>
 100d888:	8080022c 	andhi	r2,r16,8
 100d88c:	10001226 	beq	r2,zero,100d8d8 <__divdf3+0x70c>
 100d890:	8880022c 	andhi	r2,r17,8
 100d894:	1000101e 	bne	r2,zero,100d8d8 <__divdf3+0x70c>
 100d898:	00800434 	movhi	r2,16
 100d89c:	8c000234 	orhi	r16,r17,8
 100d8a0:	10bfffc4 	addi	r2,r2,-1
 100d8a4:	b809883a 	mov	r4,r23
 100d8a8:	80a0703a 	and	r16,r16,r2
 100d8ac:	a02b883a 	mov	r21,r20
 100d8b0:	003f0806 	br	100d4d4 <__alt_data_end+0xff80d4d4>
 100d8b4:	008000c4 	movi	r2,3
 100d8b8:	3880b126 	beq	r7,r2,100db80 <__divdf3+0x9b4>
 100d8bc:	00800044 	movi	r2,1
 100d8c0:	38805b1e 	bne	r7,r2,100da30 <__divdf3+0x864>
 100d8c4:	e009883a 	mov	r4,fp
 100d8c8:	0005883a 	mov	r2,zero
 100d8cc:	0021883a 	mov	r16,zero
 100d8d0:	002b883a 	mov	r21,zero
 100d8d4:	003e9c06 	br	100d348 <__alt_data_end+0xff80d348>
 100d8d8:	00800434 	movhi	r2,16
 100d8dc:	84000234 	orhi	r16,r16,8
 100d8e0:	10bfffc4 	addi	r2,r2,-1
 100d8e4:	b009883a 	mov	r4,r22
 100d8e8:	80a0703a 	and	r16,r16,r2
 100d8ec:	003ef906 	br	100d4d4 <__alt_data_end+0xff80d4d4>
 100d8f0:	103fca26 	beq	r2,zero,100d81c <__alt_data_end+0xff80d81c>
 100d8f4:	b421883a 	add	r16,r22,r16
 100d8f8:	a17fffc4 	addi	r5,r20,-1
 100d8fc:	8580422e 	bgeu	r16,r22,100da08 <__divdf3+0x83c>
 100d900:	2829883a 	mov	r20,r5
 100d904:	813fc41e 	bne	r16,r4,100d818 <__alt_data_end+0xff80d818>
 100d908:	d9800017 	ldw	r6,0(sp)
 100d90c:	30bfc21e 	bne	r6,r2,100d818 <__alt_data_end+0xff80d818>
 100d910:	003fc206 	br	100d81c <__alt_data_end+0xff80d81c>
 100d914:	143ff604 	addi	r16,r2,-40
 100d918:	8c20983a 	sll	r16,r17,r16
 100d91c:	002b883a 	mov	r21,zero
 100d920:	003eb406 	br	100d3f4 <__alt_data_end+0xff80d3f4>
 100d924:	d9800215 	stw	r6,8(sp)
 100d928:	d9c00515 	stw	r7,20(sp)
 100d92c:	da000415 	stw	r8,16(sp)
 100d930:	100f1600 	call	100f160 <__clzsi2>
 100d934:	10800804 	addi	r2,r2,32
 100d938:	da000417 	ldw	r8,16(sp)
 100d93c:	d9c00517 	ldw	r7,20(sp)
 100d940:	d9800217 	ldw	r6,8(sp)
 100d944:	003ea106 	br	100d3cc <__alt_data_end+0xff80d3cc>
 100d948:	147ff604 	addi	r17,r2,-40
 100d94c:	3462983a 	sll	r17,r6,r17
 100d950:	0029883a 	mov	r20,zero
 100d954:	003ec906 	br	100d47c <__alt_data_end+0xff80d47c>
 100d958:	3009883a 	mov	r4,r6
 100d95c:	d9400115 	stw	r5,4(sp)
 100d960:	d9800215 	stw	r6,8(sp)
 100d964:	da000415 	stw	r8,16(sp)
 100d968:	da400315 	stw	r9,12(sp)
 100d96c:	100f1600 	call	100f160 <__clzsi2>
 100d970:	10800804 	addi	r2,r2,32
 100d974:	da400317 	ldw	r9,12(sp)
 100d978:	da000417 	ldw	r8,16(sp)
 100d97c:	d9800217 	ldw	r6,8(sp)
 100d980:	d9400117 	ldw	r5,4(sp)
 100d984:	003eb306 	br	100d454 <__alt_data_end+0xff80d454>
 100d988:	d9800017 	ldw	r6,0(sp)
 100d98c:	a9ab883a 	add	r21,r21,r6
 100d990:	a98b803a 	cmpltu	r5,r21,r6
 100d994:	2d8b883a 	add	r5,r5,r22
 100d998:	2a11883a 	add	r8,r5,r8
 100d99c:	897fffc4 	addi	r5,r17,-1
 100d9a0:	b2000c2e 	bgeu	r22,r8,100d9d4 <__divdf3+0x808>
 100d9a4:	41003f36 	bltu	r8,r4,100daa4 <__divdf3+0x8d8>
 100d9a8:	22006c26 	beq	r4,r8,100db5c <__divdf3+0x990>
 100d9ac:	4109c83a 	sub	r4,r8,r4
 100d9b0:	2823883a 	mov	r17,r5
 100d9b4:	003f3b06 	br	100d6a4 <__alt_data_end+0xff80d6a4>
 100d9b8:	ad3ed336 	bltu	r21,r20,100d508 <__alt_data_end+0xff80d508>
 100d9bc:	a804d07a 	srli	r2,r21,1
 100d9c0:	802e97fa 	slli	r23,r16,31
 100d9c4:	a82a97fa 	slli	r21,r21,31
 100d9c8:	8020d07a 	srli	r16,r16,1
 100d9cc:	b8aeb03a 	or	r23,r23,r2
 100d9d0:	003ed006 	br	100d514 <__alt_data_end+0xff80d514>
 100d9d4:	b23ff51e 	bne	r22,r8,100d9ac <__alt_data_end+0xff80d9ac>
 100d9d8:	d9800017 	ldw	r6,0(sp)
 100d9dc:	a9bff12e 	bgeu	r21,r6,100d9a4 <__alt_data_end+0xff80d9a4>
 100d9e0:	b109c83a 	sub	r4,r22,r4
 100d9e4:	2823883a 	mov	r17,r5
 100d9e8:	003f2e06 	br	100d6a4 <__alt_data_end+0xff80d6a4>
 100d9ec:	2021883a 	mov	r16,r4
 100d9f0:	003eff06 	br	100d5f0 <__alt_data_end+0xff80d5f0>
 100d9f4:	2023883a 	mov	r17,r4
 100d9f8:	003ee406 	br	100d58c <__alt_data_end+0xff80d58c>
 100d9fc:	a8bfe236 	bltu	r21,r2,100d988 <__alt_data_end+0xff80d988>
 100da00:	0009883a 	mov	r4,zero
 100da04:	003f2706 	br	100d6a4 <__alt_data_end+0xff80d6a4>
 100da08:	81002d36 	bltu	r16,r4,100dac0 <__divdf3+0x8f4>
 100da0c:	24005626 	beq	r4,r16,100db68 <__divdf3+0x99c>
 100da10:	2829883a 	mov	r20,r5
 100da14:	003f8006 	br	100d818 <__alt_data_end+0xff80d818>
 100da18:	053fffc4 	movi	r20,-1
 100da1c:	003f7f06 	br	100d81c <__alt_data_end+0xff80d81c>
 100da20:	200f883a 	mov	r7,r4
 100da24:	003f3c06 	br	100d718 <__alt_data_end+0xff80d718>
 100da28:	1011883a 	mov	r8,r2
 100da2c:	003f5506 	br	100d784 <__alt_data_end+0xff80d784>
 100da30:	e027883a 	mov	r19,fp
 100da34:	003f7906 	br	100d81c <__alt_data_end+0xff80d81c>
 100da38:	010007c4 	movi	r4,31
 100da3c:	20c02816 	blt	r4,r3,100dae0 <__divdf3+0x914>
 100da40:	00800804 	movi	r2,32
 100da44:	10c5c83a 	sub	r2,r2,r3
 100da48:	888a983a 	sll	r5,r17,r2
 100da4c:	a0c8d83a 	srl	r4,r20,r3
 100da50:	a084983a 	sll	r2,r20,r2
 100da54:	88e2d83a 	srl	r17,r17,r3
 100da58:	2906b03a 	or	r3,r5,r4
 100da5c:	1004c03a 	cmpne	r2,r2,zero
 100da60:	1886b03a 	or	r3,r3,r2
 100da64:	188001cc 	andi	r2,r3,7
 100da68:	10000726 	beq	r2,zero,100da88 <__divdf3+0x8bc>
 100da6c:	188003cc 	andi	r2,r3,15
 100da70:	01000104 	movi	r4,4
 100da74:	11000426 	beq	r2,r4,100da88 <__divdf3+0x8bc>
 100da78:	1805883a 	mov	r2,r3
 100da7c:	10c00104 	addi	r3,r2,4
 100da80:	1885803a 	cmpltu	r2,r3,r2
 100da84:	88a3883a 	add	r17,r17,r2
 100da88:	8880202c 	andhi	r2,r17,128
 100da8c:	10002926 	beq	r2,zero,100db34 <__divdf3+0x968>
 100da90:	9900004c 	andi	r4,r19,1
 100da94:	00800044 	movi	r2,1
 100da98:	0021883a 	mov	r16,zero
 100da9c:	002b883a 	mov	r21,zero
 100daa0:	003e2906 	br	100d348 <__alt_data_end+0xff80d348>
 100daa4:	d9800017 	ldw	r6,0(sp)
 100daa8:	8c7fff84 	addi	r17,r17,-2
 100daac:	a9ab883a 	add	r21,r21,r6
 100dab0:	a98b803a 	cmpltu	r5,r21,r6
 100dab4:	2d8b883a 	add	r5,r5,r22
 100dab8:	2a11883a 	add	r8,r5,r8
 100dabc:	003ef806 	br	100d6a0 <__alt_data_end+0xff80d6a0>
 100dac0:	d9800017 	ldw	r6,0(sp)
 100dac4:	318f883a 	add	r7,r6,r6
 100dac8:	398b803a 	cmpltu	r5,r7,r6
 100dacc:	2d8d883a 	add	r6,r5,r22
 100dad0:	81a1883a 	add	r16,r16,r6
 100dad4:	a17fff84 	addi	r5,r20,-2
 100dad8:	d9c00015 	stw	r7,0(sp)
 100dadc:	003f8806 	br	100d900 <__alt_data_end+0xff80d900>
 100dae0:	013ff844 	movi	r4,-31
 100dae4:	2085c83a 	sub	r2,r4,r2
 100dae8:	8888d83a 	srl	r4,r17,r2
 100daec:	00800804 	movi	r2,32
 100daf0:	18802126 	beq	r3,r2,100db78 <__divdf3+0x9ac>
 100daf4:	04001004 	movi	r16,64
 100daf8:	80c7c83a 	sub	r3,r16,r3
 100dafc:	88e0983a 	sll	r16,r17,r3
 100db00:	8504b03a 	or	r2,r16,r20
 100db04:	1004c03a 	cmpne	r2,r2,zero
 100db08:	2084b03a 	or	r2,r4,r2
 100db0c:	144001cc 	andi	r17,r2,7
 100db10:	88000d1e 	bne	r17,zero,100db48 <__divdf3+0x97c>
 100db14:	0021883a 	mov	r16,zero
 100db18:	102ad0fa 	srli	r21,r2,3
 100db1c:	9900004c 	andi	r4,r19,1
 100db20:	0005883a 	mov	r2,zero
 100db24:	ac6ab03a 	or	r21,r21,r17
 100db28:	003e0706 	br	100d348 <__alt_data_end+0xff80d348>
 100db2c:	1007883a 	mov	r3,r2
 100db30:	0023883a 	mov	r17,zero
 100db34:	8820927a 	slli	r16,r17,9
 100db38:	1805883a 	mov	r2,r3
 100db3c:	8822977a 	slli	r17,r17,29
 100db40:	8020d33a 	srli	r16,r16,12
 100db44:	003ff406 	br	100db18 <__alt_data_end+0xff80db18>
 100db48:	10c003cc 	andi	r3,r2,15
 100db4c:	01000104 	movi	r4,4
 100db50:	193ff626 	beq	r3,r4,100db2c <__alt_data_end+0xff80db2c>
 100db54:	0023883a 	mov	r17,zero
 100db58:	003fc806 	br	100da7c <__alt_data_end+0xff80da7c>
 100db5c:	a8bfd136 	bltu	r21,r2,100daa4 <__alt_data_end+0xff80daa4>
 100db60:	2823883a 	mov	r17,r5
 100db64:	003fa606 	br	100da00 <__alt_data_end+0xff80da00>
 100db68:	d9800017 	ldw	r6,0(sp)
 100db6c:	30bfd436 	bltu	r6,r2,100dac0 <__alt_data_end+0xff80dac0>
 100db70:	2829883a 	mov	r20,r5
 100db74:	003f6406 	br	100d908 <__alt_data_end+0xff80d908>
 100db78:	0021883a 	mov	r16,zero
 100db7c:	003fe006 	br	100db00 <__alt_data_end+0xff80db00>
 100db80:	00800434 	movhi	r2,16
 100db84:	8c000234 	orhi	r16,r17,8
 100db88:	10bfffc4 	addi	r2,r2,-1
 100db8c:	e009883a 	mov	r4,fp
 100db90:	80a0703a 	and	r16,r16,r2
 100db94:	a02b883a 	mov	r21,r20
 100db98:	003e4e06 	br	100d4d4 <__alt_data_end+0xff80d4d4>

0100db9c <__eqdf2>:
 100db9c:	2804d53a 	srli	r2,r5,20
 100dba0:	3806d53a 	srli	r3,r7,20
 100dba4:	02000434 	movhi	r8,16
 100dba8:	423fffc4 	addi	r8,r8,-1
 100dbac:	1081ffcc 	andi	r2,r2,2047
 100dbb0:	0281ffc4 	movi	r10,2047
 100dbb4:	2a12703a 	and	r9,r5,r8
 100dbb8:	18c1ffcc 	andi	r3,r3,2047
 100dbbc:	3a10703a 	and	r8,r7,r8
 100dbc0:	280ad7fa 	srli	r5,r5,31
 100dbc4:	380ed7fa 	srli	r7,r7,31
 100dbc8:	12801026 	beq	r2,r10,100dc0c <__eqdf2+0x70>
 100dbcc:	0281ffc4 	movi	r10,2047
 100dbd0:	1a800a26 	beq	r3,r10,100dbfc <__eqdf2+0x60>
 100dbd4:	10c00226 	beq	r2,r3,100dbe0 <__eqdf2+0x44>
 100dbd8:	00800044 	movi	r2,1
 100dbdc:	f800283a 	ret
 100dbe0:	4a3ffd1e 	bne	r9,r8,100dbd8 <__alt_data_end+0xff80dbd8>
 100dbe4:	21bffc1e 	bne	r4,r6,100dbd8 <__alt_data_end+0xff80dbd8>
 100dbe8:	29c00c26 	beq	r5,r7,100dc1c <__eqdf2+0x80>
 100dbec:	103ffa1e 	bne	r2,zero,100dbd8 <__alt_data_end+0xff80dbd8>
 100dbf0:	2244b03a 	or	r2,r4,r9
 100dbf4:	1004c03a 	cmpne	r2,r2,zero
 100dbf8:	f800283a 	ret
 100dbfc:	3214b03a 	or	r10,r6,r8
 100dc00:	503ff426 	beq	r10,zero,100dbd4 <__alt_data_end+0xff80dbd4>
 100dc04:	00800044 	movi	r2,1
 100dc08:	f800283a 	ret
 100dc0c:	2254b03a 	or	r10,r4,r9
 100dc10:	503fee26 	beq	r10,zero,100dbcc <__alt_data_end+0xff80dbcc>
 100dc14:	00800044 	movi	r2,1
 100dc18:	f800283a 	ret
 100dc1c:	0005883a 	mov	r2,zero
 100dc20:	f800283a 	ret

0100dc24 <__gedf2>:
 100dc24:	2804d53a 	srli	r2,r5,20
 100dc28:	3806d53a 	srli	r3,r7,20
 100dc2c:	02000434 	movhi	r8,16
 100dc30:	423fffc4 	addi	r8,r8,-1
 100dc34:	1081ffcc 	andi	r2,r2,2047
 100dc38:	0241ffc4 	movi	r9,2047
 100dc3c:	2a14703a 	and	r10,r5,r8
 100dc40:	18c1ffcc 	andi	r3,r3,2047
 100dc44:	3a10703a 	and	r8,r7,r8
 100dc48:	280ad7fa 	srli	r5,r5,31
 100dc4c:	380ed7fa 	srli	r7,r7,31
 100dc50:	12401d26 	beq	r2,r9,100dcc8 <__gedf2+0xa4>
 100dc54:	0241ffc4 	movi	r9,2047
 100dc58:	1a401226 	beq	r3,r9,100dca4 <__gedf2+0x80>
 100dc5c:	1000081e 	bne	r2,zero,100dc80 <__gedf2+0x5c>
 100dc60:	2296b03a 	or	r11,r4,r10
 100dc64:	5813003a 	cmpeq	r9,r11,zero
 100dc68:	1800091e 	bne	r3,zero,100dc90 <__gedf2+0x6c>
 100dc6c:	3218b03a 	or	r12,r6,r8
 100dc70:	6000071e 	bne	r12,zero,100dc90 <__gedf2+0x6c>
 100dc74:	0005883a 	mov	r2,zero
 100dc78:	5800101e 	bne	r11,zero,100dcbc <__gedf2+0x98>
 100dc7c:	f800283a 	ret
 100dc80:	18000c1e 	bne	r3,zero,100dcb4 <__gedf2+0x90>
 100dc84:	3212b03a 	or	r9,r6,r8
 100dc88:	48000c26 	beq	r9,zero,100dcbc <__gedf2+0x98>
 100dc8c:	0013883a 	mov	r9,zero
 100dc90:	39c03fcc 	andi	r7,r7,255
 100dc94:	48000826 	beq	r9,zero,100dcb8 <__gedf2+0x94>
 100dc98:	38000926 	beq	r7,zero,100dcc0 <__gedf2+0x9c>
 100dc9c:	00800044 	movi	r2,1
 100dca0:	f800283a 	ret
 100dca4:	3212b03a 	or	r9,r6,r8
 100dca8:	483fec26 	beq	r9,zero,100dc5c <__alt_data_end+0xff80dc5c>
 100dcac:	00bfff84 	movi	r2,-2
 100dcb0:	f800283a 	ret
 100dcb4:	39c03fcc 	andi	r7,r7,255
 100dcb8:	29c00626 	beq	r5,r7,100dcd4 <__gedf2+0xb0>
 100dcbc:	283ff726 	beq	r5,zero,100dc9c <__alt_data_end+0xff80dc9c>
 100dcc0:	00bfffc4 	movi	r2,-1
 100dcc4:	f800283a 	ret
 100dcc8:	2292b03a 	or	r9,r4,r10
 100dccc:	483fe126 	beq	r9,zero,100dc54 <__alt_data_end+0xff80dc54>
 100dcd0:	003ff606 	br	100dcac <__alt_data_end+0xff80dcac>
 100dcd4:	18bff916 	blt	r3,r2,100dcbc <__alt_data_end+0xff80dcbc>
 100dcd8:	10c00316 	blt	r2,r3,100dce8 <__gedf2+0xc4>
 100dcdc:	42bff736 	bltu	r8,r10,100dcbc <__alt_data_end+0xff80dcbc>
 100dce0:	52000326 	beq	r10,r8,100dcf0 <__gedf2+0xcc>
 100dce4:	5200042e 	bgeu	r10,r8,100dcf8 <__gedf2+0xd4>
 100dce8:	283fec1e 	bne	r5,zero,100dc9c <__alt_data_end+0xff80dc9c>
 100dcec:	003ff406 	br	100dcc0 <__alt_data_end+0xff80dcc0>
 100dcf0:	313ff236 	bltu	r6,r4,100dcbc <__alt_data_end+0xff80dcbc>
 100dcf4:	21bffc36 	bltu	r4,r6,100dce8 <__alt_data_end+0xff80dce8>
 100dcf8:	0005883a 	mov	r2,zero
 100dcfc:	f800283a 	ret

0100dd00 <__ledf2>:
 100dd00:	2804d53a 	srli	r2,r5,20
 100dd04:	3810d53a 	srli	r8,r7,20
 100dd08:	00c00434 	movhi	r3,16
 100dd0c:	18ffffc4 	addi	r3,r3,-1
 100dd10:	1081ffcc 	andi	r2,r2,2047
 100dd14:	0241ffc4 	movi	r9,2047
 100dd18:	28d4703a 	and	r10,r5,r3
 100dd1c:	4201ffcc 	andi	r8,r8,2047
 100dd20:	38c6703a 	and	r3,r7,r3
 100dd24:	280ad7fa 	srli	r5,r5,31
 100dd28:	380ed7fa 	srli	r7,r7,31
 100dd2c:	12401f26 	beq	r2,r9,100ddac <__ledf2+0xac>
 100dd30:	0241ffc4 	movi	r9,2047
 100dd34:	42401426 	beq	r8,r9,100dd88 <__ledf2+0x88>
 100dd38:	1000091e 	bne	r2,zero,100dd60 <__ledf2+0x60>
 100dd3c:	2296b03a 	or	r11,r4,r10
 100dd40:	5813003a 	cmpeq	r9,r11,zero
 100dd44:	29403fcc 	andi	r5,r5,255
 100dd48:	40000a1e 	bne	r8,zero,100dd74 <__ledf2+0x74>
 100dd4c:	30d8b03a 	or	r12,r6,r3
 100dd50:	6000081e 	bne	r12,zero,100dd74 <__ledf2+0x74>
 100dd54:	0005883a 	mov	r2,zero
 100dd58:	5800111e 	bne	r11,zero,100dda0 <__ledf2+0xa0>
 100dd5c:	f800283a 	ret
 100dd60:	29403fcc 	andi	r5,r5,255
 100dd64:	40000c1e 	bne	r8,zero,100dd98 <__ledf2+0x98>
 100dd68:	30d2b03a 	or	r9,r6,r3
 100dd6c:	48000c26 	beq	r9,zero,100dda0 <__ledf2+0xa0>
 100dd70:	0013883a 	mov	r9,zero
 100dd74:	39c03fcc 	andi	r7,r7,255
 100dd78:	48000826 	beq	r9,zero,100dd9c <__ledf2+0x9c>
 100dd7c:	38001126 	beq	r7,zero,100ddc4 <__ledf2+0xc4>
 100dd80:	00800044 	movi	r2,1
 100dd84:	f800283a 	ret
 100dd88:	30d2b03a 	or	r9,r6,r3
 100dd8c:	483fea26 	beq	r9,zero,100dd38 <__alt_data_end+0xff80dd38>
 100dd90:	00800084 	movi	r2,2
 100dd94:	f800283a 	ret
 100dd98:	39c03fcc 	andi	r7,r7,255
 100dd9c:	39400726 	beq	r7,r5,100ddbc <__ledf2+0xbc>
 100dda0:	2800081e 	bne	r5,zero,100ddc4 <__ledf2+0xc4>
 100dda4:	00800044 	movi	r2,1
 100dda8:	f800283a 	ret
 100ddac:	2292b03a 	or	r9,r4,r10
 100ddb0:	483fdf26 	beq	r9,zero,100dd30 <__alt_data_end+0xff80dd30>
 100ddb4:	00800084 	movi	r2,2
 100ddb8:	f800283a 	ret
 100ddbc:	4080030e 	bge	r8,r2,100ddcc <__ledf2+0xcc>
 100ddc0:	383fef26 	beq	r7,zero,100dd80 <__alt_data_end+0xff80dd80>
 100ddc4:	00bfffc4 	movi	r2,-1
 100ddc8:	f800283a 	ret
 100ddcc:	123feb16 	blt	r2,r8,100dd7c <__alt_data_end+0xff80dd7c>
 100ddd0:	1abff336 	bltu	r3,r10,100dda0 <__alt_data_end+0xff80dda0>
 100ddd4:	50c00326 	beq	r10,r3,100dde4 <__ledf2+0xe4>
 100ddd8:	50c0042e 	bgeu	r10,r3,100ddec <__ledf2+0xec>
 100dddc:	283fe81e 	bne	r5,zero,100dd80 <__alt_data_end+0xff80dd80>
 100dde0:	003ff806 	br	100ddc4 <__alt_data_end+0xff80ddc4>
 100dde4:	313fee36 	bltu	r6,r4,100dda0 <__alt_data_end+0xff80dda0>
 100dde8:	21bffc36 	bltu	r4,r6,100dddc <__alt_data_end+0xff80dddc>
 100ddec:	0005883a 	mov	r2,zero
 100ddf0:	f800283a 	ret

0100ddf4 <__muldf3>:
 100ddf4:	deffee04 	addi	sp,sp,-72
 100ddf8:	dd000c15 	stw	r20,48(sp)
 100ddfc:	2828d53a 	srli	r20,r5,20
 100de00:	ddc00f15 	stw	r23,60(sp)
 100de04:	282ed7fa 	srli	r23,r5,31
 100de08:	dc000815 	stw	r16,32(sp)
 100de0c:	04000434 	movhi	r16,16
 100de10:	dcc00b15 	stw	r19,44(sp)
 100de14:	843fffc4 	addi	r16,r16,-1
 100de18:	dfc01115 	stw	ra,68(sp)
 100de1c:	df001015 	stw	fp,64(sp)
 100de20:	dd800e15 	stw	r22,56(sp)
 100de24:	dd400d15 	stw	r21,52(sp)
 100de28:	dc800a15 	stw	r18,40(sp)
 100de2c:	dc400915 	stw	r17,36(sp)
 100de30:	a501ffcc 	andi	r20,r20,2047
 100de34:	2c20703a 	and	r16,r5,r16
 100de38:	b827883a 	mov	r19,r23
 100de3c:	ba403fcc 	andi	r9,r23,255
 100de40:	a0006026 	beq	r20,zero,100dfc4 <__muldf3+0x1d0>
 100de44:	0081ffc4 	movi	r2,2047
 100de48:	202d883a 	mov	r22,r4
 100de4c:	a0803626 	beq	r20,r2,100df28 <__muldf3+0x134>
 100de50:	84000434 	orhi	r16,r16,16
 100de54:	200ad77a 	srli	r5,r4,29
 100de58:	800490fa 	slli	r2,r16,3
 100de5c:	202c90fa 	slli	r22,r4,3
 100de60:	a53f0044 	addi	r20,r20,-1023
 100de64:	28a0b03a 	or	r16,r5,r2
 100de68:	002b883a 	mov	r21,zero
 100de6c:	000b883a 	mov	r5,zero
 100de70:	3804d53a 	srli	r2,r7,20
 100de74:	3838d7fa 	srli	fp,r7,31
 100de78:	04400434 	movhi	r17,16
 100de7c:	8c7fffc4 	addi	r17,r17,-1
 100de80:	1081ffcc 	andi	r2,r2,2047
 100de84:	3025883a 	mov	r18,r6
 100de88:	3c62703a 	and	r17,r7,r17
 100de8c:	e2803fcc 	andi	r10,fp,255
 100de90:	10006d26 	beq	r2,zero,100e048 <__muldf3+0x254>
 100de94:	00c1ffc4 	movi	r3,2047
 100de98:	10c06526 	beq	r2,r3,100e030 <__muldf3+0x23c>
 100de9c:	8c400434 	orhi	r17,r17,16
 100dea0:	300ed77a 	srli	r7,r6,29
 100dea4:	880690fa 	slli	r3,r17,3
 100dea8:	302490fa 	slli	r18,r6,3
 100deac:	10bf0044 	addi	r2,r2,-1023
 100deb0:	38e2b03a 	or	r17,r7,r3
 100deb4:	000f883a 	mov	r7,zero
 100deb8:	a087883a 	add	r3,r20,r2
 100debc:	010003c4 	movi	r4,15
 100dec0:	3d44b03a 	or	r2,r7,r21
 100dec4:	e5ccf03a 	xor	r6,fp,r23
 100dec8:	1a000044 	addi	r8,r3,1
 100decc:	20809b36 	bltu	r4,r2,100e13c <__muldf3+0x348>
 100ded0:	100490ba 	slli	r2,r2,2
 100ded4:	01004074 	movhi	r4,257
 100ded8:	2137ba04 	addi	r4,r4,-8472
 100dedc:	1105883a 	add	r2,r2,r4
 100dee0:	10800017 	ldw	r2,0(r2)
 100dee4:	1000683a 	jmp	r2
 100dee8:	0100e13c 	xorhi	r4,zero,900
 100deec:	0100df48 	cmpgei	r4,zero,893
 100def0:	0100df48 	cmpgei	r4,zero,893
 100def4:	0100df44 	movi	r4,893
 100def8:	0100e118 	cmpnei	r4,zero,900
 100defc:	0100e118 	cmpnei	r4,zero,900
 100df00:	0100e100 	call	100e10 <__alt_mem_onchip_memory2_0+0x100e10>
 100df04:	0100df44 	movi	r4,893
 100df08:	0100e118 	cmpnei	r4,zero,900
 100df0c:	0100e100 	call	100e10 <__alt_mem_onchip_memory2_0+0x100e10>
 100df10:	0100e118 	cmpnei	r4,zero,900
 100df14:	0100df44 	movi	r4,893
 100df18:	0100e128 	cmpgeui	r4,zero,900
 100df1c:	0100e128 	cmpgeui	r4,zero,900
 100df20:	0100e128 	cmpgeui	r4,zero,900
 100df24:	0100e488 	cmpgei	r4,zero,914
 100df28:	2404b03a 	or	r2,r4,r16
 100df2c:	1000711e 	bne	r2,zero,100e0f4 <__muldf3+0x300>
 100df30:	05400204 	movi	r21,8
 100df34:	0021883a 	mov	r16,zero
 100df38:	002d883a 	mov	r22,zero
 100df3c:	01400084 	movi	r5,2
 100df40:	003fcb06 	br	100de70 <__alt_data_end+0xff80de70>
 100df44:	500d883a 	mov	r6,r10
 100df48:	00800084 	movi	r2,2
 100df4c:	38805926 	beq	r7,r2,100e0b4 <__muldf3+0x2c0>
 100df50:	008000c4 	movi	r2,3
 100df54:	3881bb26 	beq	r7,r2,100e644 <__muldf3+0x850>
 100df58:	00800044 	movi	r2,1
 100df5c:	3881961e 	bne	r7,r2,100e5b8 <__muldf3+0x7c4>
 100df60:	3027883a 	mov	r19,r6
 100df64:	0005883a 	mov	r2,zero
 100df68:	0021883a 	mov	r16,zero
 100df6c:	002d883a 	mov	r22,zero
 100df70:	1004953a 	slli	r2,r2,20
 100df74:	98c03fcc 	andi	r3,r19,255
 100df78:	04400434 	movhi	r17,16
 100df7c:	8c7fffc4 	addi	r17,r17,-1
 100df80:	180697fa 	slli	r3,r3,31
 100df84:	8460703a 	and	r16,r16,r17
 100df88:	80a0b03a 	or	r16,r16,r2
 100df8c:	80c6b03a 	or	r3,r16,r3
 100df90:	b005883a 	mov	r2,r22
 100df94:	dfc01117 	ldw	ra,68(sp)
 100df98:	df001017 	ldw	fp,64(sp)
 100df9c:	ddc00f17 	ldw	r23,60(sp)
 100dfa0:	dd800e17 	ldw	r22,56(sp)
 100dfa4:	dd400d17 	ldw	r21,52(sp)
 100dfa8:	dd000c17 	ldw	r20,48(sp)
 100dfac:	dcc00b17 	ldw	r19,44(sp)
 100dfb0:	dc800a17 	ldw	r18,40(sp)
 100dfb4:	dc400917 	ldw	r17,36(sp)
 100dfb8:	dc000817 	ldw	r16,32(sp)
 100dfbc:	dec01204 	addi	sp,sp,72
 100dfc0:	f800283a 	ret
 100dfc4:	2404b03a 	or	r2,r4,r16
 100dfc8:	202b883a 	mov	r21,r4
 100dfcc:	10004426 	beq	r2,zero,100e0e0 <__muldf3+0x2ec>
 100dfd0:	80015126 	beq	r16,zero,100e518 <__muldf3+0x724>
 100dfd4:	8009883a 	mov	r4,r16
 100dfd8:	d9800715 	stw	r6,28(sp)
 100dfdc:	d9c00215 	stw	r7,8(sp)
 100dfe0:	da400415 	stw	r9,16(sp)
 100dfe4:	100f1600 	call	100f160 <__clzsi2>
 100dfe8:	d9800717 	ldw	r6,28(sp)
 100dfec:	d9c00217 	ldw	r7,8(sp)
 100dff0:	da400417 	ldw	r9,16(sp)
 100dff4:	113ffd44 	addi	r4,r2,-11
 100dff8:	00c00704 	movi	r3,28
 100dffc:	19014216 	blt	r3,r4,100e508 <__muldf3+0x714>
 100e000:	00c00744 	movi	r3,29
 100e004:	15bffe04 	addi	r22,r2,-8
 100e008:	1907c83a 	sub	r3,r3,r4
 100e00c:	85a0983a 	sll	r16,r16,r22
 100e010:	a8c6d83a 	srl	r3,r21,r3
 100e014:	adac983a 	sll	r22,r21,r22
 100e018:	1c20b03a 	or	r16,r3,r16
 100e01c:	1080fcc4 	addi	r2,r2,1011
 100e020:	00a9c83a 	sub	r20,zero,r2
 100e024:	002b883a 	mov	r21,zero
 100e028:	000b883a 	mov	r5,zero
 100e02c:	003f9006 	br	100de70 <__alt_data_end+0xff80de70>
 100e030:	3446b03a 	or	r3,r6,r17
 100e034:	1800281e 	bne	r3,zero,100e0d8 <__muldf3+0x2e4>
 100e038:	0023883a 	mov	r17,zero
 100e03c:	0025883a 	mov	r18,zero
 100e040:	01c00084 	movi	r7,2
 100e044:	003f9c06 	br	100deb8 <__alt_data_end+0xff80deb8>
 100e048:	3446b03a 	or	r3,r6,r17
 100e04c:	18001e26 	beq	r3,zero,100e0c8 <__muldf3+0x2d4>
 100e050:	88012126 	beq	r17,zero,100e4d8 <__muldf3+0x6e4>
 100e054:	8809883a 	mov	r4,r17
 100e058:	d9400215 	stw	r5,8(sp)
 100e05c:	d9800715 	stw	r6,28(sp)
 100e060:	da400415 	stw	r9,16(sp)
 100e064:	da800315 	stw	r10,12(sp)
 100e068:	100f1600 	call	100f160 <__clzsi2>
 100e06c:	d9400217 	ldw	r5,8(sp)
 100e070:	d9800717 	ldw	r6,28(sp)
 100e074:	da400417 	ldw	r9,16(sp)
 100e078:	da800317 	ldw	r10,12(sp)
 100e07c:	113ffd44 	addi	r4,r2,-11
 100e080:	00c00704 	movi	r3,28
 100e084:	19011016 	blt	r3,r4,100e4c8 <__muldf3+0x6d4>
 100e088:	00c00744 	movi	r3,29
 100e08c:	14bffe04 	addi	r18,r2,-8
 100e090:	1907c83a 	sub	r3,r3,r4
 100e094:	8ca2983a 	sll	r17,r17,r18
 100e098:	30c6d83a 	srl	r3,r6,r3
 100e09c:	34a4983a 	sll	r18,r6,r18
 100e0a0:	1c62b03a 	or	r17,r3,r17
 100e0a4:	1080fcc4 	addi	r2,r2,1011
 100e0a8:	0085c83a 	sub	r2,zero,r2
 100e0ac:	000f883a 	mov	r7,zero
 100e0b0:	003f8106 	br	100deb8 <__alt_data_end+0xff80deb8>
 100e0b4:	3027883a 	mov	r19,r6
 100e0b8:	0081ffc4 	movi	r2,2047
 100e0bc:	0021883a 	mov	r16,zero
 100e0c0:	002d883a 	mov	r22,zero
 100e0c4:	003faa06 	br	100df70 <__alt_data_end+0xff80df70>
 100e0c8:	0023883a 	mov	r17,zero
 100e0cc:	0025883a 	mov	r18,zero
 100e0d0:	01c00044 	movi	r7,1
 100e0d4:	003f7806 	br	100deb8 <__alt_data_end+0xff80deb8>
 100e0d8:	01c000c4 	movi	r7,3
 100e0dc:	003f7606 	br	100deb8 <__alt_data_end+0xff80deb8>
 100e0e0:	05400104 	movi	r21,4
 100e0e4:	0021883a 	mov	r16,zero
 100e0e8:	002d883a 	mov	r22,zero
 100e0ec:	01400044 	movi	r5,1
 100e0f0:	003f5f06 	br	100de70 <__alt_data_end+0xff80de70>
 100e0f4:	05400304 	movi	r21,12
 100e0f8:	014000c4 	movi	r5,3
 100e0fc:	003f5c06 	br	100de70 <__alt_data_end+0xff80de70>
 100e100:	04000434 	movhi	r16,16
 100e104:	0027883a 	mov	r19,zero
 100e108:	843fffc4 	addi	r16,r16,-1
 100e10c:	05bfffc4 	movi	r22,-1
 100e110:	0081ffc4 	movi	r2,2047
 100e114:	003f9606 	br	100df70 <__alt_data_end+0xff80df70>
 100e118:	8023883a 	mov	r17,r16
 100e11c:	b025883a 	mov	r18,r22
 100e120:	280f883a 	mov	r7,r5
 100e124:	003f8806 	br	100df48 <__alt_data_end+0xff80df48>
 100e128:	8023883a 	mov	r17,r16
 100e12c:	b025883a 	mov	r18,r22
 100e130:	480d883a 	mov	r6,r9
 100e134:	280f883a 	mov	r7,r5
 100e138:	003f8306 	br	100df48 <__alt_data_end+0xff80df48>
 100e13c:	b026d43a 	srli	r19,r22,16
 100e140:	902ed43a 	srli	r23,r18,16
 100e144:	b5bfffcc 	andi	r22,r22,65535
 100e148:	94bfffcc 	andi	r18,r18,65535
 100e14c:	b00b883a 	mov	r5,r22
 100e150:	9009883a 	mov	r4,r18
 100e154:	d8c00515 	stw	r3,20(sp)
 100e158:	d9800715 	stw	r6,28(sp)
 100e15c:	da000615 	stw	r8,24(sp)
 100e160:	100c8f80 	call	100c8f8 <__mulsi3>
 100e164:	980b883a 	mov	r5,r19
 100e168:	9009883a 	mov	r4,r18
 100e16c:	1029883a 	mov	r20,r2
 100e170:	100c8f80 	call	100c8f8 <__mulsi3>
 100e174:	b80b883a 	mov	r5,r23
 100e178:	9809883a 	mov	r4,r19
 100e17c:	102b883a 	mov	r21,r2
 100e180:	100c8f80 	call	100c8f8 <__mulsi3>
 100e184:	b809883a 	mov	r4,r23
 100e188:	b00b883a 	mov	r5,r22
 100e18c:	1039883a 	mov	fp,r2
 100e190:	100c8f80 	call	100c8f8 <__mulsi3>
 100e194:	a008d43a 	srli	r4,r20,16
 100e198:	1545883a 	add	r2,r2,r21
 100e19c:	d8c00517 	ldw	r3,20(sp)
 100e1a0:	2085883a 	add	r2,r4,r2
 100e1a4:	d9800717 	ldw	r6,28(sp)
 100e1a8:	da000617 	ldw	r8,24(sp)
 100e1ac:	1540022e 	bgeu	r2,r21,100e1b8 <__muldf3+0x3c4>
 100e1b0:	01000074 	movhi	r4,1
 100e1b4:	e139883a 	add	fp,fp,r4
 100e1b8:	100e943a 	slli	r7,r2,16
 100e1bc:	1004d43a 	srli	r2,r2,16
 100e1c0:	882ad43a 	srli	r21,r17,16
 100e1c4:	a53fffcc 	andi	r20,r20,65535
 100e1c8:	8c7fffcc 	andi	r17,r17,65535
 100e1cc:	3d29883a 	add	r20,r7,r20
 100e1d0:	b00b883a 	mov	r5,r22
 100e1d4:	8809883a 	mov	r4,r17
 100e1d8:	d8c00515 	stw	r3,20(sp)
 100e1dc:	d9800715 	stw	r6,28(sp)
 100e1e0:	da000615 	stw	r8,24(sp)
 100e1e4:	dd000115 	stw	r20,4(sp)
 100e1e8:	d8800015 	stw	r2,0(sp)
 100e1ec:	100c8f80 	call	100c8f8 <__mulsi3>
 100e1f0:	980b883a 	mov	r5,r19
 100e1f4:	8809883a 	mov	r4,r17
 100e1f8:	d8800215 	stw	r2,8(sp)
 100e1fc:	100c8f80 	call	100c8f8 <__mulsi3>
 100e200:	9809883a 	mov	r4,r19
 100e204:	a80b883a 	mov	r5,r21
 100e208:	1029883a 	mov	r20,r2
 100e20c:	100c8f80 	call	100c8f8 <__mulsi3>
 100e210:	b00b883a 	mov	r5,r22
 100e214:	a809883a 	mov	r4,r21
 100e218:	d8800415 	stw	r2,16(sp)
 100e21c:	100c8f80 	call	100c8f8 <__mulsi3>
 100e220:	d9c00217 	ldw	r7,8(sp)
 100e224:	1505883a 	add	r2,r2,r20
 100e228:	d8c00517 	ldw	r3,20(sp)
 100e22c:	3826d43a 	srli	r19,r7,16
 100e230:	d9800717 	ldw	r6,28(sp)
 100e234:	da000617 	ldw	r8,24(sp)
 100e238:	9885883a 	add	r2,r19,r2
 100e23c:	da400417 	ldw	r9,16(sp)
 100e240:	1500022e 	bgeu	r2,r20,100e24c <__muldf3+0x458>
 100e244:	01000074 	movhi	r4,1
 100e248:	4913883a 	add	r9,r9,r4
 100e24c:	1028d43a 	srli	r20,r2,16
 100e250:	1004943a 	slli	r2,r2,16
 100e254:	802cd43a 	srli	r22,r16,16
 100e258:	843fffcc 	andi	r16,r16,65535
 100e25c:	3cffffcc 	andi	r19,r7,65535
 100e260:	9009883a 	mov	r4,r18
 100e264:	800b883a 	mov	r5,r16
 100e268:	a269883a 	add	r20,r20,r9
 100e26c:	d8c00515 	stw	r3,20(sp)
 100e270:	d9800715 	stw	r6,28(sp)
 100e274:	da000615 	stw	r8,24(sp)
 100e278:	14e7883a 	add	r19,r2,r19
 100e27c:	100c8f80 	call	100c8f8 <__mulsi3>
 100e280:	9009883a 	mov	r4,r18
 100e284:	b00b883a 	mov	r5,r22
 100e288:	d8800315 	stw	r2,12(sp)
 100e28c:	100c8f80 	call	100c8f8 <__mulsi3>
 100e290:	b809883a 	mov	r4,r23
 100e294:	b00b883a 	mov	r5,r22
 100e298:	d8800215 	stw	r2,8(sp)
 100e29c:	100c8f80 	call	100c8f8 <__mulsi3>
 100e2a0:	b80b883a 	mov	r5,r23
 100e2a4:	8009883a 	mov	r4,r16
 100e2a8:	d8800415 	stw	r2,16(sp)
 100e2ac:	100c8f80 	call	100c8f8 <__mulsi3>
 100e2b0:	da800317 	ldw	r10,12(sp)
 100e2b4:	d9c00217 	ldw	r7,8(sp)
 100e2b8:	d9000017 	ldw	r4,0(sp)
 100e2bc:	502ed43a 	srli	r23,r10,16
 100e2c0:	11c5883a 	add	r2,r2,r7
 100e2c4:	24e5883a 	add	r18,r4,r19
 100e2c8:	b885883a 	add	r2,r23,r2
 100e2cc:	d8c00517 	ldw	r3,20(sp)
 100e2d0:	d9800717 	ldw	r6,28(sp)
 100e2d4:	da000617 	ldw	r8,24(sp)
 100e2d8:	da400417 	ldw	r9,16(sp)
 100e2dc:	11c0022e 	bgeu	r2,r7,100e2e8 <__muldf3+0x4f4>
 100e2e0:	01000074 	movhi	r4,1
 100e2e4:	4913883a 	add	r9,r9,r4
 100e2e8:	100ed43a 	srli	r7,r2,16
 100e2ec:	1004943a 	slli	r2,r2,16
 100e2f0:	55ffffcc 	andi	r23,r10,65535
 100e2f4:	3a53883a 	add	r9,r7,r9
 100e2f8:	8809883a 	mov	r4,r17
 100e2fc:	800b883a 	mov	r5,r16
 100e300:	d8c00515 	stw	r3,20(sp)
 100e304:	d9800715 	stw	r6,28(sp)
 100e308:	da000615 	stw	r8,24(sp)
 100e30c:	da400415 	stw	r9,16(sp)
 100e310:	15ef883a 	add	r23,r2,r23
 100e314:	100c8f80 	call	100c8f8 <__mulsi3>
 100e318:	8809883a 	mov	r4,r17
 100e31c:	b00b883a 	mov	r5,r22
 100e320:	d8800215 	stw	r2,8(sp)
 100e324:	100c8f80 	call	100c8f8 <__mulsi3>
 100e328:	b00b883a 	mov	r5,r22
 100e32c:	a809883a 	mov	r4,r21
 100e330:	d8800315 	stw	r2,12(sp)
 100e334:	100c8f80 	call	100c8f8 <__mulsi3>
 100e338:	8009883a 	mov	r4,r16
 100e33c:	a80b883a 	mov	r5,r21
 100e340:	1023883a 	mov	r17,r2
 100e344:	100c8f80 	call	100c8f8 <__mulsi3>
 100e348:	d9c00217 	ldw	r7,8(sp)
 100e34c:	da800317 	ldw	r10,12(sp)
 100e350:	d8c00517 	ldw	r3,20(sp)
 100e354:	3808d43a 	srli	r4,r7,16
 100e358:	1285883a 	add	r2,r2,r10
 100e35c:	d9800717 	ldw	r6,28(sp)
 100e360:	2085883a 	add	r2,r4,r2
 100e364:	da000617 	ldw	r8,24(sp)
 100e368:	da400417 	ldw	r9,16(sp)
 100e36c:	1280022e 	bgeu	r2,r10,100e378 <__muldf3+0x584>
 100e370:	01000074 	movhi	r4,1
 100e374:	8923883a 	add	r17,r17,r4
 100e378:	1008943a 	slli	r4,r2,16
 100e37c:	39ffffcc 	andi	r7,r7,65535
 100e380:	e4b9883a 	add	fp,fp,r18
 100e384:	21cf883a 	add	r7,r4,r7
 100e388:	e4e7803a 	cmpltu	r19,fp,r19
 100e38c:	3d0f883a 	add	r7,r7,r20
 100e390:	bf39883a 	add	fp,r23,fp
 100e394:	99c9883a 	add	r4,r19,r7
 100e398:	e5ef803a 	cmpltu	r23,fp,r23
 100e39c:	490b883a 	add	r5,r9,r4
 100e3a0:	1004d43a 	srli	r2,r2,16
 100e3a4:	b965883a 	add	r18,r23,r5
 100e3a8:	24c9803a 	cmpltu	r4,r4,r19
 100e3ac:	3d29803a 	cmpltu	r20,r7,r20
 100e3b0:	a128b03a 	or	r20,r20,r4
 100e3b4:	95ef803a 	cmpltu	r23,r18,r23
 100e3b8:	2a53803a 	cmpltu	r9,r5,r9
 100e3bc:	a0a9883a 	add	r20,r20,r2
 100e3c0:	4deeb03a 	or	r23,r9,r23
 100e3c4:	a5ef883a 	add	r23,r20,r23
 100e3c8:	bc63883a 	add	r17,r23,r17
 100e3cc:	e004927a 	slli	r2,fp,9
 100e3d0:	d9000117 	ldw	r4,4(sp)
 100e3d4:	882e927a 	slli	r23,r17,9
 100e3d8:	9022d5fa 	srli	r17,r18,23
 100e3dc:	e038d5fa 	srli	fp,fp,23
 100e3e0:	1104b03a 	or	r2,r2,r4
 100e3e4:	9024927a 	slli	r18,r18,9
 100e3e8:	1004c03a 	cmpne	r2,r2,zero
 100e3ec:	bc62b03a 	or	r17,r23,r17
 100e3f0:	1738b03a 	or	fp,r2,fp
 100e3f4:	8880402c 	andhi	r2,r17,256
 100e3f8:	e4a4b03a 	or	r18,fp,r18
 100e3fc:	10000726 	beq	r2,zero,100e41c <__muldf3+0x628>
 100e400:	9006d07a 	srli	r3,r18,1
 100e404:	880497fa 	slli	r2,r17,31
 100e408:	9480004c 	andi	r18,r18,1
 100e40c:	8822d07a 	srli	r17,r17,1
 100e410:	1ca4b03a 	or	r18,r3,r18
 100e414:	14a4b03a 	or	r18,r2,r18
 100e418:	4007883a 	mov	r3,r8
 100e41c:	1880ffc4 	addi	r2,r3,1023
 100e420:	0080460e 	bge	zero,r2,100e53c <__muldf3+0x748>
 100e424:	910001cc 	andi	r4,r18,7
 100e428:	20000726 	beq	r4,zero,100e448 <__muldf3+0x654>
 100e42c:	910003cc 	andi	r4,r18,15
 100e430:	01400104 	movi	r5,4
 100e434:	21400426 	beq	r4,r5,100e448 <__muldf3+0x654>
 100e438:	9149883a 	add	r4,r18,r5
 100e43c:	24a5803a 	cmpltu	r18,r4,r18
 100e440:	8ca3883a 	add	r17,r17,r18
 100e444:	2025883a 	mov	r18,r4
 100e448:	8900402c 	andhi	r4,r17,256
 100e44c:	20000426 	beq	r4,zero,100e460 <__muldf3+0x66c>
 100e450:	18810004 	addi	r2,r3,1024
 100e454:	00ffc034 	movhi	r3,65280
 100e458:	18ffffc4 	addi	r3,r3,-1
 100e45c:	88e2703a 	and	r17,r17,r3
 100e460:	00c1ff84 	movi	r3,2046
 100e464:	18bf1316 	blt	r3,r2,100e0b4 <__alt_data_end+0xff80e0b4>
 100e468:	882c977a 	slli	r22,r17,29
 100e46c:	9024d0fa 	srli	r18,r18,3
 100e470:	8822927a 	slli	r17,r17,9
 100e474:	1081ffcc 	andi	r2,r2,2047
 100e478:	b4acb03a 	or	r22,r22,r18
 100e47c:	8820d33a 	srli	r16,r17,12
 100e480:	3027883a 	mov	r19,r6
 100e484:	003eba06 	br	100df70 <__alt_data_end+0xff80df70>
 100e488:	8080022c 	andhi	r2,r16,8
 100e48c:	10000926 	beq	r2,zero,100e4b4 <__muldf3+0x6c0>
 100e490:	8880022c 	andhi	r2,r17,8
 100e494:	1000071e 	bne	r2,zero,100e4b4 <__muldf3+0x6c0>
 100e498:	00800434 	movhi	r2,16
 100e49c:	8c000234 	orhi	r16,r17,8
 100e4a0:	10bfffc4 	addi	r2,r2,-1
 100e4a4:	e027883a 	mov	r19,fp
 100e4a8:	80a0703a 	and	r16,r16,r2
 100e4ac:	902d883a 	mov	r22,r18
 100e4b0:	003f1706 	br	100e110 <__alt_data_end+0xff80e110>
 100e4b4:	00800434 	movhi	r2,16
 100e4b8:	84000234 	orhi	r16,r16,8
 100e4bc:	10bfffc4 	addi	r2,r2,-1
 100e4c0:	80a0703a 	and	r16,r16,r2
 100e4c4:	003f1206 	br	100e110 <__alt_data_end+0xff80e110>
 100e4c8:	147ff604 	addi	r17,r2,-40
 100e4cc:	3462983a 	sll	r17,r6,r17
 100e4d0:	0025883a 	mov	r18,zero
 100e4d4:	003ef306 	br	100e0a4 <__alt_data_end+0xff80e0a4>
 100e4d8:	3009883a 	mov	r4,r6
 100e4dc:	d9400215 	stw	r5,8(sp)
 100e4e0:	d9800715 	stw	r6,28(sp)
 100e4e4:	da400415 	stw	r9,16(sp)
 100e4e8:	da800315 	stw	r10,12(sp)
 100e4ec:	100f1600 	call	100f160 <__clzsi2>
 100e4f0:	10800804 	addi	r2,r2,32
 100e4f4:	da800317 	ldw	r10,12(sp)
 100e4f8:	da400417 	ldw	r9,16(sp)
 100e4fc:	d9800717 	ldw	r6,28(sp)
 100e500:	d9400217 	ldw	r5,8(sp)
 100e504:	003edd06 	br	100e07c <__alt_data_end+0xff80e07c>
 100e508:	143ff604 	addi	r16,r2,-40
 100e50c:	ac20983a 	sll	r16,r21,r16
 100e510:	002d883a 	mov	r22,zero
 100e514:	003ec106 	br	100e01c <__alt_data_end+0xff80e01c>
 100e518:	d9800715 	stw	r6,28(sp)
 100e51c:	d9c00215 	stw	r7,8(sp)
 100e520:	da400415 	stw	r9,16(sp)
 100e524:	100f1600 	call	100f160 <__clzsi2>
 100e528:	10800804 	addi	r2,r2,32
 100e52c:	da400417 	ldw	r9,16(sp)
 100e530:	d9c00217 	ldw	r7,8(sp)
 100e534:	d9800717 	ldw	r6,28(sp)
 100e538:	003eae06 	br	100dff4 <__alt_data_end+0xff80dff4>
 100e53c:	00c00044 	movi	r3,1
 100e540:	1887c83a 	sub	r3,r3,r2
 100e544:	01000e04 	movi	r4,56
 100e548:	20fe8516 	blt	r4,r3,100df60 <__alt_data_end+0xff80df60>
 100e54c:	010007c4 	movi	r4,31
 100e550:	20c01b16 	blt	r4,r3,100e5c0 <__muldf3+0x7cc>
 100e554:	00800804 	movi	r2,32
 100e558:	10c5c83a 	sub	r2,r2,r3
 100e55c:	888a983a 	sll	r5,r17,r2
 100e560:	90c8d83a 	srl	r4,r18,r3
 100e564:	9084983a 	sll	r2,r18,r2
 100e568:	88e2d83a 	srl	r17,r17,r3
 100e56c:	2906b03a 	or	r3,r5,r4
 100e570:	1004c03a 	cmpne	r2,r2,zero
 100e574:	1886b03a 	or	r3,r3,r2
 100e578:	188001cc 	andi	r2,r3,7
 100e57c:	10000726 	beq	r2,zero,100e59c <__muldf3+0x7a8>
 100e580:	188003cc 	andi	r2,r3,15
 100e584:	01000104 	movi	r4,4
 100e588:	11000426 	beq	r2,r4,100e59c <__muldf3+0x7a8>
 100e58c:	1805883a 	mov	r2,r3
 100e590:	10c00104 	addi	r3,r2,4
 100e594:	1885803a 	cmpltu	r2,r3,r2
 100e598:	88a3883a 	add	r17,r17,r2
 100e59c:	8880202c 	andhi	r2,r17,128
 100e5a0:	10001c26 	beq	r2,zero,100e614 <__muldf3+0x820>
 100e5a4:	3027883a 	mov	r19,r6
 100e5a8:	00800044 	movi	r2,1
 100e5ac:	0021883a 	mov	r16,zero
 100e5b0:	002d883a 	mov	r22,zero
 100e5b4:	003e6e06 	br	100df70 <__alt_data_end+0xff80df70>
 100e5b8:	4007883a 	mov	r3,r8
 100e5bc:	003f9706 	br	100e41c <__alt_data_end+0xff80e41c>
 100e5c0:	017ff844 	movi	r5,-31
 100e5c4:	2885c83a 	sub	r2,r5,r2
 100e5c8:	888ad83a 	srl	r5,r17,r2
 100e5cc:	00800804 	movi	r2,32
 100e5d0:	18801a26 	beq	r3,r2,100e63c <__muldf3+0x848>
 100e5d4:	01001004 	movi	r4,64
 100e5d8:	20c7c83a 	sub	r3,r4,r3
 100e5dc:	88e2983a 	sll	r17,r17,r3
 100e5e0:	8ca4b03a 	or	r18,r17,r18
 100e5e4:	9004c03a 	cmpne	r2,r18,zero
 100e5e8:	2884b03a 	or	r2,r5,r2
 100e5ec:	144001cc 	andi	r17,r2,7
 100e5f0:	88000d1e 	bne	r17,zero,100e628 <__muldf3+0x834>
 100e5f4:	0021883a 	mov	r16,zero
 100e5f8:	102cd0fa 	srli	r22,r2,3
 100e5fc:	3027883a 	mov	r19,r6
 100e600:	0005883a 	mov	r2,zero
 100e604:	b46cb03a 	or	r22,r22,r17
 100e608:	003e5906 	br	100df70 <__alt_data_end+0xff80df70>
 100e60c:	1007883a 	mov	r3,r2
 100e610:	0023883a 	mov	r17,zero
 100e614:	8820927a 	slli	r16,r17,9
 100e618:	1805883a 	mov	r2,r3
 100e61c:	8822977a 	slli	r17,r17,29
 100e620:	8020d33a 	srli	r16,r16,12
 100e624:	003ff406 	br	100e5f8 <__alt_data_end+0xff80e5f8>
 100e628:	10c003cc 	andi	r3,r2,15
 100e62c:	01000104 	movi	r4,4
 100e630:	193ff626 	beq	r3,r4,100e60c <__alt_data_end+0xff80e60c>
 100e634:	0023883a 	mov	r17,zero
 100e638:	003fd506 	br	100e590 <__alt_data_end+0xff80e590>
 100e63c:	0023883a 	mov	r17,zero
 100e640:	003fe706 	br	100e5e0 <__alt_data_end+0xff80e5e0>
 100e644:	00800434 	movhi	r2,16
 100e648:	8c000234 	orhi	r16,r17,8
 100e64c:	10bfffc4 	addi	r2,r2,-1
 100e650:	3027883a 	mov	r19,r6
 100e654:	80a0703a 	and	r16,r16,r2
 100e658:	902d883a 	mov	r22,r18
 100e65c:	003eac06 	br	100e110 <__alt_data_end+0xff80e110>

0100e660 <__subdf3>:
 100e660:	02000434 	movhi	r8,16
 100e664:	423fffc4 	addi	r8,r8,-1
 100e668:	defffb04 	addi	sp,sp,-20
 100e66c:	2a14703a 	and	r10,r5,r8
 100e670:	3812d53a 	srli	r9,r7,20
 100e674:	3a10703a 	and	r8,r7,r8
 100e678:	2006d77a 	srli	r3,r4,29
 100e67c:	3004d77a 	srli	r2,r6,29
 100e680:	dc000015 	stw	r16,0(sp)
 100e684:	501490fa 	slli	r10,r10,3
 100e688:	2820d53a 	srli	r16,r5,20
 100e68c:	401090fa 	slli	r8,r8,3
 100e690:	dc800215 	stw	r18,8(sp)
 100e694:	dc400115 	stw	r17,4(sp)
 100e698:	dfc00415 	stw	ra,16(sp)
 100e69c:	202290fa 	slli	r17,r4,3
 100e6a0:	dcc00315 	stw	r19,12(sp)
 100e6a4:	4a41ffcc 	andi	r9,r9,2047
 100e6a8:	0101ffc4 	movi	r4,2047
 100e6ac:	2824d7fa 	srli	r18,r5,31
 100e6b0:	8401ffcc 	andi	r16,r16,2047
 100e6b4:	50c6b03a 	or	r3,r10,r3
 100e6b8:	380ed7fa 	srli	r7,r7,31
 100e6bc:	408ab03a 	or	r5,r8,r2
 100e6c0:	300c90fa 	slli	r6,r6,3
 100e6c4:	49009626 	beq	r9,r4,100e920 <__subdf3+0x2c0>
 100e6c8:	39c0005c 	xori	r7,r7,1
 100e6cc:	8245c83a 	sub	r2,r16,r9
 100e6d0:	3c807426 	beq	r7,r18,100e8a4 <__subdf3+0x244>
 100e6d4:	0080af0e 	bge	zero,r2,100e994 <__subdf3+0x334>
 100e6d8:	48002a1e 	bne	r9,zero,100e784 <__subdf3+0x124>
 100e6dc:	2988b03a 	or	r4,r5,r6
 100e6e0:	20009a1e 	bne	r4,zero,100e94c <__subdf3+0x2ec>
 100e6e4:	888001cc 	andi	r2,r17,7
 100e6e8:	10000726 	beq	r2,zero,100e708 <__subdf3+0xa8>
 100e6ec:	888003cc 	andi	r2,r17,15
 100e6f0:	01000104 	movi	r4,4
 100e6f4:	11000426 	beq	r2,r4,100e708 <__subdf3+0xa8>
 100e6f8:	890b883a 	add	r5,r17,r4
 100e6fc:	2c63803a 	cmpltu	r17,r5,r17
 100e700:	1c47883a 	add	r3,r3,r17
 100e704:	2823883a 	mov	r17,r5
 100e708:	1880202c 	andhi	r2,r3,128
 100e70c:	10005926 	beq	r2,zero,100e874 <__subdf3+0x214>
 100e710:	84000044 	addi	r16,r16,1
 100e714:	0081ffc4 	movi	r2,2047
 100e718:	8080be26 	beq	r16,r2,100ea14 <__subdf3+0x3b4>
 100e71c:	017fe034 	movhi	r5,65408
 100e720:	297fffc4 	addi	r5,r5,-1
 100e724:	1946703a 	and	r3,r3,r5
 100e728:	1804977a 	slli	r2,r3,29
 100e72c:	1806927a 	slli	r3,r3,9
 100e730:	8822d0fa 	srli	r17,r17,3
 100e734:	8401ffcc 	andi	r16,r16,2047
 100e738:	180ad33a 	srli	r5,r3,12
 100e73c:	9100004c 	andi	r4,r18,1
 100e740:	1444b03a 	or	r2,r2,r17
 100e744:	80c1ffcc 	andi	r3,r16,2047
 100e748:	1820953a 	slli	r16,r3,20
 100e74c:	20c03fcc 	andi	r3,r4,255
 100e750:	180897fa 	slli	r4,r3,31
 100e754:	00c00434 	movhi	r3,16
 100e758:	18ffffc4 	addi	r3,r3,-1
 100e75c:	28c6703a 	and	r3,r5,r3
 100e760:	1c06b03a 	or	r3,r3,r16
 100e764:	1906b03a 	or	r3,r3,r4
 100e768:	dfc00417 	ldw	ra,16(sp)
 100e76c:	dcc00317 	ldw	r19,12(sp)
 100e770:	dc800217 	ldw	r18,8(sp)
 100e774:	dc400117 	ldw	r17,4(sp)
 100e778:	dc000017 	ldw	r16,0(sp)
 100e77c:	dec00504 	addi	sp,sp,20
 100e780:	f800283a 	ret
 100e784:	0101ffc4 	movi	r4,2047
 100e788:	813fd626 	beq	r16,r4,100e6e4 <__alt_data_end+0xff80e6e4>
 100e78c:	29402034 	orhi	r5,r5,128
 100e790:	01000e04 	movi	r4,56
 100e794:	2080a316 	blt	r4,r2,100ea24 <__subdf3+0x3c4>
 100e798:	010007c4 	movi	r4,31
 100e79c:	2080c616 	blt	r4,r2,100eab8 <__subdf3+0x458>
 100e7a0:	01000804 	movi	r4,32
 100e7a4:	2089c83a 	sub	r4,r4,r2
 100e7a8:	2910983a 	sll	r8,r5,r4
 100e7ac:	308ed83a 	srl	r7,r6,r2
 100e7b0:	3108983a 	sll	r4,r6,r4
 100e7b4:	2884d83a 	srl	r2,r5,r2
 100e7b8:	41ccb03a 	or	r6,r8,r7
 100e7bc:	2008c03a 	cmpne	r4,r4,zero
 100e7c0:	310cb03a 	or	r6,r6,r4
 100e7c4:	898dc83a 	sub	r6,r17,r6
 100e7c8:	89a3803a 	cmpltu	r17,r17,r6
 100e7cc:	1887c83a 	sub	r3,r3,r2
 100e7d0:	1c47c83a 	sub	r3,r3,r17
 100e7d4:	3023883a 	mov	r17,r6
 100e7d8:	1880202c 	andhi	r2,r3,128
 100e7dc:	10002326 	beq	r2,zero,100e86c <__subdf3+0x20c>
 100e7e0:	04c02034 	movhi	r19,128
 100e7e4:	9cffffc4 	addi	r19,r19,-1
 100e7e8:	1ce6703a 	and	r19,r3,r19
 100e7ec:	98007a26 	beq	r19,zero,100e9d8 <__subdf3+0x378>
 100e7f0:	9809883a 	mov	r4,r19
 100e7f4:	100f1600 	call	100f160 <__clzsi2>
 100e7f8:	113ffe04 	addi	r4,r2,-8
 100e7fc:	00c007c4 	movi	r3,31
 100e800:	19007b16 	blt	r3,r4,100e9f0 <__subdf3+0x390>
 100e804:	00800804 	movi	r2,32
 100e808:	1105c83a 	sub	r2,r2,r4
 100e80c:	8884d83a 	srl	r2,r17,r2
 100e810:	9906983a 	sll	r3,r19,r4
 100e814:	8922983a 	sll	r17,r17,r4
 100e818:	10c4b03a 	or	r2,r2,r3
 100e81c:	24007816 	blt	r4,r16,100ea00 <__subdf3+0x3a0>
 100e820:	2421c83a 	sub	r16,r4,r16
 100e824:	80c00044 	addi	r3,r16,1
 100e828:	010007c4 	movi	r4,31
 100e82c:	20c09516 	blt	r4,r3,100ea84 <__subdf3+0x424>
 100e830:	01400804 	movi	r5,32
 100e834:	28cbc83a 	sub	r5,r5,r3
 100e838:	88c8d83a 	srl	r4,r17,r3
 100e83c:	8962983a 	sll	r17,r17,r5
 100e840:	114a983a 	sll	r5,r2,r5
 100e844:	10c6d83a 	srl	r3,r2,r3
 100e848:	8804c03a 	cmpne	r2,r17,zero
 100e84c:	290ab03a 	or	r5,r5,r4
 100e850:	28a2b03a 	or	r17,r5,r2
 100e854:	0021883a 	mov	r16,zero
 100e858:	003fa206 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100e85c:	2090b03a 	or	r8,r4,r2
 100e860:	40018e26 	beq	r8,zero,100ee9c <__subdf3+0x83c>
 100e864:	1007883a 	mov	r3,r2
 100e868:	2023883a 	mov	r17,r4
 100e86c:	888001cc 	andi	r2,r17,7
 100e870:	103f9e1e 	bne	r2,zero,100e6ec <__alt_data_end+0xff80e6ec>
 100e874:	1804977a 	slli	r2,r3,29
 100e878:	8822d0fa 	srli	r17,r17,3
 100e87c:	1810d0fa 	srli	r8,r3,3
 100e880:	9100004c 	andi	r4,r18,1
 100e884:	1444b03a 	or	r2,r2,r17
 100e888:	00c1ffc4 	movi	r3,2047
 100e88c:	80c02826 	beq	r16,r3,100e930 <__subdf3+0x2d0>
 100e890:	01400434 	movhi	r5,16
 100e894:	297fffc4 	addi	r5,r5,-1
 100e898:	80e0703a 	and	r16,r16,r3
 100e89c:	414a703a 	and	r5,r8,r5
 100e8a0:	003fa806 	br	100e744 <__alt_data_end+0xff80e744>
 100e8a4:	0080630e 	bge	zero,r2,100ea34 <__subdf3+0x3d4>
 100e8a8:	48003026 	beq	r9,zero,100e96c <__subdf3+0x30c>
 100e8ac:	0101ffc4 	movi	r4,2047
 100e8b0:	813f8c26 	beq	r16,r4,100e6e4 <__alt_data_end+0xff80e6e4>
 100e8b4:	29402034 	orhi	r5,r5,128
 100e8b8:	01000e04 	movi	r4,56
 100e8bc:	2080a90e 	bge	r4,r2,100eb64 <__subdf3+0x504>
 100e8c0:	298cb03a 	or	r6,r5,r6
 100e8c4:	3012c03a 	cmpne	r9,r6,zero
 100e8c8:	0005883a 	mov	r2,zero
 100e8cc:	4c53883a 	add	r9,r9,r17
 100e8d0:	4c63803a 	cmpltu	r17,r9,r17
 100e8d4:	10c7883a 	add	r3,r2,r3
 100e8d8:	88c7883a 	add	r3,r17,r3
 100e8dc:	4823883a 	mov	r17,r9
 100e8e0:	1880202c 	andhi	r2,r3,128
 100e8e4:	1000d026 	beq	r2,zero,100ec28 <__subdf3+0x5c8>
 100e8e8:	84000044 	addi	r16,r16,1
 100e8ec:	0081ffc4 	movi	r2,2047
 100e8f0:	8080fe26 	beq	r16,r2,100ecec <__subdf3+0x68c>
 100e8f4:	00bfe034 	movhi	r2,65408
 100e8f8:	10bfffc4 	addi	r2,r2,-1
 100e8fc:	1886703a 	and	r3,r3,r2
 100e900:	880ad07a 	srli	r5,r17,1
 100e904:	180497fa 	slli	r2,r3,31
 100e908:	8900004c 	andi	r4,r17,1
 100e90c:	2922b03a 	or	r17,r5,r4
 100e910:	1806d07a 	srli	r3,r3,1
 100e914:	1462b03a 	or	r17,r2,r17
 100e918:	3825883a 	mov	r18,r7
 100e91c:	003f7106 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100e920:	2984b03a 	or	r2,r5,r6
 100e924:	103f6826 	beq	r2,zero,100e6c8 <__alt_data_end+0xff80e6c8>
 100e928:	39c03fcc 	andi	r7,r7,255
 100e92c:	003f6706 	br	100e6cc <__alt_data_end+0xff80e6cc>
 100e930:	4086b03a 	or	r3,r8,r2
 100e934:	18015226 	beq	r3,zero,100ee80 <__subdf3+0x820>
 100e938:	00c00434 	movhi	r3,16
 100e93c:	41400234 	orhi	r5,r8,8
 100e940:	18ffffc4 	addi	r3,r3,-1
 100e944:	28ca703a 	and	r5,r5,r3
 100e948:	003f7e06 	br	100e744 <__alt_data_end+0xff80e744>
 100e94c:	10bfffc4 	addi	r2,r2,-1
 100e950:	1000491e 	bne	r2,zero,100ea78 <__subdf3+0x418>
 100e954:	898fc83a 	sub	r7,r17,r6
 100e958:	89e3803a 	cmpltu	r17,r17,r7
 100e95c:	1947c83a 	sub	r3,r3,r5
 100e960:	1c47c83a 	sub	r3,r3,r17
 100e964:	3823883a 	mov	r17,r7
 100e968:	003f9b06 	br	100e7d8 <__alt_data_end+0xff80e7d8>
 100e96c:	2988b03a 	or	r4,r5,r6
 100e970:	203f5c26 	beq	r4,zero,100e6e4 <__alt_data_end+0xff80e6e4>
 100e974:	10bfffc4 	addi	r2,r2,-1
 100e978:	1000931e 	bne	r2,zero,100ebc8 <__subdf3+0x568>
 100e97c:	898d883a 	add	r6,r17,r6
 100e980:	3463803a 	cmpltu	r17,r6,r17
 100e984:	1947883a 	add	r3,r3,r5
 100e988:	88c7883a 	add	r3,r17,r3
 100e98c:	3023883a 	mov	r17,r6
 100e990:	003fd306 	br	100e8e0 <__alt_data_end+0xff80e8e0>
 100e994:	1000541e 	bne	r2,zero,100eae8 <__subdf3+0x488>
 100e998:	80800044 	addi	r2,r16,1
 100e99c:	1081ffcc 	andi	r2,r2,2047
 100e9a0:	01000044 	movi	r4,1
 100e9a4:	2080a20e 	bge	r4,r2,100ec30 <__subdf3+0x5d0>
 100e9a8:	8989c83a 	sub	r4,r17,r6
 100e9ac:	8905803a 	cmpltu	r2,r17,r4
 100e9b0:	1967c83a 	sub	r19,r3,r5
 100e9b4:	98a7c83a 	sub	r19,r19,r2
 100e9b8:	9880202c 	andhi	r2,r19,128
 100e9bc:	10006326 	beq	r2,zero,100eb4c <__subdf3+0x4ec>
 100e9c0:	3463c83a 	sub	r17,r6,r17
 100e9c4:	28c7c83a 	sub	r3,r5,r3
 100e9c8:	344d803a 	cmpltu	r6,r6,r17
 100e9cc:	19a7c83a 	sub	r19,r3,r6
 100e9d0:	3825883a 	mov	r18,r7
 100e9d4:	983f861e 	bne	r19,zero,100e7f0 <__alt_data_end+0xff80e7f0>
 100e9d8:	8809883a 	mov	r4,r17
 100e9dc:	100f1600 	call	100f160 <__clzsi2>
 100e9e0:	10800804 	addi	r2,r2,32
 100e9e4:	113ffe04 	addi	r4,r2,-8
 100e9e8:	00c007c4 	movi	r3,31
 100e9ec:	193f850e 	bge	r3,r4,100e804 <__alt_data_end+0xff80e804>
 100e9f0:	10bff604 	addi	r2,r2,-40
 100e9f4:	8884983a 	sll	r2,r17,r2
 100e9f8:	0023883a 	mov	r17,zero
 100e9fc:	243f880e 	bge	r4,r16,100e820 <__alt_data_end+0xff80e820>
 100ea00:	00ffe034 	movhi	r3,65408
 100ea04:	18ffffc4 	addi	r3,r3,-1
 100ea08:	8121c83a 	sub	r16,r16,r4
 100ea0c:	10c6703a 	and	r3,r2,r3
 100ea10:	003f3406 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ea14:	9100004c 	andi	r4,r18,1
 100ea18:	000b883a 	mov	r5,zero
 100ea1c:	0005883a 	mov	r2,zero
 100ea20:	003f4806 	br	100e744 <__alt_data_end+0xff80e744>
 100ea24:	298cb03a 	or	r6,r5,r6
 100ea28:	300cc03a 	cmpne	r6,r6,zero
 100ea2c:	0005883a 	mov	r2,zero
 100ea30:	003f6406 	br	100e7c4 <__alt_data_end+0xff80e7c4>
 100ea34:	10009a1e 	bne	r2,zero,100eca0 <__subdf3+0x640>
 100ea38:	82400044 	addi	r9,r16,1
 100ea3c:	4881ffcc 	andi	r2,r9,2047
 100ea40:	02800044 	movi	r10,1
 100ea44:	5080670e 	bge	r10,r2,100ebe4 <__subdf3+0x584>
 100ea48:	0081ffc4 	movi	r2,2047
 100ea4c:	4880af26 	beq	r9,r2,100ed0c <__subdf3+0x6ac>
 100ea50:	898d883a 	add	r6,r17,r6
 100ea54:	1945883a 	add	r2,r3,r5
 100ea58:	3447803a 	cmpltu	r3,r6,r17
 100ea5c:	1887883a 	add	r3,r3,r2
 100ea60:	182297fa 	slli	r17,r3,31
 100ea64:	300cd07a 	srli	r6,r6,1
 100ea68:	1806d07a 	srli	r3,r3,1
 100ea6c:	4821883a 	mov	r16,r9
 100ea70:	89a2b03a 	or	r17,r17,r6
 100ea74:	003f1b06 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ea78:	0101ffc4 	movi	r4,2047
 100ea7c:	813f441e 	bne	r16,r4,100e790 <__alt_data_end+0xff80e790>
 100ea80:	003f1806 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ea84:	843ff844 	addi	r16,r16,-31
 100ea88:	01400804 	movi	r5,32
 100ea8c:	1408d83a 	srl	r4,r2,r16
 100ea90:	19405026 	beq	r3,r5,100ebd4 <__subdf3+0x574>
 100ea94:	01401004 	movi	r5,64
 100ea98:	28c7c83a 	sub	r3,r5,r3
 100ea9c:	10c4983a 	sll	r2,r2,r3
 100eaa0:	88a2b03a 	or	r17,r17,r2
 100eaa4:	8822c03a 	cmpne	r17,r17,zero
 100eaa8:	2462b03a 	or	r17,r4,r17
 100eaac:	0007883a 	mov	r3,zero
 100eab0:	0021883a 	mov	r16,zero
 100eab4:	003f6d06 	br	100e86c <__alt_data_end+0xff80e86c>
 100eab8:	11fff804 	addi	r7,r2,-32
 100eabc:	01000804 	movi	r4,32
 100eac0:	29ced83a 	srl	r7,r5,r7
 100eac4:	11004526 	beq	r2,r4,100ebdc <__subdf3+0x57c>
 100eac8:	01001004 	movi	r4,64
 100eacc:	2089c83a 	sub	r4,r4,r2
 100ead0:	2904983a 	sll	r2,r5,r4
 100ead4:	118cb03a 	or	r6,r2,r6
 100ead8:	300cc03a 	cmpne	r6,r6,zero
 100eadc:	398cb03a 	or	r6,r7,r6
 100eae0:	0005883a 	mov	r2,zero
 100eae4:	003f3706 	br	100e7c4 <__alt_data_end+0xff80e7c4>
 100eae8:	80002a26 	beq	r16,zero,100eb94 <__subdf3+0x534>
 100eaec:	0101ffc4 	movi	r4,2047
 100eaf0:	49006626 	beq	r9,r4,100ec8c <__subdf3+0x62c>
 100eaf4:	0085c83a 	sub	r2,zero,r2
 100eaf8:	18c02034 	orhi	r3,r3,128
 100eafc:	01000e04 	movi	r4,56
 100eb00:	20807e16 	blt	r4,r2,100ecfc <__subdf3+0x69c>
 100eb04:	010007c4 	movi	r4,31
 100eb08:	2080e716 	blt	r4,r2,100eea8 <__subdf3+0x848>
 100eb0c:	01000804 	movi	r4,32
 100eb10:	2089c83a 	sub	r4,r4,r2
 100eb14:	1914983a 	sll	r10,r3,r4
 100eb18:	8890d83a 	srl	r8,r17,r2
 100eb1c:	8908983a 	sll	r4,r17,r4
 100eb20:	1884d83a 	srl	r2,r3,r2
 100eb24:	5222b03a 	or	r17,r10,r8
 100eb28:	2006c03a 	cmpne	r3,r4,zero
 100eb2c:	88e2b03a 	or	r17,r17,r3
 100eb30:	3463c83a 	sub	r17,r6,r17
 100eb34:	2885c83a 	sub	r2,r5,r2
 100eb38:	344d803a 	cmpltu	r6,r6,r17
 100eb3c:	1187c83a 	sub	r3,r2,r6
 100eb40:	4821883a 	mov	r16,r9
 100eb44:	3825883a 	mov	r18,r7
 100eb48:	003f2306 	br	100e7d8 <__alt_data_end+0xff80e7d8>
 100eb4c:	24d0b03a 	or	r8,r4,r19
 100eb50:	40001b1e 	bne	r8,zero,100ebc0 <__subdf3+0x560>
 100eb54:	0005883a 	mov	r2,zero
 100eb58:	0009883a 	mov	r4,zero
 100eb5c:	0021883a 	mov	r16,zero
 100eb60:	003f4906 	br	100e888 <__alt_data_end+0xff80e888>
 100eb64:	010007c4 	movi	r4,31
 100eb68:	20803a16 	blt	r4,r2,100ec54 <__subdf3+0x5f4>
 100eb6c:	01000804 	movi	r4,32
 100eb70:	2089c83a 	sub	r4,r4,r2
 100eb74:	2912983a 	sll	r9,r5,r4
 100eb78:	3090d83a 	srl	r8,r6,r2
 100eb7c:	3108983a 	sll	r4,r6,r4
 100eb80:	2884d83a 	srl	r2,r5,r2
 100eb84:	4a12b03a 	or	r9,r9,r8
 100eb88:	2008c03a 	cmpne	r4,r4,zero
 100eb8c:	4912b03a 	or	r9,r9,r4
 100eb90:	003f4e06 	br	100e8cc <__alt_data_end+0xff80e8cc>
 100eb94:	1c48b03a 	or	r4,r3,r17
 100eb98:	20003c26 	beq	r4,zero,100ec8c <__subdf3+0x62c>
 100eb9c:	0084303a 	nor	r2,zero,r2
 100eba0:	1000381e 	bne	r2,zero,100ec84 <__subdf3+0x624>
 100eba4:	3463c83a 	sub	r17,r6,r17
 100eba8:	28c5c83a 	sub	r2,r5,r3
 100ebac:	344d803a 	cmpltu	r6,r6,r17
 100ebb0:	1187c83a 	sub	r3,r2,r6
 100ebb4:	4821883a 	mov	r16,r9
 100ebb8:	3825883a 	mov	r18,r7
 100ebbc:	003f0606 	br	100e7d8 <__alt_data_end+0xff80e7d8>
 100ebc0:	2023883a 	mov	r17,r4
 100ebc4:	003f0906 	br	100e7ec <__alt_data_end+0xff80e7ec>
 100ebc8:	0101ffc4 	movi	r4,2047
 100ebcc:	813f3a1e 	bne	r16,r4,100e8b8 <__alt_data_end+0xff80e8b8>
 100ebd0:	003ec406 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ebd4:	0005883a 	mov	r2,zero
 100ebd8:	003fb106 	br	100eaa0 <__alt_data_end+0xff80eaa0>
 100ebdc:	0005883a 	mov	r2,zero
 100ebe0:	003fbc06 	br	100ead4 <__alt_data_end+0xff80ead4>
 100ebe4:	1c44b03a 	or	r2,r3,r17
 100ebe8:	80008e1e 	bne	r16,zero,100ee24 <__subdf3+0x7c4>
 100ebec:	1000c826 	beq	r2,zero,100ef10 <__subdf3+0x8b0>
 100ebf0:	2984b03a 	or	r2,r5,r6
 100ebf4:	103ebb26 	beq	r2,zero,100e6e4 <__alt_data_end+0xff80e6e4>
 100ebf8:	8989883a 	add	r4,r17,r6
 100ebfc:	1945883a 	add	r2,r3,r5
 100ec00:	2447803a 	cmpltu	r3,r4,r17
 100ec04:	1887883a 	add	r3,r3,r2
 100ec08:	1880202c 	andhi	r2,r3,128
 100ec0c:	2023883a 	mov	r17,r4
 100ec10:	103f1626 	beq	r2,zero,100e86c <__alt_data_end+0xff80e86c>
 100ec14:	00bfe034 	movhi	r2,65408
 100ec18:	10bfffc4 	addi	r2,r2,-1
 100ec1c:	5021883a 	mov	r16,r10
 100ec20:	1886703a 	and	r3,r3,r2
 100ec24:	003eaf06 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ec28:	3825883a 	mov	r18,r7
 100ec2c:	003f0f06 	br	100e86c <__alt_data_end+0xff80e86c>
 100ec30:	1c44b03a 	or	r2,r3,r17
 100ec34:	8000251e 	bne	r16,zero,100eccc <__subdf3+0x66c>
 100ec38:	1000661e 	bne	r2,zero,100edd4 <__subdf3+0x774>
 100ec3c:	2990b03a 	or	r8,r5,r6
 100ec40:	40009626 	beq	r8,zero,100ee9c <__subdf3+0x83c>
 100ec44:	2807883a 	mov	r3,r5
 100ec48:	3023883a 	mov	r17,r6
 100ec4c:	3825883a 	mov	r18,r7
 100ec50:	003ea406 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ec54:	127ff804 	addi	r9,r2,-32
 100ec58:	01000804 	movi	r4,32
 100ec5c:	2a52d83a 	srl	r9,r5,r9
 100ec60:	11008c26 	beq	r2,r4,100ee94 <__subdf3+0x834>
 100ec64:	01001004 	movi	r4,64
 100ec68:	2085c83a 	sub	r2,r4,r2
 100ec6c:	2884983a 	sll	r2,r5,r2
 100ec70:	118cb03a 	or	r6,r2,r6
 100ec74:	300cc03a 	cmpne	r6,r6,zero
 100ec78:	4992b03a 	or	r9,r9,r6
 100ec7c:	0005883a 	mov	r2,zero
 100ec80:	003f1206 	br	100e8cc <__alt_data_end+0xff80e8cc>
 100ec84:	0101ffc4 	movi	r4,2047
 100ec88:	493f9c1e 	bne	r9,r4,100eafc <__alt_data_end+0xff80eafc>
 100ec8c:	2807883a 	mov	r3,r5
 100ec90:	3023883a 	mov	r17,r6
 100ec94:	4821883a 	mov	r16,r9
 100ec98:	3825883a 	mov	r18,r7
 100ec9c:	003e9106 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100eca0:	80001f1e 	bne	r16,zero,100ed20 <__subdf3+0x6c0>
 100eca4:	1c48b03a 	or	r4,r3,r17
 100eca8:	20005a26 	beq	r4,zero,100ee14 <__subdf3+0x7b4>
 100ecac:	0084303a 	nor	r2,zero,r2
 100ecb0:	1000561e 	bne	r2,zero,100ee0c <__subdf3+0x7ac>
 100ecb4:	89a3883a 	add	r17,r17,r6
 100ecb8:	1945883a 	add	r2,r3,r5
 100ecbc:	898d803a 	cmpltu	r6,r17,r6
 100ecc0:	3087883a 	add	r3,r6,r2
 100ecc4:	4821883a 	mov	r16,r9
 100ecc8:	003f0506 	br	100e8e0 <__alt_data_end+0xff80e8e0>
 100eccc:	10002b1e 	bne	r2,zero,100ed7c <__subdf3+0x71c>
 100ecd0:	2984b03a 	or	r2,r5,r6
 100ecd4:	10008026 	beq	r2,zero,100eed8 <__subdf3+0x878>
 100ecd8:	2807883a 	mov	r3,r5
 100ecdc:	3023883a 	mov	r17,r6
 100ece0:	3825883a 	mov	r18,r7
 100ece4:	0401ffc4 	movi	r16,2047
 100ece8:	003e7e06 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ecec:	3809883a 	mov	r4,r7
 100ecf0:	0011883a 	mov	r8,zero
 100ecf4:	0005883a 	mov	r2,zero
 100ecf8:	003ee306 	br	100e888 <__alt_data_end+0xff80e888>
 100ecfc:	1c62b03a 	or	r17,r3,r17
 100ed00:	8822c03a 	cmpne	r17,r17,zero
 100ed04:	0005883a 	mov	r2,zero
 100ed08:	003f8906 	br	100eb30 <__alt_data_end+0xff80eb30>
 100ed0c:	3809883a 	mov	r4,r7
 100ed10:	4821883a 	mov	r16,r9
 100ed14:	0011883a 	mov	r8,zero
 100ed18:	0005883a 	mov	r2,zero
 100ed1c:	003eda06 	br	100e888 <__alt_data_end+0xff80e888>
 100ed20:	0101ffc4 	movi	r4,2047
 100ed24:	49003b26 	beq	r9,r4,100ee14 <__subdf3+0x7b4>
 100ed28:	0085c83a 	sub	r2,zero,r2
 100ed2c:	18c02034 	orhi	r3,r3,128
 100ed30:	01000e04 	movi	r4,56
 100ed34:	20806e16 	blt	r4,r2,100eef0 <__subdf3+0x890>
 100ed38:	010007c4 	movi	r4,31
 100ed3c:	20807716 	blt	r4,r2,100ef1c <__subdf3+0x8bc>
 100ed40:	01000804 	movi	r4,32
 100ed44:	2089c83a 	sub	r4,r4,r2
 100ed48:	1914983a 	sll	r10,r3,r4
 100ed4c:	8890d83a 	srl	r8,r17,r2
 100ed50:	8908983a 	sll	r4,r17,r4
 100ed54:	1884d83a 	srl	r2,r3,r2
 100ed58:	5222b03a 	or	r17,r10,r8
 100ed5c:	2006c03a 	cmpne	r3,r4,zero
 100ed60:	88e2b03a 	or	r17,r17,r3
 100ed64:	89a3883a 	add	r17,r17,r6
 100ed68:	1145883a 	add	r2,r2,r5
 100ed6c:	898d803a 	cmpltu	r6,r17,r6
 100ed70:	3087883a 	add	r3,r6,r2
 100ed74:	4821883a 	mov	r16,r9
 100ed78:	003ed906 	br	100e8e0 <__alt_data_end+0xff80e8e0>
 100ed7c:	2984b03a 	or	r2,r5,r6
 100ed80:	10004226 	beq	r2,zero,100ee8c <__subdf3+0x82c>
 100ed84:	1808d0fa 	srli	r4,r3,3
 100ed88:	8822d0fa 	srli	r17,r17,3
 100ed8c:	1806977a 	slli	r3,r3,29
 100ed90:	2080022c 	andhi	r2,r4,8
 100ed94:	1c62b03a 	or	r17,r3,r17
 100ed98:	10000826 	beq	r2,zero,100edbc <__subdf3+0x75c>
 100ed9c:	2812d0fa 	srli	r9,r5,3
 100eda0:	4880022c 	andhi	r2,r9,8
 100eda4:	1000051e 	bne	r2,zero,100edbc <__subdf3+0x75c>
 100eda8:	300cd0fa 	srli	r6,r6,3
 100edac:	2804977a 	slli	r2,r5,29
 100edb0:	4809883a 	mov	r4,r9
 100edb4:	3825883a 	mov	r18,r7
 100edb8:	11a2b03a 	or	r17,r2,r6
 100edbc:	8806d77a 	srli	r3,r17,29
 100edc0:	200890fa 	slli	r4,r4,3
 100edc4:	882290fa 	slli	r17,r17,3
 100edc8:	0401ffc4 	movi	r16,2047
 100edcc:	1906b03a 	or	r3,r3,r4
 100edd0:	003e4406 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100edd4:	2984b03a 	or	r2,r5,r6
 100edd8:	103e4226 	beq	r2,zero,100e6e4 <__alt_data_end+0xff80e6e4>
 100eddc:	8989c83a 	sub	r4,r17,r6
 100ede0:	8911803a 	cmpltu	r8,r17,r4
 100ede4:	1945c83a 	sub	r2,r3,r5
 100ede8:	1205c83a 	sub	r2,r2,r8
 100edec:	1200202c 	andhi	r8,r2,128
 100edf0:	403e9a26 	beq	r8,zero,100e85c <__alt_data_end+0xff80e85c>
 100edf4:	3463c83a 	sub	r17,r6,r17
 100edf8:	28c5c83a 	sub	r2,r5,r3
 100edfc:	344d803a 	cmpltu	r6,r6,r17
 100ee00:	1187c83a 	sub	r3,r2,r6
 100ee04:	3825883a 	mov	r18,r7
 100ee08:	003e3606 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ee0c:	0101ffc4 	movi	r4,2047
 100ee10:	493fc71e 	bne	r9,r4,100ed30 <__alt_data_end+0xff80ed30>
 100ee14:	2807883a 	mov	r3,r5
 100ee18:	3023883a 	mov	r17,r6
 100ee1c:	4821883a 	mov	r16,r9
 100ee20:	003e3006 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ee24:	10003626 	beq	r2,zero,100ef00 <__subdf3+0x8a0>
 100ee28:	2984b03a 	or	r2,r5,r6
 100ee2c:	10001726 	beq	r2,zero,100ee8c <__subdf3+0x82c>
 100ee30:	1808d0fa 	srli	r4,r3,3
 100ee34:	8822d0fa 	srli	r17,r17,3
 100ee38:	1806977a 	slli	r3,r3,29
 100ee3c:	2080022c 	andhi	r2,r4,8
 100ee40:	1c62b03a 	or	r17,r3,r17
 100ee44:	10000726 	beq	r2,zero,100ee64 <__subdf3+0x804>
 100ee48:	2812d0fa 	srli	r9,r5,3
 100ee4c:	4880022c 	andhi	r2,r9,8
 100ee50:	1000041e 	bne	r2,zero,100ee64 <__subdf3+0x804>
 100ee54:	300cd0fa 	srli	r6,r6,3
 100ee58:	2804977a 	slli	r2,r5,29
 100ee5c:	4809883a 	mov	r4,r9
 100ee60:	11a2b03a 	or	r17,r2,r6
 100ee64:	8806d77a 	srli	r3,r17,29
 100ee68:	200890fa 	slli	r4,r4,3
 100ee6c:	882290fa 	slli	r17,r17,3
 100ee70:	3825883a 	mov	r18,r7
 100ee74:	1906b03a 	or	r3,r3,r4
 100ee78:	0401ffc4 	movi	r16,2047
 100ee7c:	003e1906 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ee80:	000b883a 	mov	r5,zero
 100ee84:	0005883a 	mov	r2,zero
 100ee88:	003e2e06 	br	100e744 <__alt_data_end+0xff80e744>
 100ee8c:	0401ffc4 	movi	r16,2047
 100ee90:	003e1406 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ee94:	0005883a 	mov	r2,zero
 100ee98:	003f7506 	br	100ec70 <__alt_data_end+0xff80ec70>
 100ee9c:	0005883a 	mov	r2,zero
 100eea0:	0009883a 	mov	r4,zero
 100eea4:	003e7806 	br	100e888 <__alt_data_end+0xff80e888>
 100eea8:	123ff804 	addi	r8,r2,-32
 100eeac:	01000804 	movi	r4,32
 100eeb0:	1a10d83a 	srl	r8,r3,r8
 100eeb4:	11002526 	beq	r2,r4,100ef4c <__subdf3+0x8ec>
 100eeb8:	01001004 	movi	r4,64
 100eebc:	2085c83a 	sub	r2,r4,r2
 100eec0:	1884983a 	sll	r2,r3,r2
 100eec4:	1444b03a 	or	r2,r2,r17
 100eec8:	1004c03a 	cmpne	r2,r2,zero
 100eecc:	40a2b03a 	or	r17,r8,r2
 100eed0:	0005883a 	mov	r2,zero
 100eed4:	003f1606 	br	100eb30 <__alt_data_end+0xff80eb30>
 100eed8:	02000434 	movhi	r8,16
 100eedc:	0009883a 	mov	r4,zero
 100eee0:	423fffc4 	addi	r8,r8,-1
 100eee4:	00bfffc4 	movi	r2,-1
 100eee8:	0401ffc4 	movi	r16,2047
 100eeec:	003e6606 	br	100e888 <__alt_data_end+0xff80e888>
 100eef0:	1c62b03a 	or	r17,r3,r17
 100eef4:	8822c03a 	cmpne	r17,r17,zero
 100eef8:	0005883a 	mov	r2,zero
 100eefc:	003f9906 	br	100ed64 <__alt_data_end+0xff80ed64>
 100ef00:	2807883a 	mov	r3,r5
 100ef04:	3023883a 	mov	r17,r6
 100ef08:	0401ffc4 	movi	r16,2047
 100ef0c:	003df506 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ef10:	2807883a 	mov	r3,r5
 100ef14:	3023883a 	mov	r17,r6
 100ef18:	003df206 	br	100e6e4 <__alt_data_end+0xff80e6e4>
 100ef1c:	123ff804 	addi	r8,r2,-32
 100ef20:	01000804 	movi	r4,32
 100ef24:	1a10d83a 	srl	r8,r3,r8
 100ef28:	11000a26 	beq	r2,r4,100ef54 <__subdf3+0x8f4>
 100ef2c:	01001004 	movi	r4,64
 100ef30:	2085c83a 	sub	r2,r4,r2
 100ef34:	1884983a 	sll	r2,r3,r2
 100ef38:	1444b03a 	or	r2,r2,r17
 100ef3c:	1004c03a 	cmpne	r2,r2,zero
 100ef40:	40a2b03a 	or	r17,r8,r2
 100ef44:	0005883a 	mov	r2,zero
 100ef48:	003f8606 	br	100ed64 <__alt_data_end+0xff80ed64>
 100ef4c:	0005883a 	mov	r2,zero
 100ef50:	003fdc06 	br	100eec4 <__alt_data_end+0xff80eec4>
 100ef54:	0005883a 	mov	r2,zero
 100ef58:	003ff706 	br	100ef38 <__alt_data_end+0xff80ef38>

0100ef5c <__fixdfsi>:
 100ef5c:	280cd53a 	srli	r6,r5,20
 100ef60:	00c00434 	movhi	r3,16
 100ef64:	18ffffc4 	addi	r3,r3,-1
 100ef68:	3181ffcc 	andi	r6,r6,2047
 100ef6c:	01c0ff84 	movi	r7,1022
 100ef70:	28c6703a 	and	r3,r5,r3
 100ef74:	280ad7fa 	srli	r5,r5,31
 100ef78:	3980120e 	bge	r7,r6,100efc4 <__fixdfsi+0x68>
 100ef7c:	00810744 	movi	r2,1053
 100ef80:	11800c16 	blt	r2,r6,100efb4 <__fixdfsi+0x58>
 100ef84:	00810cc4 	movi	r2,1075
 100ef88:	1185c83a 	sub	r2,r2,r6
 100ef8c:	01c007c4 	movi	r7,31
 100ef90:	18c00434 	orhi	r3,r3,16
 100ef94:	38800d16 	blt	r7,r2,100efcc <__fixdfsi+0x70>
 100ef98:	31befb44 	addi	r6,r6,-1043
 100ef9c:	2084d83a 	srl	r2,r4,r2
 100efa0:	1986983a 	sll	r3,r3,r6
 100efa4:	1884b03a 	or	r2,r3,r2
 100efa8:	28000726 	beq	r5,zero,100efc8 <__fixdfsi+0x6c>
 100efac:	0085c83a 	sub	r2,zero,r2
 100efb0:	f800283a 	ret
 100efb4:	00a00034 	movhi	r2,32768
 100efb8:	10bfffc4 	addi	r2,r2,-1
 100efbc:	2885883a 	add	r2,r5,r2
 100efc0:	f800283a 	ret
 100efc4:	0005883a 	mov	r2,zero
 100efc8:	f800283a 	ret
 100efcc:	008104c4 	movi	r2,1043
 100efd0:	1185c83a 	sub	r2,r2,r6
 100efd4:	1884d83a 	srl	r2,r3,r2
 100efd8:	003ff306 	br	100efa8 <__alt_data_end+0xff80efa8>

0100efdc <__floatsidf>:
 100efdc:	defffd04 	addi	sp,sp,-12
 100efe0:	dfc00215 	stw	ra,8(sp)
 100efe4:	dc400115 	stw	r17,4(sp)
 100efe8:	dc000015 	stw	r16,0(sp)
 100efec:	20002b26 	beq	r4,zero,100f09c <__floatsidf+0xc0>
 100eff0:	2023883a 	mov	r17,r4
 100eff4:	2020d7fa 	srli	r16,r4,31
 100eff8:	20002d16 	blt	r4,zero,100f0b0 <__floatsidf+0xd4>
 100effc:	8809883a 	mov	r4,r17
 100f000:	100f1600 	call	100f160 <__clzsi2>
 100f004:	01410784 	movi	r5,1054
 100f008:	288bc83a 	sub	r5,r5,r2
 100f00c:	01010cc4 	movi	r4,1075
 100f010:	2149c83a 	sub	r4,r4,r5
 100f014:	00c007c4 	movi	r3,31
 100f018:	1900160e 	bge	r3,r4,100f074 <__floatsidf+0x98>
 100f01c:	00c104c4 	movi	r3,1043
 100f020:	1947c83a 	sub	r3,r3,r5
 100f024:	88c6983a 	sll	r3,r17,r3
 100f028:	00800434 	movhi	r2,16
 100f02c:	10bfffc4 	addi	r2,r2,-1
 100f030:	1886703a 	and	r3,r3,r2
 100f034:	2941ffcc 	andi	r5,r5,2047
 100f038:	800d883a 	mov	r6,r16
 100f03c:	0005883a 	mov	r2,zero
 100f040:	280a953a 	slli	r5,r5,20
 100f044:	31803fcc 	andi	r6,r6,255
 100f048:	01000434 	movhi	r4,16
 100f04c:	300c97fa 	slli	r6,r6,31
 100f050:	213fffc4 	addi	r4,r4,-1
 100f054:	1906703a 	and	r3,r3,r4
 100f058:	1946b03a 	or	r3,r3,r5
 100f05c:	1986b03a 	or	r3,r3,r6
 100f060:	dfc00217 	ldw	ra,8(sp)
 100f064:	dc400117 	ldw	r17,4(sp)
 100f068:	dc000017 	ldw	r16,0(sp)
 100f06c:	dec00304 	addi	sp,sp,12
 100f070:	f800283a 	ret
 100f074:	00c002c4 	movi	r3,11
 100f078:	1887c83a 	sub	r3,r3,r2
 100f07c:	88c6d83a 	srl	r3,r17,r3
 100f080:	8904983a 	sll	r2,r17,r4
 100f084:	01000434 	movhi	r4,16
 100f088:	213fffc4 	addi	r4,r4,-1
 100f08c:	2941ffcc 	andi	r5,r5,2047
 100f090:	1906703a 	and	r3,r3,r4
 100f094:	800d883a 	mov	r6,r16
 100f098:	003fe906 	br	100f040 <__alt_data_end+0xff80f040>
 100f09c:	000d883a 	mov	r6,zero
 100f0a0:	000b883a 	mov	r5,zero
 100f0a4:	0007883a 	mov	r3,zero
 100f0a8:	0005883a 	mov	r2,zero
 100f0ac:	003fe406 	br	100f040 <__alt_data_end+0xff80f040>
 100f0b0:	0123c83a 	sub	r17,zero,r4
 100f0b4:	003fd106 	br	100effc <__alt_data_end+0xff80effc>

0100f0b8 <__floatunsidf>:
 100f0b8:	defffe04 	addi	sp,sp,-8
 100f0bc:	dc000015 	stw	r16,0(sp)
 100f0c0:	dfc00115 	stw	ra,4(sp)
 100f0c4:	2021883a 	mov	r16,r4
 100f0c8:	20002226 	beq	r4,zero,100f154 <__floatunsidf+0x9c>
 100f0cc:	100f1600 	call	100f160 <__clzsi2>
 100f0d0:	01010784 	movi	r4,1054
 100f0d4:	2089c83a 	sub	r4,r4,r2
 100f0d8:	01810cc4 	movi	r6,1075
 100f0dc:	310dc83a 	sub	r6,r6,r4
 100f0e0:	00c007c4 	movi	r3,31
 100f0e4:	1980120e 	bge	r3,r6,100f130 <__floatunsidf+0x78>
 100f0e8:	00c104c4 	movi	r3,1043
 100f0ec:	1907c83a 	sub	r3,r3,r4
 100f0f0:	80ca983a 	sll	r5,r16,r3
 100f0f4:	00800434 	movhi	r2,16
 100f0f8:	10bfffc4 	addi	r2,r2,-1
 100f0fc:	2101ffcc 	andi	r4,r4,2047
 100f100:	0021883a 	mov	r16,zero
 100f104:	288a703a 	and	r5,r5,r2
 100f108:	2008953a 	slli	r4,r4,20
 100f10c:	00c00434 	movhi	r3,16
 100f110:	18ffffc4 	addi	r3,r3,-1
 100f114:	28c6703a 	and	r3,r5,r3
 100f118:	8005883a 	mov	r2,r16
 100f11c:	1906b03a 	or	r3,r3,r4
 100f120:	dfc00117 	ldw	ra,4(sp)
 100f124:	dc000017 	ldw	r16,0(sp)
 100f128:	dec00204 	addi	sp,sp,8
 100f12c:	f800283a 	ret
 100f130:	00c002c4 	movi	r3,11
 100f134:	188bc83a 	sub	r5,r3,r2
 100f138:	814ad83a 	srl	r5,r16,r5
 100f13c:	00c00434 	movhi	r3,16
 100f140:	18ffffc4 	addi	r3,r3,-1
 100f144:	81a0983a 	sll	r16,r16,r6
 100f148:	2101ffcc 	andi	r4,r4,2047
 100f14c:	28ca703a 	and	r5,r5,r3
 100f150:	003fed06 	br	100f108 <__alt_data_end+0xff80f108>
 100f154:	0009883a 	mov	r4,zero
 100f158:	000b883a 	mov	r5,zero
 100f15c:	003fea06 	br	100f108 <__alt_data_end+0xff80f108>

0100f160 <__clzsi2>:
 100f160:	00bfffd4 	movui	r2,65535
 100f164:	11000536 	bltu	r2,r4,100f17c <__clzsi2+0x1c>
 100f168:	00803fc4 	movi	r2,255
 100f16c:	11000f36 	bltu	r2,r4,100f1ac <__clzsi2+0x4c>
 100f170:	00800804 	movi	r2,32
 100f174:	0007883a 	mov	r3,zero
 100f178:	00000506 	br	100f190 <__clzsi2+0x30>
 100f17c:	00804034 	movhi	r2,256
 100f180:	10bfffc4 	addi	r2,r2,-1
 100f184:	11000c2e 	bgeu	r2,r4,100f1b8 <__clzsi2+0x58>
 100f188:	00800204 	movi	r2,8
 100f18c:	00c00604 	movi	r3,24
 100f190:	20c8d83a 	srl	r4,r4,r3
 100f194:	00c04074 	movhi	r3,257
 100f198:	18c8ca04 	addi	r3,r3,9000
 100f19c:	1909883a 	add	r4,r3,r4
 100f1a0:	20c00003 	ldbu	r3,0(r4)
 100f1a4:	10c5c83a 	sub	r2,r2,r3
 100f1a8:	f800283a 	ret
 100f1ac:	00800604 	movi	r2,24
 100f1b0:	00c00204 	movi	r3,8
 100f1b4:	003ff606 	br	100f190 <__alt_data_end+0xff80f190>
 100f1b8:	00800404 	movi	r2,16
 100f1bc:	1007883a 	mov	r3,r2
 100f1c0:	003ff306 	br	100f190 <__alt_data_end+0xff80f190>

0100f1c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f1c4:	defffe04 	addi	sp,sp,-8
 100f1c8:	dfc00115 	stw	ra,4(sp)
 100f1cc:	df000015 	stw	fp,0(sp)
 100f1d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f1d4:	d0a00b17 	ldw	r2,-32724(gp)
 100f1d8:	10000326 	beq	r2,zero,100f1e8 <alt_get_errno+0x24>
 100f1dc:	d0a00b17 	ldw	r2,-32724(gp)
 100f1e0:	103ee83a 	callr	r2
 100f1e4:	00000106 	br	100f1ec <alt_get_errno+0x28>
 100f1e8:	d0a6d204 	addi	r2,gp,-25784
}
 100f1ec:	e037883a 	mov	sp,fp
 100f1f0:	dfc00117 	ldw	ra,4(sp)
 100f1f4:	df000017 	ldw	fp,0(sp)
 100f1f8:	dec00204 	addi	sp,sp,8
 100f1fc:	f800283a 	ret

0100f200 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100f200:	defffb04 	addi	sp,sp,-20
 100f204:	dfc00415 	stw	ra,16(sp)
 100f208:	df000315 	stw	fp,12(sp)
 100f20c:	df000304 	addi	fp,sp,12
 100f210:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100f214:	e0bfff17 	ldw	r2,-4(fp)
 100f218:	10000816 	blt	r2,zero,100f23c <close+0x3c>
 100f21c:	01400304 	movi	r5,12
 100f220:	e13fff17 	ldw	r4,-4(fp)
 100f224:	100c8f80 	call	100c8f8 <__mulsi3>
 100f228:	1007883a 	mov	r3,r2
 100f22c:	00804074 	movhi	r2,257
 100f230:	108b4a04 	addi	r2,r2,11560
 100f234:	1885883a 	add	r2,r3,r2
 100f238:	00000106 	br	100f240 <close+0x40>
 100f23c:	0005883a 	mov	r2,zero
 100f240:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100f244:	e0bffd17 	ldw	r2,-12(fp)
 100f248:	10001926 	beq	r2,zero,100f2b0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100f24c:	e0bffd17 	ldw	r2,-12(fp)
 100f250:	10800017 	ldw	r2,0(r2)
 100f254:	10800417 	ldw	r2,16(r2)
 100f258:	10000626 	beq	r2,zero,100f274 <close+0x74>
 100f25c:	e0bffd17 	ldw	r2,-12(fp)
 100f260:	10800017 	ldw	r2,0(r2)
 100f264:	10800417 	ldw	r2,16(r2)
 100f268:	e13ffd17 	ldw	r4,-12(fp)
 100f26c:	103ee83a 	callr	r2
 100f270:	00000106 	br	100f278 <close+0x78>
 100f274:	0005883a 	mov	r2,zero
 100f278:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100f27c:	e13fff17 	ldw	r4,-4(fp)
 100f280:	100f8e80 	call	100f8e8 <alt_release_fd>
    if (rval < 0)
 100f284:	e0bffe17 	ldw	r2,-8(fp)
 100f288:	1000070e 	bge	r2,zero,100f2a8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 100f28c:	100f1c40 	call	100f1c4 <alt_get_errno>
 100f290:	1007883a 	mov	r3,r2
 100f294:	e0bffe17 	ldw	r2,-8(fp)
 100f298:	0085c83a 	sub	r2,zero,r2
 100f29c:	18800015 	stw	r2,0(r3)
      return -1;
 100f2a0:	00bfffc4 	movi	r2,-1
 100f2a4:	00000706 	br	100f2c4 <close+0xc4>
    }
    return 0;
 100f2a8:	0005883a 	mov	r2,zero
 100f2ac:	00000506 	br	100f2c4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f2b0:	100f1c40 	call	100f1c4 <alt_get_errno>
 100f2b4:	1007883a 	mov	r3,r2
 100f2b8:	00801444 	movi	r2,81
 100f2bc:	18800015 	stw	r2,0(r3)
    return -1;
 100f2c0:	00bfffc4 	movi	r2,-1
  }
}
 100f2c4:	e037883a 	mov	sp,fp
 100f2c8:	dfc00117 	ldw	ra,4(sp)
 100f2cc:	df000017 	ldw	fp,0(sp)
 100f2d0:	dec00204 	addi	sp,sp,8
 100f2d4:	f800283a 	ret

0100f2d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100f2d8:	defffc04 	addi	sp,sp,-16
 100f2dc:	df000315 	stw	fp,12(sp)
 100f2e0:	df000304 	addi	fp,sp,12
 100f2e4:	e13ffd15 	stw	r4,-12(fp)
 100f2e8:	e17ffe15 	stw	r5,-8(fp)
 100f2ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100f2f0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f2f4:	e037883a 	mov	sp,fp
 100f2f8:	df000017 	ldw	fp,0(sp)
 100f2fc:	dec00104 	addi	sp,sp,4
 100f300:	f800283a 	ret

0100f304 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f304:	defffe04 	addi	sp,sp,-8
 100f308:	dfc00115 	stw	ra,4(sp)
 100f30c:	df000015 	stw	fp,0(sp)
 100f310:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f314:	d0a00b17 	ldw	r2,-32724(gp)
 100f318:	10000326 	beq	r2,zero,100f328 <alt_get_errno+0x24>
 100f31c:	d0a00b17 	ldw	r2,-32724(gp)
 100f320:	103ee83a 	callr	r2
 100f324:	00000106 	br	100f32c <alt_get_errno+0x28>
 100f328:	d0a6d204 	addi	r2,gp,-25784
}
 100f32c:	e037883a 	mov	sp,fp
 100f330:	dfc00117 	ldw	ra,4(sp)
 100f334:	df000017 	ldw	fp,0(sp)
 100f338:	dec00204 	addi	sp,sp,8
 100f33c:	f800283a 	ret

0100f340 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100f340:	defffb04 	addi	sp,sp,-20
 100f344:	dfc00415 	stw	ra,16(sp)
 100f348:	df000315 	stw	fp,12(sp)
 100f34c:	df000304 	addi	fp,sp,12
 100f350:	e13ffe15 	stw	r4,-8(fp)
 100f354:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f358:	e0bffe17 	ldw	r2,-8(fp)
 100f35c:	10000816 	blt	r2,zero,100f380 <fstat+0x40>
 100f360:	01400304 	movi	r5,12
 100f364:	e13ffe17 	ldw	r4,-8(fp)
 100f368:	100c8f80 	call	100c8f8 <__mulsi3>
 100f36c:	1007883a 	mov	r3,r2
 100f370:	00804074 	movhi	r2,257
 100f374:	108b4a04 	addi	r2,r2,11560
 100f378:	1885883a 	add	r2,r3,r2
 100f37c:	00000106 	br	100f384 <fstat+0x44>
 100f380:	0005883a 	mov	r2,zero
 100f384:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 100f388:	e0bffd17 	ldw	r2,-12(fp)
 100f38c:	10001026 	beq	r2,zero,100f3d0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100f390:	e0bffd17 	ldw	r2,-12(fp)
 100f394:	10800017 	ldw	r2,0(r2)
 100f398:	10800817 	ldw	r2,32(r2)
 100f39c:	10000726 	beq	r2,zero,100f3bc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 100f3a0:	e0bffd17 	ldw	r2,-12(fp)
 100f3a4:	10800017 	ldw	r2,0(r2)
 100f3a8:	10800817 	ldw	r2,32(r2)
 100f3ac:	e17fff17 	ldw	r5,-4(fp)
 100f3b0:	e13ffd17 	ldw	r4,-12(fp)
 100f3b4:	103ee83a 	callr	r2
 100f3b8:	00000a06 	br	100f3e4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100f3bc:	e0bfff17 	ldw	r2,-4(fp)
 100f3c0:	00c80004 	movi	r3,8192
 100f3c4:	10c00115 	stw	r3,4(r2)
      return 0;
 100f3c8:	0005883a 	mov	r2,zero
 100f3cc:	00000506 	br	100f3e4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f3d0:	100f3040 	call	100f304 <alt_get_errno>
 100f3d4:	1007883a 	mov	r3,r2
 100f3d8:	00801444 	movi	r2,81
 100f3dc:	18800015 	stw	r2,0(r3)
    return -1;
 100f3e0:	00bfffc4 	movi	r2,-1
  }
}
 100f3e4:	e037883a 	mov	sp,fp
 100f3e8:	dfc00117 	ldw	ra,4(sp)
 100f3ec:	df000017 	ldw	fp,0(sp)
 100f3f0:	dec00204 	addi	sp,sp,8
 100f3f4:	f800283a 	ret

0100f3f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f3f8:	defffe04 	addi	sp,sp,-8
 100f3fc:	dfc00115 	stw	ra,4(sp)
 100f400:	df000015 	stw	fp,0(sp)
 100f404:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f408:	d0a00b17 	ldw	r2,-32724(gp)
 100f40c:	10000326 	beq	r2,zero,100f41c <alt_get_errno+0x24>
 100f410:	d0a00b17 	ldw	r2,-32724(gp)
 100f414:	103ee83a 	callr	r2
 100f418:	00000106 	br	100f420 <alt_get_errno+0x28>
 100f41c:	d0a6d204 	addi	r2,gp,-25784
}
 100f420:	e037883a 	mov	sp,fp
 100f424:	dfc00117 	ldw	ra,4(sp)
 100f428:	df000017 	ldw	fp,0(sp)
 100f42c:	dec00204 	addi	sp,sp,8
 100f430:	f800283a 	ret

0100f434 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100f434:	deffed04 	addi	sp,sp,-76
 100f438:	dfc01215 	stw	ra,72(sp)
 100f43c:	df001115 	stw	fp,68(sp)
 100f440:	df001104 	addi	fp,sp,68
 100f444:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f448:	e0bfff17 	ldw	r2,-4(fp)
 100f44c:	10000816 	blt	r2,zero,100f470 <isatty+0x3c>
 100f450:	01400304 	movi	r5,12
 100f454:	e13fff17 	ldw	r4,-4(fp)
 100f458:	100c8f80 	call	100c8f8 <__mulsi3>
 100f45c:	1007883a 	mov	r3,r2
 100f460:	00804074 	movhi	r2,257
 100f464:	108b4a04 	addi	r2,r2,11560
 100f468:	1885883a 	add	r2,r3,r2
 100f46c:	00000106 	br	100f474 <isatty+0x40>
 100f470:	0005883a 	mov	r2,zero
 100f474:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 100f478:	e0bfef17 	ldw	r2,-68(fp)
 100f47c:	10000e26 	beq	r2,zero,100f4b8 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100f480:	e0bfef17 	ldw	r2,-68(fp)
 100f484:	10800017 	ldw	r2,0(r2)
 100f488:	10800817 	ldw	r2,32(r2)
 100f48c:	1000021e 	bne	r2,zero,100f498 <isatty+0x64>
    {
      return 1;
 100f490:	00800044 	movi	r2,1
 100f494:	00000d06 	br	100f4cc <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100f498:	e0bff004 	addi	r2,fp,-64
 100f49c:	100b883a 	mov	r5,r2
 100f4a0:	e13fff17 	ldw	r4,-4(fp)
 100f4a4:	100f3400 	call	100f340 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100f4a8:	e0bff117 	ldw	r2,-60(fp)
 100f4ac:	10880020 	cmpeqi	r2,r2,8192
 100f4b0:	10803fcc 	andi	r2,r2,255
 100f4b4:	00000506 	br	100f4cc <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f4b8:	100f3f80 	call	100f3f8 <alt_get_errno>
 100f4bc:	1007883a 	mov	r3,r2
 100f4c0:	00801444 	movi	r2,81
 100f4c4:	18800015 	stw	r2,0(r3)
    return 0;
 100f4c8:	0005883a 	mov	r2,zero
  }
}
 100f4cc:	e037883a 	mov	sp,fp
 100f4d0:	dfc00117 	ldw	ra,4(sp)
 100f4d4:	df000017 	ldw	fp,0(sp)
 100f4d8:	dec00204 	addi	sp,sp,8
 100f4dc:	f800283a 	ret

0100f4e0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100f4e0:	defffc04 	addi	sp,sp,-16
 100f4e4:	df000315 	stw	fp,12(sp)
 100f4e8:	df000304 	addi	fp,sp,12
 100f4ec:	e13ffd15 	stw	r4,-12(fp)
 100f4f0:	e17ffe15 	stw	r5,-8(fp)
 100f4f4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100f4f8:	e0fffe17 	ldw	r3,-8(fp)
 100f4fc:	e0bffd17 	ldw	r2,-12(fp)
 100f500:	18800c26 	beq	r3,r2,100f534 <alt_load_section+0x54>
  {
    while( to != end )
 100f504:	00000806 	br	100f528 <alt_load_section+0x48>
    {
      *to++ = *from++;
 100f508:	e0bffe17 	ldw	r2,-8(fp)
 100f50c:	10c00104 	addi	r3,r2,4
 100f510:	e0fffe15 	stw	r3,-8(fp)
 100f514:	e0fffd17 	ldw	r3,-12(fp)
 100f518:	19000104 	addi	r4,r3,4
 100f51c:	e13ffd15 	stw	r4,-12(fp)
 100f520:	18c00017 	ldw	r3,0(r3)
 100f524:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100f528:	e0fffe17 	ldw	r3,-8(fp)
 100f52c:	e0bfff17 	ldw	r2,-4(fp)
 100f530:	18bff51e 	bne	r3,r2,100f508 <__alt_data_end+0xff80f508>
    {
      *to++ = *from++;
    }
  }
}
 100f534:	0001883a 	nop
 100f538:	e037883a 	mov	sp,fp
 100f53c:	df000017 	ldw	fp,0(sp)
 100f540:	dec00104 	addi	sp,sp,4
 100f544:	f800283a 	ret

0100f548 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100f548:	defffe04 	addi	sp,sp,-8
 100f54c:	dfc00115 	stw	ra,4(sp)
 100f550:	df000015 	stw	fp,0(sp)
 100f554:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100f558:	01804074 	movhi	r6,257
 100f55c:	318fd204 	addi	r6,r6,16200
 100f560:	01404074 	movhi	r5,257
 100f564:	29491704 	addi	r5,r5,9308
 100f568:	01004074 	movhi	r4,257
 100f56c:	210fd204 	addi	r4,r4,16200
 100f570:	100f4e00 	call	100f4e0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100f574:	01804034 	movhi	r6,256
 100f578:	31808c04 	addi	r6,r6,560
 100f57c:	01404034 	movhi	r5,256
 100f580:	29400804 	addi	r5,r5,32
 100f584:	01004034 	movhi	r4,256
 100f588:	21000804 	addi	r4,r4,32
 100f58c:	100f4e00 	call	100f4e0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100f590:	01804074 	movhi	r6,257
 100f594:	31891704 	addi	r6,r6,9308
 100f598:	01404074 	movhi	r5,257
 100f59c:	29467904 	addi	r5,r5,6628
 100f5a0:	01004074 	movhi	r4,257
 100f5a4:	21067904 	addi	r4,r4,6628
 100f5a8:	100f4e00 	call	100f4e0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100f5ac:	101092c0 	call	101092c <alt_dcache_flush_all>
  alt_icache_flush_all();
 100f5b0:	1010aec0 	call	1010aec <alt_icache_flush_all>
}
 100f5b4:	0001883a 	nop
 100f5b8:	e037883a 	mov	sp,fp
 100f5bc:	dfc00117 	ldw	ra,4(sp)
 100f5c0:	df000017 	ldw	fp,0(sp)
 100f5c4:	dec00204 	addi	sp,sp,8
 100f5c8:	f800283a 	ret

0100f5cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f5cc:	defffe04 	addi	sp,sp,-8
 100f5d0:	dfc00115 	stw	ra,4(sp)
 100f5d4:	df000015 	stw	fp,0(sp)
 100f5d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f5dc:	d0a00b17 	ldw	r2,-32724(gp)
 100f5e0:	10000326 	beq	r2,zero,100f5f0 <alt_get_errno+0x24>
 100f5e4:	d0a00b17 	ldw	r2,-32724(gp)
 100f5e8:	103ee83a 	callr	r2
 100f5ec:	00000106 	br	100f5f4 <alt_get_errno+0x28>
 100f5f0:	d0a6d204 	addi	r2,gp,-25784
}
 100f5f4:	e037883a 	mov	sp,fp
 100f5f8:	dfc00117 	ldw	ra,4(sp)
 100f5fc:	df000017 	ldw	fp,0(sp)
 100f600:	dec00204 	addi	sp,sp,8
 100f604:	f800283a 	ret

0100f608 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100f608:	defff904 	addi	sp,sp,-28
 100f60c:	dfc00615 	stw	ra,24(sp)
 100f610:	df000515 	stw	fp,20(sp)
 100f614:	df000504 	addi	fp,sp,20
 100f618:	e13ffd15 	stw	r4,-12(fp)
 100f61c:	e17ffe15 	stw	r5,-8(fp)
 100f620:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100f624:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f628:	e0bffd17 	ldw	r2,-12(fp)
 100f62c:	10000816 	blt	r2,zero,100f650 <lseek+0x48>
 100f630:	01400304 	movi	r5,12
 100f634:	e13ffd17 	ldw	r4,-12(fp)
 100f638:	100c8f80 	call	100c8f8 <__mulsi3>
 100f63c:	1007883a 	mov	r3,r2
 100f640:	00804074 	movhi	r2,257
 100f644:	108b4a04 	addi	r2,r2,11560
 100f648:	1885883a 	add	r2,r3,r2
 100f64c:	00000106 	br	100f654 <lseek+0x4c>
 100f650:	0005883a 	mov	r2,zero
 100f654:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 100f658:	e0bffc17 	ldw	r2,-16(fp)
 100f65c:	10001026 	beq	r2,zero,100f6a0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100f660:	e0bffc17 	ldw	r2,-16(fp)
 100f664:	10800017 	ldw	r2,0(r2)
 100f668:	10800717 	ldw	r2,28(r2)
 100f66c:	10000926 	beq	r2,zero,100f694 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100f670:	e0bffc17 	ldw	r2,-16(fp)
 100f674:	10800017 	ldw	r2,0(r2)
 100f678:	10800717 	ldw	r2,28(r2)
 100f67c:	e1bfff17 	ldw	r6,-4(fp)
 100f680:	e17ffe17 	ldw	r5,-8(fp)
 100f684:	e13ffc17 	ldw	r4,-16(fp)
 100f688:	103ee83a 	callr	r2
 100f68c:	e0bffb15 	stw	r2,-20(fp)
 100f690:	00000506 	br	100f6a8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100f694:	00bfde84 	movi	r2,-134
 100f698:	e0bffb15 	stw	r2,-20(fp)
 100f69c:	00000206 	br	100f6a8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100f6a0:	00bfebc4 	movi	r2,-81
 100f6a4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 100f6a8:	e0bffb17 	ldw	r2,-20(fp)
 100f6ac:	1000070e 	bge	r2,zero,100f6cc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 100f6b0:	100f5cc0 	call	100f5cc <alt_get_errno>
 100f6b4:	1007883a 	mov	r3,r2
 100f6b8:	e0bffb17 	ldw	r2,-20(fp)
 100f6bc:	0085c83a 	sub	r2,zero,r2
 100f6c0:	18800015 	stw	r2,0(r3)
    rc = -1;
 100f6c4:	00bfffc4 	movi	r2,-1
 100f6c8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 100f6cc:	e0bffb17 	ldw	r2,-20(fp)
}
 100f6d0:	e037883a 	mov	sp,fp
 100f6d4:	dfc00117 	ldw	ra,4(sp)
 100f6d8:	df000017 	ldw	fp,0(sp)
 100f6dc:	dec00204 	addi	sp,sp,8
 100f6e0:	f800283a 	ret

0100f6e4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100f6e4:	defffd04 	addi	sp,sp,-12
 100f6e8:	dfc00215 	stw	ra,8(sp)
 100f6ec:	df000115 	stw	fp,4(sp)
 100f6f0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100f6f4:	0009883a 	mov	r4,zero
 100f6f8:	100fbbc0 	call	100fbbc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100f6fc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100f700:	100fbf40 	call	100fbf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100f704:	01804074 	movhi	r6,257
 100f708:	31890d04 	addi	r6,r6,9268
 100f70c:	01404074 	movhi	r5,257
 100f710:	29490d04 	addi	r5,r5,9268
 100f714:	01004074 	movhi	r4,257
 100f718:	21090d04 	addi	r4,r4,9268
 100f71c:	1010e900 	call	1010e90 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100f720:	1010a2c0 	call	1010a2c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100f724:	01004074 	movhi	r4,257
 100f728:	2102a304 	addi	r4,r4,2700
 100f72c:	10116500 	call	1011650 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100f730:	d0a6d317 	ldw	r2,-25780(gp)
 100f734:	d0e6d417 	ldw	r3,-25776(gp)
 100f738:	d126d517 	ldw	r4,-25772(gp)
 100f73c:	200d883a 	mov	r6,r4
 100f740:	180b883a 	mov	r5,r3
 100f744:	1009883a 	mov	r4,r2
 100f748:	10003cc0 	call	10003cc <main>
 100f74c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100f750:	01000044 	movi	r4,1
 100f754:	100f2000 	call	100f200 <close>
  exit (result);
 100f758:	e13fff17 	ldw	r4,-4(fp)
 100f75c:	10116640 	call	1011664 <exit>

0100f760 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100f760:	defffe04 	addi	sp,sp,-8
 100f764:	df000115 	stw	fp,4(sp)
 100f768:	df000104 	addi	fp,sp,4
 100f76c:	e13fff15 	stw	r4,-4(fp)
}
 100f770:	0001883a 	nop
 100f774:	e037883a 	mov	sp,fp
 100f778:	df000017 	ldw	fp,0(sp)
 100f77c:	dec00104 	addi	sp,sp,4
 100f780:	f800283a 	ret

0100f784 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100f784:	defffe04 	addi	sp,sp,-8
 100f788:	df000115 	stw	fp,4(sp)
 100f78c:	df000104 	addi	fp,sp,4
 100f790:	e13fff15 	stw	r4,-4(fp)
}
 100f794:	0001883a 	nop
 100f798:	e037883a 	mov	sp,fp
 100f79c:	df000017 	ldw	fp,0(sp)
 100f7a0:	dec00104 	addi	sp,sp,4
 100f7a4:	f800283a 	ret

0100f7a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f7a8:	defffe04 	addi	sp,sp,-8
 100f7ac:	dfc00115 	stw	ra,4(sp)
 100f7b0:	df000015 	stw	fp,0(sp)
 100f7b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f7b8:	d0a00b17 	ldw	r2,-32724(gp)
 100f7bc:	10000326 	beq	r2,zero,100f7cc <alt_get_errno+0x24>
 100f7c0:	d0a00b17 	ldw	r2,-32724(gp)
 100f7c4:	103ee83a 	callr	r2
 100f7c8:	00000106 	br	100f7d0 <alt_get_errno+0x28>
 100f7cc:	d0a6d204 	addi	r2,gp,-25784
}
 100f7d0:	e037883a 	mov	sp,fp
 100f7d4:	dfc00117 	ldw	ra,4(sp)
 100f7d8:	df000017 	ldw	fp,0(sp)
 100f7dc:	dec00204 	addi	sp,sp,8
 100f7e0:	f800283a 	ret

0100f7e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100f7e4:	defff904 	addi	sp,sp,-28
 100f7e8:	dfc00615 	stw	ra,24(sp)
 100f7ec:	df000515 	stw	fp,20(sp)
 100f7f0:	df000504 	addi	fp,sp,20
 100f7f4:	e13ffd15 	stw	r4,-12(fp)
 100f7f8:	e17ffe15 	stw	r5,-8(fp)
 100f7fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f800:	e0bffd17 	ldw	r2,-12(fp)
 100f804:	10000816 	blt	r2,zero,100f828 <read+0x44>
 100f808:	01400304 	movi	r5,12
 100f80c:	e13ffd17 	ldw	r4,-12(fp)
 100f810:	100c8f80 	call	100c8f8 <__mulsi3>
 100f814:	1007883a 	mov	r3,r2
 100f818:	00804074 	movhi	r2,257
 100f81c:	108b4a04 	addi	r2,r2,11560
 100f820:	1885883a 	add	r2,r3,r2
 100f824:	00000106 	br	100f82c <read+0x48>
 100f828:	0005883a 	mov	r2,zero
 100f82c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100f830:	e0bffb17 	ldw	r2,-20(fp)
 100f834:	10002226 	beq	r2,zero,100f8c0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100f838:	e0bffb17 	ldw	r2,-20(fp)
 100f83c:	10800217 	ldw	r2,8(r2)
 100f840:	108000cc 	andi	r2,r2,3
 100f844:	10800060 	cmpeqi	r2,r2,1
 100f848:	1000181e 	bne	r2,zero,100f8ac <read+0xc8>
        (fd->dev->read))
 100f84c:	e0bffb17 	ldw	r2,-20(fp)
 100f850:	10800017 	ldw	r2,0(r2)
 100f854:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100f858:	10001426 	beq	r2,zero,100f8ac <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100f85c:	e0bffb17 	ldw	r2,-20(fp)
 100f860:	10800017 	ldw	r2,0(r2)
 100f864:	10800517 	ldw	r2,20(r2)
 100f868:	e0ffff17 	ldw	r3,-4(fp)
 100f86c:	180d883a 	mov	r6,r3
 100f870:	e17ffe17 	ldw	r5,-8(fp)
 100f874:	e13ffb17 	ldw	r4,-20(fp)
 100f878:	103ee83a 	callr	r2
 100f87c:	e0bffc15 	stw	r2,-16(fp)
 100f880:	e0bffc17 	ldw	r2,-16(fp)
 100f884:	1000070e 	bge	r2,zero,100f8a4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 100f888:	100f7a80 	call	100f7a8 <alt_get_errno>
 100f88c:	1007883a 	mov	r3,r2
 100f890:	e0bffc17 	ldw	r2,-16(fp)
 100f894:	0085c83a 	sub	r2,zero,r2
 100f898:	18800015 	stw	r2,0(r3)
          return -1;
 100f89c:	00bfffc4 	movi	r2,-1
 100f8a0:	00000c06 	br	100f8d4 <read+0xf0>
        }
        return rval;
 100f8a4:	e0bffc17 	ldw	r2,-16(fp)
 100f8a8:	00000a06 	br	100f8d4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100f8ac:	100f7a80 	call	100f7a8 <alt_get_errno>
 100f8b0:	1007883a 	mov	r3,r2
 100f8b4:	00800344 	movi	r2,13
 100f8b8:	18800015 	stw	r2,0(r3)
 100f8bc:	00000406 	br	100f8d0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100f8c0:	100f7a80 	call	100f7a8 <alt_get_errno>
 100f8c4:	1007883a 	mov	r3,r2
 100f8c8:	00801444 	movi	r2,81
 100f8cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100f8d0:	00bfffc4 	movi	r2,-1
}
 100f8d4:	e037883a 	mov	sp,fp
 100f8d8:	dfc00117 	ldw	ra,4(sp)
 100f8dc:	df000017 	ldw	fp,0(sp)
 100f8e0:	dec00204 	addi	sp,sp,8
 100f8e4:	f800283a 	ret

0100f8e8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100f8e8:	defffc04 	addi	sp,sp,-16
 100f8ec:	dfc00315 	stw	ra,12(sp)
 100f8f0:	df000215 	stw	fp,8(sp)
 100f8f4:	dc000115 	stw	r16,4(sp)
 100f8f8:	df000204 	addi	fp,sp,8
 100f8fc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 100f900:	e0bffe17 	ldw	r2,-8(fp)
 100f904:	108000d0 	cmplti	r2,r2,3
 100f908:	1000111e 	bne	r2,zero,100f950 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 100f90c:	04004074 	movhi	r16,257
 100f910:	840b4a04 	addi	r16,r16,11560
 100f914:	e0bffe17 	ldw	r2,-8(fp)
 100f918:	01400304 	movi	r5,12
 100f91c:	1009883a 	mov	r4,r2
 100f920:	100c8f80 	call	100c8f8 <__mulsi3>
 100f924:	8085883a 	add	r2,r16,r2
 100f928:	10800204 	addi	r2,r2,8
 100f92c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100f930:	04004074 	movhi	r16,257
 100f934:	840b4a04 	addi	r16,r16,11560
 100f938:	e0bffe17 	ldw	r2,-8(fp)
 100f93c:	01400304 	movi	r5,12
 100f940:	1009883a 	mov	r4,r2
 100f944:	100c8f80 	call	100c8f8 <__mulsi3>
 100f948:	8085883a 	add	r2,r16,r2
 100f94c:	10000015 	stw	zero,0(r2)
  }
}
 100f950:	0001883a 	nop
 100f954:	e6ffff04 	addi	sp,fp,-4
 100f958:	dfc00217 	ldw	ra,8(sp)
 100f95c:	df000117 	ldw	fp,4(sp)
 100f960:	dc000017 	ldw	r16,0(sp)
 100f964:	dec00304 	addi	sp,sp,12
 100f968:	f800283a 	ret

0100f96c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100f96c:	defff904 	addi	sp,sp,-28
 100f970:	df000615 	stw	fp,24(sp)
 100f974:	df000604 	addi	fp,sp,24
 100f978:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f97c:	0005303a 	rdctl	r2,status
 100f980:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f984:	e0fffe17 	ldw	r3,-8(fp)
 100f988:	00bfff84 	movi	r2,-2
 100f98c:	1884703a 	and	r2,r3,r2
 100f990:	1001703a 	wrctl	status,r2
  
  return context;
 100f994:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100f998:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100f99c:	d0a00c17 	ldw	r2,-32720(gp)
 100f9a0:	10c000c4 	addi	r3,r2,3
 100f9a4:	00bfff04 	movi	r2,-4
 100f9a8:	1884703a 	and	r2,r3,r2
 100f9ac:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100f9b0:	d0e00c17 	ldw	r3,-32720(gp)
 100f9b4:	e0bfff17 	ldw	r2,-4(fp)
 100f9b8:	1887883a 	add	r3,r3,r2
 100f9bc:	00806034 	movhi	r2,384
 100f9c0:	10800004 	addi	r2,r2,0
 100f9c4:	10c0062e 	bgeu	r2,r3,100f9e0 <sbrk+0x74>
 100f9c8:	e0bffb17 	ldw	r2,-20(fp)
 100f9cc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f9d0:	e0bffa17 	ldw	r2,-24(fp)
 100f9d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100f9d8:	00bfffc4 	movi	r2,-1
 100f9dc:	00000b06 	br	100fa0c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 100f9e0:	d0a00c17 	ldw	r2,-32720(gp)
 100f9e4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 100f9e8:	d0e00c17 	ldw	r3,-32720(gp)
 100f9ec:	e0bfff17 	ldw	r2,-4(fp)
 100f9f0:	1885883a 	add	r2,r3,r2
 100f9f4:	d0a00c15 	stw	r2,-32720(gp)
 100f9f8:	e0bffb17 	ldw	r2,-20(fp)
 100f9fc:	e0bffc15 	stw	r2,-16(fp)
 100fa00:	e0bffc17 	ldw	r2,-16(fp)
 100fa04:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100fa08:	e0bffd17 	ldw	r2,-12(fp)
} 
 100fa0c:	e037883a 	mov	sp,fp
 100fa10:	df000017 	ldw	fp,0(sp)
 100fa14:	dec00104 	addi	sp,sp,4
 100fa18:	f800283a 	ret

0100fa1c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 100fa1c:	defffd04 	addi	sp,sp,-12
 100fa20:	dfc00215 	stw	ra,8(sp)
 100fa24:	df000115 	stw	fp,4(sp)
 100fa28:	df000104 	addi	fp,sp,4
 100fa2c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 100fa30:	e13fff17 	ldw	r4,-4(fp)
 100fa34:	10107d40 	call	10107d4 <alt_busy_sleep>
}
 100fa38:	e037883a 	mov	sp,fp
 100fa3c:	dfc00117 	ldw	ra,4(sp)
 100fa40:	df000017 	ldw	fp,0(sp)
 100fa44:	dec00204 	addi	sp,sp,8
 100fa48:	f800283a 	ret

0100fa4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100fa4c:	defffe04 	addi	sp,sp,-8
 100fa50:	dfc00115 	stw	ra,4(sp)
 100fa54:	df000015 	stw	fp,0(sp)
 100fa58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100fa5c:	d0a00b17 	ldw	r2,-32724(gp)
 100fa60:	10000326 	beq	r2,zero,100fa70 <alt_get_errno+0x24>
 100fa64:	d0a00b17 	ldw	r2,-32724(gp)
 100fa68:	103ee83a 	callr	r2
 100fa6c:	00000106 	br	100fa74 <alt_get_errno+0x28>
 100fa70:	d0a6d204 	addi	r2,gp,-25784
}
 100fa74:	e037883a 	mov	sp,fp
 100fa78:	dfc00117 	ldw	ra,4(sp)
 100fa7c:	df000017 	ldw	fp,0(sp)
 100fa80:	dec00204 	addi	sp,sp,8
 100fa84:	f800283a 	ret

0100fa88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100fa88:	defff904 	addi	sp,sp,-28
 100fa8c:	dfc00615 	stw	ra,24(sp)
 100fa90:	df000515 	stw	fp,20(sp)
 100fa94:	df000504 	addi	fp,sp,20
 100fa98:	e13ffd15 	stw	r4,-12(fp)
 100fa9c:	e17ffe15 	stw	r5,-8(fp)
 100faa0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100faa4:	e0bffd17 	ldw	r2,-12(fp)
 100faa8:	10000816 	blt	r2,zero,100facc <write+0x44>
 100faac:	01400304 	movi	r5,12
 100fab0:	e13ffd17 	ldw	r4,-12(fp)
 100fab4:	100c8f80 	call	100c8f8 <__mulsi3>
 100fab8:	1007883a 	mov	r3,r2
 100fabc:	00804074 	movhi	r2,257
 100fac0:	108b4a04 	addi	r2,r2,11560
 100fac4:	1885883a 	add	r2,r3,r2
 100fac8:	00000106 	br	100fad0 <write+0x48>
 100facc:	0005883a 	mov	r2,zero
 100fad0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100fad4:	e0bffb17 	ldw	r2,-20(fp)
 100fad8:	10002126 	beq	r2,zero,100fb60 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100fadc:	e0bffb17 	ldw	r2,-20(fp)
 100fae0:	10800217 	ldw	r2,8(r2)
 100fae4:	108000cc 	andi	r2,r2,3
 100fae8:	10001826 	beq	r2,zero,100fb4c <write+0xc4>
 100faec:	e0bffb17 	ldw	r2,-20(fp)
 100faf0:	10800017 	ldw	r2,0(r2)
 100faf4:	10800617 	ldw	r2,24(r2)
 100faf8:	10001426 	beq	r2,zero,100fb4c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100fafc:	e0bffb17 	ldw	r2,-20(fp)
 100fb00:	10800017 	ldw	r2,0(r2)
 100fb04:	10800617 	ldw	r2,24(r2)
 100fb08:	e0ffff17 	ldw	r3,-4(fp)
 100fb0c:	180d883a 	mov	r6,r3
 100fb10:	e17ffe17 	ldw	r5,-8(fp)
 100fb14:	e13ffb17 	ldw	r4,-20(fp)
 100fb18:	103ee83a 	callr	r2
 100fb1c:	e0bffc15 	stw	r2,-16(fp)
 100fb20:	e0bffc17 	ldw	r2,-16(fp)
 100fb24:	1000070e 	bge	r2,zero,100fb44 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 100fb28:	100fa4c0 	call	100fa4c <alt_get_errno>
 100fb2c:	1007883a 	mov	r3,r2
 100fb30:	e0bffc17 	ldw	r2,-16(fp)
 100fb34:	0085c83a 	sub	r2,zero,r2
 100fb38:	18800015 	stw	r2,0(r3)
        return -1;
 100fb3c:	00bfffc4 	movi	r2,-1
 100fb40:	00000c06 	br	100fb74 <write+0xec>
      }
      return rval;
 100fb44:	e0bffc17 	ldw	r2,-16(fp)
 100fb48:	00000a06 	br	100fb74 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100fb4c:	100fa4c0 	call	100fa4c <alt_get_errno>
 100fb50:	1007883a 	mov	r3,r2
 100fb54:	00800344 	movi	r2,13
 100fb58:	18800015 	stw	r2,0(r3)
 100fb5c:	00000406 	br	100fb70 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100fb60:	100fa4c0 	call	100fa4c <alt_get_errno>
 100fb64:	1007883a 	mov	r3,r2
 100fb68:	00801444 	movi	r2,81
 100fb6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100fb70:	00bfffc4 	movi	r2,-1
}
 100fb74:	e037883a 	mov	sp,fp
 100fb78:	dfc00117 	ldw	ra,4(sp)
 100fb7c:	df000017 	ldw	fp,0(sp)
 100fb80:	dec00204 	addi	sp,sp,8
 100fb84:	f800283a 	ret

0100fb88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100fb88:	defffd04 	addi	sp,sp,-12
 100fb8c:	dfc00215 	stw	ra,8(sp)
 100fb90:	df000115 	stw	fp,4(sp)
 100fb94:	df000104 	addi	fp,sp,4
 100fb98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100fb9c:	d1600804 	addi	r5,gp,-32736
 100fba0:	e13fff17 	ldw	r4,-4(fp)
 100fba4:	10109880 	call	1010988 <alt_dev_llist_insert>
}
 100fba8:	e037883a 	mov	sp,fp
 100fbac:	dfc00117 	ldw	ra,4(sp)
 100fbb0:	df000017 	ldw	fp,0(sp)
 100fbb4:	dec00204 	addi	sp,sp,8
 100fbb8:	f800283a 	ret

0100fbbc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100fbbc:	defffd04 	addi	sp,sp,-12
 100fbc0:	dfc00215 	stw	ra,8(sp)
 100fbc4:	df000115 	stw	fp,4(sp)
 100fbc8:	df000104 	addi	fp,sp,4
 100fbcc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 100fbd0:	10113340 	call	1011334 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100fbd4:	00800044 	movi	r2,1
 100fbd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100fbdc:	0001883a 	nop
 100fbe0:	e037883a 	mov	sp,fp
 100fbe4:	dfc00117 	ldw	ra,4(sp)
 100fbe8:	df000017 	ldw	fp,0(sp)
 100fbec:	dec00204 	addi	sp,sp,8
 100fbf0:	f800283a 	ret

0100fbf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100fbf4:	defffe04 	addi	sp,sp,-8
 100fbf8:	dfc00115 	stw	ra,4(sp)
 100fbfc:	df000015 	stw	fp,0(sp)
 100fc00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100fc04:	01800144 	movi	r6,5
 100fc08:	000b883a 	mov	r5,zero
 100fc0c:	01004074 	movhi	r4,257
 100fc10:	210bb404 	addi	r4,r4,11984
 100fc14:	100fda40 	call	100fda4 <altera_avalon_jtag_uart_init>
 100fc18:	01004074 	movhi	r4,257
 100fc1c:	210baa04 	addi	r4,r4,11944
 100fc20:	100fb880 	call	100fb88 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 100fc24:	0001883a 	nop
}
 100fc28:	0001883a 	nop
 100fc2c:	e037883a 	mov	sp,fp
 100fc30:	dfc00117 	ldw	ra,4(sp)
 100fc34:	df000017 	ldw	fp,0(sp)
 100fc38:	dec00204 	addi	sp,sp,8
 100fc3c:	f800283a 	ret

0100fc40 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100fc40:	defffa04 	addi	sp,sp,-24
 100fc44:	dfc00515 	stw	ra,20(sp)
 100fc48:	df000415 	stw	fp,16(sp)
 100fc4c:	df000404 	addi	fp,sp,16
 100fc50:	e13ffd15 	stw	r4,-12(fp)
 100fc54:	e17ffe15 	stw	r5,-8(fp)
 100fc58:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100fc5c:	e0bffd17 	ldw	r2,-12(fp)
 100fc60:	10800017 	ldw	r2,0(r2)
 100fc64:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100fc68:	e0bffc17 	ldw	r2,-16(fp)
 100fc6c:	10c00a04 	addi	r3,r2,40
 100fc70:	e0bffd17 	ldw	r2,-12(fp)
 100fc74:	10800217 	ldw	r2,8(r2)
 100fc78:	100f883a 	mov	r7,r2
 100fc7c:	e1bfff17 	ldw	r6,-4(fp)
 100fc80:	e17ffe17 	ldw	r5,-8(fp)
 100fc84:	1809883a 	mov	r4,r3
 100fc88:	10102680 	call	1010268 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100fc8c:	e037883a 	mov	sp,fp
 100fc90:	dfc00117 	ldw	ra,4(sp)
 100fc94:	df000017 	ldw	fp,0(sp)
 100fc98:	dec00204 	addi	sp,sp,8
 100fc9c:	f800283a 	ret

0100fca0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100fca0:	defffa04 	addi	sp,sp,-24
 100fca4:	dfc00515 	stw	ra,20(sp)
 100fca8:	df000415 	stw	fp,16(sp)
 100fcac:	df000404 	addi	fp,sp,16
 100fcb0:	e13ffd15 	stw	r4,-12(fp)
 100fcb4:	e17ffe15 	stw	r5,-8(fp)
 100fcb8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100fcbc:	e0bffd17 	ldw	r2,-12(fp)
 100fcc0:	10800017 	ldw	r2,0(r2)
 100fcc4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100fcc8:	e0bffc17 	ldw	r2,-16(fp)
 100fccc:	10c00a04 	addi	r3,r2,40
 100fcd0:	e0bffd17 	ldw	r2,-12(fp)
 100fcd4:	10800217 	ldw	r2,8(r2)
 100fcd8:	100f883a 	mov	r7,r2
 100fcdc:	e1bfff17 	ldw	r6,-4(fp)
 100fce0:	e17ffe17 	ldw	r5,-8(fp)
 100fce4:	1809883a 	mov	r4,r3
 100fce8:	10104840 	call	1010484 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100fcec:	e037883a 	mov	sp,fp
 100fcf0:	dfc00117 	ldw	ra,4(sp)
 100fcf4:	df000017 	ldw	fp,0(sp)
 100fcf8:	dec00204 	addi	sp,sp,8
 100fcfc:	f800283a 	ret

0100fd00 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100fd00:	defffc04 	addi	sp,sp,-16
 100fd04:	dfc00315 	stw	ra,12(sp)
 100fd08:	df000215 	stw	fp,8(sp)
 100fd0c:	df000204 	addi	fp,sp,8
 100fd10:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100fd14:	e0bfff17 	ldw	r2,-4(fp)
 100fd18:	10800017 	ldw	r2,0(r2)
 100fd1c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100fd20:	e0bffe17 	ldw	r2,-8(fp)
 100fd24:	10c00a04 	addi	r3,r2,40
 100fd28:	e0bfff17 	ldw	r2,-4(fp)
 100fd2c:	10800217 	ldw	r2,8(r2)
 100fd30:	100b883a 	mov	r5,r2
 100fd34:	1809883a 	mov	r4,r3
 100fd38:	10101100 	call	1010110 <altera_avalon_jtag_uart_close>
}
 100fd3c:	e037883a 	mov	sp,fp
 100fd40:	dfc00117 	ldw	ra,4(sp)
 100fd44:	df000017 	ldw	fp,0(sp)
 100fd48:	dec00204 	addi	sp,sp,8
 100fd4c:	f800283a 	ret

0100fd50 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100fd50:	defffa04 	addi	sp,sp,-24
 100fd54:	dfc00515 	stw	ra,20(sp)
 100fd58:	df000415 	stw	fp,16(sp)
 100fd5c:	df000404 	addi	fp,sp,16
 100fd60:	e13ffd15 	stw	r4,-12(fp)
 100fd64:	e17ffe15 	stw	r5,-8(fp)
 100fd68:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100fd6c:	e0bffd17 	ldw	r2,-12(fp)
 100fd70:	10800017 	ldw	r2,0(r2)
 100fd74:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100fd78:	e0bffc17 	ldw	r2,-16(fp)
 100fd7c:	10800a04 	addi	r2,r2,40
 100fd80:	e1bfff17 	ldw	r6,-4(fp)
 100fd84:	e17ffe17 	ldw	r5,-8(fp)
 100fd88:	1009883a 	mov	r4,r2
 100fd8c:	10101780 	call	1010178 <altera_avalon_jtag_uart_ioctl>
}
 100fd90:	e037883a 	mov	sp,fp
 100fd94:	dfc00117 	ldw	ra,4(sp)
 100fd98:	df000017 	ldw	fp,0(sp)
 100fd9c:	dec00204 	addi	sp,sp,8
 100fda0:	f800283a 	ret

0100fda4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100fda4:	defffa04 	addi	sp,sp,-24
 100fda8:	dfc00515 	stw	ra,20(sp)
 100fdac:	df000415 	stw	fp,16(sp)
 100fdb0:	df000404 	addi	fp,sp,16
 100fdb4:	e13ffd15 	stw	r4,-12(fp)
 100fdb8:	e17ffe15 	stw	r5,-8(fp)
 100fdbc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100fdc0:	e0bffd17 	ldw	r2,-12(fp)
 100fdc4:	00c00044 	movi	r3,1
 100fdc8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100fdcc:	e0bffd17 	ldw	r2,-12(fp)
 100fdd0:	10800017 	ldw	r2,0(r2)
 100fdd4:	10800104 	addi	r2,r2,4
 100fdd8:	1007883a 	mov	r3,r2
 100fddc:	e0bffd17 	ldw	r2,-12(fp)
 100fde0:	10800817 	ldw	r2,32(r2)
 100fde4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100fde8:	e0bffe17 	ldw	r2,-8(fp)
 100fdec:	e0ffff17 	ldw	r3,-4(fp)
 100fdf0:	d8000015 	stw	zero,0(sp)
 100fdf4:	e1fffd17 	ldw	r7,-12(fp)
 100fdf8:	01804074 	movhi	r6,257
 100fdfc:	31bf9904 	addi	r6,r6,-412
 100fe00:	180b883a 	mov	r5,r3
 100fe04:	1009883a 	mov	r4,r2
 100fe08:	1010b0c0 	call	1010b0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100fe0c:	e0bffd17 	ldw	r2,-12(fp)
 100fe10:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100fe14:	e0bffd17 	ldw	r2,-12(fp)
 100fe18:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100fe1c:	d0e6d717 	ldw	r3,-25764(gp)
 100fe20:	e1fffd17 	ldw	r7,-12(fp)
 100fe24:	01804074 	movhi	r6,257
 100fe28:	31801c04 	addi	r6,r6,112
 100fe2c:	180b883a 	mov	r5,r3
 100fe30:	1009883a 	mov	r4,r2
 100fe34:	10106a80 	call	10106a8 <alt_alarm_start>
 100fe38:	1000040e 	bge	r2,zero,100fe4c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100fe3c:	e0fffd17 	ldw	r3,-12(fp)
 100fe40:	00a00034 	movhi	r2,32768
 100fe44:	10bfffc4 	addi	r2,r2,-1
 100fe48:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100fe4c:	0001883a 	nop
 100fe50:	e037883a 	mov	sp,fp
 100fe54:	dfc00117 	ldw	ra,4(sp)
 100fe58:	df000017 	ldw	fp,0(sp)
 100fe5c:	dec00204 	addi	sp,sp,8
 100fe60:	f800283a 	ret

0100fe64 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100fe64:	defff804 	addi	sp,sp,-32
 100fe68:	df000715 	stw	fp,28(sp)
 100fe6c:	df000704 	addi	fp,sp,28
 100fe70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100fe74:	e0bfff17 	ldw	r2,-4(fp)
 100fe78:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 100fe7c:	e0bffb17 	ldw	r2,-20(fp)
 100fe80:	10800017 	ldw	r2,0(r2)
 100fe84:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100fe88:	e0bffc17 	ldw	r2,-16(fp)
 100fe8c:	10800104 	addi	r2,r2,4
 100fe90:	10800037 	ldwio	r2,0(r2)
 100fe94:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100fe98:	e0bffd17 	ldw	r2,-12(fp)
 100fe9c:	1080c00c 	andi	r2,r2,768
 100fea0:	10006d26 	beq	r2,zero,1010058 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100fea4:	e0bffd17 	ldw	r2,-12(fp)
 100fea8:	1080400c 	andi	r2,r2,256
 100feac:	10003526 	beq	r2,zero,100ff84 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100feb0:	00800074 	movhi	r2,1
 100feb4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100feb8:	e0bffb17 	ldw	r2,-20(fp)
 100febc:	10800a17 	ldw	r2,40(r2)
 100fec0:	10800044 	addi	r2,r2,1
 100fec4:	1081ffcc 	andi	r2,r2,2047
 100fec8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 100fecc:	e0bffb17 	ldw	r2,-20(fp)
 100fed0:	10c00b17 	ldw	r3,44(r2)
 100fed4:	e0bffe17 	ldw	r2,-8(fp)
 100fed8:	18801526 	beq	r3,r2,100ff30 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100fedc:	e0bffc17 	ldw	r2,-16(fp)
 100fee0:	10800037 	ldwio	r2,0(r2)
 100fee4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100fee8:	e0bff917 	ldw	r2,-28(fp)
 100feec:	10a0000c 	andi	r2,r2,32768
 100fef0:	10001126 	beq	r2,zero,100ff38 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100fef4:	e0bffb17 	ldw	r2,-20(fp)
 100fef8:	10800a17 	ldw	r2,40(r2)
 100fefc:	e0fff917 	ldw	r3,-28(fp)
 100ff00:	1809883a 	mov	r4,r3
 100ff04:	e0fffb17 	ldw	r3,-20(fp)
 100ff08:	1885883a 	add	r2,r3,r2
 100ff0c:	10800e04 	addi	r2,r2,56
 100ff10:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ff14:	e0bffb17 	ldw	r2,-20(fp)
 100ff18:	10800a17 	ldw	r2,40(r2)
 100ff1c:	10800044 	addi	r2,r2,1
 100ff20:	10c1ffcc 	andi	r3,r2,2047
 100ff24:	e0bffb17 	ldw	r2,-20(fp)
 100ff28:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100ff2c:	003fe206 	br	100feb8 <__alt_data_end+0xff80feb8>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100ff30:	0001883a 	nop
 100ff34:	00000106 	br	100ff3c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 100ff38:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100ff3c:	e0bff917 	ldw	r2,-28(fp)
 100ff40:	10bfffec 	andhi	r2,r2,65535
 100ff44:	10000f26 	beq	r2,zero,100ff84 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100ff48:	e0bffb17 	ldw	r2,-20(fp)
 100ff4c:	10c00817 	ldw	r3,32(r2)
 100ff50:	00bfff84 	movi	r2,-2
 100ff54:	1886703a 	and	r3,r3,r2
 100ff58:	e0bffb17 	ldw	r2,-20(fp)
 100ff5c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100ff60:	e0bffc17 	ldw	r2,-16(fp)
 100ff64:	10800104 	addi	r2,r2,4
 100ff68:	1007883a 	mov	r3,r2
 100ff6c:	e0bffb17 	ldw	r2,-20(fp)
 100ff70:	10800817 	ldw	r2,32(r2)
 100ff74:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ff78:	e0bffc17 	ldw	r2,-16(fp)
 100ff7c:	10800104 	addi	r2,r2,4
 100ff80:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100ff84:	e0bffd17 	ldw	r2,-12(fp)
 100ff88:	1080800c 	andi	r2,r2,512
 100ff8c:	103fbe26 	beq	r2,zero,100fe88 <__alt_data_end+0xff80fe88>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100ff90:	e0bffd17 	ldw	r2,-12(fp)
 100ff94:	1004d43a 	srli	r2,r2,16
 100ff98:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100ff9c:	00001406 	br	100fff0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100ffa0:	e0bffc17 	ldw	r2,-16(fp)
 100ffa4:	e0fffb17 	ldw	r3,-20(fp)
 100ffa8:	18c00d17 	ldw	r3,52(r3)
 100ffac:	e13ffb17 	ldw	r4,-20(fp)
 100ffb0:	20c7883a 	add	r3,r4,r3
 100ffb4:	18c20e04 	addi	r3,r3,2104
 100ffb8:	18c00003 	ldbu	r3,0(r3)
 100ffbc:	18c03fcc 	andi	r3,r3,255
 100ffc0:	18c0201c 	xori	r3,r3,128
 100ffc4:	18ffe004 	addi	r3,r3,-128
 100ffc8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ffcc:	e0bffb17 	ldw	r2,-20(fp)
 100ffd0:	10800d17 	ldw	r2,52(r2)
 100ffd4:	10800044 	addi	r2,r2,1
 100ffd8:	10c1ffcc 	andi	r3,r2,2047
 100ffdc:	e0bffb17 	ldw	r2,-20(fp)
 100ffe0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100ffe4:	e0bffa17 	ldw	r2,-24(fp)
 100ffe8:	10bfffc4 	addi	r2,r2,-1
 100ffec:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100fff0:	e0bffa17 	ldw	r2,-24(fp)
 100fff4:	10000526 	beq	r2,zero,101000c <altera_avalon_jtag_uart_irq+0x1a8>
 100fff8:	e0bffb17 	ldw	r2,-20(fp)
 100fffc:	10c00d17 	ldw	r3,52(r2)
 1010000:	e0bffb17 	ldw	r2,-20(fp)
 1010004:	10800c17 	ldw	r2,48(r2)
 1010008:	18bfe51e 	bne	r3,r2,100ffa0 <__alt_data_end+0xff80ffa0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 101000c:	e0bffa17 	ldw	r2,-24(fp)
 1010010:	103f9d26 	beq	r2,zero,100fe88 <__alt_data_end+0xff80fe88>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1010014:	e0bffb17 	ldw	r2,-20(fp)
 1010018:	10c00817 	ldw	r3,32(r2)
 101001c:	00bfff44 	movi	r2,-3
 1010020:	1886703a 	and	r3,r3,r2
 1010024:	e0bffb17 	ldw	r2,-20(fp)
 1010028:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 101002c:	e0bffb17 	ldw	r2,-20(fp)
 1010030:	10800017 	ldw	r2,0(r2)
 1010034:	10800104 	addi	r2,r2,4
 1010038:	1007883a 	mov	r3,r2
 101003c:	e0bffb17 	ldw	r2,-20(fp)
 1010040:	10800817 	ldw	r2,32(r2)
 1010044:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1010048:	e0bffc17 	ldw	r2,-16(fp)
 101004c:	10800104 	addi	r2,r2,4
 1010050:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1010054:	003f8c06 	br	100fe88 <__alt_data_end+0xff80fe88>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1010058:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 101005c:	0001883a 	nop
 1010060:	e037883a 	mov	sp,fp
 1010064:	df000017 	ldw	fp,0(sp)
 1010068:	dec00104 	addi	sp,sp,4
 101006c:	f800283a 	ret

01010070 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1010070:	defff804 	addi	sp,sp,-32
 1010074:	df000715 	stw	fp,28(sp)
 1010078:	df000704 	addi	fp,sp,28
 101007c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1010080:	e0bffb17 	ldw	r2,-20(fp)
 1010084:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1010088:	e0bff917 	ldw	r2,-28(fp)
 101008c:	10800017 	ldw	r2,0(r2)
 1010090:	10800104 	addi	r2,r2,4
 1010094:	10800037 	ldwio	r2,0(r2)
 1010098:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 101009c:	e0bffa17 	ldw	r2,-24(fp)
 10100a0:	1081000c 	andi	r2,r2,1024
 10100a4:	10000b26 	beq	r2,zero,10100d4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10100a8:	e0bff917 	ldw	r2,-28(fp)
 10100ac:	10800017 	ldw	r2,0(r2)
 10100b0:	10800104 	addi	r2,r2,4
 10100b4:	1007883a 	mov	r3,r2
 10100b8:	e0bff917 	ldw	r2,-28(fp)
 10100bc:	10800817 	ldw	r2,32(r2)
 10100c0:	10810014 	ori	r2,r2,1024
 10100c4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 10100c8:	e0bff917 	ldw	r2,-28(fp)
 10100cc:	10000915 	stw	zero,36(r2)
 10100d0:	00000a06 	br	10100fc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10100d4:	e0bff917 	ldw	r2,-28(fp)
 10100d8:	10c00917 	ldw	r3,36(r2)
 10100dc:	00a00034 	movhi	r2,32768
 10100e0:	10bfff04 	addi	r2,r2,-4
 10100e4:	10c00536 	bltu	r2,r3,10100fc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 10100e8:	e0bff917 	ldw	r2,-28(fp)
 10100ec:	10800917 	ldw	r2,36(r2)
 10100f0:	10c00044 	addi	r3,r2,1
 10100f4:	e0bff917 	ldw	r2,-28(fp)
 10100f8:	10c00915 	stw	r3,36(r2)
 10100fc:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1010100:	e037883a 	mov	sp,fp
 1010104:	df000017 	ldw	fp,0(sp)
 1010108:	dec00104 	addi	sp,sp,4
 101010c:	f800283a 	ret

01010110 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1010110:	defffd04 	addi	sp,sp,-12
 1010114:	df000215 	stw	fp,8(sp)
 1010118:	df000204 	addi	fp,sp,8
 101011c:	e13ffe15 	stw	r4,-8(fp)
 1010120:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1010124:	00000506 	br	101013c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1010128:	e0bfff17 	ldw	r2,-4(fp)
 101012c:	1090000c 	andi	r2,r2,16384
 1010130:	10000226 	beq	r2,zero,101013c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1010134:	00bffd44 	movi	r2,-11
 1010138:	00000b06 	br	1010168 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101013c:	e0bffe17 	ldw	r2,-8(fp)
 1010140:	10c00d17 	ldw	r3,52(r2)
 1010144:	e0bffe17 	ldw	r2,-8(fp)
 1010148:	10800c17 	ldw	r2,48(r2)
 101014c:	18800526 	beq	r3,r2,1010164 <altera_avalon_jtag_uart_close+0x54>
 1010150:	e0bffe17 	ldw	r2,-8(fp)
 1010154:	10c00917 	ldw	r3,36(r2)
 1010158:	e0bffe17 	ldw	r2,-8(fp)
 101015c:	10800117 	ldw	r2,4(r2)
 1010160:	18bff136 	bltu	r3,r2,1010128 <__alt_data_end+0xff810128>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1010164:	0005883a 	mov	r2,zero
}
 1010168:	e037883a 	mov	sp,fp
 101016c:	df000017 	ldw	fp,0(sp)
 1010170:	dec00104 	addi	sp,sp,4
 1010174:	f800283a 	ret

01010178 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1010178:	defffa04 	addi	sp,sp,-24
 101017c:	df000515 	stw	fp,20(sp)
 1010180:	df000504 	addi	fp,sp,20
 1010184:	e13ffd15 	stw	r4,-12(fp)
 1010188:	e17ffe15 	stw	r5,-8(fp)
 101018c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1010190:	00bff9c4 	movi	r2,-25
 1010194:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1010198:	e0bffe17 	ldw	r2,-8(fp)
 101019c:	10da8060 	cmpeqi	r3,r2,27137
 10101a0:	1800031e 	bne	r3,zero,10101b0 <altera_avalon_jtag_uart_ioctl+0x38>
 10101a4:	109a80a0 	cmpeqi	r2,r2,27138
 10101a8:	1000181e 	bne	r2,zero,101020c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 10101ac:	00002906 	br	1010254 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10101b0:	e0bffd17 	ldw	r2,-12(fp)
 10101b4:	10c00117 	ldw	r3,4(r2)
 10101b8:	00a00034 	movhi	r2,32768
 10101bc:	10bfffc4 	addi	r2,r2,-1
 10101c0:	18802126 	beq	r3,r2,1010248 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 10101c4:	e0bfff17 	ldw	r2,-4(fp)
 10101c8:	10800017 	ldw	r2,0(r2)
 10101cc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10101d0:	e0bffc17 	ldw	r2,-16(fp)
 10101d4:	10800090 	cmplti	r2,r2,2
 10101d8:	1000061e 	bne	r2,zero,10101f4 <altera_avalon_jtag_uart_ioctl+0x7c>
 10101dc:	e0fffc17 	ldw	r3,-16(fp)
 10101e0:	00a00034 	movhi	r2,32768
 10101e4:	10bfffc4 	addi	r2,r2,-1
 10101e8:	18800226 	beq	r3,r2,10101f4 <altera_avalon_jtag_uart_ioctl+0x7c>
 10101ec:	e0bffc17 	ldw	r2,-16(fp)
 10101f0:	00000206 	br	10101fc <altera_avalon_jtag_uart_ioctl+0x84>
 10101f4:	00a00034 	movhi	r2,32768
 10101f8:	10bfff84 	addi	r2,r2,-2
 10101fc:	e0fffd17 	ldw	r3,-12(fp)
 1010200:	18800115 	stw	r2,4(r3)
      rc = 0;
 1010204:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1010208:	00000f06 	br	1010248 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 101020c:	e0bffd17 	ldw	r2,-12(fp)
 1010210:	10c00117 	ldw	r3,4(r2)
 1010214:	00a00034 	movhi	r2,32768
 1010218:	10bfffc4 	addi	r2,r2,-1
 101021c:	18800c26 	beq	r3,r2,1010250 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1010220:	e0bffd17 	ldw	r2,-12(fp)
 1010224:	10c00917 	ldw	r3,36(r2)
 1010228:	e0bffd17 	ldw	r2,-12(fp)
 101022c:	10800117 	ldw	r2,4(r2)
 1010230:	1885803a 	cmpltu	r2,r3,r2
 1010234:	10c03fcc 	andi	r3,r2,255
 1010238:	e0bfff17 	ldw	r2,-4(fp)
 101023c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1010240:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1010244:	00000206 	br	1010250 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1010248:	0001883a 	nop
 101024c:	00000106 	br	1010254 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1010250:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1010254:	e0bffb17 	ldw	r2,-20(fp)
}
 1010258:	e037883a 	mov	sp,fp
 101025c:	df000017 	ldw	fp,0(sp)
 1010260:	dec00104 	addi	sp,sp,4
 1010264:	f800283a 	ret

01010268 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1010268:	defff304 	addi	sp,sp,-52
 101026c:	dfc00c15 	stw	ra,48(sp)
 1010270:	df000b15 	stw	fp,44(sp)
 1010274:	df000b04 	addi	fp,sp,44
 1010278:	e13ffc15 	stw	r4,-16(fp)
 101027c:	e17ffd15 	stw	r5,-12(fp)
 1010280:	e1bffe15 	stw	r6,-8(fp)
 1010284:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1010288:	e0bffd17 	ldw	r2,-12(fp)
 101028c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1010290:	00004706 	br	10103b0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1010294:	e0bffc17 	ldw	r2,-16(fp)
 1010298:	10800a17 	ldw	r2,40(r2)
 101029c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10102a0:	e0bffc17 	ldw	r2,-16(fp)
 10102a4:	10800b17 	ldw	r2,44(r2)
 10102a8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 10102ac:	e0fff717 	ldw	r3,-36(fp)
 10102b0:	e0bff817 	ldw	r2,-32(fp)
 10102b4:	18800536 	bltu	r3,r2,10102cc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10102b8:	e0fff717 	ldw	r3,-36(fp)
 10102bc:	e0bff817 	ldw	r2,-32(fp)
 10102c0:	1885c83a 	sub	r2,r3,r2
 10102c4:	e0bff615 	stw	r2,-40(fp)
 10102c8:	00000406 	br	10102dc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10102cc:	00c20004 	movi	r3,2048
 10102d0:	e0bff817 	ldw	r2,-32(fp)
 10102d4:	1885c83a 	sub	r2,r3,r2
 10102d8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10102dc:	e0bff617 	ldw	r2,-40(fp)
 10102e0:	10001e26 	beq	r2,zero,101035c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 10102e4:	e0fffe17 	ldw	r3,-8(fp)
 10102e8:	e0bff617 	ldw	r2,-40(fp)
 10102ec:	1880022e 	bgeu	r3,r2,10102f8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 10102f0:	e0bffe17 	ldw	r2,-8(fp)
 10102f4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10102f8:	e0bffc17 	ldw	r2,-16(fp)
 10102fc:	10c00e04 	addi	r3,r2,56
 1010300:	e0bff817 	ldw	r2,-32(fp)
 1010304:	1885883a 	add	r2,r3,r2
 1010308:	e1bff617 	ldw	r6,-40(fp)
 101030c:	100b883a 	mov	r5,r2
 1010310:	e13ff517 	ldw	r4,-44(fp)
 1010314:	1007e780 	call	1007e78 <memcpy>
      ptr   += n;
 1010318:	e0fff517 	ldw	r3,-44(fp)
 101031c:	e0bff617 	ldw	r2,-40(fp)
 1010320:	1885883a 	add	r2,r3,r2
 1010324:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1010328:	e0fffe17 	ldw	r3,-8(fp)
 101032c:	e0bff617 	ldw	r2,-40(fp)
 1010330:	1885c83a 	sub	r2,r3,r2
 1010334:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010338:	e0fff817 	ldw	r3,-32(fp)
 101033c:	e0bff617 	ldw	r2,-40(fp)
 1010340:	1885883a 	add	r2,r3,r2
 1010344:	10c1ffcc 	andi	r3,r2,2047
 1010348:	e0bffc17 	ldw	r2,-16(fp)
 101034c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1010350:	e0bffe17 	ldw	r2,-8(fp)
 1010354:	00bfcf16 	blt	zero,r2,1010294 <__alt_data_end+0xff810294>
 1010358:	00000106 	br	1010360 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 101035c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1010360:	e0fff517 	ldw	r3,-44(fp)
 1010364:	e0bffd17 	ldw	r2,-12(fp)
 1010368:	1880141e 	bne	r3,r2,10103bc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 101036c:	e0bfff17 	ldw	r2,-4(fp)
 1010370:	1090000c 	andi	r2,r2,16384
 1010374:	1000131e 	bne	r2,zero,10103c4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1010378:	0001883a 	nop
 101037c:	e0bffc17 	ldw	r2,-16(fp)
 1010380:	10c00a17 	ldw	r3,40(r2)
 1010384:	e0bff717 	ldw	r2,-36(fp)
 1010388:	1880051e 	bne	r3,r2,10103a0 <altera_avalon_jtag_uart_read+0x138>
 101038c:	e0bffc17 	ldw	r2,-16(fp)
 1010390:	10c00917 	ldw	r3,36(r2)
 1010394:	e0bffc17 	ldw	r2,-16(fp)
 1010398:	10800117 	ldw	r2,4(r2)
 101039c:	18bff736 	bltu	r3,r2,101037c <__alt_data_end+0xff81037c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10103a0:	e0bffc17 	ldw	r2,-16(fp)
 10103a4:	10c00a17 	ldw	r3,40(r2)
 10103a8:	e0bff717 	ldw	r2,-36(fp)
 10103ac:	18800726 	beq	r3,r2,10103cc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10103b0:	e0bffe17 	ldw	r2,-8(fp)
 10103b4:	00bfb716 	blt	zero,r2,1010294 <__alt_data_end+0xff810294>
 10103b8:	00000506 	br	10103d0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 10103bc:	0001883a 	nop
 10103c0:	00000306 	br	10103d0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 10103c4:	0001883a 	nop
 10103c8:	00000106 	br	10103d0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 10103cc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10103d0:	e0fff517 	ldw	r3,-44(fp)
 10103d4:	e0bffd17 	ldw	r2,-12(fp)
 10103d8:	18801826 	beq	r3,r2,101043c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10103dc:	0005303a 	rdctl	r2,status
 10103e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10103e4:	e0fffb17 	ldw	r3,-20(fp)
 10103e8:	00bfff84 	movi	r2,-2
 10103ec:	1884703a 	and	r2,r3,r2
 10103f0:	1001703a 	wrctl	status,r2
  
  return context;
 10103f4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10103f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10103fc:	e0bffc17 	ldw	r2,-16(fp)
 1010400:	10800817 	ldw	r2,32(r2)
 1010404:	10c00054 	ori	r3,r2,1
 1010408:	e0bffc17 	ldw	r2,-16(fp)
 101040c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1010410:	e0bffc17 	ldw	r2,-16(fp)
 1010414:	10800017 	ldw	r2,0(r2)
 1010418:	10800104 	addi	r2,r2,4
 101041c:	1007883a 	mov	r3,r2
 1010420:	e0bffc17 	ldw	r2,-16(fp)
 1010424:	10800817 	ldw	r2,32(r2)
 1010428:	18800035 	stwio	r2,0(r3)
 101042c:	e0bffa17 	ldw	r2,-24(fp)
 1010430:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010434:	e0bff917 	ldw	r2,-28(fp)
 1010438:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 101043c:	e0fff517 	ldw	r3,-44(fp)
 1010440:	e0bffd17 	ldw	r2,-12(fp)
 1010444:	18800426 	beq	r3,r2,1010458 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1010448:	e0fff517 	ldw	r3,-44(fp)
 101044c:	e0bffd17 	ldw	r2,-12(fp)
 1010450:	1885c83a 	sub	r2,r3,r2
 1010454:	00000606 	br	1010470 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1010458:	e0bfff17 	ldw	r2,-4(fp)
 101045c:	1090000c 	andi	r2,r2,16384
 1010460:	10000226 	beq	r2,zero,101046c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1010464:	00bffd44 	movi	r2,-11
 1010468:	00000106 	br	1010470 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 101046c:	00bffec4 	movi	r2,-5
}
 1010470:	e037883a 	mov	sp,fp
 1010474:	dfc00117 	ldw	ra,4(sp)
 1010478:	df000017 	ldw	fp,0(sp)
 101047c:	dec00204 	addi	sp,sp,8
 1010480:	f800283a 	ret

01010484 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1010484:	defff304 	addi	sp,sp,-52
 1010488:	dfc00c15 	stw	ra,48(sp)
 101048c:	df000b15 	stw	fp,44(sp)
 1010490:	df000b04 	addi	fp,sp,44
 1010494:	e13ffc15 	stw	r4,-16(fp)
 1010498:	e17ffd15 	stw	r5,-12(fp)
 101049c:	e1bffe15 	stw	r6,-8(fp)
 10104a0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10104a4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10104a8:	e0bffd17 	ldw	r2,-12(fp)
 10104ac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10104b0:	00003706 	br	1010590 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10104b4:	e0bffc17 	ldw	r2,-16(fp)
 10104b8:	10800c17 	ldw	r2,48(r2)
 10104bc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 10104c0:	e0bffc17 	ldw	r2,-16(fp)
 10104c4:	10800d17 	ldw	r2,52(r2)
 10104c8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 10104cc:	e0fff917 	ldw	r3,-28(fp)
 10104d0:	e0bff517 	ldw	r2,-44(fp)
 10104d4:	1880062e 	bgeu	r3,r2,10104f0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10104d8:	e0fff517 	ldw	r3,-44(fp)
 10104dc:	e0bff917 	ldw	r2,-28(fp)
 10104e0:	1885c83a 	sub	r2,r3,r2
 10104e4:	10bfffc4 	addi	r2,r2,-1
 10104e8:	e0bff615 	stw	r2,-40(fp)
 10104ec:	00000b06 	br	101051c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 10104f0:	e0bff517 	ldw	r2,-44(fp)
 10104f4:	10000526 	beq	r2,zero,101050c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10104f8:	00c20004 	movi	r3,2048
 10104fc:	e0bff917 	ldw	r2,-28(fp)
 1010500:	1885c83a 	sub	r2,r3,r2
 1010504:	e0bff615 	stw	r2,-40(fp)
 1010508:	00000406 	br	101051c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 101050c:	00c1ffc4 	movi	r3,2047
 1010510:	e0bff917 	ldw	r2,-28(fp)
 1010514:	1885c83a 	sub	r2,r3,r2
 1010518:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 101051c:	e0bff617 	ldw	r2,-40(fp)
 1010520:	10001e26 	beq	r2,zero,101059c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1010524:	e0fffe17 	ldw	r3,-8(fp)
 1010528:	e0bff617 	ldw	r2,-40(fp)
 101052c:	1880022e 	bgeu	r3,r2,1010538 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1010530:	e0bffe17 	ldw	r2,-8(fp)
 1010534:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1010538:	e0bffc17 	ldw	r2,-16(fp)
 101053c:	10c20e04 	addi	r3,r2,2104
 1010540:	e0bff917 	ldw	r2,-28(fp)
 1010544:	1885883a 	add	r2,r3,r2
 1010548:	e1bff617 	ldw	r6,-40(fp)
 101054c:	e17ffd17 	ldw	r5,-12(fp)
 1010550:	1009883a 	mov	r4,r2
 1010554:	1007e780 	call	1007e78 <memcpy>
      ptr   += n;
 1010558:	e0fffd17 	ldw	r3,-12(fp)
 101055c:	e0bff617 	ldw	r2,-40(fp)
 1010560:	1885883a 	add	r2,r3,r2
 1010564:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1010568:	e0fffe17 	ldw	r3,-8(fp)
 101056c:	e0bff617 	ldw	r2,-40(fp)
 1010570:	1885c83a 	sub	r2,r3,r2
 1010574:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010578:	e0fff917 	ldw	r3,-28(fp)
 101057c:	e0bff617 	ldw	r2,-40(fp)
 1010580:	1885883a 	add	r2,r3,r2
 1010584:	10c1ffcc 	andi	r3,r2,2047
 1010588:	e0bffc17 	ldw	r2,-16(fp)
 101058c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1010590:	e0bffe17 	ldw	r2,-8(fp)
 1010594:	00bfc716 	blt	zero,r2,10104b4 <__alt_data_end+0xff8104b4>
 1010598:	00000106 	br	10105a0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 101059c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10105a0:	0005303a 	rdctl	r2,status
 10105a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10105a8:	e0fffb17 	ldw	r3,-20(fp)
 10105ac:	00bfff84 	movi	r2,-2
 10105b0:	1884703a 	and	r2,r3,r2
 10105b4:	1001703a 	wrctl	status,r2
  
  return context;
 10105b8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10105bc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10105c0:	e0bffc17 	ldw	r2,-16(fp)
 10105c4:	10800817 	ldw	r2,32(r2)
 10105c8:	10c00094 	ori	r3,r2,2
 10105cc:	e0bffc17 	ldw	r2,-16(fp)
 10105d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10105d4:	e0bffc17 	ldw	r2,-16(fp)
 10105d8:	10800017 	ldw	r2,0(r2)
 10105dc:	10800104 	addi	r2,r2,4
 10105e0:	1007883a 	mov	r3,r2
 10105e4:	e0bffc17 	ldw	r2,-16(fp)
 10105e8:	10800817 	ldw	r2,32(r2)
 10105ec:	18800035 	stwio	r2,0(r3)
 10105f0:	e0bffa17 	ldw	r2,-24(fp)
 10105f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10105f8:	e0bff817 	ldw	r2,-32(fp)
 10105fc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1010600:	e0bffe17 	ldw	r2,-8(fp)
 1010604:	0080100e 	bge	zero,r2,1010648 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1010608:	e0bfff17 	ldw	r2,-4(fp)
 101060c:	1090000c 	andi	r2,r2,16384
 1010610:	1000101e 	bne	r2,zero,1010654 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1010614:	0001883a 	nop
 1010618:	e0bffc17 	ldw	r2,-16(fp)
 101061c:	10c00d17 	ldw	r3,52(r2)
 1010620:	e0bff517 	ldw	r2,-44(fp)
 1010624:	1880051e 	bne	r3,r2,101063c <altera_avalon_jtag_uart_write+0x1b8>
 1010628:	e0bffc17 	ldw	r2,-16(fp)
 101062c:	10c00917 	ldw	r3,36(r2)
 1010630:	e0bffc17 	ldw	r2,-16(fp)
 1010634:	10800117 	ldw	r2,4(r2)
 1010638:	18bff736 	bltu	r3,r2,1010618 <__alt_data_end+0xff810618>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 101063c:	e0bffc17 	ldw	r2,-16(fp)
 1010640:	10800917 	ldw	r2,36(r2)
 1010644:	1000051e 	bne	r2,zero,101065c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1010648:	e0bffe17 	ldw	r2,-8(fp)
 101064c:	00bfd016 	blt	zero,r2,1010590 <__alt_data_end+0xff810590>
 1010650:	00000306 	br	1010660 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1010654:	0001883a 	nop
 1010658:	00000106 	br	1010660 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 101065c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1010660:	e0fffd17 	ldw	r3,-12(fp)
 1010664:	e0bff717 	ldw	r2,-36(fp)
 1010668:	18800426 	beq	r3,r2,101067c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 101066c:	e0fffd17 	ldw	r3,-12(fp)
 1010670:	e0bff717 	ldw	r2,-36(fp)
 1010674:	1885c83a 	sub	r2,r3,r2
 1010678:	00000606 	br	1010694 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 101067c:	e0bfff17 	ldw	r2,-4(fp)
 1010680:	1090000c 	andi	r2,r2,16384
 1010684:	10000226 	beq	r2,zero,1010690 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1010688:	00bffd44 	movi	r2,-11
 101068c:	00000106 	br	1010694 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1010690:	00bffec4 	movi	r2,-5
}
 1010694:	e037883a 	mov	sp,fp
 1010698:	dfc00117 	ldw	ra,4(sp)
 101069c:	df000017 	ldw	fp,0(sp)
 10106a0:	dec00204 	addi	sp,sp,8
 10106a4:	f800283a 	ret

010106a8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10106a8:	defff504 	addi	sp,sp,-44
 10106ac:	df000a15 	stw	fp,40(sp)
 10106b0:	df000a04 	addi	fp,sp,40
 10106b4:	e13ffc15 	stw	r4,-16(fp)
 10106b8:	e17ffd15 	stw	r5,-12(fp)
 10106bc:	e1bffe15 	stw	r6,-8(fp)
 10106c0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10106c4:	e03ff615 	stw	zero,-40(fp)
 10106c8:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
 10106cc:	10003c26 	beq	r2,zero,10107c0 <alt_alarm_start+0x118>
  {
    if (alarm)
 10106d0:	e0bffc17 	ldw	r2,-16(fp)
 10106d4:	10003826 	beq	r2,zero,10107b8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 10106d8:	e0bffc17 	ldw	r2,-16(fp)
 10106dc:	e0fffe17 	ldw	r3,-8(fp)
 10106e0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 10106e4:	e0bffc17 	ldw	r2,-16(fp)
 10106e8:	e0ffff17 	ldw	r3,-4(fp)
 10106ec:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10106f0:	0005303a 	rdctl	r2,status
 10106f4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10106f8:	e0fff917 	ldw	r3,-28(fp)
 10106fc:	00bfff84 	movi	r2,-2
 1010700:	1884703a 	and	r2,r3,r2
 1010704:	1001703a 	wrctl	status,r2
  
  return context;
 1010708:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 101070c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1010710:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
 1010714:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1010718:	e0fffd17 	ldw	r3,-12(fp)
 101071c:	e0bff617 	ldw	r2,-40(fp)
 1010720:	1885883a 	add	r2,r3,r2
 1010724:	10c00044 	addi	r3,r2,1
 1010728:	e0bffc17 	ldw	r2,-16(fp)
 101072c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1010730:	e0bffc17 	ldw	r2,-16(fp)
 1010734:	10c00217 	ldw	r3,8(r2)
 1010738:	e0bff617 	ldw	r2,-40(fp)
 101073c:	1880042e 	bgeu	r3,r2,1010750 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1010740:	e0bffc17 	ldw	r2,-16(fp)
 1010744:	00c00044 	movi	r3,1
 1010748:	10c00405 	stb	r3,16(r2)
 101074c:	00000206 	br	1010758 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1010750:	e0bffc17 	ldw	r2,-16(fp)
 1010754:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1010758:	e0bffc17 	ldw	r2,-16(fp)
 101075c:	d0e00e04 	addi	r3,gp,-32712
 1010760:	e0fffa15 	stw	r3,-24(fp)
 1010764:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1010768:	e0bffb17 	ldw	r2,-20(fp)
 101076c:	e0fffa17 	ldw	r3,-24(fp)
 1010770:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1010774:	e0bffa17 	ldw	r2,-24(fp)
 1010778:	10c00017 	ldw	r3,0(r2)
 101077c:	e0bffb17 	ldw	r2,-20(fp)
 1010780:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010784:	e0bffa17 	ldw	r2,-24(fp)
 1010788:	10800017 	ldw	r2,0(r2)
 101078c:	e0fffb17 	ldw	r3,-20(fp)
 1010790:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1010794:	e0bffa17 	ldw	r2,-24(fp)
 1010798:	e0fffb17 	ldw	r3,-20(fp)
 101079c:	10c00015 	stw	r3,0(r2)
 10107a0:	e0bff817 	ldw	r2,-32(fp)
 10107a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10107a8:	e0bff717 	ldw	r2,-36(fp)
 10107ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10107b0:	0005883a 	mov	r2,zero
 10107b4:	00000306 	br	10107c4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 10107b8:	00bffa84 	movi	r2,-22
 10107bc:	00000106 	br	10107c4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 10107c0:	00bfde84 	movi	r2,-134
  }
}
 10107c4:	e037883a 	mov	sp,fp
 10107c8:	df000017 	ldw	fp,0(sp)
 10107cc:	dec00104 	addi	sp,sp,4
 10107d0:	f800283a 	ret

010107d4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 10107d4:	defffa04 	addi	sp,sp,-24
 10107d8:	dfc00515 	stw	ra,20(sp)
 10107dc:	df000415 	stw	fp,16(sp)
 10107e0:	df000404 	addi	fp,sp,16
 10107e4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 10107e8:	00800244 	movi	r2,9
 10107ec:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 10107f0:	014003f4 	movhi	r5,15
 10107f4:	29509004 	addi	r5,r5,16960
 10107f8:	e13ffd17 	ldw	r4,-12(fp)
 10107fc:	100c8f80 	call	100c8f8 <__mulsi3>
 1010800:	100b883a 	mov	r5,r2
 1010804:	0100bef4 	movhi	r4,763
 1010808:	213c2004 	addi	r4,r4,-3968
 101080c:	100c83c0 	call	100c83c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1010810:	100b883a 	mov	r5,r2
 1010814:	01200034 	movhi	r4,32768
 1010818:	213fffc4 	addi	r4,r4,-1
 101081c:	100c83c0 	call	100c83c <__udivsi3>
 1010820:	100b883a 	mov	r5,r2
 1010824:	e13fff17 	ldw	r4,-4(fp)
 1010828:	100c83c0 	call	100c83c <__udivsi3>
 101082c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1010830:	e0bffe17 	ldw	r2,-8(fp)
 1010834:	10002a26 	beq	r2,zero,10108e0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1010838:	e03ffc15 	stw	zero,-16(fp)
 101083c:	00001706 	br	101089c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1010840:	00a00034 	movhi	r2,32768
 1010844:	10bfffc4 	addi	r2,r2,-1
 1010848:	10bfffc4 	addi	r2,r2,-1
 101084c:	103ffe1e 	bne	r2,zero,1010848 <__alt_data_end+0xff810848>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1010850:	014003f4 	movhi	r5,15
 1010854:	29509004 	addi	r5,r5,16960
 1010858:	e13ffd17 	ldw	r4,-12(fp)
 101085c:	100c8f80 	call	100c8f8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1010860:	100b883a 	mov	r5,r2
 1010864:	0100bef4 	movhi	r4,763
 1010868:	213c2004 	addi	r4,r4,-3968
 101086c:	100c83c0 	call	100c83c <__udivsi3>
 1010870:	100b883a 	mov	r5,r2
 1010874:	01200034 	movhi	r4,32768
 1010878:	213fffc4 	addi	r4,r4,-1
 101087c:	100c83c0 	call	100c83c <__udivsi3>
 1010880:	1007883a 	mov	r3,r2
 1010884:	e0bfff17 	ldw	r2,-4(fp)
 1010888:	10c5c83a 	sub	r2,r2,r3
 101088c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1010890:	e0bffc17 	ldw	r2,-16(fp)
 1010894:	10800044 	addi	r2,r2,1
 1010898:	e0bffc15 	stw	r2,-16(fp)
 101089c:	e0fffc17 	ldw	r3,-16(fp)
 10108a0:	e0bffe17 	ldw	r2,-8(fp)
 10108a4:	18bfe616 	blt	r3,r2,1010840 <__alt_data_end+0xff810840>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10108a8:	014003f4 	movhi	r5,15
 10108ac:	29509004 	addi	r5,r5,16960
 10108b0:	e13ffd17 	ldw	r4,-12(fp)
 10108b4:	100c8f80 	call	100c8f8 <__mulsi3>
 10108b8:	100b883a 	mov	r5,r2
 10108bc:	0100bef4 	movhi	r4,763
 10108c0:	213c2004 	addi	r4,r4,-3968
 10108c4:	100c83c0 	call	100c83c <__udivsi3>
 10108c8:	e17fff17 	ldw	r5,-4(fp)
 10108cc:	1009883a 	mov	r4,r2
 10108d0:	100c8f80 	call	100c8f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10108d4:	10bfffc4 	addi	r2,r2,-1
 10108d8:	103ffe1e 	bne	r2,zero,10108d4 <__alt_data_end+0xff8108d4>
 10108dc:	00000d06 	br	1010914 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10108e0:	014003f4 	movhi	r5,15
 10108e4:	29509004 	addi	r5,r5,16960
 10108e8:	e13ffd17 	ldw	r4,-12(fp)
 10108ec:	100c8f80 	call	100c8f8 <__mulsi3>
 10108f0:	100b883a 	mov	r5,r2
 10108f4:	0100bef4 	movhi	r4,763
 10108f8:	213c2004 	addi	r4,r4,-3968
 10108fc:	100c83c0 	call	100c83c <__udivsi3>
 1010900:	e17fff17 	ldw	r5,-4(fp)
 1010904:	1009883a 	mov	r4,r2
 1010908:	100c8f80 	call	100c8f8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 101090c:	10bfffc4 	addi	r2,r2,-1
 1010910:	00bffe16 	blt	zero,r2,101090c <__alt_data_end+0xff81090c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1010914:	0005883a 	mov	r2,zero
}
 1010918:	e037883a 	mov	sp,fp
 101091c:	dfc00117 	ldw	ra,4(sp)
 1010920:	df000017 	ldw	fp,0(sp)
 1010924:	dec00204 	addi	sp,sp,8
 1010928:	f800283a 	ret

0101092c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 101092c:	deffff04 	addi	sp,sp,-4
 1010930:	df000015 	stw	fp,0(sp)
 1010934:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1010938:	0001883a 	nop
 101093c:	e037883a 	mov	sp,fp
 1010940:	df000017 	ldw	fp,0(sp)
 1010944:	dec00104 	addi	sp,sp,4
 1010948:	f800283a 	ret

0101094c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 101094c:	defffe04 	addi	sp,sp,-8
 1010950:	dfc00115 	stw	ra,4(sp)
 1010954:	df000015 	stw	fp,0(sp)
 1010958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 101095c:	d0a00b17 	ldw	r2,-32724(gp)
 1010960:	10000326 	beq	r2,zero,1010970 <alt_get_errno+0x24>
 1010964:	d0a00b17 	ldw	r2,-32724(gp)
 1010968:	103ee83a 	callr	r2
 101096c:	00000106 	br	1010974 <alt_get_errno+0x28>
 1010970:	d0a6d204 	addi	r2,gp,-25784
}
 1010974:	e037883a 	mov	sp,fp
 1010978:	dfc00117 	ldw	ra,4(sp)
 101097c:	df000017 	ldw	fp,0(sp)
 1010980:	dec00204 	addi	sp,sp,8
 1010984:	f800283a 	ret

01010988 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1010988:	defffa04 	addi	sp,sp,-24
 101098c:	dfc00515 	stw	ra,20(sp)
 1010990:	df000415 	stw	fp,16(sp)
 1010994:	df000404 	addi	fp,sp,16
 1010998:	e13ffe15 	stw	r4,-8(fp)
 101099c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10109a0:	e0bffe17 	ldw	r2,-8(fp)
 10109a4:	10000326 	beq	r2,zero,10109b4 <alt_dev_llist_insert+0x2c>
 10109a8:	e0bffe17 	ldw	r2,-8(fp)
 10109ac:	10800217 	ldw	r2,8(r2)
 10109b0:	1000061e 	bne	r2,zero,10109cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 10109b4:	101094c0 	call	101094c <alt_get_errno>
 10109b8:	1007883a 	mov	r3,r2
 10109bc:	00800584 	movi	r2,22
 10109c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10109c4:	00bffa84 	movi	r2,-22
 10109c8:	00001306 	br	1010a18 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10109cc:	e0bffe17 	ldw	r2,-8(fp)
 10109d0:	e0ffff17 	ldw	r3,-4(fp)
 10109d4:	e0fffc15 	stw	r3,-16(fp)
 10109d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10109dc:	e0bffd17 	ldw	r2,-12(fp)
 10109e0:	e0fffc17 	ldw	r3,-16(fp)
 10109e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 10109e8:	e0bffc17 	ldw	r2,-16(fp)
 10109ec:	10c00017 	ldw	r3,0(r2)
 10109f0:	e0bffd17 	ldw	r2,-12(fp)
 10109f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10109f8:	e0bffc17 	ldw	r2,-16(fp)
 10109fc:	10800017 	ldw	r2,0(r2)
 1010a00:	e0fffd17 	ldw	r3,-12(fp)
 1010a04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1010a08:	e0bffc17 	ldw	r2,-16(fp)
 1010a0c:	e0fffd17 	ldw	r3,-12(fp)
 1010a10:	10c00015 	stw	r3,0(r2)

  return 0;  
 1010a14:	0005883a 	mov	r2,zero
}
 1010a18:	e037883a 	mov	sp,fp
 1010a1c:	dfc00117 	ldw	ra,4(sp)
 1010a20:	df000017 	ldw	fp,0(sp)
 1010a24:	dec00204 	addi	sp,sp,8
 1010a28:	f800283a 	ret

01010a2c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1010a2c:	defffd04 	addi	sp,sp,-12
 1010a30:	dfc00215 	stw	ra,8(sp)
 1010a34:	df000115 	stw	fp,4(sp)
 1010a38:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010a3c:	00804074 	movhi	r2,257
 1010a40:	10867804 	addi	r2,r2,6624
 1010a44:	e0bfff15 	stw	r2,-4(fp)
 1010a48:	00000606 	br	1010a64 <_do_ctors+0x38>
        (*ctor) (); 
 1010a4c:	e0bfff17 	ldw	r2,-4(fp)
 1010a50:	10800017 	ldw	r2,0(r2)
 1010a54:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010a58:	e0bfff17 	ldw	r2,-4(fp)
 1010a5c:	10bfff04 	addi	r2,r2,-4
 1010a60:	e0bfff15 	stw	r2,-4(fp)
 1010a64:	e0ffff17 	ldw	r3,-4(fp)
 1010a68:	00804074 	movhi	r2,257
 1010a6c:	10867904 	addi	r2,r2,6628
 1010a70:	18bff62e 	bgeu	r3,r2,1010a4c <__alt_data_end+0xff810a4c>
        (*ctor) (); 
}
 1010a74:	0001883a 	nop
 1010a78:	e037883a 	mov	sp,fp
 1010a7c:	dfc00117 	ldw	ra,4(sp)
 1010a80:	df000017 	ldw	fp,0(sp)
 1010a84:	dec00204 	addi	sp,sp,8
 1010a88:	f800283a 	ret

01010a8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1010a8c:	defffd04 	addi	sp,sp,-12
 1010a90:	dfc00215 	stw	ra,8(sp)
 1010a94:	df000115 	stw	fp,4(sp)
 1010a98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010a9c:	00804074 	movhi	r2,257
 1010aa0:	10867804 	addi	r2,r2,6624
 1010aa4:	e0bfff15 	stw	r2,-4(fp)
 1010aa8:	00000606 	br	1010ac4 <_do_dtors+0x38>
        (*dtor) (); 
 1010aac:	e0bfff17 	ldw	r2,-4(fp)
 1010ab0:	10800017 	ldw	r2,0(r2)
 1010ab4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010ab8:	e0bfff17 	ldw	r2,-4(fp)
 1010abc:	10bfff04 	addi	r2,r2,-4
 1010ac0:	e0bfff15 	stw	r2,-4(fp)
 1010ac4:	e0ffff17 	ldw	r3,-4(fp)
 1010ac8:	00804074 	movhi	r2,257
 1010acc:	10867904 	addi	r2,r2,6628
 1010ad0:	18bff62e 	bgeu	r3,r2,1010aac <__alt_data_end+0xff810aac>
        (*dtor) (); 
}
 1010ad4:	0001883a 	nop
 1010ad8:	e037883a 	mov	sp,fp
 1010adc:	dfc00117 	ldw	ra,4(sp)
 1010ae0:	df000017 	ldw	fp,0(sp)
 1010ae4:	dec00204 	addi	sp,sp,8
 1010ae8:	f800283a 	ret

01010aec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1010aec:	deffff04 	addi	sp,sp,-4
 1010af0:	df000015 	stw	fp,0(sp)
 1010af4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1010af8:	0001883a 	nop
 1010afc:	e037883a 	mov	sp,fp
 1010b00:	df000017 	ldw	fp,0(sp)
 1010b04:	dec00104 	addi	sp,sp,4
 1010b08:	f800283a 	ret

01010b0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010b0c:	defff904 	addi	sp,sp,-28
 1010b10:	dfc00615 	stw	ra,24(sp)
 1010b14:	df000515 	stw	fp,20(sp)
 1010b18:	df000504 	addi	fp,sp,20
 1010b1c:	e13ffc15 	stw	r4,-16(fp)
 1010b20:	e17ffd15 	stw	r5,-12(fp)
 1010b24:	e1bffe15 	stw	r6,-8(fp)
 1010b28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1010b2c:	e0800217 	ldw	r2,8(fp)
 1010b30:	d8800015 	stw	r2,0(sp)
 1010b34:	e1ffff17 	ldw	r7,-4(fp)
 1010b38:	e1bffe17 	ldw	r6,-8(fp)
 1010b3c:	e17ffd17 	ldw	r5,-12(fp)
 1010b40:	e13ffc17 	ldw	r4,-16(fp)
 1010b44:	1010cbc0 	call	1010cbc <alt_iic_isr_register>
}  
 1010b48:	e037883a 	mov	sp,fp
 1010b4c:	dfc00117 	ldw	ra,4(sp)
 1010b50:	df000017 	ldw	fp,0(sp)
 1010b54:	dec00204 	addi	sp,sp,8
 1010b58:	f800283a 	ret

01010b5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1010b5c:	defff904 	addi	sp,sp,-28
 1010b60:	df000615 	stw	fp,24(sp)
 1010b64:	df000604 	addi	fp,sp,24
 1010b68:	e13ffe15 	stw	r4,-8(fp)
 1010b6c:	e17fff15 	stw	r5,-4(fp)
 1010b70:	e0bfff17 	ldw	r2,-4(fp)
 1010b74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010b78:	0005303a 	rdctl	r2,status
 1010b7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010b80:	e0fffb17 	ldw	r3,-20(fp)
 1010b84:	00bfff84 	movi	r2,-2
 1010b88:	1884703a 	and	r2,r3,r2
 1010b8c:	1001703a 	wrctl	status,r2
  
  return context;
 1010b90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010b94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1010b98:	00c00044 	movi	r3,1
 1010b9c:	e0bffa17 	ldw	r2,-24(fp)
 1010ba0:	1884983a 	sll	r2,r3,r2
 1010ba4:	1007883a 	mov	r3,r2
 1010ba8:	d0a6d617 	ldw	r2,-25768(gp)
 1010bac:	1884b03a 	or	r2,r3,r2
 1010bb0:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010bb4:	d0a6d617 	ldw	r2,-25768(gp)
 1010bb8:	100170fa 	wrctl	ienable,r2
 1010bbc:	e0bffc17 	ldw	r2,-16(fp)
 1010bc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010bc4:	e0bffd17 	ldw	r2,-12(fp)
 1010bc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010bcc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1010bd0:	0001883a 	nop
}
 1010bd4:	e037883a 	mov	sp,fp
 1010bd8:	df000017 	ldw	fp,0(sp)
 1010bdc:	dec00104 	addi	sp,sp,4
 1010be0:	f800283a 	ret

01010be4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1010be4:	defff904 	addi	sp,sp,-28
 1010be8:	df000615 	stw	fp,24(sp)
 1010bec:	df000604 	addi	fp,sp,24
 1010bf0:	e13ffe15 	stw	r4,-8(fp)
 1010bf4:	e17fff15 	stw	r5,-4(fp)
 1010bf8:	e0bfff17 	ldw	r2,-4(fp)
 1010bfc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010c00:	0005303a 	rdctl	r2,status
 1010c04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010c08:	e0fffb17 	ldw	r3,-20(fp)
 1010c0c:	00bfff84 	movi	r2,-2
 1010c10:	1884703a 	and	r2,r3,r2
 1010c14:	1001703a 	wrctl	status,r2
  
  return context;
 1010c18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010c1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1010c20:	00c00044 	movi	r3,1
 1010c24:	e0bffa17 	ldw	r2,-24(fp)
 1010c28:	1884983a 	sll	r2,r3,r2
 1010c2c:	0084303a 	nor	r2,zero,r2
 1010c30:	1007883a 	mov	r3,r2
 1010c34:	d0a6d617 	ldw	r2,-25768(gp)
 1010c38:	1884703a 	and	r2,r3,r2
 1010c3c:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010c40:	d0a6d617 	ldw	r2,-25768(gp)
 1010c44:	100170fa 	wrctl	ienable,r2
 1010c48:	e0bffc17 	ldw	r2,-16(fp)
 1010c4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010c50:	e0bffd17 	ldw	r2,-12(fp)
 1010c54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010c58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 1010c5c:	0001883a 	nop
}
 1010c60:	e037883a 	mov	sp,fp
 1010c64:	df000017 	ldw	fp,0(sp)
 1010c68:	dec00104 	addi	sp,sp,4
 1010c6c:	f800283a 	ret

01010c70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1010c70:	defffc04 	addi	sp,sp,-16
 1010c74:	df000315 	stw	fp,12(sp)
 1010c78:	df000304 	addi	fp,sp,12
 1010c7c:	e13ffe15 	stw	r4,-8(fp)
 1010c80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1010c84:	000530fa 	rdctl	r2,ienable
 1010c88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1010c8c:	00c00044 	movi	r3,1
 1010c90:	e0bfff17 	ldw	r2,-4(fp)
 1010c94:	1884983a 	sll	r2,r3,r2
 1010c98:	1007883a 	mov	r3,r2
 1010c9c:	e0bffd17 	ldw	r2,-12(fp)
 1010ca0:	1884703a 	and	r2,r3,r2
 1010ca4:	1004c03a 	cmpne	r2,r2,zero
 1010ca8:	10803fcc 	andi	r2,r2,255
}
 1010cac:	e037883a 	mov	sp,fp
 1010cb0:	df000017 	ldw	fp,0(sp)
 1010cb4:	dec00104 	addi	sp,sp,4
 1010cb8:	f800283a 	ret

01010cbc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010cbc:	defff504 	addi	sp,sp,-44
 1010cc0:	dfc00a15 	stw	ra,40(sp)
 1010cc4:	df000915 	stw	fp,36(sp)
 1010cc8:	df000904 	addi	fp,sp,36
 1010ccc:	e13ffc15 	stw	r4,-16(fp)
 1010cd0:	e17ffd15 	stw	r5,-12(fp)
 1010cd4:	e1bffe15 	stw	r6,-8(fp)
 1010cd8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1010cdc:	00bffa84 	movi	r2,-22
 1010ce0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1010ce4:	e0bffd17 	ldw	r2,-12(fp)
 1010ce8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1010cec:	e0bff817 	ldw	r2,-32(fp)
 1010cf0:	10800808 	cmpgei	r2,r2,32
 1010cf4:	1000271e 	bne	r2,zero,1010d94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010cf8:	0005303a 	rdctl	r2,status
 1010cfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010d00:	e0fffb17 	ldw	r3,-20(fp)
 1010d04:	00bfff84 	movi	r2,-2
 1010d08:	1884703a 	and	r2,r3,r2
 1010d0c:	1001703a 	wrctl	status,r2
  
  return context;
 1010d10:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1010d14:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1010d18:	00804074 	movhi	r2,257
 1010d1c:	1096a604 	addi	r2,r2,23192
 1010d20:	e0fff817 	ldw	r3,-32(fp)
 1010d24:	180690fa 	slli	r3,r3,3
 1010d28:	10c5883a 	add	r2,r2,r3
 1010d2c:	e0fffe17 	ldw	r3,-8(fp)
 1010d30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1010d34:	00804074 	movhi	r2,257
 1010d38:	1096a604 	addi	r2,r2,23192
 1010d3c:	e0fff817 	ldw	r3,-32(fp)
 1010d40:	180690fa 	slli	r3,r3,3
 1010d44:	10c5883a 	add	r2,r2,r3
 1010d48:	10800104 	addi	r2,r2,4
 1010d4c:	e0ffff17 	ldw	r3,-4(fp)
 1010d50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1010d54:	e0bffe17 	ldw	r2,-8(fp)
 1010d58:	10000526 	beq	r2,zero,1010d70 <alt_iic_isr_register+0xb4>
 1010d5c:	e0bff817 	ldw	r2,-32(fp)
 1010d60:	100b883a 	mov	r5,r2
 1010d64:	e13ffc17 	ldw	r4,-16(fp)
 1010d68:	1010b5c0 	call	1010b5c <alt_ic_irq_enable>
 1010d6c:	00000406 	br	1010d80 <alt_iic_isr_register+0xc4>
 1010d70:	e0bff817 	ldw	r2,-32(fp)
 1010d74:	100b883a 	mov	r5,r2
 1010d78:	e13ffc17 	ldw	r4,-16(fp)
 1010d7c:	1010be40 	call	1010be4 <alt_ic_irq_disable>
 1010d80:	e0bff715 	stw	r2,-36(fp)
 1010d84:	e0bffa17 	ldw	r2,-24(fp)
 1010d88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010d8c:	e0bff917 	ldw	r2,-28(fp)
 1010d90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1010d94:	e0bff717 	ldw	r2,-36(fp)
}
 1010d98:	e037883a 	mov	sp,fp
 1010d9c:	dfc00117 	ldw	ra,4(sp)
 1010da0:	df000017 	ldw	fp,0(sp)
 1010da4:	dec00204 	addi	sp,sp,8
 1010da8:	f800283a 	ret

01010dac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1010dac:	defff804 	addi	sp,sp,-32
 1010db0:	dfc00715 	stw	ra,28(sp)
 1010db4:	df000615 	stw	fp,24(sp)
 1010db8:	dc000515 	stw	r16,20(sp)
 1010dbc:	df000604 	addi	fp,sp,24
 1010dc0:	e13ffb15 	stw	r4,-20(fp)
 1010dc4:	e17ffc15 	stw	r5,-16(fp)
 1010dc8:	e1bffd15 	stw	r6,-12(fp)
 1010dcc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 1010dd0:	e1bffe17 	ldw	r6,-8(fp)
 1010dd4:	e17ffd17 	ldw	r5,-12(fp)
 1010dd8:	e13ffc17 	ldw	r4,-16(fp)
 1010ddc:	10110340 	call	1011034 <open>
 1010de0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 1010de4:	e0bffa17 	ldw	r2,-24(fp)
 1010de8:	10002216 	blt	r2,zero,1010e74 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 1010dec:	04004074 	movhi	r16,257
 1010df0:	840b4a04 	addi	r16,r16,11560
 1010df4:	e0bffa17 	ldw	r2,-24(fp)
 1010df8:	01400304 	movi	r5,12
 1010dfc:	1009883a 	mov	r4,r2
 1010e00:	100c8f80 	call	100c8f8 <__mulsi3>
 1010e04:	8085883a 	add	r2,r16,r2
 1010e08:	10c00017 	ldw	r3,0(r2)
 1010e0c:	e0bffb17 	ldw	r2,-20(fp)
 1010e10:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1010e14:	04004074 	movhi	r16,257
 1010e18:	840b4a04 	addi	r16,r16,11560
 1010e1c:	e0bffa17 	ldw	r2,-24(fp)
 1010e20:	01400304 	movi	r5,12
 1010e24:	1009883a 	mov	r4,r2
 1010e28:	100c8f80 	call	100c8f8 <__mulsi3>
 1010e2c:	8085883a 	add	r2,r16,r2
 1010e30:	10800104 	addi	r2,r2,4
 1010e34:	10c00017 	ldw	r3,0(r2)
 1010e38:	e0bffb17 	ldw	r2,-20(fp)
 1010e3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1010e40:	04004074 	movhi	r16,257
 1010e44:	840b4a04 	addi	r16,r16,11560
 1010e48:	e0bffa17 	ldw	r2,-24(fp)
 1010e4c:	01400304 	movi	r5,12
 1010e50:	1009883a 	mov	r4,r2
 1010e54:	100c8f80 	call	100c8f8 <__mulsi3>
 1010e58:	8085883a 	add	r2,r16,r2
 1010e5c:	10800204 	addi	r2,r2,8
 1010e60:	10c00017 	ldw	r3,0(r2)
 1010e64:	e0bffb17 	ldw	r2,-20(fp)
 1010e68:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1010e6c:	e13ffa17 	ldw	r4,-24(fp)
 1010e70:	100f8e80 	call	100f8e8 <alt_release_fd>
  }
} 
 1010e74:	0001883a 	nop
 1010e78:	e6ffff04 	addi	sp,fp,-4
 1010e7c:	dfc00217 	ldw	ra,8(sp)
 1010e80:	df000117 	ldw	fp,4(sp)
 1010e84:	dc000017 	ldw	r16,0(sp)
 1010e88:	dec00304 	addi	sp,sp,12
 1010e8c:	f800283a 	ret

01010e90 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1010e90:	defffb04 	addi	sp,sp,-20
 1010e94:	dfc00415 	stw	ra,16(sp)
 1010e98:	df000315 	stw	fp,12(sp)
 1010e9c:	df000304 	addi	fp,sp,12
 1010ea0:	e13ffd15 	stw	r4,-12(fp)
 1010ea4:	e17ffe15 	stw	r5,-8(fp)
 1010ea8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1010eac:	01c07fc4 	movi	r7,511
 1010eb0:	01800044 	movi	r6,1
 1010eb4:	e17ffd17 	ldw	r5,-12(fp)
 1010eb8:	01004074 	movhi	r4,257
 1010ebc:	210b4d04 	addi	r4,r4,11572
 1010ec0:	1010dac0 	call	1010dac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1010ec4:	01c07fc4 	movi	r7,511
 1010ec8:	000d883a 	mov	r6,zero
 1010ecc:	e17ffe17 	ldw	r5,-8(fp)
 1010ed0:	01004074 	movhi	r4,257
 1010ed4:	210b4a04 	addi	r4,r4,11560
 1010ed8:	1010dac0 	call	1010dac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1010edc:	01c07fc4 	movi	r7,511
 1010ee0:	01800044 	movi	r6,1
 1010ee4:	e17fff17 	ldw	r5,-4(fp)
 1010ee8:	01004074 	movhi	r4,257
 1010eec:	210b5004 	addi	r4,r4,11584
 1010ef0:	1010dac0 	call	1010dac <alt_open_fd>
}  
 1010ef4:	0001883a 	nop
 1010ef8:	e037883a 	mov	sp,fp
 1010efc:	dfc00117 	ldw	ra,4(sp)
 1010f00:	df000017 	ldw	fp,0(sp)
 1010f04:	dec00204 	addi	sp,sp,8
 1010f08:	f800283a 	ret

01010f0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010f0c:	defffe04 	addi	sp,sp,-8
 1010f10:	dfc00115 	stw	ra,4(sp)
 1010f14:	df000015 	stw	fp,0(sp)
 1010f18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1010f1c:	d0a00b17 	ldw	r2,-32724(gp)
 1010f20:	10000326 	beq	r2,zero,1010f30 <alt_get_errno+0x24>
 1010f24:	d0a00b17 	ldw	r2,-32724(gp)
 1010f28:	103ee83a 	callr	r2
 1010f2c:	00000106 	br	1010f34 <alt_get_errno+0x28>
 1010f30:	d0a6d204 	addi	r2,gp,-25784
}
 1010f34:	e037883a 	mov	sp,fp
 1010f38:	dfc00117 	ldw	ra,4(sp)
 1010f3c:	df000017 	ldw	fp,0(sp)
 1010f40:	dec00204 	addi	sp,sp,8
 1010f44:	f800283a 	ret

01010f48 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1010f48:	defffb04 	addi	sp,sp,-20
 1010f4c:	dfc00415 	stw	ra,16(sp)
 1010f50:	df000315 	stw	fp,12(sp)
 1010f54:	dc000215 	stw	r16,8(sp)
 1010f58:	df000304 	addi	fp,sp,12
 1010f5c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1010f60:	e0bffe17 	ldw	r2,-8(fp)
 1010f64:	10800217 	ldw	r2,8(r2)
 1010f68:	10d00034 	orhi	r3,r2,16384
 1010f6c:	e0bffe17 	ldw	r2,-8(fp)
 1010f70:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1010f74:	e03ffd15 	stw	zero,-12(fp)
 1010f78:	00002306 	br	1011008 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1010f7c:	04004074 	movhi	r16,257
 1010f80:	840b4a04 	addi	r16,r16,11560
 1010f84:	e0bffd17 	ldw	r2,-12(fp)
 1010f88:	01400304 	movi	r5,12
 1010f8c:	1009883a 	mov	r4,r2
 1010f90:	100c8f80 	call	100c8f8 <__mulsi3>
 1010f94:	8085883a 	add	r2,r16,r2
 1010f98:	10c00017 	ldw	r3,0(r2)
 1010f9c:	e0bffe17 	ldw	r2,-8(fp)
 1010fa0:	10800017 	ldw	r2,0(r2)
 1010fa4:	1880151e 	bne	r3,r2,1010ffc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1010fa8:	04004074 	movhi	r16,257
 1010fac:	840b4a04 	addi	r16,r16,11560
 1010fb0:	e0bffd17 	ldw	r2,-12(fp)
 1010fb4:	01400304 	movi	r5,12
 1010fb8:	1009883a 	mov	r4,r2
 1010fbc:	100c8f80 	call	100c8f8 <__mulsi3>
 1010fc0:	8085883a 	add	r2,r16,r2
 1010fc4:	10800204 	addi	r2,r2,8
 1010fc8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1010fcc:	10000b0e 	bge	r2,zero,1010ffc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1010fd0:	01400304 	movi	r5,12
 1010fd4:	e13ffd17 	ldw	r4,-12(fp)
 1010fd8:	100c8f80 	call	100c8f8 <__mulsi3>
 1010fdc:	1007883a 	mov	r3,r2
 1010fe0:	00804074 	movhi	r2,257
 1010fe4:	108b4a04 	addi	r2,r2,11560
 1010fe8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1010fec:	e0bffe17 	ldw	r2,-8(fp)
 1010ff0:	18800226 	beq	r3,r2,1010ffc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1010ff4:	00bffcc4 	movi	r2,-13
 1010ff8:	00000806 	br	101101c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1010ffc:	e0bffd17 	ldw	r2,-12(fp)
 1011000:	10800044 	addi	r2,r2,1
 1011004:	e0bffd15 	stw	r2,-12(fp)
 1011008:	d0a00a17 	ldw	r2,-32728(gp)
 101100c:	1007883a 	mov	r3,r2
 1011010:	e0bffd17 	ldw	r2,-12(fp)
 1011014:	18bfd92e 	bgeu	r3,r2,1010f7c <__alt_data_end+0xff810f7c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1011018:	0005883a 	mov	r2,zero
}
 101101c:	e6ffff04 	addi	sp,fp,-4
 1011020:	dfc00217 	ldw	ra,8(sp)
 1011024:	df000117 	ldw	fp,4(sp)
 1011028:	dc000017 	ldw	r16,0(sp)
 101102c:	dec00304 	addi	sp,sp,12
 1011030:	f800283a 	ret

01011034 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1011034:	defff604 	addi	sp,sp,-40
 1011038:	dfc00915 	stw	ra,36(sp)
 101103c:	df000815 	stw	fp,32(sp)
 1011040:	df000804 	addi	fp,sp,32
 1011044:	e13ffd15 	stw	r4,-12(fp)
 1011048:	e17ffe15 	stw	r5,-8(fp)
 101104c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1011050:	00bfffc4 	movi	r2,-1
 1011054:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1011058:	00bffb44 	movi	r2,-19
 101105c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1011060:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1011064:	d1600804 	addi	r5,gp,-32736
 1011068:	e13ffd17 	ldw	r4,-12(fp)
 101106c:	10113580 	call	1011358 <alt_find_dev>
 1011070:	e0bff815 	stw	r2,-32(fp)
 1011074:	e0bff817 	ldw	r2,-32(fp)
 1011078:	1000051e 	bne	r2,zero,1011090 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 101107c:	e13ffd17 	ldw	r4,-12(fp)
 1011080:	10113e80 	call	10113e8 <alt_find_file>
 1011084:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1011088:	00800044 	movi	r2,1
 101108c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1011090:	e0bff817 	ldw	r2,-32(fp)
 1011094:	10002b26 	beq	r2,zero,1011144 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1011098:	e13ff817 	ldw	r4,-32(fp)
 101109c:	10114f00 	call	10114f0 <alt_get_fd>
 10110a0:	e0bff915 	stw	r2,-28(fp)
 10110a4:	e0bff917 	ldw	r2,-28(fp)
 10110a8:	1000030e 	bge	r2,zero,10110b8 <open+0x84>
    {
      status = index;
 10110ac:	e0bff917 	ldw	r2,-28(fp)
 10110b0:	e0bffa15 	stw	r2,-24(fp)
 10110b4:	00002506 	br	101114c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 10110b8:	01400304 	movi	r5,12
 10110bc:	e13ff917 	ldw	r4,-28(fp)
 10110c0:	100c8f80 	call	100c8f8 <__mulsi3>
 10110c4:	1007883a 	mov	r3,r2
 10110c8:	00804074 	movhi	r2,257
 10110cc:	108b4a04 	addi	r2,r2,11560
 10110d0:	1885883a 	add	r2,r3,r2
 10110d4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10110d8:	e0fffe17 	ldw	r3,-8(fp)
 10110dc:	00900034 	movhi	r2,16384
 10110e0:	10bfffc4 	addi	r2,r2,-1
 10110e4:	1886703a 	and	r3,r3,r2
 10110e8:	e0bffc17 	ldw	r2,-16(fp)
 10110ec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10110f0:	e0bffb17 	ldw	r2,-20(fp)
 10110f4:	1000051e 	bne	r2,zero,101110c <open+0xd8>
 10110f8:	e13ffc17 	ldw	r4,-16(fp)
 10110fc:	1010f480 	call	1010f48 <alt_file_locked>
 1011100:	e0bffa15 	stw	r2,-24(fp)
 1011104:	e0bffa17 	ldw	r2,-24(fp)
 1011108:	10001016 	blt	r2,zero,101114c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 101110c:	e0bff817 	ldw	r2,-32(fp)
 1011110:	10800317 	ldw	r2,12(r2)
 1011114:	10000826 	beq	r2,zero,1011138 <open+0x104>
 1011118:	e0bff817 	ldw	r2,-32(fp)
 101111c:	10800317 	ldw	r2,12(r2)
 1011120:	e1ffff17 	ldw	r7,-4(fp)
 1011124:	e1bffe17 	ldw	r6,-8(fp)
 1011128:	e17ffd17 	ldw	r5,-12(fp)
 101112c:	e13ffc17 	ldw	r4,-16(fp)
 1011130:	103ee83a 	callr	r2
 1011134:	00000106 	br	101113c <open+0x108>
 1011138:	0005883a 	mov	r2,zero
 101113c:	e0bffa15 	stw	r2,-24(fp)
 1011140:	00000206 	br	101114c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1011144:	00bffb44 	movi	r2,-19
 1011148:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 101114c:	e0bffa17 	ldw	r2,-24(fp)
 1011150:	1000090e 	bge	r2,zero,1011178 <open+0x144>
  {
    alt_release_fd (index);  
 1011154:	e13ff917 	ldw	r4,-28(fp)
 1011158:	100f8e80 	call	100f8e8 <alt_release_fd>
    ALT_ERRNO = -status;
 101115c:	1010f0c0 	call	1010f0c <alt_get_errno>
 1011160:	1007883a 	mov	r3,r2
 1011164:	e0bffa17 	ldw	r2,-24(fp)
 1011168:	0085c83a 	sub	r2,zero,r2
 101116c:	18800015 	stw	r2,0(r3)
    return -1;
 1011170:	00bfffc4 	movi	r2,-1
 1011174:	00000106 	br	101117c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 1011178:	e0bff917 	ldw	r2,-28(fp)
}
 101117c:	e037883a 	mov	sp,fp
 1011180:	dfc00117 	ldw	ra,4(sp)
 1011184:	df000017 	ldw	fp,0(sp)
 1011188:	dec00204 	addi	sp,sp,8
 101118c:	f800283a 	ret

01011190 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1011190:	defffa04 	addi	sp,sp,-24
 1011194:	df000515 	stw	fp,20(sp)
 1011198:	df000504 	addi	fp,sp,20
 101119c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10111a0:	0005303a 	rdctl	r2,status
 10111a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10111a8:	e0fffc17 	ldw	r3,-16(fp)
 10111ac:	00bfff84 	movi	r2,-2
 10111b0:	1884703a 	and	r2,r3,r2
 10111b4:	1001703a 	wrctl	status,r2
  
  return context;
 10111b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10111bc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 10111c0:	e0bfff17 	ldw	r2,-4(fp)
 10111c4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10111c8:	e0bffd17 	ldw	r2,-12(fp)
 10111cc:	10800017 	ldw	r2,0(r2)
 10111d0:	e0fffd17 	ldw	r3,-12(fp)
 10111d4:	18c00117 	ldw	r3,4(r3)
 10111d8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 10111dc:	e0bffd17 	ldw	r2,-12(fp)
 10111e0:	10800117 	ldw	r2,4(r2)
 10111e4:	e0fffd17 	ldw	r3,-12(fp)
 10111e8:	18c00017 	ldw	r3,0(r3)
 10111ec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10111f0:	e0bffd17 	ldw	r2,-12(fp)
 10111f4:	e0fffd17 	ldw	r3,-12(fp)
 10111f8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 10111fc:	e0bffd17 	ldw	r2,-12(fp)
 1011200:	e0fffd17 	ldw	r3,-12(fp)
 1011204:	10c00015 	stw	r3,0(r2)
 1011208:	e0bffb17 	ldw	r2,-20(fp)
 101120c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011210:	e0bffe17 	ldw	r2,-8(fp)
 1011214:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1011218:	0001883a 	nop
 101121c:	e037883a 	mov	sp,fp
 1011220:	df000017 	ldw	fp,0(sp)
 1011224:	dec00104 	addi	sp,sp,4
 1011228:	f800283a 	ret

0101122c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 101122c:	defffb04 	addi	sp,sp,-20
 1011230:	dfc00415 	stw	ra,16(sp)
 1011234:	df000315 	stw	fp,12(sp)
 1011238:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 101123c:	d0a00e17 	ldw	r2,-32712(gp)
 1011240:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1011244:	d0a6d817 	ldw	r2,-25760(gp)
 1011248:	10800044 	addi	r2,r2,1
 101124c:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011250:	00002e06 	br	101130c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 1011254:	e0bffd17 	ldw	r2,-12(fp)
 1011258:	10800017 	ldw	r2,0(r2)
 101125c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1011260:	e0bffd17 	ldw	r2,-12(fp)
 1011264:	10800403 	ldbu	r2,16(r2)
 1011268:	10803fcc 	andi	r2,r2,255
 101126c:	10000426 	beq	r2,zero,1011280 <alt_tick+0x54>
 1011270:	d0a6d817 	ldw	r2,-25760(gp)
 1011274:	1000021e 	bne	r2,zero,1011280 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1011278:	e0bffd17 	ldw	r2,-12(fp)
 101127c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1011280:	e0bffd17 	ldw	r2,-12(fp)
 1011284:	10800217 	ldw	r2,8(r2)
 1011288:	d0e6d817 	ldw	r3,-25760(gp)
 101128c:	18801d36 	bltu	r3,r2,1011304 <alt_tick+0xd8>
 1011290:	e0bffd17 	ldw	r2,-12(fp)
 1011294:	10800403 	ldbu	r2,16(r2)
 1011298:	10803fcc 	andi	r2,r2,255
 101129c:	1000191e 	bne	r2,zero,1011304 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 10112a0:	e0bffd17 	ldw	r2,-12(fp)
 10112a4:	10800317 	ldw	r2,12(r2)
 10112a8:	e0fffd17 	ldw	r3,-12(fp)
 10112ac:	18c00517 	ldw	r3,20(r3)
 10112b0:	1809883a 	mov	r4,r3
 10112b4:	103ee83a 	callr	r2
 10112b8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10112bc:	e0bfff17 	ldw	r2,-4(fp)
 10112c0:	1000031e 	bne	r2,zero,10112d0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 10112c4:	e13ffd17 	ldw	r4,-12(fp)
 10112c8:	10111900 	call	1011190 <alt_alarm_stop>
 10112cc:	00000d06 	br	1011304 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 10112d0:	e0bffd17 	ldw	r2,-12(fp)
 10112d4:	10c00217 	ldw	r3,8(r2)
 10112d8:	e0bfff17 	ldw	r2,-4(fp)
 10112dc:	1887883a 	add	r3,r3,r2
 10112e0:	e0bffd17 	ldw	r2,-12(fp)
 10112e4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10112e8:	e0bffd17 	ldw	r2,-12(fp)
 10112ec:	10c00217 	ldw	r3,8(r2)
 10112f0:	d0a6d817 	ldw	r2,-25760(gp)
 10112f4:	1880032e 	bgeu	r3,r2,1011304 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 10112f8:	e0bffd17 	ldw	r2,-12(fp)
 10112fc:	00c00044 	movi	r3,1
 1011300:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 1011304:	e0bffe17 	ldw	r2,-8(fp)
 1011308:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 101130c:	e0fffd17 	ldw	r3,-12(fp)
 1011310:	d0a00e04 	addi	r2,gp,-32712
 1011314:	18bfcf1e 	bne	r3,r2,1011254 <__alt_data_end+0xff811254>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1011318:	0001883a 	nop
}
 101131c:	0001883a 	nop
 1011320:	e037883a 	mov	sp,fp
 1011324:	dfc00117 	ldw	ra,4(sp)
 1011328:	df000017 	ldw	fp,0(sp)
 101132c:	dec00204 	addi	sp,sp,8
 1011330:	f800283a 	ret

01011334 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1011334:	deffff04 	addi	sp,sp,-4
 1011338:	df000015 	stw	fp,0(sp)
 101133c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1011340:	000170fa 	wrctl	ienable,zero
}
 1011344:	0001883a 	nop
 1011348:	e037883a 	mov	sp,fp
 101134c:	df000017 	ldw	fp,0(sp)
 1011350:	dec00104 	addi	sp,sp,4
 1011354:	f800283a 	ret

01011358 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1011358:	defffa04 	addi	sp,sp,-24
 101135c:	dfc00515 	stw	ra,20(sp)
 1011360:	df000415 	stw	fp,16(sp)
 1011364:	df000404 	addi	fp,sp,16
 1011368:	e13ffe15 	stw	r4,-8(fp)
 101136c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1011370:	e0bfff17 	ldw	r2,-4(fp)
 1011374:	10800017 	ldw	r2,0(r2)
 1011378:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 101137c:	e13ffe17 	ldw	r4,-8(fp)
 1011380:	10023c40 	call	10023c4 <strlen>
 1011384:	10800044 	addi	r2,r2,1
 1011388:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 101138c:	00000d06 	br	10113c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1011390:	e0bffc17 	ldw	r2,-16(fp)
 1011394:	10800217 	ldw	r2,8(r2)
 1011398:	e0fffd17 	ldw	r3,-12(fp)
 101139c:	180d883a 	mov	r6,r3
 10113a0:	e17ffe17 	ldw	r5,-8(fp)
 10113a4:	1009883a 	mov	r4,r2
 10113a8:	101169c0 	call	101169c <memcmp>
 10113ac:	1000021e 	bne	r2,zero,10113b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10113b0:	e0bffc17 	ldw	r2,-16(fp)
 10113b4:	00000706 	br	10113d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10113b8:	e0bffc17 	ldw	r2,-16(fp)
 10113bc:	10800017 	ldw	r2,0(r2)
 10113c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10113c4:	e0fffc17 	ldw	r3,-16(fp)
 10113c8:	e0bfff17 	ldw	r2,-4(fp)
 10113cc:	18bff01e 	bne	r3,r2,1011390 <__alt_data_end+0xff811390>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10113d0:	0005883a 	mov	r2,zero
}
 10113d4:	e037883a 	mov	sp,fp
 10113d8:	dfc00117 	ldw	ra,4(sp)
 10113dc:	df000017 	ldw	fp,0(sp)
 10113e0:	dec00204 	addi	sp,sp,8
 10113e4:	f800283a 	ret

010113e8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10113e8:	defffb04 	addi	sp,sp,-20
 10113ec:	dfc00415 	stw	ra,16(sp)
 10113f0:	df000315 	stw	fp,12(sp)
 10113f4:	df000304 	addi	fp,sp,12
 10113f8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 10113fc:	d0a00617 	ldw	r2,-32744(gp)
 1011400:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011404:	00003106 	br	10114cc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1011408:	e0bffd17 	ldw	r2,-12(fp)
 101140c:	10800217 	ldw	r2,8(r2)
 1011410:	1009883a 	mov	r4,r2
 1011414:	10023c40 	call	10023c4 <strlen>
 1011418:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 101141c:	e0bffd17 	ldw	r2,-12(fp)
 1011420:	10c00217 	ldw	r3,8(r2)
 1011424:	e0bffe17 	ldw	r2,-8(fp)
 1011428:	10bfffc4 	addi	r2,r2,-1
 101142c:	1885883a 	add	r2,r3,r2
 1011430:	10800003 	ldbu	r2,0(r2)
 1011434:	10803fcc 	andi	r2,r2,255
 1011438:	1080201c 	xori	r2,r2,128
 101143c:	10bfe004 	addi	r2,r2,-128
 1011440:	10800bd8 	cmpnei	r2,r2,47
 1011444:	1000031e 	bne	r2,zero,1011454 <alt_find_file+0x6c>
    {
      len -= 1;
 1011448:	e0bffe17 	ldw	r2,-8(fp)
 101144c:	10bfffc4 	addi	r2,r2,-1
 1011450:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1011454:	e0bffe17 	ldw	r2,-8(fp)
 1011458:	e0ffff17 	ldw	r3,-4(fp)
 101145c:	1885883a 	add	r2,r3,r2
 1011460:	10800003 	ldbu	r2,0(r2)
 1011464:	10803fcc 	andi	r2,r2,255
 1011468:	1080201c 	xori	r2,r2,128
 101146c:	10bfe004 	addi	r2,r2,-128
 1011470:	10800be0 	cmpeqi	r2,r2,47
 1011474:	1000081e 	bne	r2,zero,1011498 <alt_find_file+0xb0>
 1011478:	e0bffe17 	ldw	r2,-8(fp)
 101147c:	e0ffff17 	ldw	r3,-4(fp)
 1011480:	1885883a 	add	r2,r3,r2
 1011484:	10800003 	ldbu	r2,0(r2)
 1011488:	10803fcc 	andi	r2,r2,255
 101148c:	1080201c 	xori	r2,r2,128
 1011490:	10bfe004 	addi	r2,r2,-128
 1011494:	10000a1e 	bne	r2,zero,10114c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1011498:	e0bffd17 	ldw	r2,-12(fp)
 101149c:	10800217 	ldw	r2,8(r2)
 10114a0:	e0fffe17 	ldw	r3,-8(fp)
 10114a4:	180d883a 	mov	r6,r3
 10114a8:	e17fff17 	ldw	r5,-4(fp)
 10114ac:	1009883a 	mov	r4,r2
 10114b0:	101169c0 	call	101169c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10114b4:	1000021e 	bne	r2,zero,10114c0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10114b8:	e0bffd17 	ldw	r2,-12(fp)
 10114bc:	00000706 	br	10114dc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 10114c0:	e0bffd17 	ldw	r2,-12(fp)
 10114c4:	10800017 	ldw	r2,0(r2)
 10114c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10114cc:	e0fffd17 	ldw	r3,-12(fp)
 10114d0:	d0a00604 	addi	r2,gp,-32744
 10114d4:	18bfcc1e 	bne	r3,r2,1011408 <__alt_data_end+0xff811408>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10114d8:	0005883a 	mov	r2,zero
}
 10114dc:	e037883a 	mov	sp,fp
 10114e0:	dfc00117 	ldw	ra,4(sp)
 10114e4:	df000017 	ldw	fp,0(sp)
 10114e8:	dec00204 	addi	sp,sp,8
 10114ec:	f800283a 	ret

010114f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 10114f0:	defffa04 	addi	sp,sp,-24
 10114f4:	dfc00515 	stw	ra,20(sp)
 10114f8:	df000415 	stw	fp,16(sp)
 10114fc:	dc000315 	stw	r16,12(sp)
 1011500:	df000404 	addi	fp,sp,16
 1011504:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 1011508:	00bffa04 	movi	r2,-24
 101150c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011510:	e03ffc15 	stw	zero,-16(fp)
 1011514:	00001d06 	br	101158c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 1011518:	04004074 	movhi	r16,257
 101151c:	840b4a04 	addi	r16,r16,11560
 1011520:	e0bffc17 	ldw	r2,-16(fp)
 1011524:	01400304 	movi	r5,12
 1011528:	1009883a 	mov	r4,r2
 101152c:	100c8f80 	call	100c8f8 <__mulsi3>
 1011530:	8085883a 	add	r2,r16,r2
 1011534:	10800017 	ldw	r2,0(r2)
 1011538:	1000111e 	bne	r2,zero,1011580 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 101153c:	04004074 	movhi	r16,257
 1011540:	840b4a04 	addi	r16,r16,11560
 1011544:	e0bffc17 	ldw	r2,-16(fp)
 1011548:	01400304 	movi	r5,12
 101154c:	1009883a 	mov	r4,r2
 1011550:	100c8f80 	call	100c8f8 <__mulsi3>
 1011554:	8085883a 	add	r2,r16,r2
 1011558:	e0fffe17 	ldw	r3,-8(fp)
 101155c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1011560:	d0e00a17 	ldw	r3,-32728(gp)
 1011564:	e0bffc17 	ldw	r2,-16(fp)
 1011568:	1880020e 	bge	r3,r2,1011574 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 101156c:	e0bffc17 	ldw	r2,-16(fp)
 1011570:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 1011574:	e0bffc17 	ldw	r2,-16(fp)
 1011578:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 101157c:	00000606 	br	1011598 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011580:	e0bffc17 	ldw	r2,-16(fp)
 1011584:	10800044 	addi	r2,r2,1
 1011588:	e0bffc15 	stw	r2,-16(fp)
 101158c:	e0bffc17 	ldw	r2,-16(fp)
 1011590:	10800810 	cmplti	r2,r2,32
 1011594:	103fe01e 	bne	r2,zero,1011518 <__alt_data_end+0xff811518>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1011598:	e0bffd17 	ldw	r2,-12(fp)
}
 101159c:	e6ffff04 	addi	sp,fp,-4
 10115a0:	dfc00217 	ldw	ra,8(sp)
 10115a4:	df000117 	ldw	fp,4(sp)
 10115a8:	dc000017 	ldw	r16,0(sp)
 10115ac:	dec00304 	addi	sp,sp,12
 10115b0:	f800283a 	ret

010115b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 10115b4:	defffe04 	addi	sp,sp,-8
 10115b8:	df000115 	stw	fp,4(sp)
 10115bc:	df000104 	addi	fp,sp,4
 10115c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 10115c4:	e0bfff17 	ldw	r2,-4(fp)
 10115c8:	10bffe84 	addi	r2,r2,-6
 10115cc:	10c00428 	cmpgeui	r3,r2,16
 10115d0:	18001a1e 	bne	r3,zero,101163c <alt_exception_cause_generated_bad_addr+0x88>
 10115d4:	100690ba 	slli	r3,r2,2
 10115d8:	00804074 	movhi	r2,257
 10115dc:	10857b04 	addi	r2,r2,5612
 10115e0:	1885883a 	add	r2,r3,r2
 10115e4:	10800017 	ldw	r2,0(r2)
 10115e8:	1000683a 	jmp	r2
 10115ec:	0101162c 	andhi	r4,zero,1112
 10115f0:	0101162c 	andhi	r4,zero,1112
 10115f4:	0101163c 	xorhi	r4,zero,1112
 10115f8:	0101163c 	xorhi	r4,zero,1112
 10115fc:	0101163c 	xorhi	r4,zero,1112
 1011600:	0101162c 	andhi	r4,zero,1112
 1011604:	01011634 	movhi	r4,1112
 1011608:	0101163c 	xorhi	r4,zero,1112
 101160c:	0101162c 	andhi	r4,zero,1112
 1011610:	0101162c 	andhi	r4,zero,1112
 1011614:	0101163c 	xorhi	r4,zero,1112
 1011618:	0101162c 	andhi	r4,zero,1112
 101161c:	01011634 	movhi	r4,1112
 1011620:	0101163c 	xorhi	r4,zero,1112
 1011624:	0101163c 	xorhi	r4,zero,1112
 1011628:	0101162c 	andhi	r4,zero,1112
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 101162c:	00800044 	movi	r2,1
 1011630:	00000306 	br	1011640 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1011634:	0005883a 	mov	r2,zero
 1011638:	00000106 	br	1011640 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 101163c:	0005883a 	mov	r2,zero
  }
}
 1011640:	e037883a 	mov	sp,fp
 1011644:	df000017 	ldw	fp,0(sp)
 1011648:	dec00104 	addi	sp,sp,4
 101164c:	f800283a 	ret

01011650 <atexit>:
 1011650:	200b883a 	mov	r5,r4
 1011654:	000f883a 	mov	r7,zero
 1011658:	000d883a 	mov	r6,zero
 101165c:	0009883a 	mov	r4,zero
 1011660:	10117181 	jmpi	1011718 <__register_exitproc>

01011664 <exit>:
 1011664:	defffe04 	addi	sp,sp,-8
 1011668:	000b883a 	mov	r5,zero
 101166c:	dc000015 	stw	r16,0(sp)
 1011670:	dfc00115 	stw	ra,4(sp)
 1011674:	2021883a 	mov	r16,r4
 1011678:	10118300 	call	1011830 <__call_exitprocs>
 101167c:	00804074 	movhi	r2,257
 1011680:	108fc204 	addi	r2,r2,16136
 1011684:	11000017 	ldw	r4,0(r2)
 1011688:	20800f17 	ldw	r2,60(r4)
 101168c:	10000126 	beq	r2,zero,1011694 <exit+0x30>
 1011690:	103ee83a 	callr	r2
 1011694:	8009883a 	mov	r4,r16
 1011698:	10119b00 	call	10119b0 <_exit>

0101169c <memcmp>:
 101169c:	01c000c4 	movi	r7,3
 10116a0:	3980192e 	bgeu	r7,r6,1011708 <memcmp+0x6c>
 10116a4:	2144b03a 	or	r2,r4,r5
 10116a8:	11c4703a 	and	r2,r2,r7
 10116ac:	10000f26 	beq	r2,zero,10116ec <memcmp+0x50>
 10116b0:	20800003 	ldbu	r2,0(r4)
 10116b4:	28c00003 	ldbu	r3,0(r5)
 10116b8:	10c0151e 	bne	r2,r3,1011710 <memcmp+0x74>
 10116bc:	31bfff84 	addi	r6,r6,-2
 10116c0:	01ffffc4 	movi	r7,-1
 10116c4:	00000406 	br	10116d8 <memcmp+0x3c>
 10116c8:	20800003 	ldbu	r2,0(r4)
 10116cc:	28c00003 	ldbu	r3,0(r5)
 10116d0:	31bfffc4 	addi	r6,r6,-1
 10116d4:	10c00e1e 	bne	r2,r3,1011710 <memcmp+0x74>
 10116d8:	21000044 	addi	r4,r4,1
 10116dc:	29400044 	addi	r5,r5,1
 10116e0:	31fff91e 	bne	r6,r7,10116c8 <__alt_data_end+0xff8116c8>
 10116e4:	0005883a 	mov	r2,zero
 10116e8:	f800283a 	ret
 10116ec:	20c00017 	ldw	r3,0(r4)
 10116f0:	28800017 	ldw	r2,0(r5)
 10116f4:	18bfee1e 	bne	r3,r2,10116b0 <__alt_data_end+0xff8116b0>
 10116f8:	31bfff04 	addi	r6,r6,-4
 10116fc:	21000104 	addi	r4,r4,4
 1011700:	29400104 	addi	r5,r5,4
 1011704:	39bff936 	bltu	r7,r6,10116ec <__alt_data_end+0xff8116ec>
 1011708:	303fe91e 	bne	r6,zero,10116b0 <__alt_data_end+0xff8116b0>
 101170c:	003ff506 	br	10116e4 <__alt_data_end+0xff8116e4>
 1011710:	10c5c83a 	sub	r2,r2,r3
 1011714:	f800283a 	ret

01011718 <__register_exitproc>:
 1011718:	defffa04 	addi	sp,sp,-24
 101171c:	dc000315 	stw	r16,12(sp)
 1011720:	04004074 	movhi	r16,257
 1011724:	840fc204 	addi	r16,r16,16136
 1011728:	80c00017 	ldw	r3,0(r16)
 101172c:	dc400415 	stw	r17,16(sp)
 1011730:	dfc00515 	stw	ra,20(sp)
 1011734:	18805217 	ldw	r2,328(r3)
 1011738:	2023883a 	mov	r17,r4
 101173c:	10003726 	beq	r2,zero,101181c <__register_exitproc+0x104>
 1011740:	10c00117 	ldw	r3,4(r2)
 1011744:	010007c4 	movi	r4,31
 1011748:	20c00e16 	blt	r4,r3,1011784 <__register_exitproc+0x6c>
 101174c:	1a000044 	addi	r8,r3,1
 1011750:	8800221e 	bne	r17,zero,10117dc <__register_exitproc+0xc4>
 1011754:	18c00084 	addi	r3,r3,2
 1011758:	18c7883a 	add	r3,r3,r3
 101175c:	18c7883a 	add	r3,r3,r3
 1011760:	12000115 	stw	r8,4(r2)
 1011764:	10c7883a 	add	r3,r2,r3
 1011768:	19400015 	stw	r5,0(r3)
 101176c:	0005883a 	mov	r2,zero
 1011770:	dfc00517 	ldw	ra,20(sp)
 1011774:	dc400417 	ldw	r17,16(sp)
 1011778:	dc000317 	ldw	r16,12(sp)
 101177c:	dec00604 	addi	sp,sp,24
 1011780:	f800283a 	ret
 1011784:	00800034 	movhi	r2,0
 1011788:	10800004 	addi	r2,r2,0
 101178c:	10002626 	beq	r2,zero,1011828 <__register_exitproc+0x110>
 1011790:	01006404 	movi	r4,400
 1011794:	d9400015 	stw	r5,0(sp)
 1011798:	d9800115 	stw	r6,4(sp)
 101179c:	d9c00215 	stw	r7,8(sp)
 10117a0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10117a4:	d9400017 	ldw	r5,0(sp)
 10117a8:	d9800117 	ldw	r6,4(sp)
 10117ac:	d9c00217 	ldw	r7,8(sp)
 10117b0:	10001d26 	beq	r2,zero,1011828 <__register_exitproc+0x110>
 10117b4:	81000017 	ldw	r4,0(r16)
 10117b8:	10000115 	stw	zero,4(r2)
 10117bc:	02000044 	movi	r8,1
 10117c0:	22405217 	ldw	r9,328(r4)
 10117c4:	0007883a 	mov	r3,zero
 10117c8:	12400015 	stw	r9,0(r2)
 10117cc:	20805215 	stw	r2,328(r4)
 10117d0:	10006215 	stw	zero,392(r2)
 10117d4:	10006315 	stw	zero,396(r2)
 10117d8:	883fde26 	beq	r17,zero,1011754 <__alt_data_end+0xff811754>
 10117dc:	18c9883a 	add	r4,r3,r3
 10117e0:	2109883a 	add	r4,r4,r4
 10117e4:	1109883a 	add	r4,r2,r4
 10117e8:	21802215 	stw	r6,136(r4)
 10117ec:	01800044 	movi	r6,1
 10117f0:	12406217 	ldw	r9,392(r2)
 10117f4:	30cc983a 	sll	r6,r6,r3
 10117f8:	4992b03a 	or	r9,r9,r6
 10117fc:	12406215 	stw	r9,392(r2)
 1011800:	21c04215 	stw	r7,264(r4)
 1011804:	01000084 	movi	r4,2
 1011808:	893fd21e 	bne	r17,r4,1011754 <__alt_data_end+0xff811754>
 101180c:	11006317 	ldw	r4,396(r2)
 1011810:	218cb03a 	or	r6,r4,r6
 1011814:	11806315 	stw	r6,396(r2)
 1011818:	003fce06 	br	1011754 <__alt_data_end+0xff811754>
 101181c:	18805304 	addi	r2,r3,332
 1011820:	18805215 	stw	r2,328(r3)
 1011824:	003fc606 	br	1011740 <__alt_data_end+0xff811740>
 1011828:	00bfffc4 	movi	r2,-1
 101182c:	003fd006 	br	1011770 <__alt_data_end+0xff811770>

01011830 <__call_exitprocs>:
 1011830:	defff504 	addi	sp,sp,-44
 1011834:	df000915 	stw	fp,36(sp)
 1011838:	dd400615 	stw	r21,24(sp)
 101183c:	dc800315 	stw	r18,12(sp)
 1011840:	dfc00a15 	stw	ra,40(sp)
 1011844:	ddc00815 	stw	r23,32(sp)
 1011848:	dd800715 	stw	r22,28(sp)
 101184c:	dd000515 	stw	r20,20(sp)
 1011850:	dcc00415 	stw	r19,16(sp)
 1011854:	dc400215 	stw	r17,8(sp)
 1011858:	dc000115 	stw	r16,4(sp)
 101185c:	d9000015 	stw	r4,0(sp)
 1011860:	2839883a 	mov	fp,r5
 1011864:	04800044 	movi	r18,1
 1011868:	057fffc4 	movi	r21,-1
 101186c:	00804074 	movhi	r2,257
 1011870:	108fc204 	addi	r2,r2,16136
 1011874:	12000017 	ldw	r8,0(r2)
 1011878:	45005217 	ldw	r20,328(r8)
 101187c:	44c05204 	addi	r19,r8,328
 1011880:	a0001c26 	beq	r20,zero,10118f4 <__call_exitprocs+0xc4>
 1011884:	a0800117 	ldw	r2,4(r20)
 1011888:	15ffffc4 	addi	r23,r2,-1
 101188c:	b8000d16 	blt	r23,zero,10118c4 <__call_exitprocs+0x94>
 1011890:	14000044 	addi	r16,r2,1
 1011894:	8421883a 	add	r16,r16,r16
 1011898:	8421883a 	add	r16,r16,r16
 101189c:	84402004 	addi	r17,r16,128
 10118a0:	a463883a 	add	r17,r20,r17
 10118a4:	a421883a 	add	r16,r20,r16
 10118a8:	e0001e26 	beq	fp,zero,1011924 <__call_exitprocs+0xf4>
 10118ac:	80804017 	ldw	r2,256(r16)
 10118b0:	e0801c26 	beq	fp,r2,1011924 <__call_exitprocs+0xf4>
 10118b4:	bdffffc4 	addi	r23,r23,-1
 10118b8:	843fff04 	addi	r16,r16,-4
 10118bc:	8c7fff04 	addi	r17,r17,-4
 10118c0:	bd7ff91e 	bne	r23,r21,10118a8 <__alt_data_end+0xff8118a8>
 10118c4:	00800034 	movhi	r2,0
 10118c8:	10800004 	addi	r2,r2,0
 10118cc:	10000926 	beq	r2,zero,10118f4 <__call_exitprocs+0xc4>
 10118d0:	a0800117 	ldw	r2,4(r20)
 10118d4:	1000301e 	bne	r2,zero,1011998 <__call_exitprocs+0x168>
 10118d8:	a0800017 	ldw	r2,0(r20)
 10118dc:	10003226 	beq	r2,zero,10119a8 <__call_exitprocs+0x178>
 10118e0:	a009883a 	mov	r4,r20
 10118e4:	98800015 	stw	r2,0(r19)
 10118e8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10118ec:	9d000017 	ldw	r20,0(r19)
 10118f0:	a03fe41e 	bne	r20,zero,1011884 <__alt_data_end+0xff811884>
 10118f4:	dfc00a17 	ldw	ra,40(sp)
 10118f8:	df000917 	ldw	fp,36(sp)
 10118fc:	ddc00817 	ldw	r23,32(sp)
 1011900:	dd800717 	ldw	r22,28(sp)
 1011904:	dd400617 	ldw	r21,24(sp)
 1011908:	dd000517 	ldw	r20,20(sp)
 101190c:	dcc00417 	ldw	r19,16(sp)
 1011910:	dc800317 	ldw	r18,12(sp)
 1011914:	dc400217 	ldw	r17,8(sp)
 1011918:	dc000117 	ldw	r16,4(sp)
 101191c:	dec00b04 	addi	sp,sp,44
 1011920:	f800283a 	ret
 1011924:	a0800117 	ldw	r2,4(r20)
 1011928:	80c00017 	ldw	r3,0(r16)
 101192c:	10bfffc4 	addi	r2,r2,-1
 1011930:	15c01426 	beq	r2,r23,1011984 <__call_exitprocs+0x154>
 1011934:	80000015 	stw	zero,0(r16)
 1011938:	183fde26 	beq	r3,zero,10118b4 <__alt_data_end+0xff8118b4>
 101193c:	95c8983a 	sll	r4,r18,r23
 1011940:	a0806217 	ldw	r2,392(r20)
 1011944:	a5800117 	ldw	r22,4(r20)
 1011948:	2084703a 	and	r2,r4,r2
 101194c:	10000b26 	beq	r2,zero,101197c <__call_exitprocs+0x14c>
 1011950:	a0806317 	ldw	r2,396(r20)
 1011954:	2088703a 	and	r4,r4,r2
 1011958:	20000c1e 	bne	r4,zero,101198c <__call_exitprocs+0x15c>
 101195c:	89400017 	ldw	r5,0(r17)
 1011960:	d9000017 	ldw	r4,0(sp)
 1011964:	183ee83a 	callr	r3
 1011968:	a0800117 	ldw	r2,4(r20)
 101196c:	15bfbf1e 	bne	r2,r22,101186c <__alt_data_end+0xff81186c>
 1011970:	98800017 	ldw	r2,0(r19)
 1011974:	153fcf26 	beq	r2,r20,10118b4 <__alt_data_end+0xff8118b4>
 1011978:	003fbc06 	br	101186c <__alt_data_end+0xff81186c>
 101197c:	183ee83a 	callr	r3
 1011980:	003ff906 	br	1011968 <__alt_data_end+0xff811968>
 1011984:	a5c00115 	stw	r23,4(r20)
 1011988:	003feb06 	br	1011938 <__alt_data_end+0xff811938>
 101198c:	89000017 	ldw	r4,0(r17)
 1011990:	183ee83a 	callr	r3
 1011994:	003ff406 	br	1011968 <__alt_data_end+0xff811968>
 1011998:	a0800017 	ldw	r2,0(r20)
 101199c:	a027883a 	mov	r19,r20
 10119a0:	1029883a 	mov	r20,r2
 10119a4:	003fb606 	br	1011880 <__alt_data_end+0xff811880>
 10119a8:	0005883a 	mov	r2,zero
 10119ac:	003ffb06 	br	101199c <__alt_data_end+0xff81199c>

010119b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10119b0:	defffd04 	addi	sp,sp,-12
 10119b4:	df000215 	stw	fp,8(sp)
 10119b8:	df000204 	addi	fp,sp,8
 10119bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 10119c0:	0001883a 	nop
 10119c4:	e0bfff17 	ldw	r2,-4(fp)
 10119c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 10119cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10119d0:	10000226 	beq	r2,zero,10119dc <_exit+0x2c>
    ALT_SIM_FAIL();
 10119d4:	002af070 	cmpltui	zero,zero,43969
 10119d8:	00000106 	br	10119e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 10119dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10119e0:	003fff06 	br	10119e0 <__alt_data_end+0xff8119e0>
