/*
    This sprite table was generated using 'conv_to_sv.py'. Find out more here: https://github.com/Atrifex/ECE385-HelperTools
    To use, instantiate this module in your color mapper. The SpriteX input should be connected to
        'ObjectXSize - DistX', where ObjectXSize is the width of your object in pixels along the
        x direction. DistX is the horizontal distance between the DrawX pxiel and the top left corner
        of the object in question, so something like: 'DistX = DrawX - ObjectXPosition' is fine.
        Similarly this goes for SpriteY. Warning: If you don't do this, your image will be flipped along
        the axis you ignored. This is a handy way to flip an image if you need to, though.
 
    In the color mapper, you can then simply do something like:
    module ColorMapper(...)
    ...
    logic [7:0] ObjectR, ObjectG, ObjectB
    parameter ObjectXSize = 10'd10;
    parameter ObjectYSize = 10'd10;
    ...
    always_comb
    ...
         if(ObjectOn == 1'b1)
         begin
             Red = ObjectR
             Green = ObjectG
             Blue = ObjectB
         end
     ...
     ObjectSpriteTable ost(
                           .SpriteX(ObjectXSize - DistX), .SpriteY(ObjectYSize - DistY),
                           .SpriteR(ObjectR), .SpriteG(ObjectG), .SpriteB(ObjectB)
                           );
 
     See the comment at the top of the generation script if you're still confused.
*/
module tetrisBlock(input [9:0] SpriteX, SpriteY,
            output [7:0] SpriteR, SpriteG, SpriteB);

logic [9:0] X_Index, Y_Index;

assign X_Index = SpriteX % 10'd8;
assign Y_Index = SpriteY % 10'd8;
logic [9:0] SpriteTableR;

parameter bit [7:0] SpritePaletteR[21:0] = '{8'd36, 8'd52, 8'd46, 8'd31, 8'd34, 8'd66, 8'd55, 8'd61, 8'd38, 8'd11, 8'd16, 8'd43, 8'd49, 8'd25, 8'd4, 8'd8, 8'd19, 8'd22, 8'd27, 8'd1, 8'd29, 8'd13};

	always_comb
	begin
		SpriteTableR = 10'd0;
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableR = SpriteTableR_0_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableR = SpriteTableR_0_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableR = SpriteTableR_0_2[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableR = SpriteTableR_1_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableR = SpriteTableR_1_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableR = SpriteTableR_1_2[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableR = SpriteTableR_2_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableR = SpriteTableR_2_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableR = SpriteTableR_2_2[Y_Index][X_Index];
		end
	end

parameter bit [4:0] SpriteTableR_0_0[7:0][7:0] = '{'{5'd00,5'd19,5'd02,5'd02,5'd02,5'd02,5'd02,5'd02},
'{5'd14,5'd05,5'd06,5'd19,5'd19,5'd19,5'd19,5'd19},
'{5'd14,5'd10,5'd02,5'd02,5'd11,5'd11,5'd11,5'd11},
'{5'd14,5'd21,5'd15,5'd02,5'd12,5'd11,5'd02,5'd02},
'{5'd14,5'd21,5'd10,5'd09,5'd02,5'd12,5'd11,5'd11},
'{5'd14,5'd21,5'd10,5'd16,5'd09,5'd02,5'd12,5'd02},
'{5'd14,5'd21,5'd10,5'd16,5'd16,5'd09,5'd11,5'd11},
'{5'd14,5'd21,5'd10,5'd16,5'd16,5'd16,5'd10,5'd17}};

parameter bit [4:0] SpriteTableR_0_1[7:0][7:0] = '{'{5'd14,5'd21,5'd10,5'd16,5'd16,5'd10,5'd16,5'd21},
'{5'd14,5'd21,5'd10,5'd16,5'd16,5'd10,5'd16,5'd21},
'{5'd14,5'd21,5'd10,5'd16,5'd16,5'd10,5'd16,5'd21},
'{5'd14,5'd21,5'd10,5'd16,5'd16,5'd10,5'd16,5'd21},
'{5'd14,5'd21,5'd10,5'd16,5'd16,5'd10,5'd16,5'd21},
'{5'd14,5'd21,5'd10,5'd16,5'd10,5'd16,5'd15,5'd19},
'{5'd14,5'd21,5'd10,5'd10,5'd17,5'd15,5'd19,5'd19},
'{5'd14,5'd21,5'd10,5'd17,5'd15,5'd19,5'd19,5'd19}};

parameter bit [4:0] SpriteTableR_0_2[7:0][3:0] = '{'{5'd14,5'd21,5'd16,5'd15},
'{5'd19,5'd19,5'd19,5'd19},
'{5'd14,5'd20,5'd14,5'd19},
'{5'd19,5'd19,5'd19,5'd19},
'{5'd14,5'd09,5'd19,5'd19},
'{5'd19,5'd19,5'd19,5'd19},
'{5'd07,5'd07,5'd07,5'd07},
'{5'd07,5'd07,5'd07,5'd07}};

parameter bit [4:0] SpriteTableR_1_0[7:0][7:0] = '{'{5'd02,5'd02,5'd02,5'd02,5'd02,5'd02,5'd02,5'd02},
'{5'd19,5'd19,5'd19,5'd19,5'd19,5'd19,5'd19,5'd19},
'{5'd11,5'd11,5'd11,5'd11,5'd11,5'd11,5'd11,5'd11},
'{5'd02,5'd02,5'd02,5'd02,5'd02,5'd11,5'd11,5'd19},
'{5'd11,5'd11,5'd11,5'd11,5'd11,5'd11,5'd19,5'd21},
'{5'd02,5'd02,5'd02,5'd02,5'd02,5'd19,5'd21,5'd14},
'{5'd11,5'd11,5'd11,5'd11,5'd02,5'd21,5'd14,5'd09},
'{5'd17,5'd17,5'd17,5'd17,5'd17,5'd15,5'd15,5'd09}};

parameter bit [4:0] SpriteTableR_1_1[7:0][7:0] = '{'{5'd21,5'd21,5'd21,5'd21,5'd21,5'd09,5'd15,5'd09},
'{5'd21,5'd21,5'd21,5'd21,5'd21,5'd09,5'd15,5'd09},
'{5'd21,5'd21,5'd21,5'd21,5'd21,5'd09,5'd15,5'd09},
'{5'd21,5'd21,5'd21,5'd21,5'd21,5'd09,5'd15,5'd09},
'{5'd21,5'd21,5'd21,5'd21,5'd18,5'd09,5'd15,5'd09},
'{5'd19,5'd19,5'd19,5'd19,5'd19,5'd14,5'd09,5'd15},
'{5'd19,5'd19,5'd19,5'd19,5'd19,5'd19,5'd14,5'd09},
'{5'd19,5'd19,5'd19,5'd19,5'd19,5'd19,5'd19,5'd14}};

parameter bit [4:0] SpriteTableR_1_2[7:0][3:0] = '{'{5'd19,5'd19,5'd19,5'd19},
'{5'd19,5'd19,5'd19,5'd19},
'{5'd19,5'd19,5'd19,5'd19},
'{5'd19,5'd19,5'd19,5'd19},
'{5'd19,5'd19,5'd19,5'd19},
'{5'd19,5'd19,5'd19,5'd19},
'{5'd07,5'd07,5'd07,5'd07},
'{5'd07,5'd07,5'd07,5'd07}};

parameter bit [4:0] SpriteTableR_2_0[3:0][7:0] = '{'{5'd02,5'd02,5'd19,5'd03,5'd19,5'd07,5'd15,5'd09},
'{5'd12,5'd21,5'd14,5'd10,5'd21,5'd14,5'd09,5'd10},
'{5'd14,5'd09,5'd09,5'd10,5'd09,5'd15,5'd09,5'd10},
'{5'd09,5'd15,5'd09,5'd10,5'd09,5'd15,5'd09,5'd10}};

parameter bit [4:0] SpriteTableR_2_1[3:0][7:0] = '{'{5'd09,5'd15,5'd09,5'd10,5'd09,5'd15,5'd09,5'd10},
'{5'd09,5'd15,5'd09,5'd10,5'd09,5'd15,5'd09,5'd10},
'{5'd09,5'd15,5'd09,5'd10,5'd09,5'd15,5'd09,5'd10},
'{5'd15,5'd15,5'd09,5'd10,5'd09,5'd15,5'd09,5'd10}};

parameter bit [4:0] SpriteTableR_2_2[3:0][3:0] = '{'{5'd14,5'd09,5'd09,5'd10},
'{5'd19,5'd19,5'd21,5'd10},
'{5'd19,5'd19,5'd19,5'd09},
'{5'd07,5'd07,5'd07,5'd07}};

logic [9:0] SpriteTableG;

parameter bit [7:0] SpritePaletteG[39:0] = '{8'd33, 8'd67, 8'd58, 8'd70, 8'd29, 8'd253, 8'd219, 8'd228, 8'd17, 8'd202, 8'd178, 8'd187, 8'd184, 8'd196, 8'd158, 8'd145, 8'd21, 8'd208, 8'd169, 8'd181, 8'd189, 8'd161, 8'd121, 8'd172, 8'd124, 8'd132, 8'd175, 8'd134, 8'd115, 8'd118, 8'd128, 8'd112, 8'd137, 8'd108, 8'd206, 8'd141, 8'd41, 8'd23, 8'd46, 8'd50};

	always_comb
	begin
		SpriteTableG = 10'd0;
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableG = SpriteTableG_0_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableG = SpriteTableG_0_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableG = SpriteTableG_0_2[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableG = SpriteTableG_1_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableG = SpriteTableG_1_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableG = SpriteTableG_1_2[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableG = SpriteTableG_2_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableG = SpriteTableG_2_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableG = SpriteTableG_2_2[Y_Index][X_Index];
		end
	end

parameter bit [5:0] SpriteTableG_0_0[7:0][7:0] = '{'{6'd00,6'd01,6'd02,6'd02,6'd02,6'd02,6'd02,6'd02},
'{6'd00,6'd05,6'd06,6'd06,6'd06,6'd06,6'd06,6'd06},
'{6'd00,6'd09,6'd10,6'd11,6'd12,6'd12,6'd12,6'd12},
'{6'd00,6'd17,6'd18,6'd19,6'd20,6'd11,6'd11,6'd11},
'{6'd00,6'd17,6'd37,6'd18,6'd19,6'd20,6'd11,6'd11},
'{6'd00,6'd17,6'd37,6'd26,6'd37,6'd19,6'd20,6'd20},
'{6'd00,6'd17,6'd37,6'd26,6'd26,6'd37,6'd19,6'd19},
'{6'd00,6'd17,6'd37,6'd26,6'd26,6'd26,6'd18,6'd28}};

parameter bit [5:0] SpriteTableG_0_1[7:0][7:0] = '{'{6'd00,6'd17,6'd37,6'd26,6'd26,6'd26,6'd37,6'd24},
'{6'd00,6'd17,6'd37,6'd26,6'd26,6'd26,6'd37,6'd24},
'{6'd00,6'd17,6'd37,6'd26,6'd26,6'd26,6'd37,6'd24},
'{6'd00,6'd17,6'd37,6'd26,6'd26,6'd26,6'd18,6'd24},
'{6'd00,6'd17,6'd37,6'd26,6'd26,6'd26,6'd26,6'd24},
'{6'd00,6'd17,6'd37,6'd26,6'd37,6'd12,6'd15,6'd31},
'{6'd00,6'd17,6'd37,6'd37,6'd12,6'd15,6'd33,6'd29},
'{6'd00,6'd17,6'd37,6'd12,6'd15,6'd33,6'd29,6'd29}};

parameter bit [5:0] SpriteTableG_0_2[7:0][3:0] = '{'{6'd00,6'd34,6'd12,6'd15},
'{6'd33,6'd29,6'd29,6'd29},
'{6'd00,6'd06,6'd35,6'd33},
'{6'd29,6'd29,6'd29,6'd29},
'{6'd36,6'd13,6'd29,6'd25},
'{6'd25,6'd25,6'd25,6'd25},
'{6'd02,6'd38,6'd39,6'd39},
'{6'd39,6'd39,6'd39,6'd39}};

parameter bit [5:0] SpriteTableG_1_0[7:0][7:0] = '{'{6'd02,6'd02,6'd02,6'd02,6'd02,6'd02,6'd02,6'd02},
'{6'd06,6'd06,6'd06,6'd06,6'd06,6'd06,6'd06,6'd06},
'{6'd12,6'd12,6'd12,6'd12,6'd12,6'd12,6'd12,6'd12},
'{6'd11,6'd11,6'd11,6'd11,6'd11,6'd11,6'd11,6'd13},
'{6'd11,6'd11,6'd11,6'd11,6'd11,6'd11,6'd13,6'd21},
'{6'd20,6'd20,6'd20,6'd20,6'd20,6'd13,6'd21,6'd24},
'{6'd19,6'd19,6'd19,6'd19,6'd12,6'd21,6'd24,6'd27},
'{6'd22,6'd22,6'd22,6'd22,6'd29,6'd30,6'd27,6'd27}};

parameter bit [5:0] SpriteTableG_1_1[7:0][7:0] = '{'{6'd30,6'd30,6'd30,6'd30,6'd30,6'd25,6'd27,6'd27},
'{6'd30,6'd30,6'd30,6'd30,6'd30,6'd25,6'd27,6'd27},
'{6'd30,6'd30,6'd30,6'd30,6'd30,6'd25,6'd27,6'd27},
'{6'd30,6'd30,6'd30,6'd30,6'd30,6'd25,6'd27,6'd27},
'{6'd30,6'd30,6'd30,6'd30,6'd30,6'd27,6'd27,6'd27},
'{6'd29,6'd29,6'd29,6'd29,6'd29,6'd24,6'd32,6'd25},
'{6'd29,6'd29,6'd29,6'd29,6'd29,6'd28,6'd24,6'd32},
'{6'd29,6'd29,6'd29,6'd29,6'd29,6'd29,6'd28,6'd24}};

parameter bit [5:0] SpriteTableG_1_2[7:0][3:0] = '{'{6'd29,6'd29,6'd29,6'd29},
'{6'd29,6'd29,6'd29,6'd28},
'{6'd29,6'd29,6'd29,6'd29},
'{6'd29,6'd29,6'd29,6'd29},
'{6'd25,6'd25,6'd25,6'd25},
'{6'd25,6'd25,6'd25,6'd25},
'{6'd39,6'd39,6'd39,6'd39},
'{6'd39,6'd39,6'd39,6'd39}};

parameter bit [5:0] SpriteTableG_2_0[3:0][7:0] = '{'{6'd02,6'd02,6'd03,6'd04,6'd06,6'd07,6'd06,6'd08},
'{6'd13,6'd14,6'd15,6'd16,6'd21,6'd22,6'd14,6'd16},
'{6'd24,6'd25,6'd14,6'd16,6'd27,6'd25,6'd14,6'd16},
'{6'd27,6'd25,6'd14,6'd16,6'd27,6'd25,6'd14,6'd16}};

parameter bit [5:0] SpriteTableG_2_1[3:0][7:0] = '{'{6'd27,6'd25,6'd14,6'd16,6'd27,6'd25,6'd14,6'd16},
'{6'd27,6'd25,6'd14,6'd16,6'd27,6'd25,6'd14,6'd16},
'{6'd27,6'd25,6'd14,6'd16,6'd27,6'd25,6'd14,6'd16},
'{6'd25,6'd25,6'd14,6'd16,6'd32,6'd25,6'd14,6'd16}};

parameter bit [5:0] SpriteTableG_2_2[3:0][3:0] = '{'{6'd24,6'd32,6'd14,6'd16},
'{6'd28,6'd22,6'd21,6'd16},
'{6'd25,6'd30,6'd21,6'd37},
'{6'd39,6'd39,6'd39,6'd02}};

logic [9:0] SpriteTableB;

parameter bit [7:0] SpritePaletteB[33:0] = '{8'd32, 8'd75, 8'd64, 8'd77, 8'd29, 8'd41, 8'd255, 8'd26, 8'd38, 8'd231, 8'd237, 8'd234, 8'd244, 8'd216, 8'd226, 8'd23, 8'd219, 8'd190, 8'd198, 8'd228, 8'd192, 8'd181, 8'd187, 8'd184, 8'd194, 8'd206, 8'd201, 8'd176, 8'd204, 8'd45, 8'd210, 8'd253, 8'd57, 8'd48};

	always_comb
	begin
		SpriteTableB = 10'd0;
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableB = SpriteTableB_0_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableB = SpriteTableB_0_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd0 && SpriteX < 10'd8 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableB = SpriteTableB_0_2[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableB = SpriteTableB_1_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableB = SpriteTableB_1_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd8 && SpriteX < 10'd16 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableB = SpriteTableB_1_2[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd0 && SpriteY < 10'd8)
		begin
		    SpriteTableB = SpriteTableB_2_0[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd8 && SpriteY < 10'd16)
		begin
		    SpriteTableB = SpriteTableB_2_1[Y_Index][X_Index];
		end
		else
		if(SpriteX >= 10'd16 && SpriteX < 10'd20 && SpriteY >= 10'd16 && SpriteY < 10'd20)
		begin
		    SpriteTableB = SpriteTableB_2_2[Y_Index][X_Index];
		end
	end

parameter bit [5:0] SpriteTableB_0_0[7:0][7:0] = '{'{6'd00,6'd01,6'd02,6'd02,6'd02,6'd02,6'd02,6'd02},
'{6'd05,6'd06,6'd06,6'd06,6'd06,6'd06,6'd06,6'd06},
'{6'd08,6'd06,6'd09,6'd10,6'd11,6'd11,6'd11,6'd11},
'{6'd08,6'd06,6'd14,6'd09,6'd10,6'd10,6'd10,6'd10},
'{6'd08,6'd06,6'd14,6'd14,6'd09,6'd10,6'd10,6'd10},
'{6'd08,6'd06,6'd14,6'd19,6'd14,6'd11,6'd10,6'd10},
'{6'd08,6'd06,6'd14,6'd19,6'd19,6'd14,6'd09,6'd09},
'{6'd08,6'd06,6'd14,6'd19,6'd19,6'd19,6'd14,6'd21}};

parameter bit [5:0] SpriteTableB_0_1[7:0][7:0] = '{'{6'd08,6'd06,6'd14,6'd19,6'd19,6'd19,6'd14,6'd22},
'{6'd08,6'd06,6'd14,6'd19,6'd19,6'd19,6'd14,6'd22},
'{6'd08,6'd06,6'd14,6'd19,6'd19,6'd19,6'd14,6'd22},
'{6'd08,6'd06,6'd14,6'd19,6'd19,6'd19,6'd14,6'd22},
'{6'd08,6'd06,6'd14,6'd19,6'd19,6'd19,6'd09,6'd17},
'{6'd08,6'd06,6'd14,6'd19,6'd14,6'd11,6'd25,6'd21},
'{6'd08,6'd06,6'd14,6'd14,6'd11,6'd25,6'd27,6'd23},
'{6'd08,6'd06,6'd14,6'd10,6'd25,6'd27,6'd23,6'd23}};

parameter bit [5:0] SpriteTableB_0_2[7:0][3:0] = '{'{6'd08,6'd06,6'd11,6'd25},
'{6'd27,6'd23,6'd23,6'd23},
'{6'd08,6'd06,6'd28,6'd27},
'{6'd23,6'd23,6'd23,6'd23},
'{6'd29,6'd06,6'd26,6'd30},
'{6'd30,6'd30,6'd30,6'd30},
'{6'd32,6'd29,6'd33,6'd33},
'{6'd33,6'd33,6'd33,6'd33}};

parameter bit [5:0] SpriteTableB_1_0[7:0][7:0] = '{'{6'd02,6'd02,6'd02,6'd02,6'd02,6'd02,6'd02,6'd02},
'{6'd06,6'd06,6'd06,6'd06,6'd06,6'd06,6'd06,6'd06},
'{6'd11,6'd11,6'd11,6'd11,6'd11,6'd11,6'd11,6'd11},
'{6'd10,6'd10,6'd10,6'd10,6'd10,6'd10,6'd10,6'd12},
'{6'd10,6'd10,6'd10,6'd10,6'd10,6'd10,6'd12,6'd16},
'{6'd10,6'd10,6'd10,6'd10,6'd10,6'd12,6'd16,6'd20},
'{6'd09,6'd09,6'd09,6'd09,6'd11,6'd16,6'd20,6'd18},
'{6'd22,6'd22,6'd22,6'd22,6'd23,6'd24,6'd18,6'd18}};

parameter bit [5:0] SpriteTableB_1_1[7:0][7:0] = '{'{6'd20,6'd20,6'd20,6'd20,6'd17,6'd18,6'd18,6'd18},
'{6'd20,6'd20,6'd20,6'd20,6'd17,6'd18,6'd18,6'd18},
'{6'd20,6'd20,6'd20,6'd20,6'd17,6'd18,6'd18,6'd18},
'{6'd17,6'd17,6'd17,6'd17,6'd17,6'd18,6'd18,6'd18},
'{6'd20,6'd20,6'd20,6'd20,6'd20,6'd18,6'd18,6'd18},
'{6'd23,6'd23,6'd23,6'd23,6'd23,6'd17,6'd26,6'd18},
'{6'd23,6'd23,6'd23,6'd23,6'd23,6'd21,6'd17,6'd26},
'{6'd23,6'd23,6'd23,6'd23,6'd23,6'd23,6'd21,6'd17}};

parameter bit [5:0] SpriteTableB_1_2[7:0][3:0] = '{'{6'd23,6'd23,6'd23,6'd23},
'{6'd23,6'd23,6'd23,6'd21},
'{6'd23,6'd23,6'd23,6'd23},
'{6'd23,6'd23,6'd23,6'd23},
'{6'd30,6'd30,6'd30,6'd30},
'{6'd30,6'd30,6'd30,6'd30},
'{6'd33,6'd33,6'd33,6'd33},
'{6'd33,6'd33,6'd33,6'd33}};

parameter bit [5:0] SpriteTableB_2_0[3:0][7:0] = '{'{6'd02,6'd02,6'd03,6'd04,6'd06,6'd06,6'd06,6'd07},
'{6'd12,6'd13,6'd14,6'd15,6'd16,6'd17,6'd11,6'd15},
'{6'd17,6'd18,6'd11,6'd15,6'd18,6'd18,6'd11,6'd15},
'{6'd18,6'd18,6'd11,6'd15,6'd18,6'd18,6'd11,6'd15}};

parameter bit [5:0] SpriteTableB_2_1[3:0][7:0] = '{'{6'd18,6'd18,6'd11,6'd15,6'd18,6'd18,6'd11,6'd15},
'{6'd18,6'd18,6'd11,6'd15,6'd18,6'd18,6'd11,6'd15},
'{6'd18,6'd18,6'd11,6'd15,6'd18,6'd18,6'd11,6'd15},
'{6'd18,6'd18,6'd11,6'd15,6'd26,6'd18,6'd11,6'd15}};

parameter bit [5:0] SpriteTableB_2_2[3:0][3:0] = '{'{6'd17,6'd26,6'd11,6'd15},
'{6'd21,6'd22,6'd10,6'd15},
'{6'd30,6'd25,6'd31,6'd07},
'{6'd33,6'd33,6'd33,6'd32}};

assign SpriteR = SpritePaletteR[SpriteTableR];
assign SpriteG = SpritePaletteG[SpriteTableG];
assign SpriteB = SpritePaletteB[SpriteTableB];

endmodule
