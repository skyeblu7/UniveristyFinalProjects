
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000230

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00012444 memsz 0x00012444 flags r-x
    LOAD off    0x00013464 vaddr 0x01012464 paddr 0x01013f50 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00015a3c vaddr 0x01015a3c paddr 0x01015a3c align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000117bc  01000230  01000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  010119ec  010119ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  01012464  01013f50  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  01015a3c  01015a3c  00015a3c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014f50  2**0
                  CONTENTS
  7 .sdram        00000000  01015ba0  01015ba0  00014f50  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014f50  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f18  00000000  00000000  00014f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023707  00000000  00000000  00015e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000090c8  00000000  00000000  00039597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b88b  00000000  00000000  0004265f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002384  00000000  00000000  0004deec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000039f5  00000000  00000000  00050270  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  00053c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006b4d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  0006b518  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00070186  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00070189  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00070195  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00070196  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00070197  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007019b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007019f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000701a3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000701ae  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000701b9  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000701c4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000025  00000000  00000000  000701cc  2**0
                  CONTENTS, READONLY
 30 .jdi          0000519e  00000000  00000000  000701f1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000781b2  00000000  00000000  0007538f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
01000230 l    d  .text	00000000 .text
010119ec l    d  .rodata	00000000 .rodata
01012464 l    d  .rwdata	00000000 .rwdata
01015a3c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01015ba0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
01000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
01015a3c l     O .bss	00000002 ctl_reg.3589
01015a3e l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
010121aa l     O .rodata	00000010 zeroes.4404
0100475c l     F .text	000000bc __sbprintf
010121ba l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0100496c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010064c4 l     F .text	00000008 __fp_unlock
010064d8 l     F .text	0000019c __sinit.part.1
01006674 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01012464 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
010128a8 l     O .rwdata	00000020 lc_ctype_charset
01012888 l     O .rwdata	00000020 lc_message_charset
010128c8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
010121ec l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
01009b48 l     F .text	000000fc __sprint_r.part.0
01012310 l     O .rodata	00000010 zeroes.4349
0100b184 l     F .text	000000bc __sbprintf
01012320 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0100f1cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100f2e0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100f30c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100f400 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100f4e8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100f5d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100f7b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01013f40 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0100fa54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100fb90 l     F .text	00000034 alt_dev_reg
01012eb0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100fe6c l     F .text	0000020c altera_avalon_jtag_uart_irq
01010078 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01010954 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01010db4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01010f14 l     F .text	0000003c alt_get_errno
01010f50 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
01015a74 g     O .bss	00000004 alt_instruction_exception_handler
0100918c g     F .text	00000074 _mprec_log10
01009278 g     F .text	0000008c __any_on
0100b738 g     F .text	00000054 _isatty_r
010121f8 g     O .rodata	00000028 __mprec_tinytens
0100f6ec g     F .text	0000007c alt_main
010022f8 g     F .text	000000c0 _puts_r
01015aa0 g     O .bss	00000100 alt_irq
0100b78c g     F .text	00000060 _lseek_r
01013f50 g       *ABS*	00000000 __flash_rwdata_start
0100dba4 g     F .text	00000088 .hidden __eqdf2
01015ba0 g       *ABS*	00000000 __alt_heap_start
010022bc g     F .text	0000003c printf
0100b9a4 g     F .text	0000009c _wcrtomb_r
01009a08 g     F .text	0000005c __sseek
01006824 g     F .text	00000010 __sinit
0100b84c g     F .text	00000140 __swbuf_r
010072f8 g     F .text	0000007c _setlocale_r
0100667c g     F .text	00000078 __sfmoreglue
0100f78c g     F .text	00000024 __malloc_unlock
0100218c g     F .text	00000080 UsbGetRetryCnt
01007fc8 g     F .text	0000015c memmove
0100026c g     F .text	00000088 IO_init
0100680c g     F .text	00000018 _cleanup
0100824c g     F .text	000000a8 _Balloc
0100dc2c g     F .text	000000dc .hidden __gtdf2
0101133c g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100b6dc g     F .text	0000005c _fstat_r
01015a58 g     O .bss	00000004 errno
01009984 g     F .text	00000008 __seofread
01015a60 g     O .bss	00000004 alt_argv
0101bf10 g       *ABS*	00000000 _gp
0100fa24 g     F .text	00000030 usleep
01012d30 g     O .rwdata	00000180 alt_fd_list
01011360 g     F .text	00000090 alt_find_dev
01007e80 g     F .text	00000148 memcpy
010064cc g     F .text	0000000c _cleanup_r
0100efe4 g     F .text	000000dc .hidden __floatsidf
01010e98 g     F .text	0000007c alt_io_redirect
0100dd08 g     F .text	000000f4 .hidden __ltdf2
010119ec g       *ABS*	00000000 __DTOR_END__
010023b8 g     F .text	00000014 puts
010115bc g     F .text	0000009c alt_exception_cause_generated_bad_addr
01009868 g     F .text	00000074 __fpclassifyd
010090e8 g     F .text	000000a4 __ratio
0100b168 g     F .text	0000001c __vfiprintf_internal
01010270 g     F .text	0000021c altera_avalon_jtag_uart_read
0100228c g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100c844 g     F .text	00000064 .hidden __udivsi3
0100f43c g     F .text	000000ac isatty
01012248 g     O .rodata	000000c8 __mprec_tens
01007374 g     F .text	0000000c __locale_charset
01015a54 g     O .bss	00000004 __malloc_top_pad
01001818 g     F .text	00000268 UsbGetConfigDesc2
01013f18 g     O .rwdata	00000004 __mb_cur_max
010073a4 g     F .text	0000000c _localeconv_r
01008680 g     F .text	0000003c __i2b
01006ca8 g     F .text	000004c8 __sfvwrite_r
010098dc g     F .text	00000054 _sbrk_r
0100b7ec g     F .text	00000060 _read_r
01013f38 g     O .rwdata	00000004 alt_max_fd
0100b3d0 g     F .text	000000f0 _fclose_r
01006494 g     F .text	00000030 fflush
01015a50 g     O .bss	00000004 __malloc_max_sbrked_mem
0100c928 g     F .text	000008ac .hidden __adddf3
01008e90 g     F .text	0000010c __b2d
0100c188 g     F .text	000005c4 .hidden __umoddi3
0100f610 g     F .text	000000dc lseek
01013f10 g     O .rwdata	00000004 _global_impure_ptr
01009304 g     F .text	00000564 _realloc_r
01015ba0 g       *ABS*	00000000 __bss_end
01010cc4 g     F .text	000000f0 alt_iic_isr_register
01011234 g     F .text	00000108 alt_tick
0100bb8c g     F .text	000005fc .hidden __udivdi3
0100b638 g     F .text	00000024 _fputwc_r
01012220 g     O .rodata	00000028 __mprec_bigtens
01008464 g     F .text	00000104 __s2b
0100f0c0 g     F .text	000000a8 .hidden __floatunsidf
01008bd0 g     F .text	00000060 __mcmp
01001268 g     F .text	00000100 UsbSetAddress
01006844 g     F .text	00000018 __fp_lock_all
01010c78 g     F .text	0000004c alt_ic_irq_enabled
01011198 g     F .text	0000009c alt_alarm_stop
01015a68 g     O .bss	00000004 alt_irq_active
010000fc g     F .exceptions	000000d4 alt_irq_handler
01012d08 g     O .rwdata	00000028 alt_dev_null
01010934 g     F .text	00000020 alt_dcache_flush_all
01008568 g     F .text	00000068 __hi0bits
01000364 g     F .text	00000068 IO_read
0100ef64 g     F .text	00000080 .hidden __fixdfsi
01013f50 g       *ABS*	00000000 __ram_rwdata_end
01013f30 g     O .rwdata	00000008 alt_dev_list
0100fa90 g     F .text	00000100 write
01012464 g       *ABS*	00000000 __ram_rodata_end
0100f348 g     F .text	000000b8 fstat
0100dd08 g     F .text	000000f4 .hidden __ledf2
0100220c g     F .text	00000080 UsbPrintMem
01008948 g     F .text	00000140 __pow5mult
01009c5c g     F .text	0000150c ___vfiprintf_internal_r
01015a48 g     O .bss	00000004 __nlocale_changed
0100c8a8 g     F .text	00000058 .hidden __umodsi3
01015ba0 g       *ABS*	00000000 end
0100fdac g     F .text	000000c0 altera_avalon_jtag_uart_init
010001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
010119ec g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100f168 g     F .text	00000064 .hidden __clzsi2
0101048c g     F .text	00000224 altera_avalon_jtag_uart_write
01006834 g     F .text	00000004 __sfp_lock_acquire
01007d9c g     F .text	000000e4 memchr
01002464 g     F .text	000022dc ___vfprintf_internal_r
01001b80 g     F .text	00000100 UsbClassRequest
01006998 g     F .text	00000310 _free_r
01007380 g     F .text	00000010 __locale_mb_cur_max
01011838 g     F .text	00000180 __call_exitprocs
01015a44 g     O .bss	00000004 __mlocale_changed
01013f1c g     O .rwdata	00000004 __malloc_sbrk_base
01000230 g     F .text	0000003c _start
01015a6c g     O .bss	00000004 _alt_tick_rate
01008a88 g     F .text	00000148 __lshift
01015a70 g     O .bss	00000004 _alt_nticks
0100f7ec g     F .text	00000104 read
0100fbfc g     F .text	0000004c alt_sys_init
01011720 g     F .text	00000118 __register_exitproc
010086bc g     F .text	0000028c __multiply
01010118 g     F .text	00000068 altera_avalon_jtag_uart_close
0100c900 g     F .text	00000028 .hidden __mulsi3
01012464 g       *ABS*	00000000 __ram_rwdata_start
010119ec g       *ABS*	00000000 __ram_rodata_start
01015a78 g     O .bss	00000028 __malloc_current_mallinfo
01008f9c g     F .text	0000014c __d2b
01001368 g     F .text	00000148 UsbGetDeviceDesc1
0100fc48 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
010114f8 g     F .text	000000c4 alt_get_fd
010107dc g     F .text	00000158 alt_busy_sleep
0100b2a0 g     F .text	00000054 _close_r
010116a4 g     F .text	0000007c memcmp
0100fd08 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01015ba0 g       *ABS*	00000000 __alt_stack_base
0100fd58 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
01004818 g     F .text	00000154 __swsetup_r
0100d1d4 g     F .text	000009d0 .hidden __divdf3
010066f4 g     F .text	00000118 __sfp
01009200 g     F .text	00000078 __copybits
01012900 g     O .rwdata	00000408 __malloc_av_
01006840 g     F .text	00000004 __sinit_lock_release
0100ddfc g     F .text	0000086c .hidden __muldf3
01009930 g     F .text	00000054 __sread
01002108 g     F .text	00000084 UsbWaitTDListDone
010113f0 g     F .text	00000108 alt_find_file
01010990 g     F .text	000000a4 alt_dev_llist_insert
0100f768 g     F .text	00000024 __malloc_lock
0100f974 g     F .text	000000b0 sbrk
01006438 g     F .text	0000005c _fflush_r
0100b2f4 g     F .text	000000dc _calloc_r
01015a3c g       *ABS*	00000000 __bss_start
01008124 g     F .text	00000128 memset
010003cc g     F .text	00000d44 main
01015a64 g     O .bss	00000004 alt_envp
01015a4c g     O .bss	00000004 __malloc_max_total_mem
0100fca8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01001a80 g     F .text	00000100 UsbSetConfig
0100b98c g     F .text	00000018 __swbuf
01009a64 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
0100b4c0 g     F .text	00000014 fclose
01004b94 g     F .text	00001688 _dtoa_r
01007590 g     F .text	0000080c _malloc_r
0100bb00 g     F .text	00000030 __ascii_wctomb
01013f3c g     O .rwdata	00000004 alt_errno
01007170 g     F .text	000000c4 _fwalk
0100c74c g     F .text	00000084 .hidden __divsi3
01006874 g     F .text	00000124 _malloc_trim_r
01001c80 g     F .text	00000148 UsbGetHidDesc
010119ec g       *ABS*	00000000 __CTOR_END__
01009a6c g     F .text	000000dc strcmp
010119ec g       *ABS*	00000000 __flash_rodata_start
010119ec g       *ABS*	00000000 __DTOR_LIST__
0100dba4 g     F .text	00000088 .hidden __nedf2
01001168 g     F .text	0000004c UsbRead
0100fbc4 g     F .text	00000038 alt_irq_init
0100f8f0 g     F .text	00000084 alt_release_fd
01012330 g     O .rodata	00000100 .hidden __clz_tab
01015a40 g     O .bss	00000004 _PathLocale
01011658 g     F .text	00000014 atexit
0100b240 g     F .text	00000060 _write_r
010073b0 g     F .text	00000018 setlocale
01013f14 g     O .rwdata	00000004 _impure_ptr
01015a5c g     O .bss	00000004 alt_argc
0100621c g     F .text	0000021c __sflush_r
01010a94 g     F .text	00000060 _do_dtors
0100739c g     F .text	00000008 __locale_cjk_lang
01000020 g       .exceptions	00000000 alt_irq_entry
01008e2c g     F .text	00000064 __ulp
0100685c g     F .text	00000018 __fp_unlock_all
01013f28 g     O .rwdata	00000008 alt_fs_list
01001dc8 g     F .text	00000340 UsbGetReportDesc
01000020 g       *ABS*	00000000 __ram_exceptions_start
010073c8 g     F .text	0000000c localeconv
01010b14 g     F .text	00000050 alt_ic_isr_register
01013f50 g       *ABS*	00000000 _edata
01015ba0 g       *ABS*	00000000 _end
01001110 g     F .text	00000058 UsbWrite
0100b4d4 g     F .text	00000164 __fputwc
01000230 g       *ABS*	00000000 __ram_exceptions_end
01010180 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01010bec g     F .text	0000008c alt_ic_irq_disable
0100998c g     F .text	0000007c __swrite
01013f20 g     O .rwdata	00000004 __malloc_trim_threshold
01007390 g     F .text	0000000c __locale_msgcharset
0101166c g     F .text	00000038 exit
01007234 g     F .text	000000c4 _fwalk_reent
01008c30 g     F .text	000001fc __mdiff
0100c7d0 g     F .text	00000074 .hidden __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01006838 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
010002f4 g     F .text	00000070 IO_write
010119b8 g     F .text	00000034 _exit
010106b0 g     F .text	0000012c alt_alarm_start
010073d4 g     F .text	000001bc __smakebuf_r
010023cc g     F .text	00000098 strlen
0101103c g     F .text	0000015c open
0100dc2c g     F .text	000000dc .hidden __gedf2
01013f24 g     O .rwdata	00000004 __wctomb
01009c44 g     F .text	00000018 __sprint_r
01010af4 g     F .text	00000020 alt_icache_flush_all
01013f44 g     O .rwdata	00000004 alt_priority_mask
01010b64 g     F .text	00000088 alt_ic_irq_enable
01004740 g     F .text	0000001c __vfprintf_internal
0100bb30 g     F .text	0000005c _wctomb_r
0100e668 g     F .text	000008fc .hidden __subdf3
010085d0 g     F .text	000000b0 __lo0bits
01001688 g     F .text	00000190 UsbGetConfigDesc1
01013f48 g     O .rwdata	00000008 alt_alarm_list
01010a34 g     F .text	00000060 _do_ctors
010011b4 g     F .text	000000b4 UsbSoftReset
0100ba40 g     F .text	000000c0 wcrtomb
0100f208 g     F .text	000000d8 close
010014b0 g     F .text	000001d8 UsbGetDeviceDesc2
0100f550 g     F .text	00000084 alt_load
0100b65c g     F .text	00000080 fputwc
0100683c g     F .text	00000004 __sinit_lock_acquire
0100831c g     F .text	00000148 __multadd
010082f4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08408c14 	ori	at,at,560
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000fc0 	call	10000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000706 	br	10000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1000098:	10001d00 	call	10001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100009c:	1000021e 	bne	r2,zero,10000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000f8:	ef80083a 	eret

010000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000fc:	defff904 	addi	sp,sp,-28
 1000100:	dfc00615 	stw	ra,24(sp)
 1000104:	df000515 	stw	fp,20(sp)
 1000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000110:	0005313a 	rdctl	r2,ipending
 1000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000124:	00800044 	movi	r2,1
 1000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100012c:	e0fffb17 	ldw	r3,-20(fp)
 1000130:	e0bffc17 	ldw	r2,-16(fp)
 1000134:	1884703a 	and	r2,r3,r2
 1000138:	10001426 	beq	r2,zero,100018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100013c:	00804074 	movhi	r2,257
 1000140:	1096a804 	addi	r2,r2,23200
 1000144:	e0fffd17 	ldw	r3,-12(fp)
 1000148:	180690fa 	slli	r3,r3,3
 100014c:	10c5883a 	add	r2,r2,r3
 1000150:	10c00017 	ldw	r3,0(r2)
 1000154:	00804074 	movhi	r2,257
 1000158:	1096a804 	addi	r2,r2,23200
 100015c:	e13ffd17 	ldw	r4,-12(fp)
 1000160:	200890fa 	slli	r4,r4,3
 1000164:	1105883a 	add	r2,r2,r4
 1000168:	10800104 	addi	r2,r2,4
 100016c:	10800017 	ldw	r2,0(r2)
 1000170:	1009883a 	mov	r4,r2
 1000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100017c:	0005313a 	rdctl	r2,ipending
 1000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000184:	e0bfff17 	ldw	r2,-4(fp)
 1000188:	00000706 	br	10001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100018c:	e0bffc17 	ldw	r2,-16(fp)
 1000190:	1085883a 	add	r2,r2,r2
 1000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000198:	e0bffd17 	ldw	r2,-12(fp)
 100019c:	10800044 	addi	r2,r2,1
 10001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a4:	003fe106 	br	100012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
 10001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001ac:	e0bffb17 	ldw	r2,-20(fp)
 10001b0:	103fdb1e 	bne	r2,zero,1000120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001b4:	0001883a 	nop
}
 10001b8:	0001883a 	nop
 10001bc:	e037883a 	mov	sp,fp
 10001c0:	dfc00117 	ldw	ra,4(sp)
 10001c4:	df000017 	ldw	fp,0(sp)
 10001c8:	dec00204 	addi	sp,sp,8
 10001cc:	f800283a 	ret

010001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10001d0:	defffb04 	addi	sp,sp,-20
 10001d4:	dfc00415 	stw	ra,16(sp)
 10001d8:	df000315 	stw	fp,12(sp)
 10001dc:	df000304 	addi	fp,sp,12
 10001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 10001e4:	00bfffc4 	movi	r2,-1
 10001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 10001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 10001f0:	d0a6d917 	ldw	r2,-25756(gp)
 10001f4:	10000726 	beq	r2,zero,1000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 10001f8:	d0a6d917 	ldw	r2,-25756(gp)
 10001fc:	e0fffd17 	ldw	r3,-12(fp)
 1000200:	e1bffe17 	ldw	r6,-8(fp)
 1000204:	e17fff17 	ldw	r5,-4(fp)
 1000208:	1809883a 	mov	r4,r3
 100020c:	103ee83a 	callr	r2
 1000210:	00000206 	br	100021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1000218:	0005883a 	mov	r2,zero
}
 100021c:	e037883a 	mov	sp,fp
 1000220:	dfc00117 	ldw	ra,4(sp)
 1000224:	df000017 	ldw	fp,0(sp)
 1000228:	dec00204 	addi	sp,sp,8
 100022c:	f800283a 	ret

Disassembly of section .text:

01000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000230:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 1000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 1000238:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 100023c:	d6afc414 	ori	gp,gp,48912
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000240:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 1000244:	10968f14 	ori	r2,r2,23100

    movhi r3, %hi(__bss_end)
 1000248:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 100024c:	18d6e814 	ori	r3,r3,23456

    beq r2, r3, 1f
 1000250:	10c00326 	beq	r2,r3,1000260 <_start+0x30>

0:
    stw zero, (r2)
 1000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 100025c:	10fffd36 	bltu	r2,r3,1000254 <__alt_data_end+0xff800254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000260:	100f5500 	call	100f550 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000264:	100f6ec0 	call	100f6ec <alt_main>

01000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000268:	003fff06 	br	1000268 <__alt_data_end+0xff800268>

0100026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 100026c:	deffff04 	addi	sp,sp,-4
 1000270:	df000015 	stw	fp,0(sp)
 1000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 1000278:	00800c04 	movi	r2,48
 100027c:	00c00044 	movi	r3,1
 1000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 1000284:	00801004 	movi	r2,64
 1000288:	00c00044 	movi	r3,1
 100028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 1000290:	00801804 	movi	r2,96
 1000294:	00c00044 	movi	r3,1
 1000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 100029c:	00801404 	movi	r2,80
 10002a0:	00c00044 	movi	r3,1
 10002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 10002a8:	00802004 	movi	r2,128
 10002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 10002b0:	00801c04 	movi	r2,112
 10002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 10002b8:	00801004 	movi	r2,64
 10002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 10002c0:	00800c04 	movi	r2,48
 10002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 10002c8:	00800c04 	movi	r2,48
 10002cc:	00c00044 	movi	r3,1
 10002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 10002d4:	00801004 	movi	r2,64
 10002d8:	00c00044 	movi	r3,1
 10002dc:	10c00005 	stb	r3,0(r2)
}
 10002e0:	0001883a 	nop
 10002e4:	e037883a 	mov	sp,fp
 10002e8:	df000017 	ldw	fp,0(sp)
 10002ec:	dec00104 	addi	sp,sp,4
 10002f0:	f800283a 	ret

010002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 10002f4:	defffd04 	addi	sp,sp,-12
 10002f8:	df000215 	stw	fp,8(sp)
 10002fc:	df000204 	addi	fp,sp,8
 1000300:	2007883a 	mov	r3,r4
 1000304:	2805883a 	mov	r2,r5
 1000308:	e0fffe05 	stb	r3,-8(fp)
 100030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address=Address;
 1000310:	00802004 	movi	r2,128
 1000314:	e0fffe03 	ldbu	r3,-8(fp)
 1000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs=0;
 100031c:	00801004 	movi	r2,64
 1000320:	10000005 	stb	zero,0(r2)
	*otg_hpi_w=0;
 1000324:	00801404 	movi	r2,80
 1000328:	10000005 	stb	zero,0(r2)
	*otg_hpi_data=Data;
 100032c:	00801c04 	movi	r2,112
 1000330:	e0ffff0b 	ldhu	r3,-4(fp)
 1000334:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w=1;
 1000338:	00801404 	movi	r2,80
 100033c:	00c00044 	movi	r3,1
 1000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs=1;
 1000344:	00801004 	movi	r2,64
 1000348:	00c00044 	movi	r3,1
 100034c:	10c00005 	stb	r3,0(r2)
}
 1000350:	0001883a 	nop
 1000354:	e037883a 	mov	sp,fp
 1000358:	df000017 	ldw	fp,0(sp)
 100035c:	dec00104 	addi	sp,sp,4
 1000360:	f800283a 	ret

01000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 1000364:	defffd04 	addi	sp,sp,-12
 1000368:	df000215 	stw	fp,8(sp)
 100036c:	df000204 	addi	fp,sp,8
 1000370:	2005883a 	mov	r2,r4
 1000374:	e0bfff05 	stb	r2,-4(fp)
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);

	*otg_hpi_address=Address;
 1000378:	00802004 	movi	r2,128
 100037c:	e0ffff03 	ldbu	r3,-4(fp)
 1000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs=0;
 1000384:	00801004 	movi	r2,64
 1000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r=0;
 100038c:	00801804 	movi	r2,96
 1000390:	10000005 	stb	zero,0(r2)
	temp=*otg_hpi_data;
 1000394:	00801c04 	movi	r2,112
 1000398:	10800017 	ldw	r2,0(r2)
 100039c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r=1;
 10003a0:	00801804 	movi	r2,96
 10003a4:	00c00044 	movi	r3,1
 10003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs=1;
 10003ac:	00801004 	movi	r2,64
 10003b0:	00c00044 	movi	r3,1
 10003b4:	10c00005 	stb	r3,0(r2)
	return temp;
 10003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 10003bc:	e037883a 	mov	sp,fp
 10003c0:	df000017 	ldw	fp,0(sp)
 10003c4:	dec00104 	addi	sp,sp,4
 10003c8:	f800283a 	ret

010003cc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 10003cc:	defff904 	addi	sp,sp,-28
 10003d0:	dfc00615 	stw	ra,24(sp)
 10003d4:	df000515 	stw	fp,20(sp)
 10003d8:	df000504 	addi	fp,sp,20
	IO_init();
 10003dc:	100026c0 	call	100026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 10003e0:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 10003e4:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 10003e8:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 10003ec:	01004074 	movhi	r4,257
 10003f0:	21067b04 	addi	r4,r4,6636
 10003f4:	10023b80 	call	10023b8 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 10003f8:	10011b40 	call	10011b4 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 10003fc:	000b883a 	mov	r5,zero
 1000400:	01005104 	movi	r4,324
 1000404:	10011100 	call	1001110 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 1000408:	017fffd4 	movui	r5,65535
 100040c:	01302414 	movui	r4,49296
 1000410:	10011100 	call	1001110 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 1000414:	01409604 	movi	r5,600
 1000418:	01006d04 	movi	r4,436
 100041c:	10011100 	call	1001110 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 1000420:	00811004 	movi	r2,1088
 1000424:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 1000428:	e0bffb0b 	ldhu	r2,-20(fp)
 100042c:	100b883a 	mov	r5,r2
 1000430:	01005084 	movi	r4,322
 1000434:	10011100 	call	1001110 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 1000438:	00808404 	movi	r2,528
 100043c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 1000440:	e0bffe0b 	ldhu	r2,-8(fp)
 1000444:	100b883a 	mov	r5,r2
 1000448:	01302314 	movui	r4,49292
 100044c:	10011100 	call	1001110 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 1000450:	000b883a 	mov	r5,zero
 1000454:	01007104 	movi	r4,452
 1000458:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 100045c:	000b883a 	mov	r5,zero
 1000460:	01007184 	movi	r4,454
 1000464:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 1000468:	000b883a 	mov	r5,zero
 100046c:	01007204 	movi	r4,456
 1000470:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 1000474:	000b883a 	mov	r5,zero
 1000478:	01007284 	movi	r4,458
 100047c:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 1000480:	000b883a 	mov	r5,zero
 1000484:	01007304 	movi	r4,460
 1000488:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 100048c:	000b883a 	mov	r5,zero
 1000490:	01007384 	movi	r4,462
 1000494:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 1000498:	000b883a 	mov	r5,zero
 100049c:	01007404 	movi	r4,464
 10004a0:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 10004a4:	000b883a 	mov	r5,zero
 10004a8:	01007484 	movi	r4,466
 10004ac:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 10004b0:	000b883a 	mov	r5,zero
 10004b4:	01007504 	movi	r4,468
 10004b8:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 10004bc:	000b883a 	mov	r5,zero
 10004c0:	01007584 	movi	r4,470
 10004c4:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 10004c8:	000b883a 	mov	r5,zero
 10004cc:	01007604 	movi	r4,472
 10004d0:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 10004d4:	000b883a 	mov	r5,zero
 10004d8:	01007684 	movi	r4,474
 10004dc:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 10004e0:	000b883a 	mov	r5,zero
 10004e4:	01007704 	movi	r4,476
 10004e8:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 10004ec:	000b883a 	mov	r5,zero
 10004f0:	01007784 	movi	r4,478
 10004f4:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 10004f8:	01401c84 	movi	r5,114
 10004fc:	01007084 	movi	r4,450
 1000500:	10011100 	call	1001110 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 1000504:	01738054 	movui	r5,52737
 1000508:	01000044 	movi	r4,1
 100050c:	10002f40 	call	10002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 1000510:	0001883a 	nop
 1000514:	010000c4 	movi	r4,3
 1000518:	10003640 	call	1000364 <IO_read>
 100051c:	10bfffcc 	andi	r2,r2,65535
 1000520:	103ffc26 	beq	r2,zero,1000514 <__alt_data_end+0xff800514>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 1000524:	00000806 	br	1000548 <main+0x17c>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 1000528:	01000044 	movi	r4,1
 100052c:	10003640 	call	1000364 <IO_read>
 1000530:	10bfffcc 	andi	r2,r2,65535
 1000534:	100b883a 	mov	r5,r2
 1000538:	01004074 	movhi	r4,257
 100053c:	21068104 	addi	r4,r4,6660
 1000540:	10022bc0 	call	10022bc <printf>
		goto USB_HOT_PLUG;
 1000544:	003fac06 	br	10003f8 <__alt_data_end+0xff8003f8>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 1000548:	01000044 	movi	r4,1
 100054c:	10003640 	call	1000364 <IO_read>
 1000550:	10bfffcc 	andi	r2,r2,65535
 1000554:	1083fb58 	cmpnei	r2,r2,4077
 1000558:	103ff31e 	bne	r2,zero,1000528 <__alt_data_end+0xff800528>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 100055c:	01004074 	movhi	r4,257
 1000560:	21068a04 	addi	r4,r4,6696
 1000564:	10022bc0 	call	10022bc <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 1000568:	01401d04 	movi	r5,116
 100056c:	01007084 	movi	r4,450
 1000570:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 1000574:	01400f04 	movi	r5,60
 1000578:	01007104 	movi	r4,452
 100057c:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 1000580:	000b883a 	mov	r5,zero
 1000584:	01007184 	movi	r4,454
 1000588:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 100058c:	000b883a 	mov	r5,zero
 1000590:	01007204 	movi	r4,456
 1000594:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 1000598:	000b883a 	mov	r5,zero
 100059c:	01007284 	movi	r4,458
 10005a0:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 10005a4:	000b883a 	mov	r5,zero
 10005a8:	01007304 	movi	r4,460
 10005ac:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 10005b0:	000b883a 	mov	r5,zero
 10005b4:	01007384 	movi	r4,462
 10005b8:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 10005bc:	000b883a 	mov	r5,zero
 10005c0:	01007404 	movi	r4,464
 10005c4:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 10005c8:	000b883a 	mov	r5,zero
 10005cc:	01007484 	movi	r4,466
 10005d0:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 10005d4:	000b883a 	mov	r5,zero
 10005d8:	01007504 	movi	r4,468
 10005dc:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 10005e0:	000b883a 	mov	r5,zero
 10005e4:	01007584 	movi	r4,470
 10005e8:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 10005ec:	000b883a 	mov	r5,zero
 10005f0:	01007604 	movi	r4,472
 10005f4:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 10005f8:	000b883a 	mov	r5,zero
 10005fc:	01007684 	movi	r4,474
 1000600:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 1000604:	000b883a 	mov	r5,zero
 1000608:	01007704 	movi	r4,476
 100060c:	10011100 	call	1001110 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 1000610:	000b883a 	mov	r5,zero
 1000614:	01007784 	movi	r4,478
 1000618:	10011100 	call	1001110 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 100061c:	01738054 	movui	r5,52737
 1000620:	01000044 	movi	r4,1
 1000624:	10002f40 	call	10002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 1000628:	0001883a 	nop
 100062c:	01000044 	movi	r4,1
 1000630:	10003640 	call	1000364 <IO_read>
 1000634:	10bfffcc 	andi	r2,r2,65535
 1000638:	1083fb58 	cmpnei	r2,r2,4077
 100063c:	10000826 	beq	r2,zero,1000660 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 1000640:	01000044 	movi	r4,1
 1000644:	10003640 	call	1000364 <IO_read>
 1000648:	10bfffcc 	andi	r2,r2,65535
 100064c:	100b883a 	mov	r5,r2
 1000650:	01004074 	movhi	r4,257
 1000654:	21068104 	addi	r4,r4,6660
 1000658:	10022bc0 	call	10022bc <printf>
		goto USB_HOT_PLUG;
 100065c:	003f6606 	br	10003f8 <__alt_data_end+0xff8003f8>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 1000660:	00b02284 	movi	r2,-16246
 1000664:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 1000668:	008c0004 	movi	r2,12288
 100066c:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 1000670:	00880004 	movi	r2,8192
 1000674:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 1000678:	d0a6cb0b 	ldhu	r2,-25812(gp)
 100067c:	10bfffcc 	andi	r2,r2,65535
 1000680:	1009883a 	mov	r4,r2
 1000684:	10011680 	call	1001168 <UsbRead>
 1000688:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 100068c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1000690:	e0fffb0b 	ldhu	r3,-20(fp)
 1000694:	1884703a 	and	r2,r3,r2
 1000698:	10bfffcc 	andi	r2,r2,65535
 100069c:	1000351e 	bne	r2,zero,1000774 <main+0x3a8>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 10006a0:	e03ffbc5 	stb	zero,-17(fp)
 10006a4:	00000f06 	br	10006e4 <main+0x318>
		{
			usleep(5*1000);
 10006a8:	0104e204 	movi	r4,5000
 10006ac:	100fa240 	call	100fa24 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 10006b0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 10006b4:	10bfffcc 	andi	r2,r2,65535
 10006b8:	1009883a 	mov	r4,r2
 10006bc:	10011680 	call	1001168 <UsbRead>
 10006c0:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 10006c4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 10006c8:	e0fffb0b 	ldhu	r3,-20(fp)
 10006cc:	1884703a 	and	r2,r3,r2
 10006d0:	10bfffcc 	andi	r2,r2,65535
 10006d4:	1000071e 	bne	r2,zero,10006f4 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 10006d8:	e0bffbc3 	ldbu	r2,-17(fp)
 10006dc:	10800044 	addi	r2,r2,1
 10006e0:	e0bffbc5 	stb	r2,-17(fp)
 10006e4:	e0bffbc3 	ldbu	r2,-17(fp)
 10006e8:	10800170 	cmpltui	r2,r2,5
 10006ec:	103fee1e 	bne	r2,zero,10006a8 <__alt_data_end+0xff8006a8>
 10006f0:	00000106 	br	10006f8 <main+0x32c>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
 10006f4:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
 10006f8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 10006fc:	e0fffb0b 	ldhu	r3,-20(fp)
 1000700:	1884703a 	and	r2,r3,r2
 1000704:	10bfffcc 	andi	r2,r2,65535
 1000708:	1000261e 	bne	r2,zero,10007a4 <main+0x3d8>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 100070c:	01004074 	movhi	r4,257
 1000710:	21068e04 	addi	r4,r4,6712
 1000714:	10023b80 	call	10023b8 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 1000718:	01004074 	movhi	r4,257
 100071c:	21069804 	addi	r4,r4,6752
 1000720:	10023b80 	call	10023b8 <puts>
			while (!(usb_ctl_val & no_device))
 1000724:	00000d06 	br	100075c <main+0x390>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 1000728:	d0a6cb0b 	ldhu	r2,-25812(gp)
 100072c:	10bfffcc 	andi	r2,r2,65535
 1000730:	1009883a 	mov	r4,r2
 1000734:	10011680 	call	1001168 <UsbRead>
 1000738:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 100073c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1000740:	e0fffb0b 	ldhu	r3,-20(fp)
 1000744:	1884703a 	and	r2,r3,r2
 1000748:	10bfffcc 	andi	r2,r2,65535
 100074c:	10000126 	beq	r2,zero,1000754 <main+0x388>
					goto USB_HOT_PLUG;
 1000750:	003f2906 	br	10003f8 <__alt_data_end+0xff8003f8>

				usleep(2000);
 1000754:	0101f404 	movi	r4,2000
 1000758:	100fa240 	call	100fa24 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 100075c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1000760:	e0fffb0b 	ldhu	r3,-20(fp)
 1000764:	1884703a 	and	r2,r3,r2
 1000768:	10bfffcc 	andi	r2,r2,65535
 100076c:	103fee26 	beq	r2,zero,1000728 <__alt_data_end+0xff800728>
 1000770:	00000c06 	br	10007a4 <main+0x3d8>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 1000774:	e0fffb0b 	ldhu	r3,-20(fp)
 1000778:	e0bffc0b 	ldhu	r2,-16(fp)
 100077c:	1884703a 	and	r2,r3,r2
 1000780:	10bfffcc 	andi	r2,r2,65535
 1000784:	10000426 	beq	r2,zero,1000798 <main+0x3cc>
		{
			printf("[INFO]: full speed device\n");
 1000788:	01004074 	movhi	r4,257
 100078c:	2106a404 	addi	r4,r4,6800
 1000790:	10023b80 	call	10023b8 <puts>
 1000794:	00000306 	br	10007a4 <main+0x3d8>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 1000798:	01004074 	movhi	r4,257
 100079c:	2106ab04 	addi	r4,r4,6828
 10007a0:	10023b80 	call	10023b8 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 10007a4:	10012680 	call	1001268 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10007a8:	00000306 	br	10007b8 <main+0x3ec>
	{
		UsbSetAddress();
 10007ac:	10012680 	call	1001268 <UsbSetAddress>
		usleep(10*1000);
 10007b0:	0109c404 	movi	r4,10000
 10007b4:	100fa240 	call	100fa24 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10007b8:	010000c4 	movi	r4,3
 10007bc:	10003640 	call	1000364 <IO_read>
 10007c0:	10bfffcc 	andi	r2,r2,65535
 10007c4:	1080040c 	andi	r2,r2,16
 10007c8:	103ff826 	beq	r2,zero,10007ac <__alt_data_end+0xff8007ac>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 10007cc:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 10007d0:	01414184 	movi	r5,1286
 10007d4:	01000084 	movi	r4,2
 10007d8:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 10007dc:	0009883a 	mov	r4,zero
 10007e0:	10003640 	call	1000364 <IO_read>
 10007e4:	10bfffcc 	andi	r2,r2,65535
 10007e8:	100b883a 	mov	r5,r2
 10007ec:	01004074 	movhi	r4,257
 10007f0:	2106b204 	addi	r4,r4,6856
 10007f4:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508); // n
 10007f8:	01414204 	movi	r5,1288
 10007fc:	01000084 	movi	r4,2
 1000800:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000804:	0009883a 	mov	r4,zero
 1000808:	10003640 	call	1000364 <IO_read>
 100080c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 1000810:	e0bffb0b 	ldhu	r2,-20(fp)
 1000814:	100b883a 	mov	r5,r2
 1000818:	01004074 	movhi	r4,257
 100081c:	2106bd04 	addi	r4,r4,6900
 1000820:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 1000824:	e0bffb0b 	ldhu	r2,-20(fp)
 1000828:	108000e0 	cmpeqi	r2,r2,3
 100082c:	1000031e 	bne	r2,zero,100083c <main+0x470>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000830:	100218c0 	call	100218c <UsbGetRetryCnt>
 1000834:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 1000838:	003eef06 	br	10003f8 <__alt_data_end+0xff8003f8>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 100083c:	01004074 	movhi	r4,257
 1000840:	2106c904 	addi	r4,r4,6948
 1000844:	10023b80 	call	10023b8 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 1000848:	10013680 	call	1001368 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 100084c:	00000306 	br	100085c <main+0x490>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 1000850:	10013680 	call	1001368 <UsbGetDeviceDesc1>
		usleep(10*1000);
 1000854:	0109c404 	movi	r4,10000
 1000858:	100fa240 	call	100fa24 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 100085c:	010000c4 	movi	r4,3
 1000860:	10003640 	call	1000364 <IO_read>
 1000864:	10bfffcc 	andi	r2,r2,65535
 1000868:	1080040c 	andi	r2,r2,16
 100086c:	103ff826 	beq	r2,zero,1000850 <__alt_data_end+0xff800850>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000870:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000874:	01414184 	movi	r5,1286
 1000878:	01000084 	movi	r4,2
 100087c:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000880:	0009883a 	mov	r4,zero
 1000884:	10003640 	call	1000364 <IO_read>
 1000888:	10bfffcc 	andi	r2,r2,65535
 100088c:	100b883a 	mov	r5,r2
 1000890:	01004074 	movhi	r4,257
 1000894:	2106d804 	addi	r4,r4,7008
 1000898:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508);
 100089c:	01414204 	movi	r5,1288
 10008a0:	01000084 	movi	r4,2
 10008a4:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 10008a8:	0009883a 	mov	r4,zero
 10008ac:	10003640 	call	1000364 <IO_read>
 10008b0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 10008b4:	e0bffb0b 	ldhu	r2,-20(fp)
 10008b8:	100b883a 	mov	r5,r2
 10008bc:	01004074 	movhi	r4,257
 10008c0:	2106e304 	addi	r4,r4,7052
 10008c4:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03)
 10008c8:	00000206 	br	10008d4 <main+0x508>
	{
		usb_ctl_val = UsbGetRetryCnt();
 10008cc:	100218c0 	call	100218c <UsbGetRetryCnt>
 10008d0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 10008d4:	e0bffb0b 	ldhu	r2,-20(fp)
 10008d8:	108000d8 	cmpnei	r2,r2,3
 10008dc:	103ffb1e 	bne	r2,zero,10008cc <__alt_data_end+0xff8008cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 10008e0:	01004074 	movhi	r4,257
 10008e4:	2106ef04 	addi	r4,r4,7100
 10008e8:	10023b80 	call	10023b8 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 10008ec:	10014b00 	call	10014b0 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10008f0:	00000306 	br	1000900 <main+0x534>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 10008f4:	10014b00 	call	10014b0 <UsbGetDeviceDesc2>
		usleep(10*1000);
 10008f8:	0109c404 	movi	r4,10000
 10008fc:	100fa240 	call	100fa24 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000900:	010000c4 	movi	r4,3
 1000904:	10003640 	call	1000364 <IO_read>
 1000908:	10bfffcc 	andi	r2,r2,65535
 100090c:	1080040c 	andi	r2,r2,16
 1000910:	103ff826 	beq	r2,zero,10008f4 <__alt_data_end+0xff8008f4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000914:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000918:	01414184 	movi	r5,1286
 100091c:	01000084 	movi	r4,2
 1000920:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000924:	0009883a 	mov	r4,zero
 1000928:	10003640 	call	1000364 <IO_read>
 100092c:	10bfffcc 	andi	r2,r2,65535
 1000930:	100b883a 	mov	r5,r2
 1000934:	01004074 	movhi	r4,257
 1000938:	2106d804 	addi	r4,r4,7008
 100093c:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508);
 1000940:	01414204 	movi	r5,1288
 1000944:	01000084 	movi	r4,2
 1000948:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 100094c:	0009883a 	mov	r4,zero
 1000950:	10003640 	call	1000364 <IO_read>
 1000954:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 1000958:	e0bffb0b 	ldhu	r2,-20(fp)
 100095c:	100b883a 	mov	r5,r2
 1000960:	01004074 	movhi	r4,257
 1000964:	2106e304 	addi	r4,r4,7052
 1000968:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03)
 100096c:	00000206 	br	1000978 <main+0x5ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000970:	100218c0 	call	100218c <UsbGetRetryCnt>
 1000974:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000978:	e0bffb0b 	ldhu	r2,-20(fp)
 100097c:	108000d8 	cmpnei	r2,r2,3
 1000980:	103ffb1e 	bne	r2,zero,1000970 <__alt_data_end+0xff800970>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 1000984:	01004074 	movhi	r4,257
 1000988:	21070304 	addi	r4,r4,7180
 100098c:	10023b80 	call	10023b8 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 1000990:	10016880 	call	1001688 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000994:	00000306 	br	10009a4 <main+0x5d8>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 1000998:	10016880 	call	1001688 <UsbGetConfigDesc1>
		usleep(10*1000);
 100099c:	0109c404 	movi	r4,10000
 10009a0:	100fa240 	call	100fa24 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10009a4:	010000c4 	movi	r4,3
 10009a8:	10003640 	call	1000364 <IO_read>
 10009ac:	10bfffcc 	andi	r2,r2,65535
 10009b0:	1080040c 	andi	r2,r2,16
 10009b4:	103ff826 	beq	r2,zero,1000998 <__alt_data_end+0xff800998>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 10009b8:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 10009bc:	01414184 	movi	r5,1286
 10009c0:	01000084 	movi	r4,2
 10009c4:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 10009c8:	0009883a 	mov	r4,zero
 10009cc:	10003640 	call	1000364 <IO_read>
 10009d0:	10bfffcc 	andi	r2,r2,65535
 10009d4:	100b883a 	mov	r5,r2
 10009d8:	01004074 	movhi	r4,257
 10009dc:	21071504 	addi	r4,r4,7252
 10009e0:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508);
 10009e4:	01414204 	movi	r5,1288
 10009e8:	01000084 	movi	r4,2
 10009ec:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 10009f0:	0009883a 	mov	r4,zero
 10009f4:	10003640 	call	1000364 <IO_read>
 10009f8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 10009fc:	e0bffb0b 	ldhu	r2,-20(fp)
 1000a00:	100b883a 	mov	r5,r2
 1000a04:	01004074 	movhi	r4,257
 1000a08:	21072004 	addi	r4,r4,7296
 1000a0c:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03)
 1000a10:	00000206 	br	1000a1c <main+0x650>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000a14:	100218c0 	call	100218c <UsbGetRetryCnt>
 1000a18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000a1c:	e0bffb0b 	ldhu	r2,-20(fp)
 1000a20:	108000d8 	cmpnei	r2,r2,3
 1000a24:	103ffb1e 	bne	r2,zero,1000a14 <__alt_data_end+0xff800a14>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 1000a28:	01004074 	movhi	r4,257
 1000a2c:	21072c04 	addi	r4,r4,7344
 1000a30:	10023b80 	call	10023b8 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 1000a34:	10018180 	call	1001818 <UsbGetConfigDesc2>

	usleep(100*1000);
 1000a38:	010000b4 	movhi	r4,2
 1000a3c:	2121a804 	addi	r4,r4,-31072
 1000a40:	100fa240 	call	100fa24 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000a44:	00000306 	br	1000a54 <main+0x688>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 1000a48:	10018180 	call	1001818 <UsbGetConfigDesc2>
		usleep(10*1000);
 1000a4c:	0109c404 	movi	r4,10000
 1000a50:	100fa240 	call	100fa24 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000a54:	010000c4 	movi	r4,3
 1000a58:	10003640 	call	1000364 <IO_read>
 1000a5c:	10bfffcc 	andi	r2,r2,65535
 1000a60:	1080040c 	andi	r2,r2,16
 1000a64:	103ff826 	beq	r2,zero,1000a48 <__alt_data_end+0xff800a48>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000a68:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000a6c:	01414184 	movi	r5,1286
 1000a70:	01000084 	movi	r4,2
 1000a74:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000a78:	0009883a 	mov	r4,zero
 1000a7c:	10003640 	call	1000364 <IO_read>
 1000a80:	10bfffcc 	andi	r2,r2,65535
 1000a84:	100b883a 	mov	r5,r2
 1000a88:	01004074 	movhi	r4,257
 1000a8c:	21073f04 	addi	r4,r4,7420
 1000a90:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508);
 1000a94:	01414204 	movi	r5,1288
 1000a98:	01000084 	movi	r4,2
 1000a9c:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000aa0:	0009883a 	mov	r4,zero
 1000aa4:	10003640 	call	1000364 <IO_read>
 1000aa8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 1000aac:	e0bffb0b 	ldhu	r2,-20(fp)
 1000ab0:	100b883a 	mov	r5,r2
 1000ab4:	01004074 	movhi	r4,257
 1000ab8:	21074a04 	addi	r4,r4,7464
 1000abc:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03)
 1000ac0:	00000206 	br	1000acc <main+0x700>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000ac4:	100218c0 	call	100218c <UsbGetRetryCnt>
 1000ac8:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000acc:	e0bffb0b 	ldhu	r2,-20(fp)
 1000ad0:	108000d8 	cmpnei	r2,r2,3
 1000ad4:	103ffb1e 	bne	r2,zero,1000ac4 <__alt_data_end+0xff800ac4>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 1000ad8:	01004074 	movhi	r4,257
 1000adc:	21075604 	addi	r4,r4,7512
 1000ae0:	10023b80 	call	10023b8 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 1000ae4:	01415b04 	movi	r5,1388
 1000ae8:	01000084 	movi	r4,2
 1000aec:	10002f40 	call	10002f4 <IO_write>
	code = IO_read(HPI_DATA);
 1000af0:	0009883a 	mov	r4,zero
 1000af4:	10003640 	call	1000364 <IO_read>
 1000af8:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 1000afc:	e0bffe8b 	ldhu	r2,-6(fp)
 1000b00:	108000cc 	andi	r2,r2,3
 1000b04:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 1000b08:	e0bffe8b 	ldhu	r2,-6(fp)
 1000b0c:	100b883a 	mov	r5,r2
 1000b10:	01004074 	movhi	r4,257
 1000b14:	21076904 	addi	r4,r4,7588
 1000b18:	10022bc0 	call	10022bc <printf>

	if (code == 0x01)
 1000b1c:	e0bffe8b 	ldhu	r2,-6(fp)
 1000b20:	10800058 	cmpnei	r2,r2,1
 1000b24:	1000041e 	bne	r2,zero,1000b38 <main+0x76c>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 1000b28:	01004074 	movhi	r4,257
 1000b2c:	21076c04 	addi	r4,r4,7600
 1000b30:	10023b80 	call	10023b8 <puts>
 1000b34:	00000306 	br	1000b44 <main+0x778>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 1000b38:	01004074 	movhi	r4,257
 1000b3c:	21077b04 	addi	r4,r4,7660
 1000b40:	10023b80 	call	10023b8 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 1000b44:	01415d84 	movi	r5,1398
 1000b48:	01000084 	movi	r4,2
 1000b4c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
 1000b50:	0141cfc4 	movi	r5,1855
 1000b54:	0009883a 	mov	r4,zero
 1000b58:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
 1000b5c:	01604154 	movui	r5,33029
 1000b60:	0009883a 	mov	r4,zero
 1000b64:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
 1000b68:	014000c4 	movi	r5,3
 1000b6c:	0009883a 	mov	r4,zero
 1000b70:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 1000b74:	01400204 	movi	r5,8
 1000b78:	0009883a 	mov	r4,zero
 1000b7c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 1000b80:	016b0294 	movui	r5,44042
 1000b84:	0009883a 	mov	r4,zero
 1000b88:	10002f40 	call	10002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 1000b8c:	01415d84 	movi	r5,1398
 1000b90:	01006c04 	movi	r4,432
 1000b94:	10011100 	call	1001110 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 1000b98:	01415f04 	movi	r5,1404
 1000b9c:	01000084 	movi	r4,2
 1000ba0:	10002f40 	call	10002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 1000ba4:	0009883a 	mov	r4,zero
 1000ba8:	10003640 	call	1000364 <IO_read>
 1000bac:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 1000bb0:	e0bfff03 	ldbu	r2,-4(fp)
 1000bb4:	100b883a 	mov	r5,r2
 1000bb8:	01004074 	movhi	r4,257
 1000bbc:	21078404 	addi	r4,r4,7696
 1000bc0:	10022bc0 	call	10022bc <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 1000bc4:	1001a800 	call	1001a80 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000bc8:	00000306 	br	1000bd8 <main+0x80c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 1000bcc:	1001a800 	call	1001a80 <UsbSetConfig>
		usleep(10*1000);
 1000bd0:	0109c404 	movi	r4,10000
 1000bd4:	100fa240 	call	100fa24 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000bd8:	010000c4 	movi	r4,3
 1000bdc:	10003640 	call	1000364 <IO_read>
 1000be0:	10bfffcc 	andi	r2,r2,65535
 1000be4:	1080040c 	andi	r2,r2,16
 1000be8:	103ff826 	beq	r2,zero,1000bcc <__alt_data_end+0xff800bcc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000bec:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000bf0:	01414184 	movi	r5,1286
 1000bf4:	01000084 	movi	r4,2
 1000bf8:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000bfc:	0009883a 	mov	r4,zero
 1000c00:	10003640 	call	1000364 <IO_read>
 1000c04:	10bfffcc 	andi	r2,r2,65535
 1000c08:	100b883a 	mov	r5,r2
 1000c0c:	01004074 	movhi	r4,257
 1000c10:	21078e04 	addi	r4,r4,7736
 1000c14:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508);
 1000c18:	01414204 	movi	r5,1288
 1000c1c:	01000084 	movi	r4,2
 1000c20:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000c24:	0009883a 	mov	r4,zero
 1000c28:	10003640 	call	1000364 <IO_read>
 1000c2c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 1000c30:	e0bffb0b 	ldhu	r2,-20(fp)
 1000c34:	100b883a 	mov	r5,r2
 1000c38:	01004074 	movhi	r4,257
 1000c3c:	21079904 	addi	r4,r4,7780
 1000c40:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03)
 1000c44:	00000206 	br	1000c50 <main+0x884>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000c48:	100218c0 	call	100218c <UsbGetRetryCnt>
 1000c4c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000c50:	e0bffb0b 	ldhu	r2,-20(fp)
 1000c54:	108000d8 	cmpnei	r2,r2,3
 1000c58:	103ffb1e 	bne	r2,zero,1000c48 <__alt_data_end+0xff800c48>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 1000c5c:	01004074 	movhi	r4,257
 1000c60:	2107a504 	addi	r4,r4,7828
 1000c64:	10023b80 	call	10023b8 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 1000c68:	1001b800 	call	1001b80 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000c6c:	00000306 	br	1000c7c <main+0x8b0>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 1000c70:	1001b800 	call	1001b80 <UsbClassRequest>
		usleep(10*1000);
 1000c74:	0109c404 	movi	r4,10000
 1000c78:	100fa240 	call	100fa24 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000c7c:	010000c4 	movi	r4,3
 1000c80:	10003640 	call	1000364 <IO_read>
 1000c84:	10bfffcc 	andi	r2,r2,65535
 1000c88:	1080040c 	andi	r2,r2,16
 1000c8c:	103ff826 	beq	r2,zero,1000c70 <__alt_data_end+0xff800c70>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000c90:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000c94:	01414184 	movi	r5,1286
 1000c98:	01000084 	movi	r4,2
 1000c9c:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000ca0:	0009883a 	mov	r4,zero
 1000ca4:	10003640 	call	1000364 <IO_read>
 1000ca8:	10bfffcc 	andi	r2,r2,65535
 1000cac:	100b883a 	mov	r5,r2
 1000cb0:	01004074 	movhi	r4,257
 1000cb4:	2107b704 	addi	r4,r4,7900
 1000cb8:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508);
 1000cbc:	01414204 	movi	r5,1288
 1000cc0:	01000084 	movi	r4,2
 1000cc4:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000cc8:	0009883a 	mov	r4,zero
 1000ccc:	10003640 	call	1000364 <IO_read>
 1000cd0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 1000cd4:	e0bffb0b 	ldhu	r2,-20(fp)
 1000cd8:	100b883a 	mov	r5,r2
 1000cdc:	01004074 	movhi	r4,257
 1000ce0:	2107c204 	addi	r4,r4,7944
 1000ce4:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03)
 1000ce8:	00000206 	br	1000cf4 <main+0x928>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000cec:	100218c0 	call	100218c <UsbGetRetryCnt>
 1000cf0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000cf4:	e0bffb0b 	ldhu	r2,-20(fp)
 1000cf8:	108000d8 	cmpnei	r2,r2,3
 1000cfc:	103ffb1e 	bne	r2,zero,1000cec <__alt_data_end+0xff800cec>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 1000d00:	01004074 	movhi	r4,257
 1000d04:	2107ce04 	addi	r4,r4,7992
 1000d08:	10023b80 	call	10023b8 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 1000d0c:	1001c800 	call	1001c80 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000d10:	00000306 	br	1000d20 <main+0x954>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 1000d14:	1001c800 	call	1001c80 <UsbGetHidDesc>
		usleep(10*1000);
 1000d18:	0109c404 	movi	r4,10000
 1000d1c:	100fa240 	call	100fa24 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000d20:	010000c4 	movi	r4,3
 1000d24:	10003640 	call	1000364 <IO_read>
 1000d28:	10bfffcc 	andi	r2,r2,65535
 1000d2c:	1080040c 	andi	r2,r2,16
 1000d30:	103ff826 	beq	r2,zero,1000d14 <__alt_data_end+0xff800d14>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000d34:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000d38:	01414184 	movi	r5,1286
 1000d3c:	01000084 	movi	r4,2
 1000d40:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000d44:	0009883a 	mov	r4,zero
 1000d48:	10003640 	call	1000364 <IO_read>
 1000d4c:	10bfffcc 	andi	r2,r2,65535
 1000d50:	100b883a 	mov	r5,r2
 1000d54:	01004074 	movhi	r4,257
 1000d58:	2107b704 	addi	r4,r4,7900
 1000d5c:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508);
 1000d60:	01414204 	movi	r5,1288
 1000d64:	01000084 	movi	r4,2
 1000d68:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000d6c:	0009883a 	mov	r4,zero
 1000d70:	10003640 	call	1000364 <IO_read>
 1000d74:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 1000d78:	e0bffb0b 	ldhu	r2,-20(fp)
 1000d7c:	100b883a 	mov	r5,r2
 1000d80:	01004074 	movhi	r4,257
 1000d84:	2107c204 	addi	r4,r4,7944
 1000d88:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03)
 1000d8c:	00000206 	br	1000d98 <main+0x9cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000d90:	100218c0 	call	100218c <UsbGetRetryCnt>
 1000d94:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000d98:	e0bffb0b 	ldhu	r2,-20(fp)
 1000d9c:	108000d8 	cmpnei	r2,r2,3
 1000da0:	103ffb1e 	bne	r2,zero,1000d90 <__alt_data_end+0xff800d90>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 1000da4:	01004074 	movhi	r4,257
 1000da8:	2107e004 	addi	r4,r4,8064
 1000dac:	10023b80 	call	10023b8 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 1000db0:	1001dc80 	call	1001dc8 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000db4:	00000306 	br	1000dc4 <main+0x9f8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 1000db8:	1001dc80 	call	1001dc8 <UsbGetReportDesc>
		usleep(10*1000);
 1000dbc:	0109c404 	movi	r4,10000
 1000dc0:	100fa240 	call	100fa24 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000dc4:	010000c4 	movi	r4,3
 1000dc8:	10003640 	call	1000364 <IO_read>
 1000dcc:	10bfffcc 	andi	r2,r2,65535
 1000dd0:	1080040c 	andi	r2,r2,16
 1000dd4:	103ff826 	beq	r2,zero,1000db8 <__alt_data_end+0xff800db8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 1000dd8:	10021080 	call	1002108 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 1000ddc:	01414184 	movi	r5,1286
 1000de0:	01000084 	movi	r4,2
 1000de4:	10002f40 	call	10002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 1000de8:	0009883a 	mov	r4,zero
 1000dec:	10003640 	call	1000364 <IO_read>
 1000df0:	10bfffcc 	andi	r2,r2,65535
 1000df4:	100b883a 	mov	r5,r2
 1000df8:	01004074 	movhi	r4,257
 1000dfc:	2107f404 	addi	r4,r4,8144
 1000e00:	10022bc0 	call	10022bc <printf>

	IO_write(HPI_ADDR,0x0508);
 1000e04:	01414204 	movi	r5,1288
 1000e08:	01000084 	movi	r4,2
 1000e0c:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 1000e10:	0009883a 	mov	r4,zero
 1000e14:	10003640 	call	1000364 <IO_read>
 1000e18:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 1000e1c:	e0bffb0b 	ldhu	r2,-20(fp)
 1000e20:	100b883a 	mov	r5,r2
 1000e24:	01004074 	movhi	r4,257
 1000e28:	21080004 	addi	r4,r4,8192
 1000e2c:	10022bc0 	call	10022bc <printf>
	while (usb_ctl_val != 0x03)
 1000e30:	00000206 	br	1000e3c <main+0xa70>
	{
		usb_ctl_val = UsbGetRetryCnt();
 1000e34:	100218c0 	call	100218c <UsbGetRetryCnt>
 1000e38:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 1000e3c:	e0bffb0b 	ldhu	r2,-20(fp)
 1000e40:	108000d8 	cmpnei	r2,r2,3
 1000e44:	103ffb1e 	bne	r2,zero,1000e34 <__alt_data_end+0xff800e34>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 1000e48:	01004074 	movhi	r4,257
 1000e4c:	21080c04 	addi	r4,r4,8240
 1000e50:	10023b80 	call	10023b8 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 1000e54:	0109c404 	movi	r4,10000
 1000e58:	100fa240 	call	100fa24 <usleep>
	while(1)
	{
		toggle++;
 1000e5c:	e0bffb83 	ldbu	r2,-18(fp)
 1000e60:	10800044 	addi	r2,r2,1
 1000e64:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 1000e68:	01414004 	movi	r5,1280
 1000e6c:	01000084 	movi	r4,2
 1000e70:	10002f40 	call	10002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 1000e74:	01414704 	movi	r5,1308
 1000e78:	0009883a 	mov	r4,zero
 1000e7c:	10002f40 	call	10002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 1000e80:	e0bfff03 	ldbu	r2,-4(fp)
 1000e84:	108003cc 	andi	r2,r2,15
 1000e88:	100b883a 	mov	r5,r2
 1000e8c:	0009883a 	mov	r4,zero
 1000e90:	10002f40 	call	10002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 1000e94:	0140a444 	movi	r5,657
 1000e98:	0009883a 	mov	r4,zero
 1000e9c:	10002f40 	call	10002f4 <IO_write>
		if(toggle%2)
 1000ea0:	e0bffb83 	ldbu	r2,-18(fp)
 1000ea4:	1080004c 	andi	r2,r2,1
 1000ea8:	10803fcc 	andi	r2,r2,255
 1000eac:	10000426 	beq	r2,zero,1000ec0 <main+0xaf4>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 1000eb0:	01400044 	movi	r5,1
 1000eb4:	0009883a 	mov	r4,zero
 1000eb8:	10002f40 	call	10002f4 <IO_write>
 1000ebc:	00000306 	br	1000ecc <main+0xb00>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 1000ec0:	01401044 	movi	r5,65
 1000ec4:	0009883a 	mov	r4,zero
 1000ec8:	10002f40 	call	10002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 1000ecc:	014004c4 	movi	r5,19
 1000ed0:	0009883a 	mov	r4,zero
 1000ed4:	10002f40 	call	10002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 1000ed8:	000b883a 	mov	r5,zero
 1000edc:	0009883a 	mov	r4,zero
 1000ee0:	10002f40 	call	10002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1000ee4:	01414004 	movi	r5,1280
 1000ee8:	01006c04 	movi	r4,432
 1000eec:	10011100 	call	1001110 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000ef0:	00002406 	br	1000f84 <main+0xbb8>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 1000ef4:	01414004 	movi	r5,1280
 1000ef8:	01000084 	movi	r4,2
 1000efc:	10002f40 	call	10002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 1000f00:	01414704 	movi	r5,1308
 1000f04:	0009883a 	mov	r4,zero
 1000f08:	10002f40 	call	10002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 1000f0c:	e0bfff03 	ldbu	r2,-4(fp)
 1000f10:	108003cc 	andi	r2,r2,15
 1000f14:	100b883a 	mov	r5,r2
 1000f18:	0009883a 	mov	r4,zero
 1000f1c:	10002f40 	call	10002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 1000f20:	0140a444 	movi	r5,657
 1000f24:	0009883a 	mov	r4,zero
 1000f28:	10002f40 	call	10002f4 <IO_write>
			if(toggle%2)
 1000f2c:	e0bffb83 	ldbu	r2,-18(fp)
 1000f30:	1080004c 	andi	r2,r2,1
 1000f34:	10803fcc 	andi	r2,r2,255
 1000f38:	10000426 	beq	r2,zero,1000f4c <main+0xb80>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 1000f3c:	01400044 	movi	r5,1
 1000f40:	0009883a 	mov	r4,zero
 1000f44:	10002f40 	call	10002f4 <IO_write>
 1000f48:	00000306 	br	1000f58 <main+0xb8c>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 1000f4c:	01401044 	movi	r5,65
 1000f50:	0009883a 	mov	r4,zero
 1000f54:	10002f40 	call	10002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 1000f58:	014004c4 	movi	r5,19
 1000f5c:	0009883a 	mov	r4,zero
 1000f60:	10002f40 	call	10002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
 1000f64:	000b883a 	mov	r5,zero
 1000f68:	0009883a 	mov	r4,zero
 1000f6c:	10002f40 	call	10002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1000f70:	01414004 	movi	r5,1280
 1000f74:	01006c04 	movi	r4,432
 1000f78:	10011100 	call	1001110 <UsbWrite>
			usleep(10*1000);
 1000f7c:	0109c404 	movi	r4,10000
 1000f80:	100fa240 	call	100fa24 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 1000f84:	010000c4 	movi	r4,3
 1000f88:	10003640 	call	1000364 <IO_read>
 1000f8c:	10bfffcc 	andi	r2,r2,65535
 1000f90:	1080040c 	andi	r2,r2,16
 1000f94:	103fd726 	beq	r2,zero,1000ef4 <__alt_data_end+0xff800ef4>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
 1000f98:	10021080 	call	1002108 <UsbWaitTDListDone>
 1000f9c:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
 1000fa0:	01014784 	movi	r4,1310
 1000fa4:	10011680 	call	1001168 <UsbRead>
 1000fa8:	10bfffcc 	andi	r2,r2,65535
 1000fac:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 1000fb0:	e17ffd17 	ldw	r5,-12(fp)
 1000fb4:	01004074 	movhi	r4,257
 1000fb8:	21082004 	addi	r4,r4,8320
 1000fbc:	10022bc0 	call	10022bc <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
 1000fc0:	00802404 	movi	r2,144
 1000fc4:	e0fffd17 	ldw	r3,-12(fp)
 1000fc8:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
 1000fcc:	01003204 	movi	r4,200
 1000fd0:	100fa240 	call	100fa24 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 1000fd4:	d0a6cb0b 	ldhu	r2,-25812(gp)
 1000fd8:	10bfffcc 	andi	r2,r2,65535
 1000fdc:	1009883a 	mov	r4,r2
 1000fe0:	10011680 	call	1001168 <UsbRead>
 1000fe4:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 1000fe8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1000fec:	e0fffb0b 	ldhu	r3,-20(fp)
 1000ff0:	1884703a 	and	r2,r3,r2
 1000ff4:	10bfffcc 	andi	r2,r2,65535
 1000ff8:	10003f1e 	bne	r2,zero,10010f8 <main+0xd2c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 1000ffc:	e03ffbc5 	stb	zero,-17(fp)
 1001000:	00000f06 	br	1001040 <main+0xc74>
			{
				usleep(5*1000);
 1001004:	0104e204 	movi	r4,5000
 1001008:	100fa240 	call	100fa24 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 100100c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 1001010:	10bfffcc 	andi	r2,r2,65535
 1001014:	1009883a 	mov	r4,r2
 1001018:	10011680 	call	1001168 <UsbRead>
 100101c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 1001020:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1001024:	e0fffb0b 	ldhu	r3,-20(fp)
 1001028:	1884703a 	and	r2,r3,r2
 100102c:	10bfffcc 	andi	r2,r2,65535
 1001030:	1000071e 	bne	r2,zero,1001050 <main+0xc84>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 1001034:	e0bffbc3 	ldbu	r2,-17(fp)
 1001038:	10800044 	addi	r2,r2,1
 100103c:	e0bffbc5 	stb	r2,-17(fp)
 1001040:	e0bffbc3 	ldbu	r2,-17(fp)
 1001044:	108001f0 	cmpltui	r2,r2,7
 1001048:	103fee1e 	bne	r2,zero,1001004 <__alt_data_end+0xff801004>
 100104c:	00000106 	br	1001054 <main+0xc88>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
 1001050:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
 1001054:	d0a6cb8b 	ldhu	r2,-25810(gp)
 1001058:	e0fffb0b 	ldhu	r3,-20(fp)
 100105c:	1884703a 	and	r2,r3,r2
 1001060:	10bfffcc 	andi	r2,r2,65535
 1001064:	1000241e 	bne	r2,zero,10010f8 <main+0xd2c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 1001068:	01004074 	movhi	r4,257
 100106c:	21082904 	addi	r4,r4,8356
 1001070:	10023b80 	call	10023b8 <puts>
				printf("[INFO]: please insert again!!! \n");
 1001074:	01004074 	movhi	r4,257
 1001078:	21083404 	addi	r4,r4,8400
 100107c:	10023b80 	call	10023b8 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 1001080:	00001d06 	br	10010f8 <main+0xd2c>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 1001084:	d0a6cb0b 	ldhu	r2,-25812(gp)
 1001088:	10bfffcc 	andi	r2,r2,65535
 100108c:	1009883a 	mov	r4,r2
 1001090:	10011680 	call	1001168 <UsbRead>
 1001094:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 1001098:	0104e204 	movi	r4,5000
 100109c:	100fa240 	call	100fa24 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 10010a0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 10010a4:	10bfffcc 	andi	r2,r2,65535
 10010a8:	1009883a 	mov	r4,r2
 10010ac:	10011680 	call	1001168 <UsbRead>
 10010b0:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 10010b4:	0104e204 	movi	r4,5000
 10010b8:	100fa240 	call	100fa24 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 10010bc:	d0a6cb0b 	ldhu	r2,-25812(gp)
 10010c0:	10bfffcc 	andi	r2,r2,65535
 10010c4:	1009883a 	mov	r4,r2
 10010c8:	10011680 	call	1001168 <UsbRead>
 10010cc:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 10010d0:	0104e204 	movi	r4,5000
 10010d4:	100fa240 	call	100fa24 <usleep>

			if(usb_ctl_val & no_device)
 10010d8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 10010dc:	e0fffb0b 	ldhu	r3,-20(fp)
 10010e0:	1884703a 	and	r2,r3,r2
 10010e4:	10bfffcc 	andi	r2,r2,65535
 10010e8:	10000126 	beq	r2,zero,10010f0 <main+0xd24>
				goto USB_HOT_PLUG;
 10010ec:	003cc206 	br	10003f8 <__alt_data_end+0xff8003f8>

			usleep(200);
 10010f0:	01003204 	movi	r4,200
 10010f4:	100fa240 	call	100fa24 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 10010f8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 10010fc:	e0fffb0b 	ldhu	r3,-20(fp)
 1001100:	1884703a 	and	r2,r3,r2
 1001104:	10bfffcc 	andi	r2,r2,65535
 1001108:	103fde26 	beq	r2,zero,1001084 <__alt_data_end+0xff801084>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 100110c:	003f5306 	br	1000e5c <__alt_data_end+0xff800e5c>

01001110 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 1001110:	defffc04 	addi	sp,sp,-16
 1001114:	dfc00315 	stw	ra,12(sp)
 1001118:	df000215 	stw	fp,8(sp)
 100111c:	df000204 	addi	fp,sp,8
 1001120:	2007883a 	mov	r3,r4
 1001124:	2805883a 	mov	r2,r5
 1001128:	e0fffe0d 	sth	r3,-8(fp)
 100112c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 1001130:	e0bffe0b 	ldhu	r2,-8(fp)
 1001134:	100b883a 	mov	r5,r2
 1001138:	01000084 	movi	r4,2
 100113c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA, Data);
 1001140:	e0bfff0b 	ldhu	r2,-4(fp)
 1001144:	100b883a 	mov	r5,r2
 1001148:	0009883a 	mov	r4,zero
 100114c:	10002f40 	call	10002f4 <IO_write>

}
 1001150:	0001883a 	nop
 1001154:	e037883a 	mov	sp,fp
 1001158:	dfc00117 	ldw	ra,4(sp)
 100115c:	df000017 	ldw	fp,0(sp)
 1001160:	dec00204 	addi	sp,sp,8
 1001164:	f800283a 	ret

01001168 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 1001168:	defffd04 	addi	sp,sp,-12
 100116c:	dfc00215 	stw	ra,8(sp)
 1001170:	df000115 	stw	fp,4(sp)
 1001174:	df000104 	addi	fp,sp,4
 1001178:	2005883a 	mov	r2,r4
 100117c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 1001180:	e0bfff0b 	ldhu	r2,-4(fp)
 1001184:	100b883a 	mov	r5,r2
 1001188:	01000084 	movi	r4,2
 100118c:	10002f40 	call	10002f4 <IO_write>
	return IO_read(Address);
 1001190:	e0bfff0b 	ldhu	r2,-4(fp)
 1001194:	10803fcc 	andi	r2,r2,255
 1001198:	1009883a 	mov	r4,r2
 100119c:	10003640 	call	1000364 <IO_read>
}
 10011a0:	e037883a 	mov	sp,fp
 10011a4:	dfc00117 	ldw	ra,4(sp)
 10011a8:	df000017 	ldw	fp,0(sp)
 10011ac:	dec00204 	addi	sp,sp,8
 10011b0:	f800283a 	ret

010011b4 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 10011b4:	defffe04 	addi	sp,sp,-8
 10011b8:	dfc00115 	stw	ra,4(sp)
 10011bc:	df000015 	stw	fp,0(sp)
 10011c0:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 10011c4:	017e9414 	movui	r5,64080
 10011c8:	01000044 	movi	r4,1
 10011cc:	10002f40 	call	10002f4 <IO_write>
	usleep(100000);
 10011d0:	010000b4 	movhi	r4,2
 10011d4:	2121a804 	addi	r4,r4,-31072
 10011d8:	100fa240 	call	100fa24 <usleep>
	printf("[USB INIT]:reset finished!\n");
 10011dc:	01004074 	movhi	r4,257
 10011e0:	21083c04 	addi	r4,r4,8432
 10011e4:	10023b80 	call	10023b8 <puts>

	usleep(500000);
 10011e8:	01000234 	movhi	r4,8
 10011ec:	21284804 	addi	r4,r4,-24288
 10011f0:	100fa240 	call	100fa24 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 10011f4:	01004074 	movhi	r4,257
 10011f8:	21084304 	addi	r4,r4,8460
 10011fc:	10023b80 	call	10023b8 <puts>
	IO_read(HPI_MAILBOX);
 1001200:	01000044 	movi	r4,1
 1001204:	10003640 	call	1000364 <IO_read>
	IO_read(HPI_STATUS);
 1001208:	010000c4 	movi	r4,3
 100120c:	10003640 	call	1000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 1001210:	01005104 	movi	r4,324
 1001214:	10011680 	call	1001168 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 1001218:	000b883a 	mov	r5,zero
 100121c:	01005104 	movi	r4,324
 1001220:	10011100 	call	1001110 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 1001224:	01005204 	movi	r4,328
 1001228:	10011680 	call	1001168 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 100122c:	000b883a 	mov	r5,zero
 1001230:	01005204 	movi	r4,328
 1001234:	10011100 	call	1001110 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 1001238:	017fffd4 	movui	r5,65535
 100123c:	01302414 	movui	r4,49296
 1001240:	10011100 	call	1001110 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 1001244:	017fffd4 	movui	r5,65535
 1001248:	01302c14 	movui	r4,49328
 100124c:	10011100 	call	1001110 <UsbWrite>
}
 1001250:	0001883a 	nop
 1001254:	e037883a 	mov	sp,fp
 1001258:	dfc00117 	ldw	ra,4(sp)
 100125c:	df000017 	ldw	fp,0(sp)
 1001260:	dec00204 	addi	sp,sp,8
 1001264:	f800283a 	ret

01001268 <UsbSetAddress>:


void UsbSetAddress()
{
 1001268:	defffe04 	addi	sp,sp,-8
 100126c:	dfc00115 	stw	ra,4(sp)
 1001270:	df000015 	stw	fp,0(sp)
 1001274:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001278:	01414004 	movi	r5,1280
 100127c:	01000084 	movi	r4,2
 1001280:	10002f40 	call	10002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 1001284:	01414304 	movi	r5,1292
 1001288:	0009883a 	mov	r4,zero
 100128c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001290:	01400204 	movi	r5,8
 1001294:	0009883a 	mov	r4,zero
 1001298:	10002f40 	call	10002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 100129c:	01403404 	movi	r5,208
 10012a0:	0009883a 	mov	r4,zero
 10012a4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 10012a8:	01400044 	movi	r5,1
 10012ac:	0009883a 	mov	r4,zero
 10012b0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 10012b4:	014004c4 	movi	r5,19
 10012b8:	0009883a 	mov	r4,zero
 10012bc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 10012c0:	01414504 	movi	r5,1300
 10012c4:	0009883a 	mov	r4,zero
 10012c8:	10002f40 	call	10002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 10012cc:	01414004 	movi	r5,1280
 10012d0:	0009883a 	mov	r4,zero
 10012d4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
 10012d8:	01400084 	movi	r5,2
 10012dc:	0009883a 	mov	r4,zero
 10012e0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 10012e4:	000b883a 	mov	r5,zero
 10012e8:	0009883a 	mov	r4,zero
 10012ec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 10012f0:	000b883a 	mov	r5,zero
 10012f4:	0009883a 	mov	r4,zero
 10012f8:	10002f40 	call	10002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 10012fc:	000b883a 	mov	r5,zero
 1001300:	0009883a 	mov	r4,zero
 1001304:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
 1001308:	000b883a 	mov	r5,zero
 100130c:	0009883a 	mov	r4,zero
 1001310:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
 1001314:	01402404 	movi	r5,144
 1001318:	0009883a 	mov	r4,zero
 100131c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 1001320:	01401044 	movi	r5,65
 1001324:	0009883a 	mov	r4,zero
 1001328:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 100132c:	014004c4 	movi	r5,19
 1001330:	0009883a 	mov	r4,zero
 1001334:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001338:	000b883a 	mov	r5,zero
 100133c:	0009883a 	mov	r4,zero
 1001340:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001344:	01414004 	movi	r5,1280
 1001348:	01006c04 	movi	r4,432
 100134c:	10011100 	call	1001110 <UsbWrite>
}
 1001350:	0001883a 	nop
 1001354:	e037883a 	mov	sp,fp
 1001358:	dfc00117 	ldw	ra,4(sp)
 100135c:	df000017 	ldw	fp,0(sp)
 1001360:	dec00204 	addi	sp,sp,8
 1001364:	f800283a 	ret

01001368 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 1001368:	defffe04 	addi	sp,sp,-8
 100136c:	dfc00115 	stw	ra,4(sp)
 1001370:	df000015 	stw	fp,0(sp)
 1001374:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001378:	01414004 	movi	r5,1280
 100137c:	01000084 	movi	r4,2
 1001380:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001384:	01414304 	movi	r5,1292
 1001388:	0009883a 	mov	r4,zero
 100138c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001390:	01400204 	movi	r5,8
 1001394:	0009883a 	mov	r4,zero
 1001398:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 100139c:	0140b404 	movi	r5,720
 10013a0:	0009883a 	mov	r4,zero
 10013a4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 10013a8:	01400044 	movi	r5,1
 10013ac:	0009883a 	mov	r4,zero
 10013b0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 10013b4:	014004c4 	movi	r5,19
 10013b8:	0009883a 	mov	r4,zero
 10013bc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 10013c0:	01414504 	movi	r5,1300
 10013c4:	0009883a 	mov	r4,zero
 10013c8:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 10013cc:	0141a004 	movi	r5,1664
 10013d0:	0009883a 	mov	r4,zero
 10013d4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 10013d8:	01404004 	movi	r5,256
 10013dc:	0009883a 	mov	r4,zero
 10013e0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 10013e4:	000b883a 	mov	r5,zero
 10013e8:	0009883a 	mov	r4,zero
 10013ec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
 10013f0:	01400204 	movi	r5,8
 10013f4:	0009883a 	mov	r4,zero
 10013f8:	10002f40 	call	10002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 10013fc:	01414b04 	movi	r5,1324
 1001400:	0009883a 	mov	r4,zero
 1001404:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
 1001408:	01400204 	movi	r5,8
 100140c:	0009883a 	mov	r4,zero
 1001410:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
 1001414:	0140a404 	movi	r5,656
 1001418:	0009883a 	mov	r4,zero
 100141c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 1001420:	01401044 	movi	r5,65
 1001424:	0009883a 	mov	r4,zero
 1001428:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 100142c:	014004c4 	movi	r5,19
 1001430:	0009883a 	mov	r4,zero
 1001434:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
 1001438:	01414804 	movi	r5,1312
 100143c:	0009883a 	mov	r4,zero
 1001440:	10002f40 	call	10002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 1001444:	000b883a 	mov	r5,zero
 1001448:	0009883a 	mov	r4,zero
 100144c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 1001450:	000b883a 	mov	r5,zero
 1001454:	0009883a 	mov	r4,zero
 1001458:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 100145c:	01408404 	movi	r5,528
 1001460:	0009883a 	mov	r4,zero
 1001464:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
 1001468:	01401044 	movi	r5,65
 100146c:	0009883a 	mov	r4,zero
 1001470:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001474:	014004c4 	movi	r5,19
 1001478:	0009883a 	mov	r4,zero
 100147c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001480:	000b883a 	mov	r5,zero
 1001484:	0009883a 	mov	r4,zero
 1001488:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 100148c:	01414004 	movi	r5,1280
 1001490:	01006c04 	movi	r4,432
 1001494:	10011100 	call	1001110 <UsbWrite>
}
 1001498:	0001883a 	nop
 100149c:	e037883a 	mov	sp,fp
 10014a0:	dfc00117 	ldw	ra,4(sp)
 10014a4:	df000017 	ldw	fp,0(sp)
 10014a8:	dec00204 	addi	sp,sp,8
 10014ac:	f800283a 	ret

010014b0 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 10014b0:	defffe04 	addi	sp,sp,-8
 10014b4:	dfc00115 	stw	ra,4(sp)
 10014b8:	df000015 	stw	fp,0(sp)
 10014bc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 10014c0:	01414004 	movi	r5,1280
 10014c4:	01000084 	movi	r4,2
 10014c8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 10014cc:	01414304 	movi	r5,1292
 10014d0:	0009883a 	mov	r4,zero
 10014d4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 10014d8:	01400204 	movi	r5,8
 10014dc:	0009883a 	mov	r4,zero
 10014e0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 10014e4:	0140b404 	movi	r5,720
 10014e8:	0009883a 	mov	r4,zero
 10014ec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 10014f0:	01400044 	movi	r5,1
 10014f4:	0009883a 	mov	r4,zero
 10014f8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 10014fc:	014004c4 	movi	r5,19
 1001500:	0009883a 	mov	r4,zero
 1001504:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001508:	01414504 	movi	r5,1300
 100150c:	0009883a 	mov	r4,zero
 1001510:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 1001514:	0141a004 	movi	r5,1664
 1001518:	0009883a 	mov	r4,zero
 100151c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 1001520:	01404004 	movi	r5,256
 1001524:	0009883a 	mov	r4,zero
 1001528:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 100152c:	000b883a 	mov	r5,zero
 1001530:	0009883a 	mov	r4,zero
 1001534:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 1001538:	01400484 	movi	r5,18
 100153c:	0009883a 	mov	r4,zero
 1001540:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 1001544:	01415104 	movi	r5,1348
 1001548:	0009883a 	mov	r4,zero
 100154c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001550:	01400204 	movi	r5,8
 1001554:	0009883a 	mov	r4,zero
 1001558:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 100155c:	0140a404 	movi	r5,656
 1001560:	0009883a 	mov	r4,zero
 1001564:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 1001568:	01401044 	movi	r5,65
 100156c:	0009883a 	mov	r4,zero
 1001570:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 1001574:	014004c4 	movi	r5,19
 1001578:	0009883a 	mov	r4,zero
 100157c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 1001580:	01414804 	movi	r5,1312
 1001584:	0009883a 	mov	r4,zero
 1001588:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 100158c:	01415304 	movi	r5,1356
 1001590:	0009883a 	mov	r4,zero
 1001594:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 1001598:	01400204 	movi	r5,8
 100159c:	0009883a 	mov	r4,zero
 10015a0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 10015a4:	0140a404 	movi	r5,656
 10015a8:	0009883a 	mov	r4,zero
 10015ac:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 10015b0:	01400044 	movi	r5,1
 10015b4:	0009883a 	mov	r4,zero
 10015b8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 10015bc:	014004c4 	movi	r5,19
 10015c0:	0009883a 	mov	r4,zero
 10015c4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 10015c8:	01414b04 	movi	r5,1324
 10015cc:	0009883a 	mov	r4,zero
 10015d0:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 10015d4:	01415504 	movi	r5,1364
 10015d8:	0009883a 	mov	r4,zero
 10015dc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 10015e0:	01400084 	movi	r5,2
 10015e4:	0009883a 	mov	r4,zero
 10015e8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 10015ec:	0140a404 	movi	r5,656
 10015f0:	0009883a 	mov	r4,zero
 10015f4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 10015f8:	01401044 	movi	r5,65
 10015fc:	0009883a 	mov	r4,zero
 1001600:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 1001604:	014004c4 	movi	r5,19
 1001608:	0009883a 	mov	r4,zero
 100160c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 1001610:	01414e04 	movi	r5,1336
 1001614:	0009883a 	mov	r4,zero
 1001618:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 100161c:	000b883a 	mov	r5,zero
 1001620:	0009883a 	mov	r4,zero
 1001624:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 1001628:	000b883a 	mov	r5,zero
 100162c:	0009883a 	mov	r4,zero
 1001630:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 1001634:	01408404 	movi	r5,528
 1001638:	0009883a 	mov	r4,zero
 100163c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 1001640:	01401044 	movi	r5,65
 1001644:	0009883a 	mov	r4,zero
 1001648:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 100164c:	014004c4 	movi	r5,19
 1001650:	0009883a 	mov	r4,zero
 1001654:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 1001658:	000b883a 	mov	r5,zero
 100165c:	0009883a 	mov	r4,zero
 1001660:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001664:	01414004 	movi	r5,1280
 1001668:	01006c04 	movi	r4,432
 100166c:	10011100 	call	1001110 <UsbWrite>
}
 1001670:	0001883a 	nop
 1001674:	e037883a 	mov	sp,fp
 1001678:	dfc00117 	ldw	ra,4(sp)
 100167c:	df000017 	ldw	fp,0(sp)
 1001680:	dec00204 	addi	sp,sp,8
 1001684:	f800283a 	ret

01001688 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 1001688:	defffe04 	addi	sp,sp,-8
 100168c:	dfc00115 	stw	ra,4(sp)
 1001690:	df000015 	stw	fp,0(sp)
 1001694:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001698:	01414004 	movi	r5,1280
 100169c:	01000084 	movi	r4,2
 10016a0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 10016a4:	01414304 	movi	r5,1292
 10016a8:	0009883a 	mov	r4,zero
 10016ac:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 10016b0:	01400204 	movi	r5,8
 10016b4:	0009883a 	mov	r4,zero
 10016b8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 10016bc:	0140b404 	movi	r5,720
 10016c0:	0009883a 	mov	r4,zero
 10016c4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 10016c8:	01400044 	movi	r5,1
 10016cc:	0009883a 	mov	r4,zero
 10016d0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 10016d4:	014004c4 	movi	r5,19
 10016d8:	0009883a 	mov	r4,zero
 10016dc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 10016e0:	01414504 	movi	r5,1300
 10016e4:	0009883a 	mov	r4,zero
 10016e8:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 10016ec:	0141a004 	movi	r5,1664
 10016f0:	0009883a 	mov	r4,zero
 10016f4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 10016f8:	01408004 	movi	r5,512
 10016fc:	0009883a 	mov	r4,zero
 1001700:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 1001704:	000b883a 	mov	r5,zero
 1001708:	0009883a 	mov	r4,zero
 100170c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 1001710:	01400244 	movi	r5,9
 1001714:	0009883a 	mov	r4,zero
 1001718:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 100171c:	01415104 	movi	r5,1348
 1001720:	0009883a 	mov	r4,zero
 1001724:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001728:	01400204 	movi	r5,8
 100172c:	0009883a 	mov	r4,zero
 1001730:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 1001734:	0140a404 	movi	r5,656
 1001738:	0009883a 	mov	r4,zero
 100173c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 1001740:	01401044 	movi	r5,65
 1001744:	0009883a 	mov	r4,zero
 1001748:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 100174c:	014004c4 	movi	r5,19
 1001750:	0009883a 	mov	r4,zero
 1001754:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 1001758:	01414804 	movi	r5,1312
 100175c:	0009883a 	mov	r4,zero
 1001760:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 1001764:	01415304 	movi	r5,1356
 1001768:	0009883a 	mov	r4,zero
 100176c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 1001770:	01400044 	movi	r5,1
 1001774:	0009883a 	mov	r4,zero
 1001778:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 100177c:	0140a404 	movi	r5,656
 1001780:	0009883a 	mov	r4,zero
 1001784:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 1001788:	01400044 	movi	r5,1
 100178c:	0009883a 	mov	r4,zero
 1001790:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 1001794:	014004c4 	movi	r5,19
 1001798:	0009883a 	mov	r4,zero
 100179c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 10017a0:	01414b04 	movi	r5,1324
 10017a4:	0009883a 	mov	r4,zero
 10017a8:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 10017ac:	000b883a 	mov	r5,zero
 10017b0:	0009883a 	mov	r4,zero
 10017b4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 10017b8:	000b883a 	mov	r5,zero
 10017bc:	0009883a 	mov	r4,zero
 10017c0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 10017c4:	01408404 	movi	r5,528
 10017c8:	0009883a 	mov	r4,zero
 10017cc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 10017d0:	01401044 	movi	r5,65
 10017d4:	0009883a 	mov	r4,zero
 10017d8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 10017dc:	014004c4 	movi	r5,19
 10017e0:	0009883a 	mov	r4,zero
 10017e4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 10017e8:	000b883a 	mov	r5,zero
 10017ec:	0009883a 	mov	r4,zero
 10017f0:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 10017f4:	01414004 	movi	r5,1280
 10017f8:	01006c04 	movi	r4,432
 10017fc:	10011100 	call	1001110 <UsbWrite>
}
 1001800:	0001883a 	nop
 1001804:	e037883a 	mov	sp,fp
 1001808:	dfc00117 	ldw	ra,4(sp)
 100180c:	df000017 	ldw	fp,0(sp)
 1001810:	dec00204 	addi	sp,sp,8
 1001814:	f800283a 	ret

01001818 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 1001818:	defffe04 	addi	sp,sp,-8
 100181c:	dfc00115 	stw	ra,4(sp)
 1001820:	df000015 	stw	fp,0(sp)
 1001824:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001828:	01414004 	movi	r5,1280
 100182c:	01000084 	movi	r4,2
 1001830:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001834:	01414304 	movi	r5,1292
 1001838:	0009883a 	mov	r4,zero
 100183c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001840:	01400204 	movi	r5,8
 1001844:	0009883a 	mov	r4,zero
 1001848:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 100184c:	0140b404 	movi	r5,720
 1001850:	0009883a 	mov	r4,zero
 1001854:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001858:	01400044 	movi	r5,1
 100185c:	0009883a 	mov	r4,zero
 1001860:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001864:	014004c4 	movi	r5,19
 1001868:	0009883a 	mov	r4,zero
 100186c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001870:	01414504 	movi	r5,1300
 1001874:	0009883a 	mov	r4,zero
 1001878:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 100187c:	0141a004 	movi	r5,1664
 1001880:	0009883a 	mov	r4,zero
 1001884:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 1001888:	01408004 	movi	r5,512
 100188c:	0009883a 	mov	r4,zero
 1001890:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 1001894:	000b883a 	mov	r5,zero
 1001898:	0009883a 	mov	r4,zero
 100189c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 10018a0:	01403fc4 	movi	r5,255
 10018a4:	0009883a 	mov	r4,zero
 10018a8:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 10018ac:	01415704 	movi	r5,1372
 10018b0:	0009883a 	mov	r4,zero
 10018b4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 10018b8:	01400204 	movi	r5,8
 10018bc:	0009883a 	mov	r4,zero
 10018c0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 10018c4:	0140a404 	movi	r5,656
 10018c8:	0009883a 	mov	r4,zero
 10018cc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 10018d0:	01401044 	movi	r5,65
 10018d4:	0009883a 	mov	r4,zero
 10018d8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 10018dc:	014004c4 	movi	r5,19
 10018e0:	0009883a 	mov	r4,zero
 10018e4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 10018e8:	01414804 	movi	r5,1312
 10018ec:	0009883a 	mov	r4,zero
 10018f0:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 10018f4:	01415904 	movi	r5,1380
 10018f8:	0009883a 	mov	r4,zero
 10018fc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 1001900:	01400204 	movi	r5,8
 1001904:	0009883a 	mov	r4,zero
 1001908:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 100190c:	0140a404 	movi	r5,656
 1001910:	0009883a 	mov	r4,zero
 1001914:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 1001918:	01400044 	movi	r5,1
 100191c:	0009883a 	mov	r4,zero
 1001920:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 1001924:	014004c4 	movi	r5,19
 1001928:	0009883a 	mov	r4,zero
 100192c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 1001930:	01414b04 	movi	r5,1324
 1001934:	0009883a 	mov	r4,zero
 1001938:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 100193c:	01415b04 	movi	r5,1388
 1001940:	0009883a 	mov	r4,zero
 1001944:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 1001948:	01400204 	movi	r5,8
 100194c:	0009883a 	mov	r4,zero
 1001950:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 1001954:	0140a404 	movi	r5,656
 1001958:	0009883a 	mov	r4,zero
 100195c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 1001960:	01401044 	movi	r5,65
 1001964:	0009883a 	mov	r4,zero
 1001968:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 100196c:	014004c4 	movi	r5,19
 1001970:	0009883a 	mov	r4,zero
 1001974:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 1001978:	01414e04 	movi	r5,1336
 100197c:	0009883a 	mov	r4,zero
 1001980:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 1001984:	01415d04 	movi	r5,1396
 1001988:	0009883a 	mov	r4,zero
 100198c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 1001990:	01400204 	movi	r5,8
 1001994:	0009883a 	mov	r4,zero
 1001998:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 100199c:	0140a404 	movi	r5,656
 10019a0:	0009883a 	mov	r4,zero
 10019a4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 10019a8:	01400044 	movi	r5,1
 10019ac:	0009883a 	mov	r4,zero
 10019b0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 10019b4:	014004c4 	movi	r5,19
 10019b8:	0009883a 	mov	r4,zero
 10019bc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 10019c0:	01415104 	movi	r5,1348
 10019c4:	0009883a 	mov	r4,zero
 10019c8:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 10019cc:	01415f04 	movi	r5,1404
 10019d0:	0009883a 	mov	r4,zero
 10019d4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 10019d8:	01400084 	movi	r5,2
 10019dc:	0009883a 	mov	r4,zero
 10019e0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 10019e4:	0140a404 	movi	r5,656
 10019e8:	0009883a 	mov	r4,zero
 10019ec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 10019f0:	01401044 	movi	r5,65
 10019f4:	0009883a 	mov	r4,zero
 10019f8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 10019fc:	014004c4 	movi	r5,19
 1001a00:	0009883a 	mov	r4,zero
 1001a04:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 1001a08:	01415404 	movi	r5,1360
 1001a0c:	0009883a 	mov	r4,zero
 1001a10:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 1001a14:	000b883a 	mov	r5,zero
 1001a18:	0009883a 	mov	r4,zero
 1001a1c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 1001a20:	000b883a 	mov	r5,zero
 1001a24:	0009883a 	mov	r4,zero
 1001a28:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 1001a2c:	01408404 	movi	r5,528
 1001a30:	0009883a 	mov	r4,zero
 1001a34:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 1001a38:	01401044 	movi	r5,65
 1001a3c:	0009883a 	mov	r4,zero
 1001a40:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 1001a44:	014004c4 	movi	r5,19
 1001a48:	0009883a 	mov	r4,zero
 1001a4c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 1001a50:	000b883a 	mov	r5,zero
 1001a54:	0009883a 	mov	r4,zero
 1001a58:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001a5c:	01414004 	movi	r5,1280
 1001a60:	01006c04 	movi	r4,432
 1001a64:	10011100 	call	1001110 <UsbWrite>
}
 1001a68:	0001883a 	nop
 1001a6c:	e037883a 	mov	sp,fp
 1001a70:	dfc00117 	ldw	ra,4(sp)
 1001a74:	df000017 	ldw	fp,0(sp)
 1001a78:	dec00204 	addi	sp,sp,8
 1001a7c:	f800283a 	ret

01001a80 <UsbSetConfig>:

void UsbSetConfig()
{
 1001a80:	defffe04 	addi	sp,sp,-8
 1001a84:	dfc00115 	stw	ra,4(sp)
 1001a88:	df000015 	stw	fp,0(sp)
 1001a8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001a90:	01414004 	movi	r5,1280
 1001a94:	01000084 	movi	r4,2
 1001a98:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001a9c:	01414304 	movi	r5,1292
 1001aa0:	0009883a 	mov	r4,zero
 1001aa4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001aa8:	01400204 	movi	r5,8
 1001aac:	0009883a 	mov	r4,zero
 1001ab0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 1001ab4:	0140b404 	movi	r5,720
 1001ab8:	0009883a 	mov	r4,zero
 1001abc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001ac0:	01400044 	movi	r5,1
 1001ac4:	0009883a 	mov	r4,zero
 1001ac8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001acc:	014004c4 	movi	r5,19
 1001ad0:	0009883a 	mov	r4,zero
 1001ad4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001ad8:	01414504 	movi	r5,1300
 1001adc:	0009883a 	mov	r4,zero
 1001ae0:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 1001ae4:	01424004 	movi	r5,2304
 1001ae8:	0009883a 	mov	r4,zero
 1001aec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 1001af0:	01400044 	movi	r5,1
 1001af4:	0009883a 	mov	r4,zero
 1001af8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001afc:	000b883a 	mov	r5,zero
 1001b00:	0009883a 	mov	r4,zero
 1001b04:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001b08:	000b883a 	mov	r5,zero
 1001b0c:	0009883a 	mov	r4,zero
 1001b10:	10002f40 	call	10002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 1001b14:	000b883a 	mov	r5,zero
 1001b18:	0009883a 	mov	r4,zero
 1001b1c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 1001b20:	000b883a 	mov	r5,zero
 1001b24:	0009883a 	mov	r4,zero
 1001b28:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 1001b2c:	0140a404 	movi	r5,656
 1001b30:	0009883a 	mov	r4,zero
 1001b34:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 1001b38:	01401044 	movi	r5,65
 1001b3c:	0009883a 	mov	r4,zero
 1001b40:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001b44:	014004c4 	movi	r5,19
 1001b48:	0009883a 	mov	r4,zero
 1001b4c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001b50:	000b883a 	mov	r5,zero
 1001b54:	0009883a 	mov	r4,zero
 1001b58:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001b5c:	01414004 	movi	r5,1280
 1001b60:	01006c04 	movi	r4,432
 1001b64:	10011100 	call	1001110 <UsbWrite>

}
 1001b68:	0001883a 	nop
 1001b6c:	e037883a 	mov	sp,fp
 1001b70:	dfc00117 	ldw	ra,4(sp)
 1001b74:	df000017 	ldw	fp,0(sp)
 1001b78:	dec00204 	addi	sp,sp,8
 1001b7c:	f800283a 	ret

01001b80 <UsbClassRequest>:

void UsbClassRequest()
{
 1001b80:	defffe04 	addi	sp,sp,-8
 1001b84:	dfc00115 	stw	ra,4(sp)
 1001b88:	df000015 	stw	fp,0(sp)
 1001b8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001b90:	01414004 	movi	r5,1280
 1001b94:	01000084 	movi	r4,2
 1001b98:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001b9c:	01414304 	movi	r5,1292
 1001ba0:	0009883a 	mov	r4,zero
 1001ba4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001ba8:	01400204 	movi	r5,8
 1001bac:	0009883a 	mov	r4,zero
 1001bb0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 1001bb4:	0140b404 	movi	r5,720
 1001bb8:	0009883a 	mov	r4,zero
 1001bbc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001bc0:	01400044 	movi	r5,1
 1001bc4:	0009883a 	mov	r4,zero
 1001bc8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001bcc:	014004c4 	movi	r5,19
 1001bd0:	0009883a 	mov	r4,zero
 1001bd4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001bd8:	01414504 	movi	r5,1300
 1001bdc:	0009883a 	mov	r4,zero
 1001be0:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 1001be4:	01428844 	movi	r5,2593
 1001be8:	0009883a 	mov	r4,zero
 1001bec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 1001bf0:	000b883a 	mov	r5,zero
 1001bf4:	0009883a 	mov	r4,zero
 1001bf8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001bfc:	000b883a 	mov	r5,zero
 1001c00:	0009883a 	mov	r4,zero
 1001c04:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001c08:	000b883a 	mov	r5,zero
 1001c0c:	0009883a 	mov	r4,zero
 1001c10:	10002f40 	call	10002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 1001c14:	000b883a 	mov	r5,zero
 1001c18:	0009883a 	mov	r4,zero
 1001c1c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 1001c20:	000b883a 	mov	r5,zero
 1001c24:	0009883a 	mov	r4,zero
 1001c28:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 1001c2c:	0140a404 	movi	r5,656
 1001c30:	0009883a 	mov	r4,zero
 1001c34:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 1001c38:	01401044 	movi	r5,65
 1001c3c:	0009883a 	mov	r4,zero
 1001c40:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001c44:	014004c4 	movi	r5,19
 1001c48:	0009883a 	mov	r4,zero
 1001c4c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
 1001c50:	000b883a 	mov	r5,zero
 1001c54:	0009883a 	mov	r4,zero
 1001c58:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001c5c:	01414004 	movi	r5,1280
 1001c60:	01006c04 	movi	r4,432
 1001c64:	10011100 	call	1001110 <UsbWrite>
}
 1001c68:	0001883a 	nop
 1001c6c:	e037883a 	mov	sp,fp
 1001c70:	dfc00117 	ldw	ra,4(sp)
 1001c74:	df000017 	ldw	fp,0(sp)
 1001c78:	dec00204 	addi	sp,sp,8
 1001c7c:	f800283a 	ret

01001c80 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 1001c80:	defffe04 	addi	sp,sp,-8
 1001c84:	dfc00115 	stw	ra,4(sp)
 1001c88:	df000015 	stw	fp,0(sp)
 1001c8c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001c90:	01414004 	movi	r5,1280
 1001c94:	01000084 	movi	r4,2
 1001c98:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001c9c:	01414304 	movi	r5,1292
 1001ca0:	0009883a 	mov	r4,zero
 1001ca4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001ca8:	01400204 	movi	r5,8
 1001cac:	0009883a 	mov	r4,zero
 1001cb0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 1001cb4:	0140b404 	movi	r5,720
 1001cb8:	0009883a 	mov	r4,zero
 1001cbc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001cc0:	01400044 	movi	r5,1
 1001cc4:	0009883a 	mov	r4,zero
 1001cc8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001ccc:	014004c4 	movi	r5,19
 1001cd0:	0009883a 	mov	r4,zero
 1001cd4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001cd8:	01414504 	movi	r5,1300
 1001cdc:	0009883a 	mov	r4,zero
 1001ce0:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 1001ce4:	0141a044 	movi	r5,1665
 1001ce8:	0009883a 	mov	r4,zero
 1001cec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 1001cf0:	01484004 	movi	r5,8448
 1001cf4:	0009883a 	mov	r4,zero
 1001cf8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 1001cfc:	000b883a 	mov	r5,zero
 1001d00:	0009883a 	mov	r4,zero
 1001d04:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 1001d08:	01401ec4 	movi	r5,123
 1001d0c:	0009883a 	mov	r4,zero
 1001d10:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 1001d14:	01415104 	movi	r5,1348
 1001d18:	0009883a 	mov	r4,zero
 1001d1c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001d20:	01400204 	movi	r5,8
 1001d24:	0009883a 	mov	r4,zero
 1001d28:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 1001d2c:	0140a404 	movi	r5,656
 1001d30:	0009883a 	mov	r4,zero
 1001d34:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 1001d38:	01401044 	movi	r5,65
 1001d3c:	0009883a 	mov	r4,zero
 1001d40:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 1001d44:	014004c4 	movi	r5,19
 1001d48:	0009883a 	mov	r4,zero
 1001d4c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 1001d50:	01414804 	movi	r5,1312
 1001d54:	0009883a 	mov	r4,zero
 1001d58:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 1001d5c:	000b883a 	mov	r5,zero
 1001d60:	0009883a 	mov	r4,zero
 1001d64:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 1001d68:	000b883a 	mov	r5,zero
 1001d6c:	0009883a 	mov	r4,zero
 1001d70:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 1001d74:	01408404 	movi	r5,528
 1001d78:	0009883a 	mov	r4,zero
 1001d7c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 1001d80:	01401044 	movi	r5,65
 1001d84:	0009883a 	mov	r4,zero
 1001d88:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 1001d8c:	014004c4 	movi	r5,19
 1001d90:	0009883a 	mov	r4,zero
 1001d94:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 1001d98:	000b883a 	mov	r5,zero
 1001d9c:	0009883a 	mov	r4,zero
 1001da0:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 1001da4:	01414004 	movi	r5,1280
 1001da8:	01006c04 	movi	r4,432
 1001dac:	10011100 	call	1001110 <UsbWrite>

}
 1001db0:	0001883a 	nop
 1001db4:	e037883a 	mov	sp,fp
 1001db8:	dfc00117 	ldw	ra,4(sp)
 1001dbc:	df000017 	ldw	fp,0(sp)
 1001dc0:	dec00204 	addi	sp,sp,8
 1001dc4:	f800283a 	ret

01001dc8 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 1001dc8:	defffe04 	addi	sp,sp,-8
 1001dcc:	dfc00115 	stw	ra,4(sp)
 1001dd0:	df000015 	stw	fp,0(sp)
 1001dd4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 1001dd8:	01414004 	movi	r5,1280
 1001ddc:	01000084 	movi	r4,2
 1001de0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
 1001de4:	01414304 	movi	r5,1292
 1001de8:	0009883a 	mov	r4,zero
 1001dec:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 1001df0:	01400204 	movi	r5,8
 1001df4:	0009883a 	mov	r4,zero
 1001df8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 1001dfc:	0140b404 	movi	r5,720
 1001e00:	0009883a 	mov	r4,zero
 1001e04:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
 1001e08:	01400044 	movi	r5,1
 1001e0c:	0009883a 	mov	r4,zero
 1001e10:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
 1001e14:	014004c4 	movi	r5,19
 1001e18:	0009883a 	mov	r4,zero
 1001e1c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
 1001e20:	01414504 	movi	r5,1300
 1001e24:	0009883a 	mov	r4,zero
 1001e28:	10002f40 	call	10002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 1001e2c:	0141a044 	movi	r5,1665
 1001e30:	0009883a 	mov	r4,zero
 1001e34:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 1001e38:	01488004 	movi	r5,8704
 1001e3c:	0009883a 	mov	r4,zero
 1001e40:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 1001e44:	000b883a 	mov	r5,zero
 1001e48:	0009883a 	mov	r4,zero
 1001e4c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 1001e50:	01401ec4 	movi	r5,123
 1001e54:	0009883a 	mov	r4,zero
 1001e58:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 1001e5c:	01416004 	movi	r5,1408
 1001e60:	0009883a 	mov	r4,zero
 1001e64:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001e68:	01400204 	movi	r5,8
 1001e6c:	0009883a 	mov	r4,zero
 1001e70:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 1001e74:	0140a404 	movi	r5,656
 1001e78:	0009883a 	mov	r4,zero
 1001e7c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 1001e80:	01401044 	movi	r5,65
 1001e84:	0009883a 	mov	r4,zero
 1001e88:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 1001e8c:	014004c4 	movi	r5,19
 1001e90:	0009883a 	mov	r4,zero
 1001e94:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 1001e98:	01414804 	movi	r5,1312
 1001e9c:	0009883a 	mov	r4,zero
 1001ea0:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 1001ea4:	01416204 	movi	r5,1416
 1001ea8:	0009883a 	mov	r4,zero
 1001eac:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 1001eb0:	01400204 	movi	r5,8
 1001eb4:	0009883a 	mov	r4,zero
 1001eb8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 1001ebc:	0140a404 	movi	r5,656
 1001ec0:	0009883a 	mov	r4,zero
 1001ec4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 1001ec8:	01400044 	movi	r5,1
 1001ecc:	0009883a 	mov	r4,zero
 1001ed0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 1001ed4:	014004c4 	movi	r5,19
 1001ed8:	0009883a 	mov	r4,zero
 1001edc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 1001ee0:	01414b04 	movi	r5,1324
 1001ee4:	0009883a 	mov	r4,zero
 1001ee8:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 1001eec:	01416404 	movi	r5,1424
 1001ef0:	0009883a 	mov	r4,zero
 1001ef4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 1001ef8:	01400204 	movi	r5,8
 1001efc:	0009883a 	mov	r4,zero
 1001f00:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 1001f04:	0140a404 	movi	r5,656
 1001f08:	0009883a 	mov	r4,zero
 1001f0c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 1001f10:	01401044 	movi	r5,65
 1001f14:	0009883a 	mov	r4,zero
 1001f18:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 1001f1c:	014004c4 	movi	r5,19
 1001f20:	0009883a 	mov	r4,zero
 1001f24:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 1001f28:	01414e04 	movi	r5,1336
 1001f2c:	0009883a 	mov	r4,zero
 1001f30:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 1001f34:	01416604 	movi	r5,1432
 1001f38:	0009883a 	mov	r4,zero
 1001f3c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 1001f40:	01400204 	movi	r5,8
 1001f44:	0009883a 	mov	r4,zero
 1001f48:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 1001f4c:	0140a404 	movi	r5,656
 1001f50:	0009883a 	mov	r4,zero
 1001f54:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 1001f58:	01400044 	movi	r5,1
 1001f5c:	0009883a 	mov	r4,zero
 1001f60:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 1001f64:	014004c4 	movi	r5,19
 1001f68:	0009883a 	mov	r4,zero
 1001f6c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 1001f70:	01415104 	movi	r5,1348
 1001f74:	0009883a 	mov	r4,zero
 1001f78:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 1001f7c:	01416804 	movi	r5,1440
 1001f80:	0009883a 	mov	r4,zero
 1001f84:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 1001f88:	01400204 	movi	r5,8
 1001f8c:	0009883a 	mov	r4,zero
 1001f90:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 1001f94:	0140a404 	movi	r5,656
 1001f98:	0009883a 	mov	r4,zero
 1001f9c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 1001fa0:	01401044 	movi	r5,65
 1001fa4:	0009883a 	mov	r4,zero
 1001fa8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 1001fac:	014004c4 	movi	r5,19
 1001fb0:	0009883a 	mov	r4,zero
 1001fb4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 1001fb8:	01415404 	movi	r5,1360
 1001fbc:	0009883a 	mov	r4,zero
 1001fc0:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 1001fc4:	01416a04 	movi	r5,1448
 1001fc8:	0009883a 	mov	r4,zero
 1001fcc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 1001fd0:	01400204 	movi	r5,8
 1001fd4:	0009883a 	mov	r4,zero
 1001fd8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 1001fdc:	0140a404 	movi	r5,656
 1001fe0:	0009883a 	mov	r4,zero
 1001fe4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 1001fe8:	01400044 	movi	r5,1
 1001fec:	0009883a 	mov	r4,zero
 1001ff0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 1001ff4:	014004c4 	movi	r5,19
 1001ff8:	0009883a 	mov	r4,zero
 1001ffc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 1002000:	01415704 	movi	r5,1372
 1002004:	0009883a 	mov	r4,zero
 1002008:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 100200c:	01416c04 	movi	r5,1456
 1002010:	0009883a 	mov	r4,zero
 1002014:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 1002018:	01400204 	movi	r5,8
 100201c:	0009883a 	mov	r4,zero
 1002020:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 1002024:	0140a404 	movi	r5,656
 1002028:	0009883a 	mov	r4,zero
 100202c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 1002030:	01401044 	movi	r5,65
 1002034:	0009883a 	mov	r4,zero
 1002038:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 100203c:	014004c4 	movi	r5,19
 1002040:	0009883a 	mov	r4,zero
 1002044:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 1002048:	01415a04 	movi	r5,1384
 100204c:	0009883a 	mov	r4,zero
 1002050:	10002f40 	call	10002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 1002054:	01416e04 	movi	r5,1464
 1002058:	0009883a 	mov	r4,zero
 100205c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 1002060:	014000c4 	movi	r5,3
 1002064:	0009883a 	mov	r4,zero
 1002068:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 100206c:	0140a404 	movi	r5,656
 1002070:	0009883a 	mov	r4,zero
 1002074:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 1002078:	01400044 	movi	r5,1
 100207c:	0009883a 	mov	r4,zero
 1002080:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 1002084:	014004c4 	movi	r5,19
 1002088:	0009883a 	mov	r4,zero
 100208c:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 1002090:	01415d04 	movi	r5,1396
 1002094:	0009883a 	mov	r4,zero
 1002098:	10002f40 	call	10002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 100209c:	000b883a 	mov	r5,zero
 10020a0:	0009883a 	mov	r4,zero
 10020a4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 10020a8:	000b883a 	mov	r5,zero
 10020ac:	0009883a 	mov	r4,zero
 10020b0:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 10020b4:	01408404 	movi	r5,528
 10020b8:	0009883a 	mov	r4,zero
 10020bc:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 10020c0:	01401044 	movi	r5,65
 10020c4:	0009883a 	mov	r4,zero
 10020c8:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 10020cc:	014004c4 	movi	r5,19
 10020d0:	0009883a 	mov	r4,zero
 10020d4:	10002f40 	call	10002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 10020d8:	000b883a 	mov	r5,zero
 10020dc:	0009883a 	mov	r4,zero
 10020e0:	10002f40 	call	10002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 10020e4:	01414004 	movi	r5,1280
 10020e8:	01006c04 	movi	r4,432
 10020ec:	10011100 	call	1001110 <UsbWrite>

}
 10020f0:	0001883a 	nop
 10020f4:	e037883a 	mov	sp,fp
 10020f8:	dfc00117 	ldw	ra,4(sp)
 10020fc:	df000017 	ldw	fp,0(sp)
 1002100:	dec00204 	addi	sp,sp,8
 1002104:	f800283a 	ret

01002108 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 1002108:	defffd04 	addi	sp,sp,-12
 100210c:	dfc00215 	stw	ra,8(sp)
 1002110:	df000115 	stw	fp,4(sp)
 1002114:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 1002118:	01005104 	movi	r4,324
 100211c:	10011680 	call	1001168 <UsbRead>
 1002120:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 1002124:	000b883a 	mov	r5,zero
 1002128:	01005104 	movi	r4,324
 100212c:	10011100 	call	1001110 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 1002130:	00000d06 	br	1002168 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 1002134:	e0bfff0b 	ldhu	r2,-4(fp)
 1002138:	10000526 	beq	r2,zero,1002150 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 100213c:	e0bfff0b 	ldhu	r2,-4(fp)
 1002140:	100b883a 	mov	r5,r2
 1002144:	01004074 	movhi	r4,257
 1002148:	21084c04 	addi	r4,r4,8496
 100214c:	10022bc0 	call	10022bc <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 1002150:	01005104 	movi	r4,324
 1002154:	10011680 	call	1001168 <UsbRead>
 1002158:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 100215c:	000b883a 	mov	r5,zero
 1002160:	01005104 	movi	r4,324
 1002164:	10011100 	call	1001110 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 1002168:	e0bfff0b 	ldhu	r2,-4(fp)
 100216c:	10840018 	cmpnei	r2,r2,4096
 1002170:	103ff01e 	bne	r2,zero,1002134 <__alt_data_end+0xff802134>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 1002174:	e0bfff0b 	ldhu	r2,-4(fp)
}
 1002178:	e037883a 	mov	sp,fp
 100217c:	dfc00117 	ldw	ra,4(sp)
 1002180:	df000017 	ldw	fp,0(sp)
 1002184:	dec00204 	addi	sp,sp,8
 1002188:	f800283a 	ret

0100218c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 100218c:	defffd04 	addi	sp,sp,-12
 1002190:	dfc00215 	stw	ra,8(sp)
 1002194:	df000115 	stw	fp,4(sp)
 1002198:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 100219c:	010000c4 	movi	r4,3
 10021a0:	10003640 	call	1000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 10021a4:	01005104 	movi	r4,324
 10021a8:	10011680 	call	1001168 <UsbRead>
 10021ac:	10bfffcc 	andi	r2,r2,65535
 10021b0:	10840018 	cmpnei	r2,r2,4096
 10021b4:	1000091e 	bne	r2,zero,10021dc <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 10021b8:	000b883a 	mov	r5,zero
 10021bc:	01005104 	movi	r4,324
 10021c0:	10011100 	call	1001110 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 10021c4:	0001883a 	nop
 10021c8:	010000c4 	movi	r4,3
 10021cc:	10003640 	call	1000364 <IO_read>
 10021d0:	10bfffcc 	andi	r2,r2,65535
 10021d4:	1080040c 	andi	r2,r2,16
 10021d8:	103ffb26 	beq	r2,zero,10021c8 <__alt_data_end+0xff8021c8>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 10021dc:	01414204 	movi	r5,1288
 10021e0:	01000084 	movi	r4,2
 10021e4:	10002f40 	call	10002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 10021e8:	0009883a 	mov	r4,zero
 10021ec:	10003640 	call	1000364 <IO_read>
 10021f0:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 10021f4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 10021f8:	e037883a 	mov	sp,fp
 10021fc:	dfc00117 	ldw	ra,4(sp)
 1002200:	df000017 	ldw	fp,0(sp)
 1002204:	dec00204 	addi	sp,sp,8
 1002208:	f800283a 	ret

0100220c <UsbPrintMem>:


void UsbPrintMem()
{
 100220c:	defffc04 	addi	sp,sp,-16
 1002210:	dfc00315 	stw	ra,12(sp)
 1002214:	df000215 	stw	fp,8(sp)
 1002218:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 100221c:	01414004 	movi	r5,1280
 1002220:	01000084 	movi	r4,2
 1002224:	10002f40 	call	10002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
 1002228:	e03ffe15 	stw	zero,-8(fp)
 100222c:	00000e06 	br	1002268 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 1002230:	0009883a 	mov	r4,zero
 1002234:	10003640 	call	1000364 <IO_read>
 1002238:	10bfffcc 	andi	r2,r2,65535
 100223c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 1002240:	e0bffe17 	ldw	r2,-8(fp)
 1002244:	10814004 	addi	r2,r2,1280
 1002248:	e1bfff17 	ldw	r6,-4(fp)
 100224c:	100b883a 	mov	r5,r2
 1002250:	01004074 	movhi	r4,257
 1002254:	21085404 	addi	r4,r4,8528
 1002258:	10022bc0 	call	10022bc <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 100225c:	e0bffe17 	ldw	r2,-8(fp)
 1002260:	10800084 	addi	r2,r2,2
 1002264:	e0bffe15 	stw	r2,-8(fp)
 1002268:	e0bffe17 	ldw	r2,-8(fp)
 100226c:	10803250 	cmplti	r2,r2,201
 1002270:	103fef1e 	bne	r2,zero,1002230 <__alt_data_end+0xff802230>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 1002274:	0001883a 	nop
 1002278:	e037883a 	mov	sp,fp
 100227c:	dfc00117 	ldw	ra,4(sp)
 1002280:	df000017 	ldw	fp,0(sp)
 1002284:	dec00204 	addi	sp,sp,8
 1002288:	f800283a 	ret

0100228c <_printf_r>:
 100228c:	defffd04 	addi	sp,sp,-12
 1002290:	2805883a 	mov	r2,r5
 1002294:	dfc00015 	stw	ra,0(sp)
 1002298:	d9800115 	stw	r6,4(sp)
 100229c:	d9c00215 	stw	r7,8(sp)
 10022a0:	21400217 	ldw	r5,8(r4)
 10022a4:	d9c00104 	addi	r7,sp,4
 10022a8:	100d883a 	mov	r6,r2
 10022ac:	10024640 	call	1002464 <___vfprintf_internal_r>
 10022b0:	dfc00017 	ldw	ra,0(sp)
 10022b4:	dec00304 	addi	sp,sp,12
 10022b8:	f800283a 	ret

010022bc <printf>:
 10022bc:	defffc04 	addi	sp,sp,-16
 10022c0:	dfc00015 	stw	ra,0(sp)
 10022c4:	d9400115 	stw	r5,4(sp)
 10022c8:	d9800215 	stw	r6,8(sp)
 10022cc:	d9c00315 	stw	r7,12(sp)
 10022d0:	00804074 	movhi	r2,257
 10022d4:	108fc504 	addi	r2,r2,16148
 10022d8:	10800017 	ldw	r2,0(r2)
 10022dc:	200b883a 	mov	r5,r4
 10022e0:	d9800104 	addi	r6,sp,4
 10022e4:	11000217 	ldw	r4,8(r2)
 10022e8:	10047400 	call	1004740 <__vfprintf_internal>
 10022ec:	dfc00017 	ldw	ra,0(sp)
 10022f0:	dec00404 	addi	sp,sp,16
 10022f4:	f800283a 	ret

010022f8 <_puts_r>:
 10022f8:	defff604 	addi	sp,sp,-40
 10022fc:	dc000715 	stw	r16,28(sp)
 1002300:	2021883a 	mov	r16,r4
 1002304:	2809883a 	mov	r4,r5
 1002308:	dc400815 	stw	r17,32(sp)
 100230c:	dfc00915 	stw	ra,36(sp)
 1002310:	2823883a 	mov	r17,r5
 1002314:	10023cc0 	call	10023cc <strlen>
 1002318:	10c00044 	addi	r3,r2,1
 100231c:	d8800115 	stw	r2,4(sp)
 1002320:	00804074 	movhi	r2,257
 1002324:	10885904 	addi	r2,r2,8548
 1002328:	d8800215 	stw	r2,8(sp)
 100232c:	00800044 	movi	r2,1
 1002330:	d8800315 	stw	r2,12(sp)
 1002334:	00800084 	movi	r2,2
 1002338:	dc400015 	stw	r17,0(sp)
 100233c:	d8c00615 	stw	r3,24(sp)
 1002340:	dec00415 	stw	sp,16(sp)
 1002344:	d8800515 	stw	r2,20(sp)
 1002348:	80000226 	beq	r16,zero,1002354 <_puts_r+0x5c>
 100234c:	80800e17 	ldw	r2,56(r16)
 1002350:	10001426 	beq	r2,zero,10023a4 <_puts_r+0xac>
 1002354:	81400217 	ldw	r5,8(r16)
 1002358:	2880030b 	ldhu	r2,12(r5)
 100235c:	10c8000c 	andi	r3,r2,8192
 1002360:	1800061e 	bne	r3,zero,100237c <_puts_r+0x84>
 1002364:	29001917 	ldw	r4,100(r5)
 1002368:	00f7ffc4 	movi	r3,-8193
 100236c:	10880014 	ori	r2,r2,8192
 1002370:	20c6703a 	and	r3,r4,r3
 1002374:	2880030d 	sth	r2,12(r5)
 1002378:	28c01915 	stw	r3,100(r5)
 100237c:	d9800404 	addi	r6,sp,16
 1002380:	8009883a 	mov	r4,r16
 1002384:	1006ca80 	call	1006ca8 <__sfvwrite_r>
 1002388:	1000091e 	bne	r2,zero,10023b0 <_puts_r+0xb8>
 100238c:	00800284 	movi	r2,10
 1002390:	dfc00917 	ldw	ra,36(sp)
 1002394:	dc400817 	ldw	r17,32(sp)
 1002398:	dc000717 	ldw	r16,28(sp)
 100239c:	dec00a04 	addi	sp,sp,40
 10023a0:	f800283a 	ret
 10023a4:	8009883a 	mov	r4,r16
 10023a8:	10068240 	call	1006824 <__sinit>
 10023ac:	003fe906 	br	1002354 <__alt_data_end+0xff802354>
 10023b0:	00bfffc4 	movi	r2,-1
 10023b4:	003ff606 	br	1002390 <__alt_data_end+0xff802390>

010023b8 <puts>:
 10023b8:	00804074 	movhi	r2,257
 10023bc:	108fc504 	addi	r2,r2,16148
 10023c0:	200b883a 	mov	r5,r4
 10023c4:	11000017 	ldw	r4,0(r2)
 10023c8:	10022f81 	jmpi	10022f8 <_puts_r>

010023cc <strlen>:
 10023cc:	208000cc 	andi	r2,r4,3
 10023d0:	10002026 	beq	r2,zero,1002454 <strlen+0x88>
 10023d4:	20800007 	ldb	r2,0(r4)
 10023d8:	10002026 	beq	r2,zero,100245c <strlen+0x90>
 10023dc:	2005883a 	mov	r2,r4
 10023e0:	00000206 	br	10023ec <strlen+0x20>
 10023e4:	10c00007 	ldb	r3,0(r2)
 10023e8:	18001826 	beq	r3,zero,100244c <strlen+0x80>
 10023ec:	10800044 	addi	r2,r2,1
 10023f0:	10c000cc 	andi	r3,r2,3
 10023f4:	183ffb1e 	bne	r3,zero,10023e4 <__alt_data_end+0xff8023e4>
 10023f8:	10c00017 	ldw	r3,0(r2)
 10023fc:	01ffbff4 	movhi	r7,65279
 1002400:	39ffbfc4 	addi	r7,r7,-257
 1002404:	00ca303a 	nor	r5,zero,r3
 1002408:	01a02074 	movhi	r6,32897
 100240c:	19c7883a 	add	r3,r3,r7
 1002410:	31a02004 	addi	r6,r6,-32640
 1002414:	1946703a 	and	r3,r3,r5
 1002418:	1986703a 	and	r3,r3,r6
 100241c:	1800091e 	bne	r3,zero,1002444 <strlen+0x78>
 1002420:	10800104 	addi	r2,r2,4
 1002424:	10c00017 	ldw	r3,0(r2)
 1002428:	19cb883a 	add	r5,r3,r7
 100242c:	00c6303a 	nor	r3,zero,r3
 1002430:	28c6703a 	and	r3,r5,r3
 1002434:	1986703a 	and	r3,r3,r6
 1002438:	183ff926 	beq	r3,zero,1002420 <__alt_data_end+0xff802420>
 100243c:	00000106 	br	1002444 <strlen+0x78>
 1002440:	10800044 	addi	r2,r2,1
 1002444:	10c00007 	ldb	r3,0(r2)
 1002448:	183ffd1e 	bne	r3,zero,1002440 <__alt_data_end+0xff802440>
 100244c:	1105c83a 	sub	r2,r2,r4
 1002450:	f800283a 	ret
 1002454:	2005883a 	mov	r2,r4
 1002458:	003fe706 	br	10023f8 <__alt_data_end+0xff8023f8>
 100245c:	0005883a 	mov	r2,zero
 1002460:	f800283a 	ret

01002464 <___vfprintf_internal_r>:
 1002464:	deffb804 	addi	sp,sp,-288
 1002468:	dfc04715 	stw	ra,284(sp)
 100246c:	ddc04515 	stw	r23,276(sp)
 1002470:	dd404315 	stw	r21,268(sp)
 1002474:	d9002d15 	stw	r4,180(sp)
 1002478:	282f883a 	mov	r23,r5
 100247c:	302b883a 	mov	r21,r6
 1002480:	d9c02e15 	stw	r7,184(sp)
 1002484:	df004615 	stw	fp,280(sp)
 1002488:	dd804415 	stw	r22,272(sp)
 100248c:	dd004215 	stw	r20,264(sp)
 1002490:	dcc04115 	stw	r19,260(sp)
 1002494:	dc804015 	stw	r18,256(sp)
 1002498:	dc403f15 	stw	r17,252(sp)
 100249c:	dc003e15 	stw	r16,248(sp)
 10024a0:	10073a40 	call	10073a4 <_localeconv_r>
 10024a4:	10800017 	ldw	r2,0(r2)
 10024a8:	1009883a 	mov	r4,r2
 10024ac:	d8803415 	stw	r2,208(sp)
 10024b0:	10023cc0 	call	10023cc <strlen>
 10024b4:	d8803715 	stw	r2,220(sp)
 10024b8:	d8802d17 	ldw	r2,180(sp)
 10024bc:	10000226 	beq	r2,zero,10024c8 <___vfprintf_internal_r+0x64>
 10024c0:	10800e17 	ldw	r2,56(r2)
 10024c4:	1000fb26 	beq	r2,zero,10028b4 <___vfprintf_internal_r+0x450>
 10024c8:	b880030b 	ldhu	r2,12(r23)
 10024cc:	10c8000c 	andi	r3,r2,8192
 10024d0:	1800061e 	bne	r3,zero,10024ec <___vfprintf_internal_r+0x88>
 10024d4:	b9001917 	ldw	r4,100(r23)
 10024d8:	00f7ffc4 	movi	r3,-8193
 10024dc:	10880014 	ori	r2,r2,8192
 10024e0:	20c6703a 	and	r3,r4,r3
 10024e4:	b880030d 	sth	r2,12(r23)
 10024e8:	b8c01915 	stw	r3,100(r23)
 10024ec:	10c0020c 	andi	r3,r2,8
 10024f0:	1800c326 	beq	r3,zero,1002800 <___vfprintf_internal_r+0x39c>
 10024f4:	b8c00417 	ldw	r3,16(r23)
 10024f8:	1800c126 	beq	r3,zero,1002800 <___vfprintf_internal_r+0x39c>
 10024fc:	1080068c 	andi	r2,r2,26
 1002500:	00c00284 	movi	r3,10
 1002504:	10c0c626 	beq	r2,r3,1002820 <___vfprintf_internal_r+0x3bc>
 1002508:	d8c00404 	addi	r3,sp,16
 100250c:	05004074 	movhi	r20,257
 1002510:	d9001e04 	addi	r4,sp,120
 1002514:	a5086a84 	addi	r20,r20,8618
 1002518:	d8c01e15 	stw	r3,120(sp)
 100251c:	d8002015 	stw	zero,128(sp)
 1002520:	d8001f15 	stw	zero,124(sp)
 1002524:	d8003315 	stw	zero,204(sp)
 1002528:	d8003615 	stw	zero,216(sp)
 100252c:	d8003815 	stw	zero,224(sp)
 1002530:	1811883a 	mov	r8,r3
 1002534:	d8003915 	stw	zero,228(sp)
 1002538:	d8003a15 	stw	zero,232(sp)
 100253c:	d8002f15 	stw	zero,188(sp)
 1002540:	d9002815 	stw	r4,160(sp)
 1002544:	a8800007 	ldb	r2,0(r21)
 1002548:	10028b26 	beq	r2,zero,1002f78 <___vfprintf_internal_r+0xb14>
 100254c:	00c00944 	movi	r3,37
 1002550:	a823883a 	mov	r17,r21
 1002554:	10c0021e 	bne	r2,r3,1002560 <___vfprintf_internal_r+0xfc>
 1002558:	00001406 	br	10025ac <___vfprintf_internal_r+0x148>
 100255c:	10c00326 	beq	r2,r3,100256c <___vfprintf_internal_r+0x108>
 1002560:	8c400044 	addi	r17,r17,1
 1002564:	88800007 	ldb	r2,0(r17)
 1002568:	103ffc1e 	bne	r2,zero,100255c <__alt_data_end+0xff80255c>
 100256c:	8d61c83a 	sub	r16,r17,r21
 1002570:	80000e26 	beq	r16,zero,10025ac <___vfprintf_internal_r+0x148>
 1002574:	d8c02017 	ldw	r3,128(sp)
 1002578:	d8801f17 	ldw	r2,124(sp)
 100257c:	45400015 	stw	r21,0(r8)
 1002580:	1c07883a 	add	r3,r3,r16
 1002584:	10800044 	addi	r2,r2,1
 1002588:	d8c02015 	stw	r3,128(sp)
 100258c:	44000115 	stw	r16,4(r8)
 1002590:	d8801f15 	stw	r2,124(sp)
 1002594:	00c001c4 	movi	r3,7
 1002598:	1880a916 	blt	r3,r2,1002840 <___vfprintf_internal_r+0x3dc>
 100259c:	42000204 	addi	r8,r8,8
 10025a0:	d9402f17 	ldw	r5,188(sp)
 10025a4:	2c0b883a 	add	r5,r5,r16
 10025a8:	d9402f15 	stw	r5,188(sp)
 10025ac:	88800007 	ldb	r2,0(r17)
 10025b0:	1000aa26 	beq	r2,zero,100285c <___vfprintf_internal_r+0x3f8>
 10025b4:	8d400044 	addi	r21,r17,1
 10025b8:	8c400047 	ldb	r17,1(r17)
 10025bc:	0021883a 	mov	r16,zero
 10025c0:	00bfffc4 	movi	r2,-1
 10025c4:	0025883a 	mov	r18,zero
 10025c8:	dc002905 	stb	r16,164(sp)
 10025cc:	d8002785 	stb	zero,158(sp)
 10025d0:	d8002b05 	stb	zero,172(sp)
 10025d4:	d8802a15 	stw	r2,168(sp)
 10025d8:	d8003115 	stw	zero,196(sp)
 10025dc:	04c01604 	movi	r19,88
 10025e0:	05800244 	movi	r22,9
 10025e4:	9021883a 	mov	r16,r18
 10025e8:	4039883a 	mov	fp,r8
 10025ec:	ad400044 	addi	r21,r21,1
 10025f0:	88bff804 	addi	r2,r17,-32
 10025f4:	98833236 	bltu	r19,r2,10032c0 <___vfprintf_internal_r+0xe5c>
 10025f8:	100490ba 	slli	r2,r2,2
 10025fc:	00c04034 	movhi	r3,256
 1002600:	18c98404 	addi	r3,r3,9744
 1002604:	10c5883a 	add	r2,r2,r3
 1002608:	10800017 	ldw	r2,0(r2)
 100260c:	1000683a 	jmp	r2
 1002610:	010031b8 	rdprs	r4,zero,198
 1002614:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002618:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100261c:	010031d8 	cmpnei	r4,zero,199
 1002620:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002624:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002628:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100262c:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002630:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002634:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002638:	010028c0 	call	10028c <__alt_mem_onchip_memory2_0+0x10028c>
 100263c:	010030c8 	cmpgei	r4,zero,195
 1002640:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002644:	01002784 	movi	r4,158
 1002648:	010028e4 	muli	r4,zero,163
 100264c:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002650:	01002934 	movhi	r4,164
 1002654:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 1002658:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 100265c:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 1002660:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 1002664:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 1002668:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 100266c:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 1002670:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 1002674:	01002940 	call	100294 <__alt_mem_onchip_memory2_0+0x100294>
 1002678:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100267c:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002680:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002684:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002688:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100268c:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002690:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002694:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002698:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100269c:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026a0:	0100297c 	xorhi	r4,zero,165
 10026a4:	01002a44 	movi	r4,169
 10026a8:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026ac:	01002a44 	movi	r4,169
 10026b0:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026b4:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026b8:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026bc:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026c0:	01002af0 	cmpltui	r4,zero,171
 10026c4:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026c8:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026cc:	01002afc 	xorhi	r4,zero,171
 10026d0:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026d4:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026d8:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026dc:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026e0:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026e4:	01002f80 	call	1002f8 <__alt_mem_onchip_memory2_0+0x1002f8>
 10026e8:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026ec:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026f0:	01002fec 	andhi	r4,zero,191
 10026f4:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026f8:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 10026fc:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002700:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002704:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002708:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100270c:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002710:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002714:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002718:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100271c:	01003264 	muli	r4,zero,201
 1002720:	010031e4 	muli	r4,zero,199
 1002724:	01002a44 	movi	r4,169
 1002728:	01002a44 	movi	r4,169
 100272c:	01002a44 	movi	r4,169
 1002730:	01003204 	movi	r4,200
 1002734:	010031e4 	muli	r4,zero,199
 1002738:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100273c:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002740:	01003210 	cmplti	r4,zero,200
 1002744:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002748:	01003224 	muli	r4,zero,200
 100274c:	010030a8 	cmpgeui	r4,zero,194
 1002750:	01002790 	cmplti	r4,zero,158
 1002754:	010030e0 	cmpeqi	r4,zero,195
 1002758:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100275c:	010030ec 	andhi	r4,zero,195
 1002760:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002764:	01003150 	cmplti	r4,zero,197
 1002768:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 100276c:	010032c0 	call	10032c <__alt_mem_onchip_memory2_0+0x10032c>
 1002770:	01003170 	cmpltui	r4,zero,197
 1002774:	d8c03117 	ldw	r3,196(sp)
 1002778:	d8802e15 	stw	r2,184(sp)
 100277c:	00c7c83a 	sub	r3,zero,r3
 1002780:	d8c03115 	stw	r3,196(sp)
 1002784:	84000114 	ori	r16,r16,4
 1002788:	ac400007 	ldb	r17,0(r21)
 100278c:	003f9706 	br	10025ec <__alt_data_end+0xff8025ec>
 1002790:	00800c04 	movi	r2,48
 1002794:	d8802705 	stb	r2,156(sp)
 1002798:	00801e04 	movi	r2,120
 100279c:	d8802745 	stb	r2,157(sp)
 10027a0:	d9002a17 	ldw	r4,168(sp)
 10027a4:	d8802e17 	ldw	r2,184(sp)
 10027a8:	d8002785 	stb	zero,158(sp)
 10027ac:	e011883a 	mov	r8,fp
 10027b0:	10c00104 	addi	r3,r2,4
 10027b4:	14c00017 	ldw	r19,0(r2)
 10027b8:	002d883a 	mov	r22,zero
 10027bc:	80800094 	ori	r2,r16,2
 10027c0:	2002ca16 	blt	r4,zero,10032ec <___vfprintf_internal_r+0xe88>
 10027c4:	00bfdfc4 	movi	r2,-129
 10027c8:	80a4703a 	and	r18,r16,r2
 10027cc:	d8c02e15 	stw	r3,184(sp)
 10027d0:	94800094 	ori	r18,r18,2
 10027d4:	9802b41e 	bne	r19,zero,10032a8 <___vfprintf_internal_r+0xe44>
 10027d8:	01404074 	movhi	r5,257
 10027dc:	29486304 	addi	r5,r5,8588
 10027e0:	d9403915 	stw	r5,228(sp)
 10027e4:	04401e04 	movi	r17,120
 10027e8:	d8802a17 	ldw	r2,168(sp)
 10027ec:	0039883a 	mov	fp,zero
 10027f0:	1001fa26 	beq	r2,zero,1002fdc <___vfprintf_internal_r+0xb78>
 10027f4:	0027883a 	mov	r19,zero
 10027f8:	002d883a 	mov	r22,zero
 10027fc:	00021906 	br	1003064 <___vfprintf_internal_r+0xc00>
 1002800:	d9002d17 	ldw	r4,180(sp)
 1002804:	b80b883a 	mov	r5,r23
 1002808:	10048180 	call	1004818 <__swsetup_r>
 100280c:	1005dc1e 	bne	r2,zero,1003f80 <___vfprintf_internal_r+0x1b1c>
 1002810:	b880030b 	ldhu	r2,12(r23)
 1002814:	00c00284 	movi	r3,10
 1002818:	1080068c 	andi	r2,r2,26
 100281c:	10ff3a1e 	bne	r2,r3,1002508 <__alt_data_end+0xff802508>
 1002820:	b880038f 	ldh	r2,14(r23)
 1002824:	103f3816 	blt	r2,zero,1002508 <__alt_data_end+0xff802508>
 1002828:	d9c02e17 	ldw	r7,184(sp)
 100282c:	d9002d17 	ldw	r4,180(sp)
 1002830:	a80d883a 	mov	r6,r21
 1002834:	b80b883a 	mov	r5,r23
 1002838:	100475c0 	call	100475c <__sbprintf>
 100283c:	00001106 	br	1002884 <___vfprintf_internal_r+0x420>
 1002840:	d9002d17 	ldw	r4,180(sp)
 1002844:	d9801e04 	addi	r6,sp,120
 1002848:	b80b883a 	mov	r5,r23
 100284c:	1009c440 	call	1009c44 <__sprint_r>
 1002850:	1000081e 	bne	r2,zero,1002874 <___vfprintf_internal_r+0x410>
 1002854:	da000404 	addi	r8,sp,16
 1002858:	003f5106 	br	10025a0 <__alt_data_end+0xff8025a0>
 100285c:	d8802017 	ldw	r2,128(sp)
 1002860:	10000426 	beq	r2,zero,1002874 <___vfprintf_internal_r+0x410>
 1002864:	d9002d17 	ldw	r4,180(sp)
 1002868:	d9801e04 	addi	r6,sp,120
 100286c:	b80b883a 	mov	r5,r23
 1002870:	1009c440 	call	1009c44 <__sprint_r>
 1002874:	b880030b 	ldhu	r2,12(r23)
 1002878:	1080100c 	andi	r2,r2,64
 100287c:	1005c01e 	bne	r2,zero,1003f80 <___vfprintf_internal_r+0x1b1c>
 1002880:	d8802f17 	ldw	r2,188(sp)
 1002884:	dfc04717 	ldw	ra,284(sp)
 1002888:	df004617 	ldw	fp,280(sp)
 100288c:	ddc04517 	ldw	r23,276(sp)
 1002890:	dd804417 	ldw	r22,272(sp)
 1002894:	dd404317 	ldw	r21,268(sp)
 1002898:	dd004217 	ldw	r20,264(sp)
 100289c:	dcc04117 	ldw	r19,260(sp)
 10028a0:	dc804017 	ldw	r18,256(sp)
 10028a4:	dc403f17 	ldw	r17,252(sp)
 10028a8:	dc003e17 	ldw	r16,248(sp)
 10028ac:	dec04804 	addi	sp,sp,288
 10028b0:	f800283a 	ret
 10028b4:	d9002d17 	ldw	r4,180(sp)
 10028b8:	10068240 	call	1006824 <__sinit>
 10028bc:	003f0206 	br	10024c8 <__alt_data_end+0xff8024c8>
 10028c0:	d9002e17 	ldw	r4,184(sp)
 10028c4:	d9402e17 	ldw	r5,184(sp)
 10028c8:	21000017 	ldw	r4,0(r4)
 10028cc:	28800104 	addi	r2,r5,4
 10028d0:	d9003115 	stw	r4,196(sp)
 10028d4:	203fa716 	blt	r4,zero,1002774 <__alt_data_end+0xff802774>
 10028d8:	d8802e15 	stw	r2,184(sp)
 10028dc:	ac400007 	ldb	r17,0(r21)
 10028e0:	003f4206 	br	10025ec <__alt_data_end+0xff8025ec>
 10028e4:	ac400007 	ldb	r17,0(r21)
 10028e8:	01000a84 	movi	r4,42
 10028ec:	a8c00044 	addi	r3,r21,1
 10028f0:	89075826 	beq	r17,r4,1004654 <___vfprintf_internal_r+0x21f0>
 10028f4:	8cbff404 	addi	r18,r17,-48
 10028f8:	b486ae36 	bltu	r22,r18,10043b4 <___vfprintf_internal_r+0x1f50>
 10028fc:	0009883a 	mov	r4,zero
 1002900:	1823883a 	mov	r17,r3
 1002904:	01400284 	movi	r5,10
 1002908:	100c9000 	call	100c900 <__mulsi3>
 100290c:	88c00007 	ldb	r3,0(r17)
 1002910:	1489883a 	add	r4,r2,r18
 1002914:	8d400044 	addi	r21,r17,1
 1002918:	1cbff404 	addi	r18,r3,-48
 100291c:	a823883a 	mov	r17,r21
 1002920:	b4bff82e 	bgeu	r22,r18,1002904 <__alt_data_end+0xff802904>
 1002924:	1823883a 	mov	r17,r3
 1002928:	2005f616 	blt	r4,zero,1004104 <___vfprintf_internal_r+0x1ca0>
 100292c:	d9002a15 	stw	r4,168(sp)
 1002930:	003f2f06 	br	10025f0 <__alt_data_end+0xff8025f0>
 1002934:	84002014 	ori	r16,r16,128
 1002938:	ac400007 	ldb	r17,0(r21)
 100293c:	003f2b06 	br	10025ec <__alt_data_end+0xff8025ec>
 1002940:	8cbff404 	addi	r18,r17,-48
 1002944:	d8003115 	stw	zero,196(sp)
 1002948:	0009883a 	mov	r4,zero
 100294c:	a823883a 	mov	r17,r21
 1002950:	01400284 	movi	r5,10
 1002954:	100c9000 	call	100c900 <__mulsi3>
 1002958:	88c00007 	ldb	r3,0(r17)
 100295c:	9089883a 	add	r4,r18,r2
 1002960:	ad400044 	addi	r21,r21,1
 1002964:	1cbff404 	addi	r18,r3,-48
 1002968:	a823883a 	mov	r17,r21
 100296c:	b4bff82e 	bgeu	r22,r18,1002950 <__alt_data_end+0xff802950>
 1002970:	1823883a 	mov	r17,r3
 1002974:	d9003115 	stw	r4,196(sp)
 1002978:	003f1d06 	br	10025f0 <__alt_data_end+0xff8025f0>
 100297c:	8025883a 	mov	r18,r16
 1002980:	dc002903 	ldbu	r16,164(sp)
 1002984:	e011883a 	mov	r8,fp
 1002988:	84003fcc 	andi	r16,r16,255
 100298c:	8007531e 	bne	r16,zero,10046dc <___vfprintf_internal_r+0x2278>
 1002990:	94800414 	ori	r18,r18,16
 1002994:	9080080c 	andi	r2,r18,32
 1002998:	1003a326 	beq	r2,zero,1003828 <___vfprintf_internal_r+0x13c4>
 100299c:	d9002e17 	ldw	r4,184(sp)
 10029a0:	20800117 	ldw	r2,4(r4)
 10029a4:	24c00017 	ldw	r19,0(r4)
 10029a8:	21000204 	addi	r4,r4,8
 10029ac:	d9002e15 	stw	r4,184(sp)
 10029b0:	102d883a 	mov	r22,r2
 10029b4:	10047316 	blt	r2,zero,1003b84 <___vfprintf_internal_r+0x1720>
 10029b8:	d9002a17 	ldw	r4,168(sp)
 10029bc:	df002783 	ldbu	fp,158(sp)
 10029c0:	2003e416 	blt	r4,zero,1003954 <___vfprintf_internal_r+0x14f0>
 10029c4:	00ffdfc4 	movi	r3,-129
 10029c8:	9d84b03a 	or	r2,r19,r22
 10029cc:	90e4703a 	and	r18,r18,r3
 10029d0:	10018026 	beq	r2,zero,1002fd4 <___vfprintf_internal_r+0xb70>
 10029d4:	b003ab26 	beq	r22,zero,1003884 <___vfprintf_internal_r+0x1420>
 10029d8:	dc402915 	stw	r17,164(sp)
 10029dc:	dc001e04 	addi	r16,sp,120
 10029e0:	b023883a 	mov	r17,r22
 10029e4:	402d883a 	mov	r22,r8
 10029e8:	9809883a 	mov	r4,r19
 10029ec:	880b883a 	mov	r5,r17
 10029f0:	01800284 	movi	r6,10
 10029f4:	000f883a 	mov	r7,zero
 10029f8:	100c1880 	call	100c188 <__umoddi3>
 10029fc:	10800c04 	addi	r2,r2,48
 1002a00:	843fffc4 	addi	r16,r16,-1
 1002a04:	9809883a 	mov	r4,r19
 1002a08:	880b883a 	mov	r5,r17
 1002a0c:	80800005 	stb	r2,0(r16)
 1002a10:	01800284 	movi	r6,10
 1002a14:	000f883a 	mov	r7,zero
 1002a18:	100bb8c0 	call	100bb8c <__udivdi3>
 1002a1c:	1027883a 	mov	r19,r2
 1002a20:	10c4b03a 	or	r2,r2,r3
 1002a24:	1823883a 	mov	r17,r3
 1002a28:	103fef1e 	bne	r2,zero,10029e8 <__alt_data_end+0xff8029e8>
 1002a2c:	d8c02817 	ldw	r3,160(sp)
 1002a30:	dc402917 	ldw	r17,164(sp)
 1002a34:	b011883a 	mov	r8,r22
 1002a38:	1c07c83a 	sub	r3,r3,r16
 1002a3c:	d8c02b15 	stw	r3,172(sp)
 1002a40:	00005f06 	br	1002bc0 <___vfprintf_internal_r+0x75c>
 1002a44:	8025883a 	mov	r18,r16
 1002a48:	dc002903 	ldbu	r16,164(sp)
 1002a4c:	e011883a 	mov	r8,fp
 1002a50:	84003fcc 	andi	r16,r16,255
 1002a54:	80071e1e 	bne	r16,zero,10046d0 <___vfprintf_internal_r+0x226c>
 1002a58:	9080020c 	andi	r2,r18,8
 1002a5c:	1004af26 	beq	r2,zero,1003d1c <___vfprintf_internal_r+0x18b8>
 1002a60:	d9002e17 	ldw	r4,184(sp)
 1002a64:	d9402e17 	ldw	r5,184(sp)
 1002a68:	d8802e17 	ldw	r2,184(sp)
 1002a6c:	21000017 	ldw	r4,0(r4)
 1002a70:	29400117 	ldw	r5,4(r5)
 1002a74:	10800204 	addi	r2,r2,8
 1002a78:	d9003615 	stw	r4,216(sp)
 1002a7c:	d9403815 	stw	r5,224(sp)
 1002a80:	d8802e15 	stw	r2,184(sp)
 1002a84:	d9003617 	ldw	r4,216(sp)
 1002a88:	d9403817 	ldw	r5,224(sp)
 1002a8c:	da003d15 	stw	r8,244(sp)
 1002a90:	04000044 	movi	r16,1
 1002a94:	10098680 	call	1009868 <__fpclassifyd>
 1002a98:	da003d17 	ldw	r8,244(sp)
 1002a9c:	1404441e 	bne	r2,r16,1003bb0 <___vfprintf_internal_r+0x174c>
 1002aa0:	d9003617 	ldw	r4,216(sp)
 1002aa4:	d9403817 	ldw	r5,224(sp)
 1002aa8:	000d883a 	mov	r6,zero
 1002aac:	000f883a 	mov	r7,zero
 1002ab0:	100dd080 	call	100dd08 <__ledf2>
 1002ab4:	da003d17 	ldw	r8,244(sp)
 1002ab8:	1005e316 	blt	r2,zero,1004248 <___vfprintf_internal_r+0x1de4>
 1002abc:	df002783 	ldbu	fp,158(sp)
 1002ac0:	008011c4 	movi	r2,71
 1002ac4:	1445580e 	bge	r2,r17,1004028 <___vfprintf_internal_r+0x1bc4>
 1002ac8:	04004074 	movhi	r16,257
 1002acc:	84085b04 	addi	r16,r16,8556
 1002ad0:	00c000c4 	movi	r3,3
 1002ad4:	00bfdfc4 	movi	r2,-129
 1002ad8:	d8c02915 	stw	r3,164(sp)
 1002adc:	90a4703a 	and	r18,r18,r2
 1002ae0:	d8c02b15 	stw	r3,172(sp)
 1002ae4:	d8002a15 	stw	zero,168(sp)
 1002ae8:	d8003215 	stw	zero,200(sp)
 1002aec:	00003a06 	br	1002bd8 <___vfprintf_internal_r+0x774>
 1002af0:	84000214 	ori	r16,r16,8
 1002af4:	ac400007 	ldb	r17,0(r21)
 1002af8:	003ebc06 	br	10025ec <__alt_data_end+0xff8025ec>
 1002afc:	8025883a 	mov	r18,r16
 1002b00:	dc002903 	ldbu	r16,164(sp)
 1002b04:	e011883a 	mov	r8,fp
 1002b08:	84003fcc 	andi	r16,r16,255
 1002b0c:	8007001e 	bne	r16,zero,1004710 <___vfprintf_internal_r+0x22ac>
 1002b10:	94800414 	ori	r18,r18,16
 1002b14:	9080080c 	andi	r2,r18,32
 1002b18:	1002fa26 	beq	r2,zero,1003704 <___vfprintf_internal_r+0x12a0>
 1002b1c:	d9002e17 	ldw	r4,184(sp)
 1002b20:	d9402a17 	ldw	r5,168(sp)
 1002b24:	d8002785 	stb	zero,158(sp)
 1002b28:	20800204 	addi	r2,r4,8
 1002b2c:	24c00017 	ldw	r19,0(r4)
 1002b30:	25800117 	ldw	r22,4(r4)
 1002b34:	2804b116 	blt	r5,zero,1003dfc <___vfprintf_internal_r+0x1998>
 1002b38:	013fdfc4 	movi	r4,-129
 1002b3c:	9d86b03a 	or	r3,r19,r22
 1002b40:	d8802e15 	stw	r2,184(sp)
 1002b44:	9124703a 	and	r18,r18,r4
 1002b48:	1802fb1e 	bne	r3,zero,1003738 <___vfprintf_internal_r+0x12d4>
 1002b4c:	d8c02a17 	ldw	r3,168(sp)
 1002b50:	0039883a 	mov	fp,zero
 1002b54:	1805e526 	beq	r3,zero,10042ec <___vfprintf_internal_r+0x1e88>
 1002b58:	0027883a 	mov	r19,zero
 1002b5c:	002d883a 	mov	r22,zero
 1002b60:	dc001e04 	addi	r16,sp,120
 1002b64:	9806d0fa 	srli	r3,r19,3
 1002b68:	b008977a 	slli	r4,r22,29
 1002b6c:	b02cd0fa 	srli	r22,r22,3
 1002b70:	9cc001cc 	andi	r19,r19,7
 1002b74:	98800c04 	addi	r2,r19,48
 1002b78:	843fffc4 	addi	r16,r16,-1
 1002b7c:	20e6b03a 	or	r19,r4,r3
 1002b80:	80800005 	stb	r2,0(r16)
 1002b84:	9d86b03a 	or	r3,r19,r22
 1002b88:	183ff61e 	bne	r3,zero,1002b64 <__alt_data_end+0xff802b64>
 1002b8c:	90c0004c 	andi	r3,r18,1
 1002b90:	18014126 	beq	r3,zero,1003098 <___vfprintf_internal_r+0xc34>
 1002b94:	10803fcc 	andi	r2,r2,255
 1002b98:	1080201c 	xori	r2,r2,128
 1002b9c:	10bfe004 	addi	r2,r2,-128
 1002ba0:	00c00c04 	movi	r3,48
 1002ba4:	10c13c26 	beq	r2,r3,1003098 <___vfprintf_internal_r+0xc34>
 1002ba8:	80ffffc5 	stb	r3,-1(r16)
 1002bac:	d8c02817 	ldw	r3,160(sp)
 1002bb0:	80bfffc4 	addi	r2,r16,-1
 1002bb4:	1021883a 	mov	r16,r2
 1002bb8:	1887c83a 	sub	r3,r3,r2
 1002bbc:	d8c02b15 	stw	r3,172(sp)
 1002bc0:	d8802b17 	ldw	r2,172(sp)
 1002bc4:	d9002a17 	ldw	r4,168(sp)
 1002bc8:	1100010e 	bge	r2,r4,1002bd0 <___vfprintf_internal_r+0x76c>
 1002bcc:	2005883a 	mov	r2,r4
 1002bd0:	d8802915 	stw	r2,164(sp)
 1002bd4:	d8003215 	stw	zero,200(sp)
 1002bd8:	e7003fcc 	andi	fp,fp,255
 1002bdc:	e700201c 	xori	fp,fp,128
 1002be0:	e73fe004 	addi	fp,fp,-128
 1002be4:	e0000326 	beq	fp,zero,1002bf4 <___vfprintf_internal_r+0x790>
 1002be8:	d8c02917 	ldw	r3,164(sp)
 1002bec:	18c00044 	addi	r3,r3,1
 1002bf0:	d8c02915 	stw	r3,164(sp)
 1002bf4:	90c0008c 	andi	r3,r18,2
 1002bf8:	d8c02c15 	stw	r3,176(sp)
 1002bfc:	18000326 	beq	r3,zero,1002c0c <___vfprintf_internal_r+0x7a8>
 1002c00:	d8c02917 	ldw	r3,164(sp)
 1002c04:	18c00084 	addi	r3,r3,2
 1002c08:	d8c02915 	stw	r3,164(sp)
 1002c0c:	90c0210c 	andi	r3,r18,132
 1002c10:	d8c03015 	stw	r3,192(sp)
 1002c14:	1801c51e 	bne	r3,zero,100332c <___vfprintf_internal_r+0xec8>
 1002c18:	d9003117 	ldw	r4,196(sp)
 1002c1c:	d8c02917 	ldw	r3,164(sp)
 1002c20:	20e7c83a 	sub	r19,r4,r3
 1002c24:	04c1c10e 	bge	zero,r19,100332c <___vfprintf_internal_r+0xec8>
 1002c28:	02400404 	movi	r9,16
 1002c2c:	d8c02017 	ldw	r3,128(sp)
 1002c30:	d8801f17 	ldw	r2,124(sp)
 1002c34:	4cc52f0e 	bge	r9,r19,10040f4 <___vfprintf_internal_r+0x1c90>
 1002c38:	01404074 	movhi	r5,257
 1002c3c:	29486e84 	addi	r5,r5,8634
 1002c40:	dc403b15 	stw	r17,236(sp)
 1002c44:	d9403515 	stw	r5,212(sp)
 1002c48:	9823883a 	mov	r17,r19
 1002c4c:	482d883a 	mov	r22,r9
 1002c50:	9027883a 	mov	r19,r18
 1002c54:	070001c4 	movi	fp,7
 1002c58:	8025883a 	mov	r18,r16
 1002c5c:	dc002d17 	ldw	r16,180(sp)
 1002c60:	00000306 	br	1002c70 <___vfprintf_internal_r+0x80c>
 1002c64:	8c7ffc04 	addi	r17,r17,-16
 1002c68:	42000204 	addi	r8,r8,8
 1002c6c:	b440130e 	bge	r22,r17,1002cbc <___vfprintf_internal_r+0x858>
 1002c70:	01004074 	movhi	r4,257
 1002c74:	18c00404 	addi	r3,r3,16
 1002c78:	10800044 	addi	r2,r2,1
 1002c7c:	21086e84 	addi	r4,r4,8634
 1002c80:	41000015 	stw	r4,0(r8)
 1002c84:	45800115 	stw	r22,4(r8)
 1002c88:	d8c02015 	stw	r3,128(sp)
 1002c8c:	d8801f15 	stw	r2,124(sp)
 1002c90:	e0bff40e 	bge	fp,r2,1002c64 <__alt_data_end+0xff802c64>
 1002c94:	d9801e04 	addi	r6,sp,120
 1002c98:	b80b883a 	mov	r5,r23
 1002c9c:	8009883a 	mov	r4,r16
 1002ca0:	1009c440 	call	1009c44 <__sprint_r>
 1002ca4:	103ef31e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1002ca8:	8c7ffc04 	addi	r17,r17,-16
 1002cac:	d8c02017 	ldw	r3,128(sp)
 1002cb0:	d8801f17 	ldw	r2,124(sp)
 1002cb4:	da000404 	addi	r8,sp,16
 1002cb8:	b47fed16 	blt	r22,r17,1002c70 <__alt_data_end+0xff802c70>
 1002cbc:	9021883a 	mov	r16,r18
 1002cc0:	9825883a 	mov	r18,r19
 1002cc4:	8827883a 	mov	r19,r17
 1002cc8:	dc403b17 	ldw	r17,236(sp)
 1002ccc:	d9403517 	ldw	r5,212(sp)
 1002cd0:	98c7883a 	add	r3,r19,r3
 1002cd4:	10800044 	addi	r2,r2,1
 1002cd8:	41400015 	stw	r5,0(r8)
 1002cdc:	44c00115 	stw	r19,4(r8)
 1002ce0:	d8c02015 	stw	r3,128(sp)
 1002ce4:	d8801f15 	stw	r2,124(sp)
 1002ce8:	010001c4 	movi	r4,7
 1002cec:	2082c516 	blt	r4,r2,1003804 <___vfprintf_internal_r+0x13a0>
 1002cf0:	df002787 	ldb	fp,158(sp)
 1002cf4:	42000204 	addi	r8,r8,8
 1002cf8:	e0000c26 	beq	fp,zero,1002d2c <___vfprintf_internal_r+0x8c8>
 1002cfc:	d8801f17 	ldw	r2,124(sp)
 1002d00:	d9002784 	addi	r4,sp,158
 1002d04:	18c00044 	addi	r3,r3,1
 1002d08:	10800044 	addi	r2,r2,1
 1002d0c:	41000015 	stw	r4,0(r8)
 1002d10:	01000044 	movi	r4,1
 1002d14:	41000115 	stw	r4,4(r8)
 1002d18:	d8c02015 	stw	r3,128(sp)
 1002d1c:	d8801f15 	stw	r2,124(sp)
 1002d20:	010001c4 	movi	r4,7
 1002d24:	20825e16 	blt	r4,r2,10036a0 <___vfprintf_internal_r+0x123c>
 1002d28:	42000204 	addi	r8,r8,8
 1002d2c:	d8802c17 	ldw	r2,176(sp)
 1002d30:	10000c26 	beq	r2,zero,1002d64 <___vfprintf_internal_r+0x900>
 1002d34:	d8801f17 	ldw	r2,124(sp)
 1002d38:	d9002704 	addi	r4,sp,156
 1002d3c:	18c00084 	addi	r3,r3,2
 1002d40:	10800044 	addi	r2,r2,1
 1002d44:	41000015 	stw	r4,0(r8)
 1002d48:	01000084 	movi	r4,2
 1002d4c:	41000115 	stw	r4,4(r8)
 1002d50:	d8c02015 	stw	r3,128(sp)
 1002d54:	d8801f15 	stw	r2,124(sp)
 1002d58:	010001c4 	movi	r4,7
 1002d5c:	20825816 	blt	r4,r2,10036c0 <___vfprintf_internal_r+0x125c>
 1002d60:	42000204 	addi	r8,r8,8
 1002d64:	d9003017 	ldw	r4,192(sp)
 1002d68:	00802004 	movi	r2,128
 1002d6c:	2081bb26 	beq	r4,r2,100345c <___vfprintf_internal_r+0xff8>
 1002d70:	d9402a17 	ldw	r5,168(sp)
 1002d74:	d8802b17 	ldw	r2,172(sp)
 1002d78:	28adc83a 	sub	r22,r5,r2
 1002d7c:	0580310e 	bge	zero,r22,1002e44 <___vfprintf_internal_r+0x9e0>
 1002d80:	07000404 	movi	fp,16
 1002d84:	d8801f17 	ldw	r2,124(sp)
 1002d88:	e584360e 	bge	fp,r22,1003e64 <___vfprintf_internal_r+0x1a00>
 1002d8c:	01404074 	movhi	r5,257
 1002d90:	29486a84 	addi	r5,r5,8618
 1002d94:	dc402a15 	stw	r17,168(sp)
 1002d98:	d9402c15 	stw	r5,176(sp)
 1002d9c:	b023883a 	mov	r17,r22
 1002da0:	04c001c4 	movi	r19,7
 1002da4:	a82d883a 	mov	r22,r21
 1002da8:	902b883a 	mov	r21,r18
 1002dac:	8025883a 	mov	r18,r16
 1002db0:	dc002d17 	ldw	r16,180(sp)
 1002db4:	00000306 	br	1002dc4 <___vfprintf_internal_r+0x960>
 1002db8:	8c7ffc04 	addi	r17,r17,-16
 1002dbc:	42000204 	addi	r8,r8,8
 1002dc0:	e440110e 	bge	fp,r17,1002e08 <___vfprintf_internal_r+0x9a4>
 1002dc4:	18c00404 	addi	r3,r3,16
 1002dc8:	10800044 	addi	r2,r2,1
 1002dcc:	45000015 	stw	r20,0(r8)
 1002dd0:	47000115 	stw	fp,4(r8)
 1002dd4:	d8c02015 	stw	r3,128(sp)
 1002dd8:	d8801f15 	stw	r2,124(sp)
 1002ddc:	98bff60e 	bge	r19,r2,1002db8 <__alt_data_end+0xff802db8>
 1002de0:	d9801e04 	addi	r6,sp,120
 1002de4:	b80b883a 	mov	r5,r23
 1002de8:	8009883a 	mov	r4,r16
 1002dec:	1009c440 	call	1009c44 <__sprint_r>
 1002df0:	103ea01e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1002df4:	8c7ffc04 	addi	r17,r17,-16
 1002df8:	d8c02017 	ldw	r3,128(sp)
 1002dfc:	d8801f17 	ldw	r2,124(sp)
 1002e00:	da000404 	addi	r8,sp,16
 1002e04:	e47fef16 	blt	fp,r17,1002dc4 <__alt_data_end+0xff802dc4>
 1002e08:	9021883a 	mov	r16,r18
 1002e0c:	a825883a 	mov	r18,r21
 1002e10:	b02b883a 	mov	r21,r22
 1002e14:	882d883a 	mov	r22,r17
 1002e18:	dc402a17 	ldw	r17,168(sp)
 1002e1c:	d9002c17 	ldw	r4,176(sp)
 1002e20:	1d87883a 	add	r3,r3,r22
 1002e24:	10800044 	addi	r2,r2,1
 1002e28:	41000015 	stw	r4,0(r8)
 1002e2c:	45800115 	stw	r22,4(r8)
 1002e30:	d8c02015 	stw	r3,128(sp)
 1002e34:	d8801f15 	stw	r2,124(sp)
 1002e38:	010001c4 	movi	r4,7
 1002e3c:	20821016 	blt	r4,r2,1003680 <___vfprintf_internal_r+0x121c>
 1002e40:	42000204 	addi	r8,r8,8
 1002e44:	9080400c 	andi	r2,r18,256
 1002e48:	10013a1e 	bne	r2,zero,1003334 <___vfprintf_internal_r+0xed0>
 1002e4c:	d9402b17 	ldw	r5,172(sp)
 1002e50:	d8801f17 	ldw	r2,124(sp)
 1002e54:	44000015 	stw	r16,0(r8)
 1002e58:	1947883a 	add	r3,r3,r5
 1002e5c:	10800044 	addi	r2,r2,1
 1002e60:	41400115 	stw	r5,4(r8)
 1002e64:	d8c02015 	stw	r3,128(sp)
 1002e68:	d8801f15 	stw	r2,124(sp)
 1002e6c:	010001c4 	movi	r4,7
 1002e70:	2081f516 	blt	r4,r2,1003648 <___vfprintf_internal_r+0x11e4>
 1002e74:	42000204 	addi	r8,r8,8
 1002e78:	9480010c 	andi	r18,r18,4
 1002e7c:	90003226 	beq	r18,zero,1002f48 <___vfprintf_internal_r+0xae4>
 1002e80:	d9403117 	ldw	r5,196(sp)
 1002e84:	d8802917 	ldw	r2,164(sp)
 1002e88:	28a1c83a 	sub	r16,r5,r2
 1002e8c:	04002e0e 	bge	zero,r16,1002f48 <___vfprintf_internal_r+0xae4>
 1002e90:	04400404 	movi	r17,16
 1002e94:	d8801f17 	ldw	r2,124(sp)
 1002e98:	8c04c40e 	bge	r17,r16,10041ac <___vfprintf_internal_r+0x1d48>
 1002e9c:	01404074 	movhi	r5,257
 1002ea0:	29486e84 	addi	r5,r5,8634
 1002ea4:	d9403515 	stw	r5,212(sp)
 1002ea8:	048001c4 	movi	r18,7
 1002eac:	dcc02d17 	ldw	r19,180(sp)
 1002eb0:	00000306 	br	1002ec0 <___vfprintf_internal_r+0xa5c>
 1002eb4:	843ffc04 	addi	r16,r16,-16
 1002eb8:	42000204 	addi	r8,r8,8
 1002ebc:	8c00130e 	bge	r17,r16,1002f0c <___vfprintf_internal_r+0xaa8>
 1002ec0:	01004074 	movhi	r4,257
 1002ec4:	18c00404 	addi	r3,r3,16
 1002ec8:	10800044 	addi	r2,r2,1
 1002ecc:	21086e84 	addi	r4,r4,8634
 1002ed0:	41000015 	stw	r4,0(r8)
 1002ed4:	44400115 	stw	r17,4(r8)
 1002ed8:	d8c02015 	stw	r3,128(sp)
 1002edc:	d8801f15 	stw	r2,124(sp)
 1002ee0:	90bff40e 	bge	r18,r2,1002eb4 <__alt_data_end+0xff802eb4>
 1002ee4:	d9801e04 	addi	r6,sp,120
 1002ee8:	b80b883a 	mov	r5,r23
 1002eec:	9809883a 	mov	r4,r19
 1002ef0:	1009c440 	call	1009c44 <__sprint_r>
 1002ef4:	103e5f1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1002ef8:	843ffc04 	addi	r16,r16,-16
 1002efc:	d8c02017 	ldw	r3,128(sp)
 1002f00:	d8801f17 	ldw	r2,124(sp)
 1002f04:	da000404 	addi	r8,sp,16
 1002f08:	8c3fed16 	blt	r17,r16,1002ec0 <__alt_data_end+0xff802ec0>
 1002f0c:	d9403517 	ldw	r5,212(sp)
 1002f10:	1c07883a 	add	r3,r3,r16
 1002f14:	10800044 	addi	r2,r2,1
 1002f18:	41400015 	stw	r5,0(r8)
 1002f1c:	44000115 	stw	r16,4(r8)
 1002f20:	d8c02015 	stw	r3,128(sp)
 1002f24:	d8801f15 	stw	r2,124(sp)
 1002f28:	010001c4 	movi	r4,7
 1002f2c:	2080060e 	bge	r4,r2,1002f48 <___vfprintf_internal_r+0xae4>
 1002f30:	d9002d17 	ldw	r4,180(sp)
 1002f34:	d9801e04 	addi	r6,sp,120
 1002f38:	b80b883a 	mov	r5,r23
 1002f3c:	1009c440 	call	1009c44 <__sprint_r>
 1002f40:	103e4c1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1002f44:	d8c02017 	ldw	r3,128(sp)
 1002f48:	d8803117 	ldw	r2,196(sp)
 1002f4c:	d9002917 	ldw	r4,164(sp)
 1002f50:	1100010e 	bge	r2,r4,1002f58 <___vfprintf_internal_r+0xaf4>
 1002f54:	2005883a 	mov	r2,r4
 1002f58:	d9402f17 	ldw	r5,188(sp)
 1002f5c:	288b883a 	add	r5,r5,r2
 1002f60:	d9402f15 	stw	r5,188(sp)
 1002f64:	1801c01e 	bne	r3,zero,1003668 <___vfprintf_internal_r+0x1204>
 1002f68:	a8800007 	ldb	r2,0(r21)
 1002f6c:	d8001f15 	stw	zero,124(sp)
 1002f70:	da000404 	addi	r8,sp,16
 1002f74:	103d751e 	bne	r2,zero,100254c <__alt_data_end+0xff80254c>
 1002f78:	a823883a 	mov	r17,r21
 1002f7c:	003d8b06 	br	10025ac <__alt_data_end+0xff8025ac>
 1002f80:	8025883a 	mov	r18,r16
 1002f84:	dc002903 	ldbu	r16,164(sp)
 1002f88:	e011883a 	mov	r8,fp
 1002f8c:	84003fcc 	andi	r16,r16,255
 1002f90:	8005e51e 	bne	r16,zero,1004728 <___vfprintf_internal_r+0x22c4>
 1002f94:	94800414 	ori	r18,r18,16
 1002f98:	9080080c 	andi	r2,r18,32
 1002f9c:	10022b26 	beq	r2,zero,100384c <___vfprintf_internal_r+0x13e8>
 1002fa0:	d9002e17 	ldw	r4,184(sp)
 1002fa4:	d9402a17 	ldw	r5,168(sp)
 1002fa8:	d8002785 	stb	zero,158(sp)
 1002fac:	20c00204 	addi	r3,r4,8
 1002fb0:	24c00017 	ldw	r19,0(r4)
 1002fb4:	25800117 	ldw	r22,4(r4)
 1002fb8:	28042e16 	blt	r5,zero,1004074 <___vfprintf_internal_r+0x1c10>
 1002fbc:	013fdfc4 	movi	r4,-129
 1002fc0:	9d84b03a 	or	r2,r19,r22
 1002fc4:	d8c02e15 	stw	r3,184(sp)
 1002fc8:	9124703a 	and	r18,r18,r4
 1002fcc:	0039883a 	mov	fp,zero
 1002fd0:	103e801e 	bne	r2,zero,10029d4 <__alt_data_end+0xff8029d4>
 1002fd4:	d9002a17 	ldw	r4,168(sp)
 1002fd8:	2002e01e 	bne	r4,zero,1003b5c <___vfprintf_internal_r+0x16f8>
 1002fdc:	d8002a15 	stw	zero,168(sp)
 1002fe0:	d8002b15 	stw	zero,172(sp)
 1002fe4:	dc001e04 	addi	r16,sp,120
 1002fe8:	003ef506 	br	1002bc0 <__alt_data_end+0xff802bc0>
 1002fec:	8025883a 	mov	r18,r16
 1002ff0:	dc002903 	ldbu	r16,164(sp)
 1002ff4:	e011883a 	mov	r8,fp
 1002ff8:	84003fcc 	andi	r16,r16,255
 1002ffc:	8005ba1e 	bne	r16,zero,10046e8 <___vfprintf_internal_r+0x2284>
 1003000:	01004074 	movhi	r4,257
 1003004:	21085e04 	addi	r4,r4,8568
 1003008:	d9003915 	stw	r4,228(sp)
 100300c:	9080080c 	andi	r2,r18,32
 1003010:	10006126 	beq	r2,zero,1003198 <___vfprintf_internal_r+0xd34>
 1003014:	d9402e17 	ldw	r5,184(sp)
 1003018:	2cc00017 	ldw	r19,0(r5)
 100301c:	2d800117 	ldw	r22,4(r5)
 1003020:	29400204 	addi	r5,r5,8
 1003024:	d9402e15 	stw	r5,184(sp)
 1003028:	9080004c 	andi	r2,r18,1
 100302c:	1001ac26 	beq	r2,zero,10036e0 <___vfprintf_internal_r+0x127c>
 1003030:	9d84b03a 	or	r2,r19,r22
 1003034:	10038526 	beq	r2,zero,1003e4c <___vfprintf_internal_r+0x19e8>
 1003038:	d8c02a17 	ldw	r3,168(sp)
 100303c:	00800c04 	movi	r2,48
 1003040:	d8802705 	stb	r2,156(sp)
 1003044:	dc402745 	stb	r17,157(sp)
 1003048:	d8002785 	stb	zero,158(sp)
 100304c:	90800094 	ori	r2,r18,2
 1003050:	18047916 	blt	r3,zero,1004238 <___vfprintf_internal_r+0x1dd4>
 1003054:	00bfdfc4 	movi	r2,-129
 1003058:	90a4703a 	and	r18,r18,r2
 100305c:	94800094 	ori	r18,r18,2
 1003060:	0039883a 	mov	fp,zero
 1003064:	d9003917 	ldw	r4,228(sp)
 1003068:	dc001e04 	addi	r16,sp,120
 100306c:	988003cc 	andi	r2,r19,15
 1003070:	b006973a 	slli	r3,r22,28
 1003074:	2085883a 	add	r2,r4,r2
 1003078:	9826d13a 	srli	r19,r19,4
 100307c:	10800003 	ldbu	r2,0(r2)
 1003080:	b02cd13a 	srli	r22,r22,4
 1003084:	843fffc4 	addi	r16,r16,-1
 1003088:	1ce6b03a 	or	r19,r3,r19
 100308c:	80800005 	stb	r2,0(r16)
 1003090:	9d84b03a 	or	r2,r19,r22
 1003094:	103ff51e 	bne	r2,zero,100306c <__alt_data_end+0xff80306c>
 1003098:	d8c02817 	ldw	r3,160(sp)
 100309c:	1c07c83a 	sub	r3,r3,r16
 10030a0:	d8c02b15 	stw	r3,172(sp)
 10030a4:	003ec606 	br	1002bc0 <__alt_data_end+0xff802bc0>
 10030a8:	8025883a 	mov	r18,r16
 10030ac:	dc002903 	ldbu	r16,164(sp)
 10030b0:	e011883a 	mov	r8,fp
 10030b4:	84003fcc 	andi	r16,r16,255
 10030b8:	803e9626 	beq	r16,zero,1002b14 <__alt_data_end+0xff802b14>
 10030bc:	d8c02b03 	ldbu	r3,172(sp)
 10030c0:	d8c02785 	stb	r3,158(sp)
 10030c4:	003e9306 	br	1002b14 <__alt_data_end+0xff802b14>
 10030c8:	00c00044 	movi	r3,1
 10030cc:	d8c02905 	stb	r3,164(sp)
 10030d0:	00c00ac4 	movi	r3,43
 10030d4:	d8c02b05 	stb	r3,172(sp)
 10030d8:	ac400007 	ldb	r17,0(r21)
 10030dc:	003d4306 	br	10025ec <__alt_data_end+0xff8025ec>
 10030e0:	84000814 	ori	r16,r16,32
 10030e4:	ac400007 	ldb	r17,0(r21)
 10030e8:	003d4006 	br	10025ec <__alt_data_end+0xff8025ec>
 10030ec:	d8802e17 	ldw	r2,184(sp)
 10030f0:	8025883a 	mov	r18,r16
 10030f4:	d8002785 	stb	zero,158(sp)
 10030f8:	14000017 	ldw	r16,0(r2)
 10030fc:	e011883a 	mov	r8,fp
 1003100:	14c00104 	addi	r19,r2,4
 1003104:	80042d26 	beq	r16,zero,10041bc <___vfprintf_internal_r+0x1d58>
 1003108:	d8c02a17 	ldw	r3,168(sp)
 100310c:	1803e416 	blt	r3,zero,10040a0 <___vfprintf_internal_r+0x1c3c>
 1003110:	180d883a 	mov	r6,r3
 1003114:	000b883a 	mov	r5,zero
 1003118:	8009883a 	mov	r4,r16
 100311c:	df003d15 	stw	fp,244(sp)
 1003120:	1007d9c0 	call	1007d9c <memchr>
 1003124:	da003d17 	ldw	r8,244(sp)
 1003128:	10046826 	beq	r2,zero,10042cc <___vfprintf_internal_r+0x1e68>
 100312c:	1405c83a 	sub	r2,r2,r16
 1003130:	d8802b15 	stw	r2,172(sp)
 1003134:	1003e016 	blt	r2,zero,10040b8 <___vfprintf_internal_r+0x1c54>
 1003138:	df002783 	ldbu	fp,158(sp)
 100313c:	d8802915 	stw	r2,164(sp)
 1003140:	dcc02e15 	stw	r19,184(sp)
 1003144:	d8002a15 	stw	zero,168(sp)
 1003148:	d8003215 	stw	zero,200(sp)
 100314c:	003ea206 	br	1002bd8 <__alt_data_end+0xff802bd8>
 1003150:	8025883a 	mov	r18,r16
 1003154:	dc002903 	ldbu	r16,164(sp)
 1003158:	e011883a 	mov	r8,fp
 100315c:	84003fcc 	andi	r16,r16,255
 1003160:	803f8d26 	beq	r16,zero,1002f98 <__alt_data_end+0xff802f98>
 1003164:	d8c02b03 	ldbu	r3,172(sp)
 1003168:	d8c02785 	stb	r3,158(sp)
 100316c:	003f8a06 	br	1002f98 <__alt_data_end+0xff802f98>
 1003170:	8025883a 	mov	r18,r16
 1003174:	dc002903 	ldbu	r16,164(sp)
 1003178:	e011883a 	mov	r8,fp
 100317c:	84003fcc 	andi	r16,r16,255
 1003180:	8005661e 	bne	r16,zero,100471c <___vfprintf_internal_r+0x22b8>
 1003184:	01004074 	movhi	r4,257
 1003188:	21086304 	addi	r4,r4,8588
 100318c:	d9003915 	stw	r4,228(sp)
 1003190:	9080080c 	andi	r2,r18,32
 1003194:	103f9f1e 	bne	r2,zero,1003014 <__alt_data_end+0xff803014>
 1003198:	9080040c 	andi	r2,r18,16
 100319c:	1002eb26 	beq	r2,zero,1003d4c <___vfprintf_internal_r+0x18e8>
 10031a0:	d8802e17 	ldw	r2,184(sp)
 10031a4:	002d883a 	mov	r22,zero
 10031a8:	14c00017 	ldw	r19,0(r2)
 10031ac:	10800104 	addi	r2,r2,4
 10031b0:	d8802e15 	stw	r2,184(sp)
 10031b4:	003f9c06 	br	1003028 <__alt_data_end+0xff803028>
 10031b8:	d8802b07 	ldb	r2,172(sp)
 10031bc:	1002e11e 	bne	r2,zero,1003d44 <___vfprintf_internal_r+0x18e0>
 10031c0:	00c00044 	movi	r3,1
 10031c4:	d8c02905 	stb	r3,164(sp)
 10031c8:	00c00804 	movi	r3,32
 10031cc:	d8c02b05 	stb	r3,172(sp)
 10031d0:	ac400007 	ldb	r17,0(r21)
 10031d4:	003d0506 	br	10025ec <__alt_data_end+0xff8025ec>
 10031d8:	84000054 	ori	r16,r16,1
 10031dc:	ac400007 	ldb	r17,0(r21)
 10031e0:	003d0206 	br	10025ec <__alt_data_end+0xff8025ec>
 10031e4:	8025883a 	mov	r18,r16
 10031e8:	dc002903 	ldbu	r16,164(sp)
 10031ec:	e011883a 	mov	r8,fp
 10031f0:	84003fcc 	andi	r16,r16,255
 10031f4:	803de726 	beq	r16,zero,1002994 <__alt_data_end+0xff802994>
 10031f8:	d8c02b03 	ldbu	r3,172(sp)
 10031fc:	d8c02785 	stb	r3,158(sp)
 1003200:	003de406 	br	1002994 <__alt_data_end+0xff802994>
 1003204:	84001014 	ori	r16,r16,64
 1003208:	ac400007 	ldb	r17,0(r21)
 100320c:	003cf706 	br	10025ec <__alt_data_end+0xff8025ec>
 1003210:	ac400007 	ldb	r17,0(r21)
 1003214:	00801b04 	movi	r2,108
 1003218:	88838f26 	beq	r17,r2,1004058 <___vfprintf_internal_r+0x1bf4>
 100321c:	84000414 	ori	r16,r16,16
 1003220:	003cf206 	br	10025ec <__alt_data_end+0xff8025ec>
 1003224:	8025883a 	mov	r18,r16
 1003228:	dc002903 	ldbu	r16,164(sp)
 100322c:	e011883a 	mov	r8,fp
 1003230:	84003fcc 	andi	r16,r16,255
 1003234:	80053f1e 	bne	r16,zero,1004734 <___vfprintf_internal_r+0x22d0>
 1003238:	9080080c 	andi	r2,r18,32
 100323c:	1002d226 	beq	r2,zero,1003d88 <___vfprintf_internal_r+0x1924>
 1003240:	d9002e17 	ldw	r4,184(sp)
 1003244:	d9402f17 	ldw	r5,188(sp)
 1003248:	20800017 	ldw	r2,0(r4)
 100324c:	2807d7fa 	srai	r3,r5,31
 1003250:	21000104 	addi	r4,r4,4
 1003254:	d9002e15 	stw	r4,184(sp)
 1003258:	11400015 	stw	r5,0(r2)
 100325c:	10c00115 	stw	r3,4(r2)
 1003260:	003cb806 	br	1002544 <__alt_data_end+0xff802544>
 1003264:	d8c02e17 	ldw	r3,184(sp)
 1003268:	d9002e17 	ldw	r4,184(sp)
 100326c:	8025883a 	mov	r18,r16
 1003270:	18800017 	ldw	r2,0(r3)
 1003274:	21000104 	addi	r4,r4,4
 1003278:	00c00044 	movi	r3,1
 100327c:	e011883a 	mov	r8,fp
 1003280:	d8c02915 	stw	r3,164(sp)
 1003284:	d8002785 	stb	zero,158(sp)
 1003288:	d8801405 	stb	r2,80(sp)
 100328c:	d9002e15 	stw	r4,184(sp)
 1003290:	d8c02b15 	stw	r3,172(sp)
 1003294:	d8002a15 	stw	zero,168(sp)
 1003298:	d8003215 	stw	zero,200(sp)
 100329c:	dc001404 	addi	r16,sp,80
 10032a0:	0039883a 	mov	fp,zero
 10032a4:	003e5306 	br	1002bf4 <__alt_data_end+0xff802bf4>
 10032a8:	01004074 	movhi	r4,257
 10032ac:	21086304 	addi	r4,r4,8588
 10032b0:	0039883a 	mov	fp,zero
 10032b4:	d9003915 	stw	r4,228(sp)
 10032b8:	04401e04 	movi	r17,120
 10032bc:	003f6906 	br	1003064 <__alt_data_end+0xff803064>
 10032c0:	8025883a 	mov	r18,r16
 10032c4:	dc002903 	ldbu	r16,164(sp)
 10032c8:	e011883a 	mov	r8,fp
 10032cc:	84003fcc 	andi	r16,r16,255
 10032d0:	8005081e 	bne	r16,zero,10046f4 <___vfprintf_internal_r+0x2290>
 10032d4:	883d6126 	beq	r17,zero,100285c <__alt_data_end+0xff80285c>
 10032d8:	00c00044 	movi	r3,1
 10032dc:	d8c02915 	stw	r3,164(sp)
 10032e0:	dc401405 	stb	r17,80(sp)
 10032e4:	d8002785 	stb	zero,158(sp)
 10032e8:	003fe906 	br	1003290 <__alt_data_end+0xff803290>
 10032ec:	01404074 	movhi	r5,257
 10032f0:	29486304 	addi	r5,r5,8588
 10032f4:	d9403915 	stw	r5,228(sp)
 10032f8:	d8c02e15 	stw	r3,184(sp)
 10032fc:	1025883a 	mov	r18,r2
 1003300:	04401e04 	movi	r17,120
 1003304:	9d84b03a 	or	r2,r19,r22
 1003308:	1000fc1e 	bne	r2,zero,10036fc <___vfprintf_internal_r+0x1298>
 100330c:	0039883a 	mov	fp,zero
 1003310:	00800084 	movi	r2,2
 1003314:	10803fcc 	andi	r2,r2,255
 1003318:	00c00044 	movi	r3,1
 100331c:	10c20f26 	beq	r2,r3,1003b5c <___vfprintf_internal_r+0x16f8>
 1003320:	00c00084 	movi	r3,2
 1003324:	10fd3326 	beq	r2,r3,10027f4 <__alt_data_end+0xff8027f4>
 1003328:	003e0b06 	br	1002b58 <__alt_data_end+0xff802b58>
 100332c:	d8c02017 	ldw	r3,128(sp)
 1003330:	003e7106 	br	1002cf8 <__alt_data_end+0xff802cf8>
 1003334:	00801944 	movi	r2,101
 1003338:	14407e0e 	bge	r2,r17,1003534 <___vfprintf_internal_r+0x10d0>
 100333c:	d9003617 	ldw	r4,216(sp)
 1003340:	d9403817 	ldw	r5,224(sp)
 1003344:	000d883a 	mov	r6,zero
 1003348:	000f883a 	mov	r7,zero
 100334c:	d8c03c15 	stw	r3,240(sp)
 1003350:	da003d15 	stw	r8,244(sp)
 1003354:	100dba40 	call	100dba4 <__eqdf2>
 1003358:	d8c03c17 	ldw	r3,240(sp)
 100335c:	da003d17 	ldw	r8,244(sp)
 1003360:	1000f71e 	bne	r2,zero,1003740 <___vfprintf_internal_r+0x12dc>
 1003364:	d8801f17 	ldw	r2,124(sp)
 1003368:	01004074 	movhi	r4,257
 100336c:	21086a04 	addi	r4,r4,8616
 1003370:	18c00044 	addi	r3,r3,1
 1003374:	10800044 	addi	r2,r2,1
 1003378:	41000015 	stw	r4,0(r8)
 100337c:	01000044 	movi	r4,1
 1003380:	41000115 	stw	r4,4(r8)
 1003384:	d8c02015 	stw	r3,128(sp)
 1003388:	d8801f15 	stw	r2,124(sp)
 100338c:	010001c4 	movi	r4,7
 1003390:	2082b816 	blt	r4,r2,1003e74 <___vfprintf_internal_r+0x1a10>
 1003394:	42000204 	addi	r8,r8,8
 1003398:	d8802617 	ldw	r2,152(sp)
 100339c:	d9403317 	ldw	r5,204(sp)
 10033a0:	11400216 	blt	r2,r5,10033ac <___vfprintf_internal_r+0xf48>
 10033a4:	9080004c 	andi	r2,r18,1
 10033a8:	103eb326 	beq	r2,zero,1002e78 <__alt_data_end+0xff802e78>
 10033ac:	d8803717 	ldw	r2,220(sp)
 10033b0:	d9003417 	ldw	r4,208(sp)
 10033b4:	d9403717 	ldw	r5,220(sp)
 10033b8:	1887883a 	add	r3,r3,r2
 10033bc:	d8801f17 	ldw	r2,124(sp)
 10033c0:	41000015 	stw	r4,0(r8)
 10033c4:	41400115 	stw	r5,4(r8)
 10033c8:	10800044 	addi	r2,r2,1
 10033cc:	d8c02015 	stw	r3,128(sp)
 10033d0:	d8801f15 	stw	r2,124(sp)
 10033d4:	010001c4 	movi	r4,7
 10033d8:	20832916 	blt	r4,r2,1004080 <___vfprintf_internal_r+0x1c1c>
 10033dc:	42000204 	addi	r8,r8,8
 10033e0:	d8803317 	ldw	r2,204(sp)
 10033e4:	143fffc4 	addi	r16,r2,-1
 10033e8:	043ea30e 	bge	zero,r16,1002e78 <__alt_data_end+0xff802e78>
 10033ec:	04400404 	movi	r17,16
 10033f0:	d8801f17 	ldw	r2,124(sp)
 10033f4:	8c00880e 	bge	r17,r16,1003618 <___vfprintf_internal_r+0x11b4>
 10033f8:	01404074 	movhi	r5,257
 10033fc:	29486a84 	addi	r5,r5,8618
 1003400:	d9402c15 	stw	r5,176(sp)
 1003404:	058001c4 	movi	r22,7
 1003408:	dcc02d17 	ldw	r19,180(sp)
 100340c:	00000306 	br	100341c <___vfprintf_internal_r+0xfb8>
 1003410:	42000204 	addi	r8,r8,8
 1003414:	843ffc04 	addi	r16,r16,-16
 1003418:	8c00820e 	bge	r17,r16,1003624 <___vfprintf_internal_r+0x11c0>
 100341c:	18c00404 	addi	r3,r3,16
 1003420:	10800044 	addi	r2,r2,1
 1003424:	45000015 	stw	r20,0(r8)
 1003428:	44400115 	stw	r17,4(r8)
 100342c:	d8c02015 	stw	r3,128(sp)
 1003430:	d8801f15 	stw	r2,124(sp)
 1003434:	b0bff60e 	bge	r22,r2,1003410 <__alt_data_end+0xff803410>
 1003438:	d9801e04 	addi	r6,sp,120
 100343c:	b80b883a 	mov	r5,r23
 1003440:	9809883a 	mov	r4,r19
 1003444:	1009c440 	call	1009c44 <__sprint_r>
 1003448:	103d0a1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 100344c:	d8c02017 	ldw	r3,128(sp)
 1003450:	d8801f17 	ldw	r2,124(sp)
 1003454:	da000404 	addi	r8,sp,16
 1003458:	003fee06 	br	1003414 <__alt_data_end+0xff803414>
 100345c:	d9403117 	ldw	r5,196(sp)
 1003460:	d8802917 	ldw	r2,164(sp)
 1003464:	28adc83a 	sub	r22,r5,r2
 1003468:	05be410e 	bge	zero,r22,1002d70 <__alt_data_end+0xff802d70>
 100346c:	07000404 	movi	fp,16
 1003470:	d8801f17 	ldw	r2,124(sp)
 1003474:	e5838f0e 	bge	fp,r22,10042b4 <___vfprintf_internal_r+0x1e50>
 1003478:	01404074 	movhi	r5,257
 100347c:	29486a84 	addi	r5,r5,8618
 1003480:	dc403015 	stw	r17,192(sp)
 1003484:	d9402c15 	stw	r5,176(sp)
 1003488:	b023883a 	mov	r17,r22
 100348c:	04c001c4 	movi	r19,7
 1003490:	a82d883a 	mov	r22,r21
 1003494:	902b883a 	mov	r21,r18
 1003498:	8025883a 	mov	r18,r16
 100349c:	dc002d17 	ldw	r16,180(sp)
 10034a0:	00000306 	br	10034b0 <___vfprintf_internal_r+0x104c>
 10034a4:	8c7ffc04 	addi	r17,r17,-16
 10034a8:	42000204 	addi	r8,r8,8
 10034ac:	e440110e 	bge	fp,r17,10034f4 <___vfprintf_internal_r+0x1090>
 10034b0:	18c00404 	addi	r3,r3,16
 10034b4:	10800044 	addi	r2,r2,1
 10034b8:	45000015 	stw	r20,0(r8)
 10034bc:	47000115 	stw	fp,4(r8)
 10034c0:	d8c02015 	stw	r3,128(sp)
 10034c4:	d8801f15 	stw	r2,124(sp)
 10034c8:	98bff60e 	bge	r19,r2,10034a4 <__alt_data_end+0xff8034a4>
 10034cc:	d9801e04 	addi	r6,sp,120
 10034d0:	b80b883a 	mov	r5,r23
 10034d4:	8009883a 	mov	r4,r16
 10034d8:	1009c440 	call	1009c44 <__sprint_r>
 10034dc:	103ce51e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 10034e0:	8c7ffc04 	addi	r17,r17,-16
 10034e4:	d8c02017 	ldw	r3,128(sp)
 10034e8:	d8801f17 	ldw	r2,124(sp)
 10034ec:	da000404 	addi	r8,sp,16
 10034f0:	e47fef16 	blt	fp,r17,10034b0 <__alt_data_end+0xff8034b0>
 10034f4:	9021883a 	mov	r16,r18
 10034f8:	a825883a 	mov	r18,r21
 10034fc:	b02b883a 	mov	r21,r22
 1003500:	882d883a 	mov	r22,r17
 1003504:	dc403017 	ldw	r17,192(sp)
 1003508:	d9002c17 	ldw	r4,176(sp)
 100350c:	1d87883a 	add	r3,r3,r22
 1003510:	10800044 	addi	r2,r2,1
 1003514:	41000015 	stw	r4,0(r8)
 1003518:	45800115 	stw	r22,4(r8)
 100351c:	d8c02015 	stw	r3,128(sp)
 1003520:	d8801f15 	stw	r2,124(sp)
 1003524:	010001c4 	movi	r4,7
 1003528:	20818e16 	blt	r4,r2,1003b64 <___vfprintf_internal_r+0x1700>
 100352c:	42000204 	addi	r8,r8,8
 1003530:	003e0f06 	br	1002d70 <__alt_data_end+0xff802d70>
 1003534:	d9403317 	ldw	r5,204(sp)
 1003538:	00800044 	movi	r2,1
 100353c:	18c00044 	addi	r3,r3,1
 1003540:	1141530e 	bge	r2,r5,1003a90 <___vfprintf_internal_r+0x162c>
 1003544:	dc401f17 	ldw	r17,124(sp)
 1003548:	00800044 	movi	r2,1
 100354c:	40800115 	stw	r2,4(r8)
 1003550:	8c400044 	addi	r17,r17,1
 1003554:	44000015 	stw	r16,0(r8)
 1003558:	d8c02015 	stw	r3,128(sp)
 100355c:	dc401f15 	stw	r17,124(sp)
 1003560:	008001c4 	movi	r2,7
 1003564:	14416b16 	blt	r2,r17,1003b14 <___vfprintf_internal_r+0x16b0>
 1003568:	42000204 	addi	r8,r8,8
 100356c:	d8803717 	ldw	r2,220(sp)
 1003570:	d9003417 	ldw	r4,208(sp)
 1003574:	8c400044 	addi	r17,r17,1
 1003578:	10c7883a 	add	r3,r2,r3
 100357c:	40800115 	stw	r2,4(r8)
 1003580:	41000015 	stw	r4,0(r8)
 1003584:	d8c02015 	stw	r3,128(sp)
 1003588:	dc401f15 	stw	r17,124(sp)
 100358c:	008001c4 	movi	r2,7
 1003590:	14416916 	blt	r2,r17,1003b38 <___vfprintf_internal_r+0x16d4>
 1003594:	45800204 	addi	r22,r8,8
 1003598:	d9003617 	ldw	r4,216(sp)
 100359c:	d9403817 	ldw	r5,224(sp)
 10035a0:	000d883a 	mov	r6,zero
 10035a4:	000f883a 	mov	r7,zero
 10035a8:	d8c03c15 	stw	r3,240(sp)
 10035ac:	100dba40 	call	100dba4 <__eqdf2>
 10035b0:	d8c03c17 	ldw	r3,240(sp)
 10035b4:	1000bc26 	beq	r2,zero,10038a8 <___vfprintf_internal_r+0x1444>
 10035b8:	d9403317 	ldw	r5,204(sp)
 10035bc:	84000044 	addi	r16,r16,1
 10035c0:	8c400044 	addi	r17,r17,1
 10035c4:	28bfffc4 	addi	r2,r5,-1
 10035c8:	1887883a 	add	r3,r3,r2
 10035cc:	b0800115 	stw	r2,4(r22)
 10035d0:	b4000015 	stw	r16,0(r22)
 10035d4:	d8c02015 	stw	r3,128(sp)
 10035d8:	dc401f15 	stw	r17,124(sp)
 10035dc:	008001c4 	movi	r2,7
 10035e0:	14414316 	blt	r2,r17,1003af0 <___vfprintf_internal_r+0x168c>
 10035e4:	b5800204 	addi	r22,r22,8
 10035e8:	d9003a17 	ldw	r4,232(sp)
 10035ec:	df0022c4 	addi	fp,sp,139
 10035f0:	8c400044 	addi	r17,r17,1
 10035f4:	20c7883a 	add	r3,r4,r3
 10035f8:	b7000015 	stw	fp,0(r22)
 10035fc:	b1000115 	stw	r4,4(r22)
 1003600:	d8c02015 	stw	r3,128(sp)
 1003604:	dc401f15 	stw	r17,124(sp)
 1003608:	008001c4 	movi	r2,7
 100360c:	14400e16 	blt	r2,r17,1003648 <___vfprintf_internal_r+0x11e4>
 1003610:	b2000204 	addi	r8,r22,8
 1003614:	003e1806 	br	1002e78 <__alt_data_end+0xff802e78>
 1003618:	01004074 	movhi	r4,257
 100361c:	21086a84 	addi	r4,r4,8618
 1003620:	d9002c15 	stw	r4,176(sp)
 1003624:	d9002c17 	ldw	r4,176(sp)
 1003628:	1c07883a 	add	r3,r3,r16
 100362c:	44000115 	stw	r16,4(r8)
 1003630:	41000015 	stw	r4,0(r8)
 1003634:	10800044 	addi	r2,r2,1
 1003638:	d8c02015 	stw	r3,128(sp)
 100363c:	d8801f15 	stw	r2,124(sp)
 1003640:	010001c4 	movi	r4,7
 1003644:	20be0b0e 	bge	r4,r2,1002e74 <__alt_data_end+0xff802e74>
 1003648:	d9002d17 	ldw	r4,180(sp)
 100364c:	d9801e04 	addi	r6,sp,120
 1003650:	b80b883a 	mov	r5,r23
 1003654:	1009c440 	call	1009c44 <__sprint_r>
 1003658:	103c861e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 100365c:	d8c02017 	ldw	r3,128(sp)
 1003660:	da000404 	addi	r8,sp,16
 1003664:	003e0406 	br	1002e78 <__alt_data_end+0xff802e78>
 1003668:	d9002d17 	ldw	r4,180(sp)
 100366c:	d9801e04 	addi	r6,sp,120
 1003670:	b80b883a 	mov	r5,r23
 1003674:	1009c440 	call	1009c44 <__sprint_r>
 1003678:	103e3b26 	beq	r2,zero,1002f68 <__alt_data_end+0xff802f68>
 100367c:	003c7d06 	br	1002874 <__alt_data_end+0xff802874>
 1003680:	d9002d17 	ldw	r4,180(sp)
 1003684:	d9801e04 	addi	r6,sp,120
 1003688:	b80b883a 	mov	r5,r23
 100368c:	1009c440 	call	1009c44 <__sprint_r>
 1003690:	103c781e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003694:	d8c02017 	ldw	r3,128(sp)
 1003698:	da000404 	addi	r8,sp,16
 100369c:	003de906 	br	1002e44 <__alt_data_end+0xff802e44>
 10036a0:	d9002d17 	ldw	r4,180(sp)
 10036a4:	d9801e04 	addi	r6,sp,120
 10036a8:	b80b883a 	mov	r5,r23
 10036ac:	1009c440 	call	1009c44 <__sprint_r>
 10036b0:	103c701e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 10036b4:	d8c02017 	ldw	r3,128(sp)
 10036b8:	da000404 	addi	r8,sp,16
 10036bc:	003d9b06 	br	1002d2c <__alt_data_end+0xff802d2c>
 10036c0:	d9002d17 	ldw	r4,180(sp)
 10036c4:	d9801e04 	addi	r6,sp,120
 10036c8:	b80b883a 	mov	r5,r23
 10036cc:	1009c440 	call	1009c44 <__sprint_r>
 10036d0:	103c681e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 10036d4:	d8c02017 	ldw	r3,128(sp)
 10036d8:	da000404 	addi	r8,sp,16
 10036dc:	003da106 	br	1002d64 <__alt_data_end+0xff802d64>
 10036e0:	d9402a17 	ldw	r5,168(sp)
 10036e4:	d8002785 	stb	zero,158(sp)
 10036e8:	283f0616 	blt	r5,zero,1003304 <__alt_data_end+0xff803304>
 10036ec:	00ffdfc4 	movi	r3,-129
 10036f0:	9d84b03a 	or	r2,r19,r22
 10036f4:	90e4703a 	and	r18,r18,r3
 10036f8:	103c3b26 	beq	r2,zero,10027e8 <__alt_data_end+0xff8027e8>
 10036fc:	0039883a 	mov	fp,zero
 1003700:	003e5806 	br	1003064 <__alt_data_end+0xff803064>
 1003704:	9080040c 	andi	r2,r18,16
 1003708:	1001b326 	beq	r2,zero,1003dd8 <___vfprintf_internal_r+0x1974>
 100370c:	d8c02e17 	ldw	r3,184(sp)
 1003710:	d9002a17 	ldw	r4,168(sp)
 1003714:	d8002785 	stb	zero,158(sp)
 1003718:	18800104 	addi	r2,r3,4
 100371c:	1cc00017 	ldw	r19,0(r3)
 1003720:	002d883a 	mov	r22,zero
 1003724:	2001b516 	blt	r4,zero,1003dfc <___vfprintf_internal_r+0x1998>
 1003728:	00ffdfc4 	movi	r3,-129
 100372c:	d8802e15 	stw	r2,184(sp)
 1003730:	90e4703a 	and	r18,r18,r3
 1003734:	983d0526 	beq	r19,zero,1002b4c <__alt_data_end+0xff802b4c>
 1003738:	0039883a 	mov	fp,zero
 100373c:	003d0806 	br	1002b60 <__alt_data_end+0xff802b60>
 1003740:	dc402617 	ldw	r17,152(sp)
 1003744:	0441d30e 	bge	zero,r17,1003e94 <___vfprintf_internal_r+0x1a30>
 1003748:	dc403217 	ldw	r17,200(sp)
 100374c:	d8803317 	ldw	r2,204(sp)
 1003750:	1440010e 	bge	r2,r17,1003758 <___vfprintf_internal_r+0x12f4>
 1003754:	1023883a 	mov	r17,r2
 1003758:	04400a0e 	bge	zero,r17,1003784 <___vfprintf_internal_r+0x1320>
 100375c:	d8801f17 	ldw	r2,124(sp)
 1003760:	1c47883a 	add	r3,r3,r17
 1003764:	44000015 	stw	r16,0(r8)
 1003768:	10800044 	addi	r2,r2,1
 100376c:	44400115 	stw	r17,4(r8)
 1003770:	d8c02015 	stw	r3,128(sp)
 1003774:	d8801f15 	stw	r2,124(sp)
 1003778:	010001c4 	movi	r4,7
 100377c:	20826516 	blt	r4,r2,1004114 <___vfprintf_internal_r+0x1cb0>
 1003780:	42000204 	addi	r8,r8,8
 1003784:	88026116 	blt	r17,zero,100410c <___vfprintf_internal_r+0x1ca8>
 1003788:	d9003217 	ldw	r4,200(sp)
 100378c:	2463c83a 	sub	r17,r4,r17
 1003790:	04407b0e 	bge	zero,r17,1003980 <___vfprintf_internal_r+0x151c>
 1003794:	05800404 	movi	r22,16
 1003798:	d8801f17 	ldw	r2,124(sp)
 100379c:	b4419d0e 	bge	r22,r17,1003e14 <___vfprintf_internal_r+0x19b0>
 10037a0:	01004074 	movhi	r4,257
 10037a4:	21086a84 	addi	r4,r4,8618
 10037a8:	d9002c15 	stw	r4,176(sp)
 10037ac:	070001c4 	movi	fp,7
 10037b0:	dcc02d17 	ldw	r19,180(sp)
 10037b4:	00000306 	br	10037c4 <___vfprintf_internal_r+0x1360>
 10037b8:	42000204 	addi	r8,r8,8
 10037bc:	8c7ffc04 	addi	r17,r17,-16
 10037c0:	b441970e 	bge	r22,r17,1003e20 <___vfprintf_internal_r+0x19bc>
 10037c4:	18c00404 	addi	r3,r3,16
 10037c8:	10800044 	addi	r2,r2,1
 10037cc:	45000015 	stw	r20,0(r8)
 10037d0:	45800115 	stw	r22,4(r8)
 10037d4:	d8c02015 	stw	r3,128(sp)
 10037d8:	d8801f15 	stw	r2,124(sp)
 10037dc:	e0bff60e 	bge	fp,r2,10037b8 <__alt_data_end+0xff8037b8>
 10037e0:	d9801e04 	addi	r6,sp,120
 10037e4:	b80b883a 	mov	r5,r23
 10037e8:	9809883a 	mov	r4,r19
 10037ec:	1009c440 	call	1009c44 <__sprint_r>
 10037f0:	103c201e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 10037f4:	d8c02017 	ldw	r3,128(sp)
 10037f8:	d8801f17 	ldw	r2,124(sp)
 10037fc:	da000404 	addi	r8,sp,16
 1003800:	003fee06 	br	10037bc <__alt_data_end+0xff8037bc>
 1003804:	d9002d17 	ldw	r4,180(sp)
 1003808:	d9801e04 	addi	r6,sp,120
 100380c:	b80b883a 	mov	r5,r23
 1003810:	1009c440 	call	1009c44 <__sprint_r>
 1003814:	103c171e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003818:	d8c02017 	ldw	r3,128(sp)
 100381c:	df002787 	ldb	fp,158(sp)
 1003820:	da000404 	addi	r8,sp,16
 1003824:	003d3406 	br	1002cf8 <__alt_data_end+0xff802cf8>
 1003828:	9080040c 	andi	r2,r18,16
 100382c:	10016126 	beq	r2,zero,1003db4 <___vfprintf_internal_r+0x1950>
 1003830:	d9402e17 	ldw	r5,184(sp)
 1003834:	2cc00017 	ldw	r19,0(r5)
 1003838:	29400104 	addi	r5,r5,4
 100383c:	d9402e15 	stw	r5,184(sp)
 1003840:	982dd7fa 	srai	r22,r19,31
 1003844:	b005883a 	mov	r2,r22
 1003848:	003c5a06 	br	10029b4 <__alt_data_end+0xff8029b4>
 100384c:	9080040c 	andi	r2,r18,16
 1003850:	10003526 	beq	r2,zero,1003928 <___vfprintf_internal_r+0x14c4>
 1003854:	d8c02e17 	ldw	r3,184(sp)
 1003858:	d9002a17 	ldw	r4,168(sp)
 100385c:	d8002785 	stb	zero,158(sp)
 1003860:	18800104 	addi	r2,r3,4
 1003864:	1cc00017 	ldw	r19,0(r3)
 1003868:	002d883a 	mov	r22,zero
 100386c:	20003716 	blt	r4,zero,100394c <___vfprintf_internal_r+0x14e8>
 1003870:	00ffdfc4 	movi	r3,-129
 1003874:	d8802e15 	stw	r2,184(sp)
 1003878:	90e4703a 	and	r18,r18,r3
 100387c:	0039883a 	mov	fp,zero
 1003880:	983dd426 	beq	r19,zero,1002fd4 <__alt_data_end+0xff802fd4>
 1003884:	00800244 	movi	r2,9
 1003888:	14fc5336 	bltu	r2,r19,10029d8 <__alt_data_end+0xff8029d8>
 100388c:	d8c02817 	ldw	r3,160(sp)
 1003890:	dc001dc4 	addi	r16,sp,119
 1003894:	9cc00c04 	addi	r19,r19,48
 1003898:	1c07c83a 	sub	r3,r3,r16
 100389c:	dcc01dc5 	stb	r19,119(sp)
 10038a0:	d8c02b15 	stw	r3,172(sp)
 10038a4:	003cc606 	br	1002bc0 <__alt_data_end+0xff802bc0>
 10038a8:	d8803317 	ldw	r2,204(sp)
 10038ac:	143fffc4 	addi	r16,r2,-1
 10038b0:	043f4d0e 	bge	zero,r16,10035e8 <__alt_data_end+0xff8035e8>
 10038b4:	07000404 	movi	fp,16
 10038b8:	e400810e 	bge	fp,r16,1003ac0 <___vfprintf_internal_r+0x165c>
 10038bc:	01404074 	movhi	r5,257
 10038c0:	29486a84 	addi	r5,r5,8618
 10038c4:	d9402c15 	stw	r5,176(sp)
 10038c8:	01c001c4 	movi	r7,7
 10038cc:	dcc02d17 	ldw	r19,180(sp)
 10038d0:	00000306 	br	10038e0 <___vfprintf_internal_r+0x147c>
 10038d4:	b5800204 	addi	r22,r22,8
 10038d8:	843ffc04 	addi	r16,r16,-16
 10038dc:	e4007b0e 	bge	fp,r16,1003acc <___vfprintf_internal_r+0x1668>
 10038e0:	18c00404 	addi	r3,r3,16
 10038e4:	8c400044 	addi	r17,r17,1
 10038e8:	b5000015 	stw	r20,0(r22)
 10038ec:	b7000115 	stw	fp,4(r22)
 10038f0:	d8c02015 	stw	r3,128(sp)
 10038f4:	dc401f15 	stw	r17,124(sp)
 10038f8:	3c7ff60e 	bge	r7,r17,10038d4 <__alt_data_end+0xff8038d4>
 10038fc:	d9801e04 	addi	r6,sp,120
 1003900:	b80b883a 	mov	r5,r23
 1003904:	9809883a 	mov	r4,r19
 1003908:	d9c03c15 	stw	r7,240(sp)
 100390c:	1009c440 	call	1009c44 <__sprint_r>
 1003910:	d9c03c17 	ldw	r7,240(sp)
 1003914:	103bd71e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003918:	d8c02017 	ldw	r3,128(sp)
 100391c:	dc401f17 	ldw	r17,124(sp)
 1003920:	dd800404 	addi	r22,sp,16
 1003924:	003fec06 	br	10038d8 <__alt_data_end+0xff8038d8>
 1003928:	9080100c 	andi	r2,r18,64
 100392c:	d8002785 	stb	zero,158(sp)
 1003930:	10010e26 	beq	r2,zero,1003d6c <___vfprintf_internal_r+0x1908>
 1003934:	d9402e17 	ldw	r5,184(sp)
 1003938:	d8c02a17 	ldw	r3,168(sp)
 100393c:	002d883a 	mov	r22,zero
 1003940:	28800104 	addi	r2,r5,4
 1003944:	2cc0000b 	ldhu	r19,0(r5)
 1003948:	183fc90e 	bge	r3,zero,1003870 <__alt_data_end+0xff803870>
 100394c:	d8802e15 	stw	r2,184(sp)
 1003950:	0039883a 	mov	fp,zero
 1003954:	9d84b03a 	or	r2,r19,r22
 1003958:	103c1e1e 	bne	r2,zero,10029d4 <__alt_data_end+0xff8029d4>
 100395c:	00800044 	movi	r2,1
 1003960:	003e6c06 	br	1003314 <__alt_data_end+0xff803314>
 1003964:	d9002d17 	ldw	r4,180(sp)
 1003968:	d9801e04 	addi	r6,sp,120
 100396c:	b80b883a 	mov	r5,r23
 1003970:	1009c440 	call	1009c44 <__sprint_r>
 1003974:	103bbf1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003978:	d8c02017 	ldw	r3,128(sp)
 100397c:	da000404 	addi	r8,sp,16
 1003980:	d9003217 	ldw	r4,200(sp)
 1003984:	d8802617 	ldw	r2,152(sp)
 1003988:	d9403317 	ldw	r5,204(sp)
 100398c:	8123883a 	add	r17,r16,r4
 1003990:	11400216 	blt	r2,r5,100399c <___vfprintf_internal_r+0x1538>
 1003994:	9100004c 	andi	r4,r18,1
 1003998:	20000d26 	beq	r4,zero,10039d0 <___vfprintf_internal_r+0x156c>
 100399c:	d9003717 	ldw	r4,220(sp)
 10039a0:	d9403417 	ldw	r5,208(sp)
 10039a4:	1907883a 	add	r3,r3,r4
 10039a8:	d9001f17 	ldw	r4,124(sp)
 10039ac:	41400015 	stw	r5,0(r8)
 10039b0:	d9403717 	ldw	r5,220(sp)
 10039b4:	21000044 	addi	r4,r4,1
 10039b8:	d8c02015 	stw	r3,128(sp)
 10039bc:	41400115 	stw	r5,4(r8)
 10039c0:	d9001f15 	stw	r4,124(sp)
 10039c4:	014001c4 	movi	r5,7
 10039c8:	2901e816 	blt	r5,r4,100416c <___vfprintf_internal_r+0x1d08>
 10039cc:	42000204 	addi	r8,r8,8
 10039d0:	d9003317 	ldw	r4,204(sp)
 10039d4:	8121883a 	add	r16,r16,r4
 10039d8:	2085c83a 	sub	r2,r4,r2
 10039dc:	8461c83a 	sub	r16,r16,r17
 10039e0:	1400010e 	bge	r2,r16,10039e8 <___vfprintf_internal_r+0x1584>
 10039e4:	1021883a 	mov	r16,r2
 10039e8:	04000a0e 	bge	zero,r16,1003a14 <___vfprintf_internal_r+0x15b0>
 10039ec:	d9001f17 	ldw	r4,124(sp)
 10039f0:	1c07883a 	add	r3,r3,r16
 10039f4:	44400015 	stw	r17,0(r8)
 10039f8:	21000044 	addi	r4,r4,1
 10039fc:	44000115 	stw	r16,4(r8)
 1003a00:	d8c02015 	stw	r3,128(sp)
 1003a04:	d9001f15 	stw	r4,124(sp)
 1003a08:	014001c4 	movi	r5,7
 1003a0c:	2901fb16 	blt	r5,r4,10041fc <___vfprintf_internal_r+0x1d98>
 1003a10:	42000204 	addi	r8,r8,8
 1003a14:	8001f716 	blt	r16,zero,10041f4 <___vfprintf_internal_r+0x1d90>
 1003a18:	1421c83a 	sub	r16,r2,r16
 1003a1c:	043d160e 	bge	zero,r16,1002e78 <__alt_data_end+0xff802e78>
 1003a20:	04400404 	movi	r17,16
 1003a24:	d8801f17 	ldw	r2,124(sp)
 1003a28:	8c3efb0e 	bge	r17,r16,1003618 <__alt_data_end+0xff803618>
 1003a2c:	01404074 	movhi	r5,257
 1003a30:	29486a84 	addi	r5,r5,8618
 1003a34:	d9402c15 	stw	r5,176(sp)
 1003a38:	058001c4 	movi	r22,7
 1003a3c:	dcc02d17 	ldw	r19,180(sp)
 1003a40:	00000306 	br	1003a50 <___vfprintf_internal_r+0x15ec>
 1003a44:	42000204 	addi	r8,r8,8
 1003a48:	843ffc04 	addi	r16,r16,-16
 1003a4c:	8c3ef50e 	bge	r17,r16,1003624 <__alt_data_end+0xff803624>
 1003a50:	18c00404 	addi	r3,r3,16
 1003a54:	10800044 	addi	r2,r2,1
 1003a58:	45000015 	stw	r20,0(r8)
 1003a5c:	44400115 	stw	r17,4(r8)
 1003a60:	d8c02015 	stw	r3,128(sp)
 1003a64:	d8801f15 	stw	r2,124(sp)
 1003a68:	b0bff60e 	bge	r22,r2,1003a44 <__alt_data_end+0xff803a44>
 1003a6c:	d9801e04 	addi	r6,sp,120
 1003a70:	b80b883a 	mov	r5,r23
 1003a74:	9809883a 	mov	r4,r19
 1003a78:	1009c440 	call	1009c44 <__sprint_r>
 1003a7c:	103b7d1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003a80:	d8c02017 	ldw	r3,128(sp)
 1003a84:	d8801f17 	ldw	r2,124(sp)
 1003a88:	da000404 	addi	r8,sp,16
 1003a8c:	003fee06 	br	1003a48 <__alt_data_end+0xff803a48>
 1003a90:	9088703a 	and	r4,r18,r2
 1003a94:	203eab1e 	bne	r4,zero,1003544 <__alt_data_end+0xff803544>
 1003a98:	dc401f17 	ldw	r17,124(sp)
 1003a9c:	40800115 	stw	r2,4(r8)
 1003aa0:	44000015 	stw	r16,0(r8)
 1003aa4:	8c400044 	addi	r17,r17,1
 1003aa8:	d8c02015 	stw	r3,128(sp)
 1003aac:	dc401f15 	stw	r17,124(sp)
 1003ab0:	008001c4 	movi	r2,7
 1003ab4:	14400e16 	blt	r2,r17,1003af0 <___vfprintf_internal_r+0x168c>
 1003ab8:	45800204 	addi	r22,r8,8
 1003abc:	003eca06 	br	10035e8 <__alt_data_end+0xff8035e8>
 1003ac0:	01004074 	movhi	r4,257
 1003ac4:	21086a84 	addi	r4,r4,8618
 1003ac8:	d9002c15 	stw	r4,176(sp)
 1003acc:	d8802c17 	ldw	r2,176(sp)
 1003ad0:	1c07883a 	add	r3,r3,r16
 1003ad4:	8c400044 	addi	r17,r17,1
 1003ad8:	b0800015 	stw	r2,0(r22)
 1003adc:	b4000115 	stw	r16,4(r22)
 1003ae0:	d8c02015 	stw	r3,128(sp)
 1003ae4:	dc401f15 	stw	r17,124(sp)
 1003ae8:	008001c4 	movi	r2,7
 1003aec:	147ebd0e 	bge	r2,r17,10035e4 <__alt_data_end+0xff8035e4>
 1003af0:	d9002d17 	ldw	r4,180(sp)
 1003af4:	d9801e04 	addi	r6,sp,120
 1003af8:	b80b883a 	mov	r5,r23
 1003afc:	1009c440 	call	1009c44 <__sprint_r>
 1003b00:	103b5c1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003b04:	d8c02017 	ldw	r3,128(sp)
 1003b08:	dc401f17 	ldw	r17,124(sp)
 1003b0c:	dd800404 	addi	r22,sp,16
 1003b10:	003eb506 	br	10035e8 <__alt_data_end+0xff8035e8>
 1003b14:	d9002d17 	ldw	r4,180(sp)
 1003b18:	d9801e04 	addi	r6,sp,120
 1003b1c:	b80b883a 	mov	r5,r23
 1003b20:	1009c440 	call	1009c44 <__sprint_r>
 1003b24:	103b531e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003b28:	d8c02017 	ldw	r3,128(sp)
 1003b2c:	dc401f17 	ldw	r17,124(sp)
 1003b30:	da000404 	addi	r8,sp,16
 1003b34:	003e8d06 	br	100356c <__alt_data_end+0xff80356c>
 1003b38:	d9002d17 	ldw	r4,180(sp)
 1003b3c:	d9801e04 	addi	r6,sp,120
 1003b40:	b80b883a 	mov	r5,r23
 1003b44:	1009c440 	call	1009c44 <__sprint_r>
 1003b48:	103b4a1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003b4c:	d8c02017 	ldw	r3,128(sp)
 1003b50:	dc401f17 	ldw	r17,124(sp)
 1003b54:	dd800404 	addi	r22,sp,16
 1003b58:	003e8f06 	br	1003598 <__alt_data_end+0xff803598>
 1003b5c:	0027883a 	mov	r19,zero
 1003b60:	003f4a06 	br	100388c <__alt_data_end+0xff80388c>
 1003b64:	d9002d17 	ldw	r4,180(sp)
 1003b68:	d9801e04 	addi	r6,sp,120
 1003b6c:	b80b883a 	mov	r5,r23
 1003b70:	1009c440 	call	1009c44 <__sprint_r>
 1003b74:	103b3f1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003b78:	d8c02017 	ldw	r3,128(sp)
 1003b7c:	da000404 	addi	r8,sp,16
 1003b80:	003c7b06 	br	1002d70 <__alt_data_end+0xff802d70>
 1003b84:	d9402a17 	ldw	r5,168(sp)
 1003b88:	04e7c83a 	sub	r19,zero,r19
 1003b8c:	07000b44 	movi	fp,45
 1003b90:	9804c03a 	cmpne	r2,r19,zero
 1003b94:	05adc83a 	sub	r22,zero,r22
 1003b98:	df002785 	stb	fp,158(sp)
 1003b9c:	b0adc83a 	sub	r22,r22,r2
 1003ba0:	28017b16 	blt	r5,zero,1004190 <___vfprintf_internal_r+0x1d2c>
 1003ba4:	00bfdfc4 	movi	r2,-129
 1003ba8:	90a4703a 	and	r18,r18,r2
 1003bac:	003b8906 	br	10029d4 <__alt_data_end+0xff8029d4>
 1003bb0:	d9003617 	ldw	r4,216(sp)
 1003bb4:	d9403817 	ldw	r5,224(sp)
 1003bb8:	da003d15 	stw	r8,244(sp)
 1003bbc:	10098680 	call	1009868 <__fpclassifyd>
 1003bc0:	da003d17 	ldw	r8,244(sp)
 1003bc4:	1000f026 	beq	r2,zero,1003f88 <___vfprintf_internal_r+0x1b24>
 1003bc8:	d9002a17 	ldw	r4,168(sp)
 1003bcc:	05bff7c4 	movi	r22,-33
 1003bd0:	00bfffc4 	movi	r2,-1
 1003bd4:	8dac703a 	and	r22,r17,r22
 1003bd8:	20820026 	beq	r4,r2,10043dc <___vfprintf_internal_r+0x1f78>
 1003bdc:	008011c4 	movi	r2,71
 1003be0:	b081f726 	beq	r22,r2,10043c0 <___vfprintf_internal_r+0x1f5c>
 1003be4:	d9003817 	ldw	r4,224(sp)
 1003be8:	90c04014 	ori	r3,r18,256
 1003bec:	d8c02c15 	stw	r3,176(sp)
 1003bf0:	20021516 	blt	r4,zero,1004448 <___vfprintf_internal_r+0x1fe4>
 1003bf4:	dcc03817 	ldw	r19,224(sp)
 1003bf8:	d8002905 	stb	zero,164(sp)
 1003bfc:	00801984 	movi	r2,102
 1003c00:	8881f926 	beq	r17,r2,10043e8 <___vfprintf_internal_r+0x1f84>
 1003c04:	00801184 	movi	r2,70
 1003c08:	88821c26 	beq	r17,r2,100447c <___vfprintf_internal_r+0x2018>
 1003c0c:	00801144 	movi	r2,69
 1003c10:	b081ef26 	beq	r22,r2,10043d0 <___vfprintf_internal_r+0x1f6c>
 1003c14:	d8c02a17 	ldw	r3,168(sp)
 1003c18:	d8802104 	addi	r2,sp,132
 1003c1c:	d8800315 	stw	r2,12(sp)
 1003c20:	d9403617 	ldw	r5,216(sp)
 1003c24:	d8802504 	addi	r2,sp,148
 1003c28:	d9002d17 	ldw	r4,180(sp)
 1003c2c:	d8800215 	stw	r2,8(sp)
 1003c30:	d8802604 	addi	r2,sp,152
 1003c34:	d8c00015 	stw	r3,0(sp)
 1003c38:	d8800115 	stw	r2,4(sp)
 1003c3c:	01c00084 	movi	r7,2
 1003c40:	980d883a 	mov	r6,r19
 1003c44:	d8c03c15 	stw	r3,240(sp)
 1003c48:	da003d15 	stw	r8,244(sp)
 1003c4c:	1004b940 	call	1004b94 <_dtoa_r>
 1003c50:	1021883a 	mov	r16,r2
 1003c54:	008019c4 	movi	r2,103
 1003c58:	d8c03c17 	ldw	r3,240(sp)
 1003c5c:	da003d17 	ldw	r8,244(sp)
 1003c60:	88817126 	beq	r17,r2,1004228 <___vfprintf_internal_r+0x1dc4>
 1003c64:	008011c4 	movi	r2,71
 1003c68:	88829126 	beq	r17,r2,10046b0 <___vfprintf_internal_r+0x224c>
 1003c6c:	80f9883a 	add	fp,r16,r3
 1003c70:	d9003617 	ldw	r4,216(sp)
 1003c74:	000d883a 	mov	r6,zero
 1003c78:	000f883a 	mov	r7,zero
 1003c7c:	980b883a 	mov	r5,r19
 1003c80:	da003d15 	stw	r8,244(sp)
 1003c84:	100dba40 	call	100dba4 <__eqdf2>
 1003c88:	da003d17 	ldw	r8,244(sp)
 1003c8c:	10018d26 	beq	r2,zero,10042c4 <___vfprintf_internal_r+0x1e60>
 1003c90:	d8802117 	ldw	r2,132(sp)
 1003c94:	1700062e 	bgeu	r2,fp,1003cb0 <___vfprintf_internal_r+0x184c>
 1003c98:	01000c04 	movi	r4,48
 1003c9c:	10c00044 	addi	r3,r2,1
 1003ca0:	d8c02115 	stw	r3,132(sp)
 1003ca4:	11000005 	stb	r4,0(r2)
 1003ca8:	d8802117 	ldw	r2,132(sp)
 1003cac:	173ffb36 	bltu	r2,fp,1003c9c <__alt_data_end+0xff803c9c>
 1003cb0:	1405c83a 	sub	r2,r2,r16
 1003cb4:	d8803315 	stw	r2,204(sp)
 1003cb8:	008011c4 	movi	r2,71
 1003cbc:	b0817626 	beq	r22,r2,1004298 <___vfprintf_internal_r+0x1e34>
 1003cc0:	00801944 	movi	r2,101
 1003cc4:	1442800e 	bge	r2,r17,10046c8 <___vfprintf_internal_r+0x2264>
 1003cc8:	d8c02617 	ldw	r3,152(sp)
 1003ccc:	00801984 	movi	r2,102
 1003cd0:	d8c03215 	stw	r3,200(sp)
 1003cd4:	8881fe26 	beq	r17,r2,10044d0 <___vfprintf_internal_r+0x206c>
 1003cd8:	d8c03217 	ldw	r3,200(sp)
 1003cdc:	d9003317 	ldw	r4,204(sp)
 1003ce0:	1901dd16 	blt	r3,r4,1004458 <___vfprintf_internal_r+0x1ff4>
 1003ce4:	9480004c 	andi	r18,r18,1
 1003ce8:	90022b1e 	bne	r18,zero,1004598 <___vfprintf_internal_r+0x2134>
 1003cec:	1805883a 	mov	r2,r3
 1003cf0:	18028316 	blt	r3,zero,1004700 <___vfprintf_internal_r+0x229c>
 1003cf4:	d8c03217 	ldw	r3,200(sp)
 1003cf8:	044019c4 	movi	r17,103
 1003cfc:	d8c02b15 	stw	r3,172(sp)
 1003d00:	df002907 	ldb	fp,164(sp)
 1003d04:	e001531e 	bne	fp,zero,1004254 <___vfprintf_internal_r+0x1df0>
 1003d08:	df002783 	ldbu	fp,158(sp)
 1003d0c:	d8802915 	stw	r2,164(sp)
 1003d10:	dc802c17 	ldw	r18,176(sp)
 1003d14:	d8002a15 	stw	zero,168(sp)
 1003d18:	003baf06 	br	1002bd8 <__alt_data_end+0xff802bd8>
 1003d1c:	d8c02e17 	ldw	r3,184(sp)
 1003d20:	d9002e17 	ldw	r4,184(sp)
 1003d24:	d9402e17 	ldw	r5,184(sp)
 1003d28:	18c00017 	ldw	r3,0(r3)
 1003d2c:	21000117 	ldw	r4,4(r4)
 1003d30:	29400204 	addi	r5,r5,8
 1003d34:	d8c03615 	stw	r3,216(sp)
 1003d38:	d9003815 	stw	r4,224(sp)
 1003d3c:	d9402e15 	stw	r5,184(sp)
 1003d40:	003b5006 	br	1002a84 <__alt_data_end+0xff802a84>
 1003d44:	ac400007 	ldb	r17,0(r21)
 1003d48:	003a2806 	br	10025ec <__alt_data_end+0xff8025ec>
 1003d4c:	9080100c 	andi	r2,r18,64
 1003d50:	1000a826 	beq	r2,zero,1003ff4 <___vfprintf_internal_r+0x1b90>
 1003d54:	d8c02e17 	ldw	r3,184(sp)
 1003d58:	002d883a 	mov	r22,zero
 1003d5c:	1cc0000b 	ldhu	r19,0(r3)
 1003d60:	18c00104 	addi	r3,r3,4
 1003d64:	d8c02e15 	stw	r3,184(sp)
 1003d68:	003caf06 	br	1003028 <__alt_data_end+0xff803028>
 1003d6c:	d9002e17 	ldw	r4,184(sp)
 1003d70:	d9402a17 	ldw	r5,168(sp)
 1003d74:	002d883a 	mov	r22,zero
 1003d78:	20800104 	addi	r2,r4,4
 1003d7c:	24c00017 	ldw	r19,0(r4)
 1003d80:	283ebb0e 	bge	r5,zero,1003870 <__alt_data_end+0xff803870>
 1003d84:	003ef106 	br	100394c <__alt_data_end+0xff80394c>
 1003d88:	9080040c 	andi	r2,r18,16
 1003d8c:	1000921e 	bne	r2,zero,1003fd8 <___vfprintf_internal_r+0x1b74>
 1003d90:	9480100c 	andi	r18,r18,64
 1003d94:	90013926 	beq	r18,zero,100427c <___vfprintf_internal_r+0x1e18>
 1003d98:	d9402e17 	ldw	r5,184(sp)
 1003d9c:	d8c02f17 	ldw	r3,188(sp)
 1003da0:	28800017 	ldw	r2,0(r5)
 1003da4:	29400104 	addi	r5,r5,4
 1003da8:	d9402e15 	stw	r5,184(sp)
 1003dac:	10c0000d 	sth	r3,0(r2)
 1003db0:	0039e406 	br	1002544 <__alt_data_end+0xff802544>
 1003db4:	9080100c 	andi	r2,r18,64
 1003db8:	10008026 	beq	r2,zero,1003fbc <___vfprintf_internal_r+0x1b58>
 1003dbc:	d8802e17 	ldw	r2,184(sp)
 1003dc0:	14c0000f 	ldh	r19,0(r2)
 1003dc4:	10800104 	addi	r2,r2,4
 1003dc8:	d8802e15 	stw	r2,184(sp)
 1003dcc:	982dd7fa 	srai	r22,r19,31
 1003dd0:	b005883a 	mov	r2,r22
 1003dd4:	003af706 	br	10029b4 <__alt_data_end+0xff8029b4>
 1003dd8:	9080100c 	andi	r2,r18,64
 1003ddc:	d8002785 	stb	zero,158(sp)
 1003de0:	10008a1e 	bne	r2,zero,100400c <___vfprintf_internal_r+0x1ba8>
 1003de4:	d9002e17 	ldw	r4,184(sp)
 1003de8:	d9402a17 	ldw	r5,168(sp)
 1003dec:	002d883a 	mov	r22,zero
 1003df0:	20800104 	addi	r2,r4,4
 1003df4:	24c00017 	ldw	r19,0(r4)
 1003df8:	283e4b0e 	bge	r5,zero,1003728 <__alt_data_end+0xff803728>
 1003dfc:	9d86b03a 	or	r3,r19,r22
 1003e00:	d8802e15 	stw	r2,184(sp)
 1003e04:	183e4c1e 	bne	r3,zero,1003738 <__alt_data_end+0xff803738>
 1003e08:	0039883a 	mov	fp,zero
 1003e0c:	0005883a 	mov	r2,zero
 1003e10:	003d4006 	br	1003314 <__alt_data_end+0xff803314>
 1003e14:	01404074 	movhi	r5,257
 1003e18:	29486a84 	addi	r5,r5,8618
 1003e1c:	d9402c15 	stw	r5,176(sp)
 1003e20:	d9402c17 	ldw	r5,176(sp)
 1003e24:	1c47883a 	add	r3,r3,r17
 1003e28:	10800044 	addi	r2,r2,1
 1003e2c:	41400015 	stw	r5,0(r8)
 1003e30:	44400115 	stw	r17,4(r8)
 1003e34:	d8c02015 	stw	r3,128(sp)
 1003e38:	d8801f15 	stw	r2,124(sp)
 1003e3c:	010001c4 	movi	r4,7
 1003e40:	20bec816 	blt	r4,r2,1003964 <__alt_data_end+0xff803964>
 1003e44:	42000204 	addi	r8,r8,8
 1003e48:	003ecd06 	br	1003980 <__alt_data_end+0xff803980>
 1003e4c:	d9002a17 	ldw	r4,168(sp)
 1003e50:	d8002785 	stb	zero,158(sp)
 1003e54:	203d2d16 	blt	r4,zero,100330c <__alt_data_end+0xff80330c>
 1003e58:	00bfdfc4 	movi	r2,-129
 1003e5c:	90a4703a 	and	r18,r18,r2
 1003e60:	003a6106 	br	10027e8 <__alt_data_end+0xff8027e8>
 1003e64:	01004074 	movhi	r4,257
 1003e68:	21086a84 	addi	r4,r4,8618
 1003e6c:	d9002c15 	stw	r4,176(sp)
 1003e70:	003bea06 	br	1002e1c <__alt_data_end+0xff802e1c>
 1003e74:	d9002d17 	ldw	r4,180(sp)
 1003e78:	d9801e04 	addi	r6,sp,120
 1003e7c:	b80b883a 	mov	r5,r23
 1003e80:	1009c440 	call	1009c44 <__sprint_r>
 1003e84:	103a7b1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003e88:	d8c02017 	ldw	r3,128(sp)
 1003e8c:	da000404 	addi	r8,sp,16
 1003e90:	003d4106 	br	1003398 <__alt_data_end+0xff803398>
 1003e94:	d8801f17 	ldw	r2,124(sp)
 1003e98:	01404074 	movhi	r5,257
 1003e9c:	01000044 	movi	r4,1
 1003ea0:	18c00044 	addi	r3,r3,1
 1003ea4:	10800044 	addi	r2,r2,1
 1003ea8:	29486a04 	addi	r5,r5,8616
 1003eac:	41000115 	stw	r4,4(r8)
 1003eb0:	41400015 	stw	r5,0(r8)
 1003eb4:	d8c02015 	stw	r3,128(sp)
 1003eb8:	d8801f15 	stw	r2,124(sp)
 1003ebc:	010001c4 	movi	r4,7
 1003ec0:	20805c16 	blt	r4,r2,1004034 <___vfprintf_internal_r+0x1bd0>
 1003ec4:	42000204 	addi	r8,r8,8
 1003ec8:	8800041e 	bne	r17,zero,1003edc <___vfprintf_internal_r+0x1a78>
 1003ecc:	d8803317 	ldw	r2,204(sp)
 1003ed0:	1000021e 	bne	r2,zero,1003edc <___vfprintf_internal_r+0x1a78>
 1003ed4:	9080004c 	andi	r2,r18,1
 1003ed8:	103be726 	beq	r2,zero,1002e78 <__alt_data_end+0xff802e78>
 1003edc:	d9003717 	ldw	r4,220(sp)
 1003ee0:	d8801f17 	ldw	r2,124(sp)
 1003ee4:	d9403417 	ldw	r5,208(sp)
 1003ee8:	20c7883a 	add	r3,r4,r3
 1003eec:	10800044 	addi	r2,r2,1
 1003ef0:	41000115 	stw	r4,4(r8)
 1003ef4:	41400015 	stw	r5,0(r8)
 1003ef8:	d8c02015 	stw	r3,128(sp)
 1003efc:	d8801f15 	stw	r2,124(sp)
 1003f00:	010001c4 	movi	r4,7
 1003f04:	20812116 	blt	r4,r2,100438c <___vfprintf_internal_r+0x1f28>
 1003f08:	42000204 	addi	r8,r8,8
 1003f0c:	0463c83a 	sub	r17,zero,r17
 1003f10:	0440730e 	bge	zero,r17,10040e0 <___vfprintf_internal_r+0x1c7c>
 1003f14:	05800404 	movi	r22,16
 1003f18:	b440860e 	bge	r22,r17,1004134 <___vfprintf_internal_r+0x1cd0>
 1003f1c:	01404074 	movhi	r5,257
 1003f20:	29486a84 	addi	r5,r5,8618
 1003f24:	d9402c15 	stw	r5,176(sp)
 1003f28:	070001c4 	movi	fp,7
 1003f2c:	dcc02d17 	ldw	r19,180(sp)
 1003f30:	00000306 	br	1003f40 <___vfprintf_internal_r+0x1adc>
 1003f34:	42000204 	addi	r8,r8,8
 1003f38:	8c7ffc04 	addi	r17,r17,-16
 1003f3c:	b440800e 	bge	r22,r17,1004140 <___vfprintf_internal_r+0x1cdc>
 1003f40:	18c00404 	addi	r3,r3,16
 1003f44:	10800044 	addi	r2,r2,1
 1003f48:	45000015 	stw	r20,0(r8)
 1003f4c:	45800115 	stw	r22,4(r8)
 1003f50:	d8c02015 	stw	r3,128(sp)
 1003f54:	d8801f15 	stw	r2,124(sp)
 1003f58:	e0bff60e 	bge	fp,r2,1003f34 <__alt_data_end+0xff803f34>
 1003f5c:	d9801e04 	addi	r6,sp,120
 1003f60:	b80b883a 	mov	r5,r23
 1003f64:	9809883a 	mov	r4,r19
 1003f68:	1009c440 	call	1009c44 <__sprint_r>
 1003f6c:	103a411e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1003f70:	d8c02017 	ldw	r3,128(sp)
 1003f74:	d8801f17 	ldw	r2,124(sp)
 1003f78:	da000404 	addi	r8,sp,16
 1003f7c:	003fee06 	br	1003f38 <__alt_data_end+0xff803f38>
 1003f80:	00bfffc4 	movi	r2,-1
 1003f84:	003a3f06 	br	1002884 <__alt_data_end+0xff802884>
 1003f88:	008011c4 	movi	r2,71
 1003f8c:	1440b816 	blt	r2,r17,1004270 <___vfprintf_internal_r+0x1e0c>
 1003f90:	04004074 	movhi	r16,257
 1003f94:	84085c04 	addi	r16,r16,8560
 1003f98:	00c000c4 	movi	r3,3
 1003f9c:	00bfdfc4 	movi	r2,-129
 1003fa0:	d8c02915 	stw	r3,164(sp)
 1003fa4:	90a4703a 	and	r18,r18,r2
 1003fa8:	df002783 	ldbu	fp,158(sp)
 1003fac:	d8c02b15 	stw	r3,172(sp)
 1003fb0:	d8002a15 	stw	zero,168(sp)
 1003fb4:	d8003215 	stw	zero,200(sp)
 1003fb8:	003b0706 	br	1002bd8 <__alt_data_end+0xff802bd8>
 1003fbc:	d8c02e17 	ldw	r3,184(sp)
 1003fc0:	1cc00017 	ldw	r19,0(r3)
 1003fc4:	18c00104 	addi	r3,r3,4
 1003fc8:	d8c02e15 	stw	r3,184(sp)
 1003fcc:	982dd7fa 	srai	r22,r19,31
 1003fd0:	b005883a 	mov	r2,r22
 1003fd4:	003a7706 	br	10029b4 <__alt_data_end+0xff8029b4>
 1003fd8:	d8c02e17 	ldw	r3,184(sp)
 1003fdc:	d9002f17 	ldw	r4,188(sp)
 1003fe0:	18800017 	ldw	r2,0(r3)
 1003fe4:	18c00104 	addi	r3,r3,4
 1003fe8:	d8c02e15 	stw	r3,184(sp)
 1003fec:	11000015 	stw	r4,0(r2)
 1003ff0:	00395406 	br	1002544 <__alt_data_end+0xff802544>
 1003ff4:	d9002e17 	ldw	r4,184(sp)
 1003ff8:	002d883a 	mov	r22,zero
 1003ffc:	24c00017 	ldw	r19,0(r4)
 1004000:	21000104 	addi	r4,r4,4
 1004004:	d9002e15 	stw	r4,184(sp)
 1004008:	003c0706 	br	1003028 <__alt_data_end+0xff803028>
 100400c:	d9402e17 	ldw	r5,184(sp)
 1004010:	d8c02a17 	ldw	r3,168(sp)
 1004014:	002d883a 	mov	r22,zero
 1004018:	28800104 	addi	r2,r5,4
 100401c:	2cc0000b 	ldhu	r19,0(r5)
 1004020:	183dc10e 	bge	r3,zero,1003728 <__alt_data_end+0xff803728>
 1004024:	003f7506 	br	1003dfc <__alt_data_end+0xff803dfc>
 1004028:	04004074 	movhi	r16,257
 100402c:	84085a04 	addi	r16,r16,8552
 1004030:	003aa706 	br	1002ad0 <__alt_data_end+0xff802ad0>
 1004034:	d9002d17 	ldw	r4,180(sp)
 1004038:	d9801e04 	addi	r6,sp,120
 100403c:	b80b883a 	mov	r5,r23
 1004040:	1009c440 	call	1009c44 <__sprint_r>
 1004044:	103a0b1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1004048:	dc402617 	ldw	r17,152(sp)
 100404c:	d8c02017 	ldw	r3,128(sp)
 1004050:	da000404 	addi	r8,sp,16
 1004054:	003f9c06 	br	1003ec8 <__alt_data_end+0xff803ec8>
 1004058:	ac400043 	ldbu	r17,1(r21)
 100405c:	84000814 	ori	r16,r16,32
 1004060:	ad400044 	addi	r21,r21,1
 1004064:	8c403fcc 	andi	r17,r17,255
 1004068:	8c40201c 	xori	r17,r17,128
 100406c:	8c7fe004 	addi	r17,r17,-128
 1004070:	00395e06 	br	10025ec <__alt_data_end+0xff8025ec>
 1004074:	d8c02e15 	stw	r3,184(sp)
 1004078:	0039883a 	mov	fp,zero
 100407c:	003e3506 	br	1003954 <__alt_data_end+0xff803954>
 1004080:	d9002d17 	ldw	r4,180(sp)
 1004084:	d9801e04 	addi	r6,sp,120
 1004088:	b80b883a 	mov	r5,r23
 100408c:	1009c440 	call	1009c44 <__sprint_r>
 1004090:	1039f81e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1004094:	d8c02017 	ldw	r3,128(sp)
 1004098:	da000404 	addi	r8,sp,16
 100409c:	003cd006 	br	10033e0 <__alt_data_end+0xff8033e0>
 10040a0:	8009883a 	mov	r4,r16
 10040a4:	df003d15 	stw	fp,244(sp)
 10040a8:	10023cc0 	call	10023cc <strlen>
 10040ac:	d8802b15 	stw	r2,172(sp)
 10040b0:	da003d17 	ldw	r8,244(sp)
 10040b4:	103c200e 	bge	r2,zero,1003138 <__alt_data_end+0xff803138>
 10040b8:	0005883a 	mov	r2,zero
 10040bc:	003c1e06 	br	1003138 <__alt_data_end+0xff803138>
 10040c0:	d9002d17 	ldw	r4,180(sp)
 10040c4:	d9801e04 	addi	r6,sp,120
 10040c8:	b80b883a 	mov	r5,r23
 10040cc:	1009c440 	call	1009c44 <__sprint_r>
 10040d0:	1039e81e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 10040d4:	d8c02017 	ldw	r3,128(sp)
 10040d8:	d8801f17 	ldw	r2,124(sp)
 10040dc:	da000404 	addi	r8,sp,16
 10040e0:	d9403317 	ldw	r5,204(sp)
 10040e4:	10800044 	addi	r2,r2,1
 10040e8:	44000015 	stw	r16,0(r8)
 10040ec:	28c7883a 	add	r3,r5,r3
 10040f0:	003b5b06 	br	1002e60 <__alt_data_end+0xff802e60>
 10040f4:	01004074 	movhi	r4,257
 10040f8:	21086e84 	addi	r4,r4,8634
 10040fc:	d9003515 	stw	r4,212(sp)
 1004100:	003af206 	br	1002ccc <__alt_data_end+0xff802ccc>
 1004104:	013fffc4 	movi	r4,-1
 1004108:	003a0806 	br	100292c <__alt_data_end+0xff80292c>
 100410c:	0023883a 	mov	r17,zero
 1004110:	003d9d06 	br	1003788 <__alt_data_end+0xff803788>
 1004114:	d9002d17 	ldw	r4,180(sp)
 1004118:	d9801e04 	addi	r6,sp,120
 100411c:	b80b883a 	mov	r5,r23
 1004120:	1009c440 	call	1009c44 <__sprint_r>
 1004124:	1039d31e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1004128:	d8c02017 	ldw	r3,128(sp)
 100412c:	da000404 	addi	r8,sp,16
 1004130:	003d9406 	br	1003784 <__alt_data_end+0xff803784>
 1004134:	01004074 	movhi	r4,257
 1004138:	21086a84 	addi	r4,r4,8618
 100413c:	d9002c15 	stw	r4,176(sp)
 1004140:	d9002c17 	ldw	r4,176(sp)
 1004144:	1c47883a 	add	r3,r3,r17
 1004148:	10800044 	addi	r2,r2,1
 100414c:	41000015 	stw	r4,0(r8)
 1004150:	44400115 	stw	r17,4(r8)
 1004154:	d8c02015 	stw	r3,128(sp)
 1004158:	d8801f15 	stw	r2,124(sp)
 100415c:	010001c4 	movi	r4,7
 1004160:	20bfd716 	blt	r4,r2,10040c0 <__alt_data_end+0xff8040c0>
 1004164:	42000204 	addi	r8,r8,8
 1004168:	003fdd06 	br	10040e0 <__alt_data_end+0xff8040e0>
 100416c:	d9002d17 	ldw	r4,180(sp)
 1004170:	d9801e04 	addi	r6,sp,120
 1004174:	b80b883a 	mov	r5,r23
 1004178:	1009c440 	call	1009c44 <__sprint_r>
 100417c:	1039bd1e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1004180:	d8802617 	ldw	r2,152(sp)
 1004184:	d8c02017 	ldw	r3,128(sp)
 1004188:	da000404 	addi	r8,sp,16
 100418c:	003e1006 	br	10039d0 <__alt_data_end+0xff8039d0>
 1004190:	00800044 	movi	r2,1
 1004194:	10803fcc 	andi	r2,r2,255
 1004198:	00c00044 	movi	r3,1
 100419c:	10fa0d26 	beq	r2,r3,10029d4 <__alt_data_end+0xff8029d4>
 10041a0:	00c00084 	movi	r3,2
 10041a4:	10fbaf26 	beq	r2,r3,1003064 <__alt_data_end+0xff803064>
 10041a8:	003a6d06 	br	1002b60 <__alt_data_end+0xff802b60>
 10041ac:	01004074 	movhi	r4,257
 10041b0:	21086e84 	addi	r4,r4,8634
 10041b4:	d9003515 	stw	r4,212(sp)
 10041b8:	003b5406 	br	1002f0c <__alt_data_end+0xff802f0c>
 10041bc:	d8802a17 	ldw	r2,168(sp)
 10041c0:	00c00184 	movi	r3,6
 10041c4:	1880012e 	bgeu	r3,r2,10041cc <___vfprintf_internal_r+0x1d68>
 10041c8:	1805883a 	mov	r2,r3
 10041cc:	d8802b15 	stw	r2,172(sp)
 10041d0:	1000ef16 	blt	r2,zero,1004590 <___vfprintf_internal_r+0x212c>
 10041d4:	04004074 	movhi	r16,257
 10041d8:	d8802915 	stw	r2,164(sp)
 10041dc:	dcc02e15 	stw	r19,184(sp)
 10041e0:	d8002a15 	stw	zero,168(sp)
 10041e4:	d8003215 	stw	zero,200(sp)
 10041e8:	84086804 	addi	r16,r16,8608
 10041ec:	0039883a 	mov	fp,zero
 10041f0:	003a8006 	br	1002bf4 <__alt_data_end+0xff802bf4>
 10041f4:	0021883a 	mov	r16,zero
 10041f8:	003e0706 	br	1003a18 <__alt_data_end+0xff803a18>
 10041fc:	d9002d17 	ldw	r4,180(sp)
 1004200:	d9801e04 	addi	r6,sp,120
 1004204:	b80b883a 	mov	r5,r23
 1004208:	1009c440 	call	1009c44 <__sprint_r>
 100420c:	1039991e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 1004210:	d8802617 	ldw	r2,152(sp)
 1004214:	d9403317 	ldw	r5,204(sp)
 1004218:	d8c02017 	ldw	r3,128(sp)
 100421c:	da000404 	addi	r8,sp,16
 1004220:	2885c83a 	sub	r2,r5,r2
 1004224:	003dfb06 	br	1003a14 <__alt_data_end+0xff803a14>
 1004228:	9080004c 	andi	r2,r18,1
 100422c:	103e8f1e 	bne	r2,zero,1003c6c <__alt_data_end+0xff803c6c>
 1004230:	d8802117 	ldw	r2,132(sp)
 1004234:	003e9e06 	br	1003cb0 <__alt_data_end+0xff803cb0>
 1004238:	1025883a 	mov	r18,r2
 100423c:	0039883a 	mov	fp,zero
 1004240:	00800084 	movi	r2,2
 1004244:	003fd306 	br	1004194 <__alt_data_end+0xff804194>
 1004248:	07000b44 	movi	fp,45
 100424c:	df002785 	stb	fp,158(sp)
 1004250:	003a1b06 	br	1002ac0 <__alt_data_end+0xff802ac0>
 1004254:	00c00b44 	movi	r3,45
 1004258:	d8c02785 	stb	r3,158(sp)
 100425c:	d8802915 	stw	r2,164(sp)
 1004260:	dc802c17 	ldw	r18,176(sp)
 1004264:	d8002a15 	stw	zero,168(sp)
 1004268:	07000b44 	movi	fp,45
 100426c:	003a5e06 	br	1002be8 <__alt_data_end+0xff802be8>
 1004270:	04004074 	movhi	r16,257
 1004274:	84085d04 	addi	r16,r16,8564
 1004278:	003f4706 	br	1003f98 <__alt_data_end+0xff803f98>
 100427c:	d9002e17 	ldw	r4,184(sp)
 1004280:	d9402f17 	ldw	r5,188(sp)
 1004284:	20800017 	ldw	r2,0(r4)
 1004288:	21000104 	addi	r4,r4,4
 100428c:	d9002e15 	stw	r4,184(sp)
 1004290:	11400015 	stw	r5,0(r2)
 1004294:	0038ab06 	br	1002544 <__alt_data_end+0xff802544>
 1004298:	dd802617 	ldw	r22,152(sp)
 100429c:	00bfff44 	movi	r2,-3
 10042a0:	b0801c16 	blt	r22,r2,1004314 <___vfprintf_internal_r+0x1eb0>
 10042a4:	d9402a17 	ldw	r5,168(sp)
 10042a8:	2d801a16 	blt	r5,r22,1004314 <___vfprintf_internal_r+0x1eb0>
 10042ac:	dd803215 	stw	r22,200(sp)
 10042b0:	003e8906 	br	1003cd8 <__alt_data_end+0xff803cd8>
 10042b4:	01004074 	movhi	r4,257
 10042b8:	21086a84 	addi	r4,r4,8618
 10042bc:	d9002c15 	stw	r4,176(sp)
 10042c0:	003c9106 	br	1003508 <__alt_data_end+0xff803508>
 10042c4:	e005883a 	mov	r2,fp
 10042c8:	003e7906 	br	1003cb0 <__alt_data_end+0xff803cb0>
 10042cc:	d9002a17 	ldw	r4,168(sp)
 10042d0:	df002783 	ldbu	fp,158(sp)
 10042d4:	dcc02e15 	stw	r19,184(sp)
 10042d8:	d9002915 	stw	r4,164(sp)
 10042dc:	d9002b15 	stw	r4,172(sp)
 10042e0:	d8002a15 	stw	zero,168(sp)
 10042e4:	d8003215 	stw	zero,200(sp)
 10042e8:	003a3b06 	br	1002bd8 <__alt_data_end+0xff802bd8>
 10042ec:	9080004c 	andi	r2,r18,1
 10042f0:	0039883a 	mov	fp,zero
 10042f4:	10000426 	beq	r2,zero,1004308 <___vfprintf_internal_r+0x1ea4>
 10042f8:	00800c04 	movi	r2,48
 10042fc:	dc001dc4 	addi	r16,sp,119
 1004300:	d8801dc5 	stb	r2,119(sp)
 1004304:	003b6406 	br	1003098 <__alt_data_end+0xff803098>
 1004308:	d8002b15 	stw	zero,172(sp)
 100430c:	dc001e04 	addi	r16,sp,120
 1004310:	003a2b06 	br	1002bc0 <__alt_data_end+0xff802bc0>
 1004314:	8c7fff84 	addi	r17,r17,-2
 1004318:	b5bfffc4 	addi	r22,r22,-1
 100431c:	dd802615 	stw	r22,152(sp)
 1004320:	dc4022c5 	stb	r17,139(sp)
 1004324:	b000bf16 	blt	r22,zero,1004624 <___vfprintf_internal_r+0x21c0>
 1004328:	00800ac4 	movi	r2,43
 100432c:	d8802305 	stb	r2,140(sp)
 1004330:	00800244 	movi	r2,9
 1004334:	15807016 	blt	r2,r22,10044f8 <___vfprintf_internal_r+0x2094>
 1004338:	00800c04 	movi	r2,48
 100433c:	b5800c04 	addi	r22,r22,48
 1004340:	d8802345 	stb	r2,141(sp)
 1004344:	dd802385 	stb	r22,142(sp)
 1004348:	d88023c4 	addi	r2,sp,143
 100434c:	df0022c4 	addi	fp,sp,139
 1004350:	d8c03317 	ldw	r3,204(sp)
 1004354:	1739c83a 	sub	fp,r2,fp
 1004358:	d9003317 	ldw	r4,204(sp)
 100435c:	e0c7883a 	add	r3,fp,r3
 1004360:	df003a15 	stw	fp,232(sp)
 1004364:	d8c02b15 	stw	r3,172(sp)
 1004368:	00800044 	movi	r2,1
 100436c:	1100b30e 	bge	r2,r4,100463c <___vfprintf_internal_r+0x21d8>
 1004370:	d8c02b17 	ldw	r3,172(sp)
 1004374:	18c00044 	addi	r3,r3,1
 1004378:	d8c02b15 	stw	r3,172(sp)
 100437c:	1805883a 	mov	r2,r3
 1004380:	1800ac16 	blt	r3,zero,1004634 <___vfprintf_internal_r+0x21d0>
 1004384:	d8003215 	stw	zero,200(sp)
 1004388:	003e5d06 	br	1003d00 <__alt_data_end+0xff803d00>
 100438c:	d9002d17 	ldw	r4,180(sp)
 1004390:	d9801e04 	addi	r6,sp,120
 1004394:	b80b883a 	mov	r5,r23
 1004398:	1009c440 	call	1009c44 <__sprint_r>
 100439c:	1039351e 	bne	r2,zero,1002874 <__alt_data_end+0xff802874>
 10043a0:	dc402617 	ldw	r17,152(sp)
 10043a4:	d8c02017 	ldw	r3,128(sp)
 10043a8:	d8801f17 	ldw	r2,124(sp)
 10043ac:	da000404 	addi	r8,sp,16
 10043b0:	003ed606 	br	1003f0c <__alt_data_end+0xff803f0c>
 10043b4:	182b883a 	mov	r21,r3
 10043b8:	d8002a15 	stw	zero,168(sp)
 10043bc:	00388c06 	br	10025f0 <__alt_data_end+0xff8025f0>
 10043c0:	d8802a17 	ldw	r2,168(sp)
 10043c4:	103e071e 	bne	r2,zero,1003be4 <__alt_data_end+0xff803be4>
 10043c8:	dc002a15 	stw	r16,168(sp)
 10043cc:	003e0506 	br	1003be4 <__alt_data_end+0xff803be4>
 10043d0:	d9002a17 	ldw	r4,168(sp)
 10043d4:	20c00044 	addi	r3,r4,1
 10043d8:	003e0f06 	br	1003c18 <__alt_data_end+0xff803c18>
 10043dc:	01400184 	movi	r5,6
 10043e0:	d9402a15 	stw	r5,168(sp)
 10043e4:	003dff06 	br	1003be4 <__alt_data_end+0xff803be4>
 10043e8:	d8802104 	addi	r2,sp,132
 10043ec:	d8800315 	stw	r2,12(sp)
 10043f0:	d8802504 	addi	r2,sp,148
 10043f4:	d8800215 	stw	r2,8(sp)
 10043f8:	d8802604 	addi	r2,sp,152
 10043fc:	d8800115 	stw	r2,4(sp)
 1004400:	d8802a17 	ldw	r2,168(sp)
 1004404:	d9403617 	ldw	r5,216(sp)
 1004408:	d9002d17 	ldw	r4,180(sp)
 100440c:	d8800015 	stw	r2,0(sp)
 1004410:	01c000c4 	movi	r7,3
 1004414:	980d883a 	mov	r6,r19
 1004418:	da003d15 	stw	r8,244(sp)
 100441c:	1004b940 	call	1004b94 <_dtoa_r>
 1004420:	d8c02a17 	ldw	r3,168(sp)
 1004424:	da003d17 	ldw	r8,244(sp)
 1004428:	1021883a 	mov	r16,r2
 100442c:	10f9883a 	add	fp,r2,r3
 1004430:	81000007 	ldb	r4,0(r16)
 1004434:	00800c04 	movi	r2,48
 1004438:	20805e26 	beq	r4,r2,10045b4 <___vfprintf_internal_r+0x2150>
 100443c:	d8c02617 	ldw	r3,152(sp)
 1004440:	e0f9883a 	add	fp,fp,r3
 1004444:	003e0a06 	br	1003c70 <__alt_data_end+0xff803c70>
 1004448:	00c00b44 	movi	r3,45
 100444c:	24e0003c 	xorhi	r19,r4,32768
 1004450:	d8c02905 	stb	r3,164(sp)
 1004454:	003de906 	br	1003bfc <__alt_data_end+0xff803bfc>
 1004458:	d8c03217 	ldw	r3,200(sp)
 100445c:	00c07a0e 	bge	zero,r3,1004648 <___vfprintf_internal_r+0x21e4>
 1004460:	00800044 	movi	r2,1
 1004464:	d9003317 	ldw	r4,204(sp)
 1004468:	1105883a 	add	r2,r2,r4
 100446c:	d8802b15 	stw	r2,172(sp)
 1004470:	10004e16 	blt	r2,zero,10045ac <___vfprintf_internal_r+0x2148>
 1004474:	044019c4 	movi	r17,103
 1004478:	003e2106 	br	1003d00 <__alt_data_end+0xff803d00>
 100447c:	d9002a17 	ldw	r4,168(sp)
 1004480:	d8802104 	addi	r2,sp,132
 1004484:	d8800315 	stw	r2,12(sp)
 1004488:	d9000015 	stw	r4,0(sp)
 100448c:	d8802504 	addi	r2,sp,148
 1004490:	d9403617 	ldw	r5,216(sp)
 1004494:	d9002d17 	ldw	r4,180(sp)
 1004498:	d8800215 	stw	r2,8(sp)
 100449c:	d8802604 	addi	r2,sp,152
 10044a0:	d8800115 	stw	r2,4(sp)
 10044a4:	01c000c4 	movi	r7,3
 10044a8:	980d883a 	mov	r6,r19
 10044ac:	da003d15 	stw	r8,244(sp)
 10044b0:	1004b940 	call	1004b94 <_dtoa_r>
 10044b4:	d8c02a17 	ldw	r3,168(sp)
 10044b8:	da003d17 	ldw	r8,244(sp)
 10044bc:	1021883a 	mov	r16,r2
 10044c0:	00801184 	movi	r2,70
 10044c4:	80f9883a 	add	fp,r16,r3
 10044c8:	88bfd926 	beq	r17,r2,1004430 <__alt_data_end+0xff804430>
 10044cc:	003de806 	br	1003c70 <__alt_data_end+0xff803c70>
 10044d0:	d9002a17 	ldw	r4,168(sp)
 10044d4:	00c04d0e 	bge	zero,r3,100460c <___vfprintf_internal_r+0x21a8>
 10044d8:	2000441e 	bne	r4,zero,10045ec <___vfprintf_internal_r+0x2188>
 10044dc:	9480004c 	andi	r18,r18,1
 10044e0:	9000421e 	bne	r18,zero,10045ec <___vfprintf_internal_r+0x2188>
 10044e4:	1805883a 	mov	r2,r3
 10044e8:	18006f16 	blt	r3,zero,10046a8 <___vfprintf_internal_r+0x2244>
 10044ec:	d8c03217 	ldw	r3,200(sp)
 10044f0:	d8c02b15 	stw	r3,172(sp)
 10044f4:	003e0206 	br	1003d00 <__alt_data_end+0xff803d00>
 10044f8:	df0022c4 	addi	fp,sp,139
 10044fc:	dc002a15 	stw	r16,168(sp)
 1004500:	4027883a 	mov	r19,r8
 1004504:	e021883a 	mov	r16,fp
 1004508:	b009883a 	mov	r4,r22
 100450c:	01400284 	movi	r5,10
 1004510:	100c7d00 	call	100c7d0 <__modsi3>
 1004514:	10800c04 	addi	r2,r2,48
 1004518:	843fffc4 	addi	r16,r16,-1
 100451c:	b009883a 	mov	r4,r22
 1004520:	01400284 	movi	r5,10
 1004524:	80800005 	stb	r2,0(r16)
 1004528:	100c74c0 	call	100c74c <__divsi3>
 100452c:	102d883a 	mov	r22,r2
 1004530:	00800244 	movi	r2,9
 1004534:	15bff416 	blt	r2,r22,1004508 <__alt_data_end+0xff804508>
 1004538:	9811883a 	mov	r8,r19
 100453c:	b0800c04 	addi	r2,r22,48
 1004540:	8027883a 	mov	r19,r16
 1004544:	997fffc4 	addi	r5,r19,-1
 1004548:	98bfffc5 	stb	r2,-1(r19)
 100454c:	dc002a17 	ldw	r16,168(sp)
 1004550:	2f006d2e 	bgeu	r5,fp,1004708 <___vfprintf_internal_r+0x22a4>
 1004554:	d9c02384 	addi	r7,sp,142
 1004558:	3ccfc83a 	sub	r7,r7,r19
 100455c:	d9002344 	addi	r4,sp,141
 1004560:	e1cf883a 	add	r7,fp,r7
 1004564:	00000106 	br	100456c <___vfprintf_internal_r+0x2108>
 1004568:	28800003 	ldbu	r2,0(r5)
 100456c:	20800005 	stb	r2,0(r4)
 1004570:	21000044 	addi	r4,r4,1
 1004574:	29400044 	addi	r5,r5,1
 1004578:	393ffb1e 	bne	r7,r4,1004568 <__alt_data_end+0xff804568>
 100457c:	d8802304 	addi	r2,sp,140
 1004580:	14c5c83a 	sub	r2,r2,r19
 1004584:	d8c02344 	addi	r3,sp,141
 1004588:	1885883a 	add	r2,r3,r2
 100458c:	003f7006 	br	1004350 <__alt_data_end+0xff804350>
 1004590:	0005883a 	mov	r2,zero
 1004594:	003f0f06 	br	10041d4 <__alt_data_end+0xff8041d4>
 1004598:	d8c03217 	ldw	r3,200(sp)
 100459c:	18c00044 	addi	r3,r3,1
 10045a0:	d8c02b15 	stw	r3,172(sp)
 10045a4:	1805883a 	mov	r2,r3
 10045a8:	183fb20e 	bge	r3,zero,1004474 <__alt_data_end+0xff804474>
 10045ac:	0005883a 	mov	r2,zero
 10045b0:	003fb006 	br	1004474 <__alt_data_end+0xff804474>
 10045b4:	d9003617 	ldw	r4,216(sp)
 10045b8:	000d883a 	mov	r6,zero
 10045bc:	000f883a 	mov	r7,zero
 10045c0:	980b883a 	mov	r5,r19
 10045c4:	d8c03c15 	stw	r3,240(sp)
 10045c8:	da003d15 	stw	r8,244(sp)
 10045cc:	100dba40 	call	100dba4 <__eqdf2>
 10045d0:	d8c03c17 	ldw	r3,240(sp)
 10045d4:	da003d17 	ldw	r8,244(sp)
 10045d8:	103f9826 	beq	r2,zero,100443c <__alt_data_end+0xff80443c>
 10045dc:	00800044 	movi	r2,1
 10045e0:	10c7c83a 	sub	r3,r2,r3
 10045e4:	d8c02615 	stw	r3,152(sp)
 10045e8:	003f9506 	br	1004440 <__alt_data_end+0xff804440>
 10045ec:	d9002a17 	ldw	r4,168(sp)
 10045f0:	d8c03217 	ldw	r3,200(sp)
 10045f4:	20800044 	addi	r2,r4,1
 10045f8:	1885883a 	add	r2,r3,r2
 10045fc:	d8802b15 	stw	r2,172(sp)
 1004600:	103dbf0e 	bge	r2,zero,1003d00 <__alt_data_end+0xff803d00>
 1004604:	0005883a 	mov	r2,zero
 1004608:	003dbd06 	br	1003d00 <__alt_data_end+0xff803d00>
 100460c:	2000201e 	bne	r4,zero,1004690 <___vfprintf_internal_r+0x222c>
 1004610:	9480004c 	andi	r18,r18,1
 1004614:	90001e1e 	bne	r18,zero,1004690 <___vfprintf_internal_r+0x222c>
 1004618:	00800044 	movi	r2,1
 100461c:	d8802b15 	stw	r2,172(sp)
 1004620:	003db706 	br	1003d00 <__alt_data_end+0xff803d00>
 1004624:	00800b44 	movi	r2,45
 1004628:	05adc83a 	sub	r22,zero,r22
 100462c:	d8802305 	stb	r2,140(sp)
 1004630:	003f3f06 	br	1004330 <__alt_data_end+0xff804330>
 1004634:	0005883a 	mov	r2,zero
 1004638:	003f5206 	br	1004384 <__alt_data_end+0xff804384>
 100463c:	90a4703a 	and	r18,r18,r2
 1004640:	903f4e26 	beq	r18,zero,100437c <__alt_data_end+0xff80437c>
 1004644:	003f4a06 	br	1004370 <__alt_data_end+0xff804370>
 1004648:	00800084 	movi	r2,2
 100464c:	10c5c83a 	sub	r2,r2,r3
 1004650:	003f8406 	br	1004464 <__alt_data_end+0xff804464>
 1004654:	d9402e17 	ldw	r5,184(sp)
 1004658:	d9002e17 	ldw	r4,184(sp)
 100465c:	ac400043 	ldbu	r17,1(r21)
 1004660:	29400017 	ldw	r5,0(r5)
 1004664:	20800104 	addi	r2,r4,4
 1004668:	d8802e15 	stw	r2,184(sp)
 100466c:	d9402a15 	stw	r5,168(sp)
 1004670:	182b883a 	mov	r21,r3
 1004674:	283e7b0e 	bge	r5,zero,1004064 <__alt_data_end+0xff804064>
 1004678:	8c403fcc 	andi	r17,r17,255
 100467c:	017fffc4 	movi	r5,-1
 1004680:	8c40201c 	xori	r17,r17,128
 1004684:	d9402a15 	stw	r5,168(sp)
 1004688:	8c7fe004 	addi	r17,r17,-128
 100468c:	0037d706 	br	10025ec <__alt_data_end+0xff8025ec>
 1004690:	d8c02a17 	ldw	r3,168(sp)
 1004694:	18c00084 	addi	r3,r3,2
 1004698:	d8c02b15 	stw	r3,172(sp)
 100469c:	1805883a 	mov	r2,r3
 10046a0:	183d970e 	bge	r3,zero,1003d00 <__alt_data_end+0xff803d00>
 10046a4:	003fd706 	br	1004604 <__alt_data_end+0xff804604>
 10046a8:	0005883a 	mov	r2,zero
 10046ac:	003f8f06 	br	10044ec <__alt_data_end+0xff8044ec>
 10046b0:	9080004c 	andi	r2,r18,1
 10046b4:	103f821e 	bne	r2,zero,10044c0 <__alt_data_end+0xff8044c0>
 10046b8:	d8802117 	ldw	r2,132(sp)
 10046bc:	1405c83a 	sub	r2,r2,r16
 10046c0:	d8803315 	stw	r2,204(sp)
 10046c4:	b47ef426 	beq	r22,r17,1004298 <__alt_data_end+0xff804298>
 10046c8:	dd802617 	ldw	r22,152(sp)
 10046cc:	003f1206 	br	1004318 <__alt_data_end+0xff804318>
 10046d0:	d8c02b03 	ldbu	r3,172(sp)
 10046d4:	d8c02785 	stb	r3,158(sp)
 10046d8:	0038df06 	br	1002a58 <__alt_data_end+0xff802a58>
 10046dc:	d8c02b03 	ldbu	r3,172(sp)
 10046e0:	d8c02785 	stb	r3,158(sp)
 10046e4:	0038aa06 	br	1002990 <__alt_data_end+0xff802990>
 10046e8:	d8c02b03 	ldbu	r3,172(sp)
 10046ec:	d8c02785 	stb	r3,158(sp)
 10046f0:	003a4306 	br	1003000 <__alt_data_end+0xff803000>
 10046f4:	d8c02b03 	ldbu	r3,172(sp)
 10046f8:	d8c02785 	stb	r3,158(sp)
 10046fc:	003af506 	br	10032d4 <__alt_data_end+0xff8032d4>
 1004700:	0005883a 	mov	r2,zero
 1004704:	003d7b06 	br	1003cf4 <__alt_data_end+0xff803cf4>
 1004708:	d8802344 	addi	r2,sp,141
 100470c:	003f1006 	br	1004350 <__alt_data_end+0xff804350>
 1004710:	d8c02b03 	ldbu	r3,172(sp)
 1004714:	d8c02785 	stb	r3,158(sp)
 1004718:	0038fd06 	br	1002b10 <__alt_data_end+0xff802b10>
 100471c:	d8c02b03 	ldbu	r3,172(sp)
 1004720:	d8c02785 	stb	r3,158(sp)
 1004724:	003a9706 	br	1003184 <__alt_data_end+0xff803184>
 1004728:	d8c02b03 	ldbu	r3,172(sp)
 100472c:	d8c02785 	stb	r3,158(sp)
 1004730:	003a1806 	br	1002f94 <__alt_data_end+0xff802f94>
 1004734:	d8c02b03 	ldbu	r3,172(sp)
 1004738:	d8c02785 	stb	r3,158(sp)
 100473c:	003abe06 	br	1003238 <__alt_data_end+0xff803238>

01004740 <__vfprintf_internal>:
 1004740:	00804074 	movhi	r2,257
 1004744:	108fc504 	addi	r2,r2,16148
 1004748:	300f883a 	mov	r7,r6
 100474c:	280d883a 	mov	r6,r5
 1004750:	200b883a 	mov	r5,r4
 1004754:	11000017 	ldw	r4,0(r2)
 1004758:	10024641 	jmpi	1002464 <___vfprintf_internal_r>

0100475c <__sbprintf>:
 100475c:	2880030b 	ldhu	r2,12(r5)
 1004760:	2ac01917 	ldw	r11,100(r5)
 1004764:	2a80038b 	ldhu	r10,14(r5)
 1004768:	2a400717 	ldw	r9,28(r5)
 100476c:	2a000917 	ldw	r8,36(r5)
 1004770:	defee204 	addi	sp,sp,-1144
 1004774:	00c10004 	movi	r3,1024
 1004778:	dc011a15 	stw	r16,1128(sp)
 100477c:	10bfff4c 	andi	r2,r2,65533
 1004780:	2821883a 	mov	r16,r5
 1004784:	d8cb883a 	add	r5,sp,r3
 1004788:	dc811c15 	stw	r18,1136(sp)
 100478c:	dc411b15 	stw	r17,1132(sp)
 1004790:	dfc11d15 	stw	ra,1140(sp)
 1004794:	2025883a 	mov	r18,r4
 1004798:	d881030d 	sth	r2,1036(sp)
 100479c:	dac11915 	stw	r11,1124(sp)
 10047a0:	da81038d 	sth	r10,1038(sp)
 10047a4:	da410715 	stw	r9,1052(sp)
 10047a8:	da010915 	stw	r8,1060(sp)
 10047ac:	dec10015 	stw	sp,1024(sp)
 10047b0:	dec10415 	stw	sp,1040(sp)
 10047b4:	d8c10215 	stw	r3,1032(sp)
 10047b8:	d8c10515 	stw	r3,1044(sp)
 10047bc:	d8010615 	stw	zero,1048(sp)
 10047c0:	10024640 	call	1002464 <___vfprintf_internal_r>
 10047c4:	1023883a 	mov	r17,r2
 10047c8:	10000416 	blt	r2,zero,10047dc <__sbprintf+0x80>
 10047cc:	d9410004 	addi	r5,sp,1024
 10047d0:	9009883a 	mov	r4,r18
 10047d4:	10064380 	call	1006438 <_fflush_r>
 10047d8:	10000d1e 	bne	r2,zero,1004810 <__sbprintf+0xb4>
 10047dc:	d881030b 	ldhu	r2,1036(sp)
 10047e0:	1080100c 	andi	r2,r2,64
 10047e4:	10000326 	beq	r2,zero,10047f4 <__sbprintf+0x98>
 10047e8:	8080030b 	ldhu	r2,12(r16)
 10047ec:	10801014 	ori	r2,r2,64
 10047f0:	8080030d 	sth	r2,12(r16)
 10047f4:	8805883a 	mov	r2,r17
 10047f8:	dfc11d17 	ldw	ra,1140(sp)
 10047fc:	dc811c17 	ldw	r18,1136(sp)
 1004800:	dc411b17 	ldw	r17,1132(sp)
 1004804:	dc011a17 	ldw	r16,1128(sp)
 1004808:	dec11e04 	addi	sp,sp,1144
 100480c:	f800283a 	ret
 1004810:	047fffc4 	movi	r17,-1
 1004814:	003ff106 	br	10047dc <__alt_data_end+0xff8047dc>

01004818 <__swsetup_r>:
 1004818:	00804074 	movhi	r2,257
 100481c:	defffd04 	addi	sp,sp,-12
 1004820:	108fc504 	addi	r2,r2,16148
 1004824:	dc400115 	stw	r17,4(sp)
 1004828:	2023883a 	mov	r17,r4
 100482c:	11000017 	ldw	r4,0(r2)
 1004830:	dc000015 	stw	r16,0(sp)
 1004834:	dfc00215 	stw	ra,8(sp)
 1004838:	2821883a 	mov	r16,r5
 100483c:	20000226 	beq	r4,zero,1004848 <__swsetup_r+0x30>
 1004840:	20800e17 	ldw	r2,56(r4)
 1004844:	10003126 	beq	r2,zero,100490c <__swsetup_r+0xf4>
 1004848:	8080030b 	ldhu	r2,12(r16)
 100484c:	10c0020c 	andi	r3,r2,8
 1004850:	1009883a 	mov	r4,r2
 1004854:	18000f26 	beq	r3,zero,1004894 <__swsetup_r+0x7c>
 1004858:	80c00417 	ldw	r3,16(r16)
 100485c:	18001526 	beq	r3,zero,10048b4 <__swsetup_r+0x9c>
 1004860:	1100004c 	andi	r4,r2,1
 1004864:	20001c1e 	bne	r4,zero,10048d8 <__swsetup_r+0xc0>
 1004868:	1080008c 	andi	r2,r2,2
 100486c:	1000291e 	bne	r2,zero,1004914 <__swsetup_r+0xfc>
 1004870:	80800517 	ldw	r2,20(r16)
 1004874:	80800215 	stw	r2,8(r16)
 1004878:	18001c26 	beq	r3,zero,10048ec <__swsetup_r+0xd4>
 100487c:	0005883a 	mov	r2,zero
 1004880:	dfc00217 	ldw	ra,8(sp)
 1004884:	dc400117 	ldw	r17,4(sp)
 1004888:	dc000017 	ldw	r16,0(sp)
 100488c:	dec00304 	addi	sp,sp,12
 1004890:	f800283a 	ret
 1004894:	2080040c 	andi	r2,r4,16
 1004898:	10002e26 	beq	r2,zero,1004954 <__swsetup_r+0x13c>
 100489c:	2080010c 	andi	r2,r4,4
 10048a0:	10001e1e 	bne	r2,zero,100491c <__swsetup_r+0x104>
 10048a4:	80c00417 	ldw	r3,16(r16)
 10048a8:	20800214 	ori	r2,r4,8
 10048ac:	8080030d 	sth	r2,12(r16)
 10048b0:	183feb1e 	bne	r3,zero,1004860 <__alt_data_end+0xff804860>
 10048b4:	1100a00c 	andi	r4,r2,640
 10048b8:	01408004 	movi	r5,512
 10048bc:	217fe826 	beq	r4,r5,1004860 <__alt_data_end+0xff804860>
 10048c0:	800b883a 	mov	r5,r16
 10048c4:	8809883a 	mov	r4,r17
 10048c8:	10073d40 	call	10073d4 <__smakebuf_r>
 10048cc:	8080030b 	ldhu	r2,12(r16)
 10048d0:	80c00417 	ldw	r3,16(r16)
 10048d4:	003fe206 	br	1004860 <__alt_data_end+0xff804860>
 10048d8:	80800517 	ldw	r2,20(r16)
 10048dc:	80000215 	stw	zero,8(r16)
 10048e0:	0085c83a 	sub	r2,zero,r2
 10048e4:	80800615 	stw	r2,24(r16)
 10048e8:	183fe41e 	bne	r3,zero,100487c <__alt_data_end+0xff80487c>
 10048ec:	80c0030b 	ldhu	r3,12(r16)
 10048f0:	0005883a 	mov	r2,zero
 10048f4:	1900200c 	andi	r4,r3,128
 10048f8:	203fe126 	beq	r4,zero,1004880 <__alt_data_end+0xff804880>
 10048fc:	18c01014 	ori	r3,r3,64
 1004900:	80c0030d 	sth	r3,12(r16)
 1004904:	00bfffc4 	movi	r2,-1
 1004908:	003fdd06 	br	1004880 <__alt_data_end+0xff804880>
 100490c:	10068240 	call	1006824 <__sinit>
 1004910:	003fcd06 	br	1004848 <__alt_data_end+0xff804848>
 1004914:	0005883a 	mov	r2,zero
 1004918:	003fd606 	br	1004874 <__alt_data_end+0xff804874>
 100491c:	81400c17 	ldw	r5,48(r16)
 1004920:	28000626 	beq	r5,zero,100493c <__swsetup_r+0x124>
 1004924:	80801004 	addi	r2,r16,64
 1004928:	28800326 	beq	r5,r2,1004938 <__swsetup_r+0x120>
 100492c:	8809883a 	mov	r4,r17
 1004930:	10069980 	call	1006998 <_free_r>
 1004934:	8100030b 	ldhu	r4,12(r16)
 1004938:	80000c15 	stw	zero,48(r16)
 100493c:	80c00417 	ldw	r3,16(r16)
 1004940:	00bff6c4 	movi	r2,-37
 1004944:	1108703a 	and	r4,r2,r4
 1004948:	80000115 	stw	zero,4(r16)
 100494c:	80c00015 	stw	r3,0(r16)
 1004950:	003fd506 	br	10048a8 <__alt_data_end+0xff8048a8>
 1004954:	00800244 	movi	r2,9
 1004958:	88800015 	stw	r2,0(r17)
 100495c:	20801014 	ori	r2,r4,64
 1004960:	8080030d 	sth	r2,12(r16)
 1004964:	00bfffc4 	movi	r2,-1
 1004968:	003fc506 	br	1004880 <__alt_data_end+0xff804880>

0100496c <quorem>:
 100496c:	defff204 	addi	sp,sp,-56
 1004970:	ddc00b15 	stw	r23,44(sp)
 1004974:	20800417 	ldw	r2,16(r4)
 1004978:	2dc00417 	ldw	r23,16(r5)
 100497c:	dfc00d15 	stw	ra,52(sp)
 1004980:	df000c15 	stw	fp,48(sp)
 1004984:	dd800a15 	stw	r22,40(sp)
 1004988:	dd400915 	stw	r21,36(sp)
 100498c:	dd000815 	stw	r20,32(sp)
 1004990:	dcc00715 	stw	r19,28(sp)
 1004994:	dc800615 	stw	r18,24(sp)
 1004998:	dc400515 	stw	r17,20(sp)
 100499c:	dc000415 	stw	r16,16(sp)
 10049a0:	15c07a16 	blt	r2,r23,1004b8c <quorem+0x220>
 10049a4:	bdffffc4 	addi	r23,r23,-1
 10049a8:	bde9883a 	add	r20,r23,r23
 10049ac:	28c00504 	addi	r3,r5,20
 10049b0:	a529883a 	add	r20,r20,r20
 10049b4:	1d39883a 	add	fp,r3,r20
 10049b8:	24c00504 	addi	r19,r4,20
 10049bc:	d9400215 	stw	r5,8(sp)
 10049c0:	9d29883a 	add	r20,r19,r20
 10049c4:	e1400017 	ldw	r5,0(fp)
 10049c8:	d9000015 	stw	r4,0(sp)
 10049cc:	a1000017 	ldw	r4,0(r20)
 10049d0:	29400044 	addi	r5,r5,1
 10049d4:	d8c00115 	stw	r3,4(sp)
 10049d8:	dd000315 	stw	r20,12(sp)
 10049dc:	100c8440 	call	100c844 <__udivsi3>
 10049e0:	1025883a 	mov	r18,r2
 10049e4:	10003026 	beq	r2,zero,1004aa8 <quorem+0x13c>
 10049e8:	dc400117 	ldw	r17,4(sp)
 10049ec:	9829883a 	mov	r20,r19
 10049f0:	002d883a 	mov	r22,zero
 10049f4:	0021883a 	mov	r16,zero
 10049f8:	8d400017 	ldw	r21,0(r17)
 10049fc:	900b883a 	mov	r5,r18
 1004a00:	8c400104 	addi	r17,r17,4
 1004a04:	a93fffcc 	andi	r4,r21,65535
 1004a08:	100c9000 	call	100c900 <__mulsi3>
 1004a0c:	a808d43a 	srli	r4,r21,16
 1004a10:	900b883a 	mov	r5,r18
 1004a14:	15ad883a 	add	r22,r2,r22
 1004a18:	100c9000 	call	100c900 <__mulsi3>
 1004a1c:	a1000017 	ldw	r4,0(r20)
 1004a20:	b00cd43a 	srli	r6,r22,16
 1004a24:	b0ffffcc 	andi	r3,r22,65535
 1004a28:	217fffcc 	andi	r5,r4,65535
 1004a2c:	2c21883a 	add	r16,r5,r16
 1004a30:	80c7c83a 	sub	r3,r16,r3
 1004a34:	2008d43a 	srli	r4,r4,16
 1004a38:	1185883a 	add	r2,r2,r6
 1004a3c:	1821d43a 	srai	r16,r3,16
 1004a40:	117fffcc 	andi	r5,r2,65535
 1004a44:	2149c83a 	sub	r4,r4,r5
 1004a48:	2421883a 	add	r16,r4,r16
 1004a4c:	8008943a 	slli	r4,r16,16
 1004a50:	18ffffcc 	andi	r3,r3,65535
 1004a54:	102cd43a 	srli	r22,r2,16
 1004a58:	20c8b03a 	or	r4,r4,r3
 1004a5c:	a1000015 	stw	r4,0(r20)
 1004a60:	8021d43a 	srai	r16,r16,16
 1004a64:	a5000104 	addi	r20,r20,4
 1004a68:	e47fe32e 	bgeu	fp,r17,10049f8 <__alt_data_end+0xff8049f8>
 1004a6c:	d8c00317 	ldw	r3,12(sp)
 1004a70:	18800017 	ldw	r2,0(r3)
 1004a74:	10000c1e 	bne	r2,zero,1004aa8 <quorem+0x13c>
 1004a78:	18bfff04 	addi	r2,r3,-4
 1004a7c:	9880082e 	bgeu	r19,r2,1004aa0 <quorem+0x134>
 1004a80:	18ffff17 	ldw	r3,-4(r3)
 1004a84:	18000326 	beq	r3,zero,1004a94 <quorem+0x128>
 1004a88:	00000506 	br	1004aa0 <quorem+0x134>
 1004a8c:	10c00017 	ldw	r3,0(r2)
 1004a90:	1800031e 	bne	r3,zero,1004aa0 <quorem+0x134>
 1004a94:	10bfff04 	addi	r2,r2,-4
 1004a98:	bdffffc4 	addi	r23,r23,-1
 1004a9c:	98bffb36 	bltu	r19,r2,1004a8c <__alt_data_end+0xff804a8c>
 1004aa0:	d8c00017 	ldw	r3,0(sp)
 1004aa4:	1dc00415 	stw	r23,16(r3)
 1004aa8:	d9400217 	ldw	r5,8(sp)
 1004aac:	d9000017 	ldw	r4,0(sp)
 1004ab0:	1008bd00 	call	1008bd0 <__mcmp>
 1004ab4:	10002816 	blt	r2,zero,1004b58 <quorem+0x1ec>
 1004ab8:	dc400117 	ldw	r17,4(sp)
 1004abc:	94800044 	addi	r18,r18,1
 1004ac0:	980d883a 	mov	r6,r19
 1004ac4:	0007883a 	mov	r3,zero
 1004ac8:	31000017 	ldw	r4,0(r6)
 1004acc:	89400017 	ldw	r5,0(r17)
 1004ad0:	31800104 	addi	r6,r6,4
 1004ad4:	20bfffcc 	andi	r2,r4,65535
 1004ad8:	10c7883a 	add	r3,r2,r3
 1004adc:	28bfffcc 	andi	r2,r5,65535
 1004ae0:	1885c83a 	sub	r2,r3,r2
 1004ae4:	280ad43a 	srli	r5,r5,16
 1004ae8:	2008d43a 	srli	r4,r4,16
 1004aec:	1007d43a 	srai	r3,r2,16
 1004af0:	10bfffcc 	andi	r2,r2,65535
 1004af4:	2149c83a 	sub	r4,r4,r5
 1004af8:	20c9883a 	add	r4,r4,r3
 1004afc:	200a943a 	slli	r5,r4,16
 1004b00:	8c400104 	addi	r17,r17,4
 1004b04:	2007d43a 	srai	r3,r4,16
 1004b08:	2884b03a 	or	r2,r5,r2
 1004b0c:	30bfff15 	stw	r2,-4(r6)
 1004b10:	e47fed2e 	bgeu	fp,r17,1004ac8 <__alt_data_end+0xff804ac8>
 1004b14:	bdc5883a 	add	r2,r23,r23
 1004b18:	1085883a 	add	r2,r2,r2
 1004b1c:	9887883a 	add	r3,r19,r2
 1004b20:	18800017 	ldw	r2,0(r3)
 1004b24:	10000c1e 	bne	r2,zero,1004b58 <quorem+0x1ec>
 1004b28:	18bfff04 	addi	r2,r3,-4
 1004b2c:	9880082e 	bgeu	r19,r2,1004b50 <quorem+0x1e4>
 1004b30:	18ffff17 	ldw	r3,-4(r3)
 1004b34:	18000326 	beq	r3,zero,1004b44 <quorem+0x1d8>
 1004b38:	00000506 	br	1004b50 <quorem+0x1e4>
 1004b3c:	10c00017 	ldw	r3,0(r2)
 1004b40:	1800031e 	bne	r3,zero,1004b50 <quorem+0x1e4>
 1004b44:	10bfff04 	addi	r2,r2,-4
 1004b48:	bdffffc4 	addi	r23,r23,-1
 1004b4c:	98bffb36 	bltu	r19,r2,1004b3c <__alt_data_end+0xff804b3c>
 1004b50:	d8c00017 	ldw	r3,0(sp)
 1004b54:	1dc00415 	stw	r23,16(r3)
 1004b58:	9005883a 	mov	r2,r18
 1004b5c:	dfc00d17 	ldw	ra,52(sp)
 1004b60:	df000c17 	ldw	fp,48(sp)
 1004b64:	ddc00b17 	ldw	r23,44(sp)
 1004b68:	dd800a17 	ldw	r22,40(sp)
 1004b6c:	dd400917 	ldw	r21,36(sp)
 1004b70:	dd000817 	ldw	r20,32(sp)
 1004b74:	dcc00717 	ldw	r19,28(sp)
 1004b78:	dc800617 	ldw	r18,24(sp)
 1004b7c:	dc400517 	ldw	r17,20(sp)
 1004b80:	dc000417 	ldw	r16,16(sp)
 1004b84:	dec00e04 	addi	sp,sp,56
 1004b88:	f800283a 	ret
 1004b8c:	0005883a 	mov	r2,zero
 1004b90:	003ff206 	br	1004b5c <__alt_data_end+0xff804b5c>

01004b94 <_dtoa_r>:
 1004b94:	20801017 	ldw	r2,64(r4)
 1004b98:	deffde04 	addi	sp,sp,-136
 1004b9c:	df002015 	stw	fp,128(sp)
 1004ba0:	dcc01b15 	stw	r19,108(sp)
 1004ba4:	dc801a15 	stw	r18,104(sp)
 1004ba8:	dc401915 	stw	r17,100(sp)
 1004bac:	dc001815 	stw	r16,96(sp)
 1004bb0:	dfc02115 	stw	ra,132(sp)
 1004bb4:	ddc01f15 	stw	r23,124(sp)
 1004bb8:	dd801e15 	stw	r22,120(sp)
 1004bbc:	dd401d15 	stw	r21,116(sp)
 1004bc0:	dd001c15 	stw	r20,112(sp)
 1004bc4:	d9c00315 	stw	r7,12(sp)
 1004bc8:	2039883a 	mov	fp,r4
 1004bcc:	3023883a 	mov	r17,r6
 1004bd0:	2825883a 	mov	r18,r5
 1004bd4:	dc002417 	ldw	r16,144(sp)
 1004bd8:	3027883a 	mov	r19,r6
 1004bdc:	10000826 	beq	r2,zero,1004c00 <_dtoa_r+0x6c>
 1004be0:	21801117 	ldw	r6,68(r4)
 1004be4:	00c00044 	movi	r3,1
 1004be8:	100b883a 	mov	r5,r2
 1004bec:	1986983a 	sll	r3,r3,r6
 1004bf0:	11800115 	stw	r6,4(r2)
 1004bf4:	10c00215 	stw	r3,8(r2)
 1004bf8:	10082f40 	call	10082f4 <_Bfree>
 1004bfc:	e0001015 	stw	zero,64(fp)
 1004c00:	88002e16 	blt	r17,zero,1004cbc <_dtoa_r+0x128>
 1004c04:	80000015 	stw	zero,0(r16)
 1004c08:	889ffc2c 	andhi	r2,r17,32752
 1004c0c:	00dffc34 	movhi	r3,32752
 1004c10:	10c01c26 	beq	r2,r3,1004c84 <_dtoa_r+0xf0>
 1004c14:	000d883a 	mov	r6,zero
 1004c18:	000f883a 	mov	r7,zero
 1004c1c:	9009883a 	mov	r4,r18
 1004c20:	980b883a 	mov	r5,r19
 1004c24:	100dba40 	call	100dba4 <__eqdf2>
 1004c28:	10002b1e 	bne	r2,zero,1004cd8 <_dtoa_r+0x144>
 1004c2c:	d9c02317 	ldw	r7,140(sp)
 1004c30:	00800044 	movi	r2,1
 1004c34:	38800015 	stw	r2,0(r7)
 1004c38:	d8802517 	ldw	r2,148(sp)
 1004c3c:	10019e26 	beq	r2,zero,10052b8 <_dtoa_r+0x724>
 1004c40:	d8c02517 	ldw	r3,148(sp)
 1004c44:	00804074 	movhi	r2,257
 1004c48:	10886a44 	addi	r2,r2,8617
 1004c4c:	18800015 	stw	r2,0(r3)
 1004c50:	10bfffc4 	addi	r2,r2,-1
 1004c54:	dfc02117 	ldw	ra,132(sp)
 1004c58:	df002017 	ldw	fp,128(sp)
 1004c5c:	ddc01f17 	ldw	r23,124(sp)
 1004c60:	dd801e17 	ldw	r22,120(sp)
 1004c64:	dd401d17 	ldw	r21,116(sp)
 1004c68:	dd001c17 	ldw	r20,112(sp)
 1004c6c:	dcc01b17 	ldw	r19,108(sp)
 1004c70:	dc801a17 	ldw	r18,104(sp)
 1004c74:	dc401917 	ldw	r17,100(sp)
 1004c78:	dc001817 	ldw	r16,96(sp)
 1004c7c:	dec02204 	addi	sp,sp,136
 1004c80:	f800283a 	ret
 1004c84:	d8c02317 	ldw	r3,140(sp)
 1004c88:	0089c3c4 	movi	r2,9999
 1004c8c:	18800015 	stw	r2,0(r3)
 1004c90:	90017726 	beq	r18,zero,1005270 <_dtoa_r+0x6dc>
 1004c94:	00804074 	movhi	r2,257
 1004c98:	10887604 	addi	r2,r2,8664
 1004c9c:	d9002517 	ldw	r4,148(sp)
 1004ca0:	203fec26 	beq	r4,zero,1004c54 <__alt_data_end+0xff804c54>
 1004ca4:	10c000c7 	ldb	r3,3(r2)
 1004ca8:	1801781e 	bne	r3,zero,100528c <_dtoa_r+0x6f8>
 1004cac:	10c000c4 	addi	r3,r2,3
 1004cb0:	d9802517 	ldw	r6,148(sp)
 1004cb4:	30c00015 	stw	r3,0(r6)
 1004cb8:	003fe606 	br	1004c54 <__alt_data_end+0xff804c54>
 1004cbc:	04e00034 	movhi	r19,32768
 1004cc0:	9cffffc4 	addi	r19,r19,-1
 1004cc4:	00800044 	movi	r2,1
 1004cc8:	8ce6703a 	and	r19,r17,r19
 1004ccc:	80800015 	stw	r2,0(r16)
 1004cd0:	9823883a 	mov	r17,r19
 1004cd4:	003fcc06 	br	1004c08 <__alt_data_end+0xff804c08>
 1004cd8:	d8800204 	addi	r2,sp,8
 1004cdc:	d8800015 	stw	r2,0(sp)
 1004ce0:	d9c00104 	addi	r7,sp,4
 1004ce4:	900b883a 	mov	r5,r18
 1004ce8:	980d883a 	mov	r6,r19
 1004cec:	e009883a 	mov	r4,fp
 1004cf0:	8820d53a 	srli	r16,r17,20
 1004cf4:	1008f9c0 	call	1008f9c <__d2b>
 1004cf8:	d8800915 	stw	r2,36(sp)
 1004cfc:	8001651e 	bne	r16,zero,1005294 <_dtoa_r+0x700>
 1004d00:	dd800217 	ldw	r22,8(sp)
 1004d04:	dc000117 	ldw	r16,4(sp)
 1004d08:	00800804 	movi	r2,32
 1004d0c:	b421883a 	add	r16,r22,r16
 1004d10:	80c10c84 	addi	r3,r16,1074
 1004d14:	10c2d10e 	bge	r2,r3,100585c <_dtoa_r+0xcc8>
 1004d18:	00801004 	movi	r2,64
 1004d1c:	81010484 	addi	r4,r16,1042
 1004d20:	10c7c83a 	sub	r3,r2,r3
 1004d24:	9108d83a 	srl	r4,r18,r4
 1004d28:	88e2983a 	sll	r17,r17,r3
 1004d2c:	2448b03a 	or	r4,r4,r17
 1004d30:	100f0c00 	call	100f0c0 <__floatunsidf>
 1004d34:	017f8434 	movhi	r5,65040
 1004d38:	01800044 	movi	r6,1
 1004d3c:	1009883a 	mov	r4,r2
 1004d40:	194b883a 	add	r5,r3,r5
 1004d44:	843fffc4 	addi	r16,r16,-1
 1004d48:	d9801115 	stw	r6,68(sp)
 1004d4c:	000d883a 	mov	r6,zero
 1004d50:	01cffe34 	movhi	r7,16376
 1004d54:	100e6680 	call	100e668 <__subdf3>
 1004d58:	0198dbf4 	movhi	r6,25455
 1004d5c:	01cff4f4 	movhi	r7,16339
 1004d60:	3190d844 	addi	r6,r6,17249
 1004d64:	39e1e9c4 	addi	r7,r7,-30809
 1004d68:	1009883a 	mov	r4,r2
 1004d6c:	180b883a 	mov	r5,r3
 1004d70:	100ddfc0 	call	100ddfc <__muldf3>
 1004d74:	01a2d874 	movhi	r6,35681
 1004d78:	01cff1f4 	movhi	r7,16327
 1004d7c:	31b22cc4 	addi	r6,r6,-14157
 1004d80:	39e28a04 	addi	r7,r7,-30168
 1004d84:	180b883a 	mov	r5,r3
 1004d88:	1009883a 	mov	r4,r2
 1004d8c:	100c9280 	call	100c928 <__adddf3>
 1004d90:	8009883a 	mov	r4,r16
 1004d94:	1029883a 	mov	r20,r2
 1004d98:	1823883a 	mov	r17,r3
 1004d9c:	100efe40 	call	100efe4 <__floatsidf>
 1004da0:	019427f4 	movhi	r6,20639
 1004da4:	01cff4f4 	movhi	r7,16339
 1004da8:	319e7ec4 	addi	r6,r6,31227
 1004dac:	39d104c4 	addi	r7,r7,17427
 1004db0:	1009883a 	mov	r4,r2
 1004db4:	180b883a 	mov	r5,r3
 1004db8:	100ddfc0 	call	100ddfc <__muldf3>
 1004dbc:	100d883a 	mov	r6,r2
 1004dc0:	180f883a 	mov	r7,r3
 1004dc4:	a009883a 	mov	r4,r20
 1004dc8:	880b883a 	mov	r5,r17
 1004dcc:	100c9280 	call	100c928 <__adddf3>
 1004dd0:	1009883a 	mov	r4,r2
 1004dd4:	180b883a 	mov	r5,r3
 1004dd8:	1029883a 	mov	r20,r2
 1004ddc:	1823883a 	mov	r17,r3
 1004de0:	100ef640 	call	100ef64 <__fixdfsi>
 1004de4:	000d883a 	mov	r6,zero
 1004de8:	000f883a 	mov	r7,zero
 1004dec:	a009883a 	mov	r4,r20
 1004df0:	880b883a 	mov	r5,r17
 1004df4:	d8800515 	stw	r2,20(sp)
 1004df8:	100dd080 	call	100dd08 <__ledf2>
 1004dfc:	10028716 	blt	r2,zero,100581c <_dtoa_r+0xc88>
 1004e00:	d8c00517 	ldw	r3,20(sp)
 1004e04:	00800584 	movi	r2,22
 1004e08:	10c27536 	bltu	r2,r3,10057e0 <_dtoa_r+0xc4c>
 1004e0c:	180490fa 	slli	r2,r3,3
 1004e10:	00c04074 	movhi	r3,257
 1004e14:	18c89204 	addi	r3,r3,8776
 1004e18:	1885883a 	add	r2,r3,r2
 1004e1c:	11000017 	ldw	r4,0(r2)
 1004e20:	11400117 	ldw	r5,4(r2)
 1004e24:	900d883a 	mov	r6,r18
 1004e28:	980f883a 	mov	r7,r19
 1004e2c:	100dc2c0 	call	100dc2c <__gedf2>
 1004e30:	00828d0e 	bge	zero,r2,1005868 <_dtoa_r+0xcd4>
 1004e34:	d9000517 	ldw	r4,20(sp)
 1004e38:	d8000e15 	stw	zero,56(sp)
 1004e3c:	213fffc4 	addi	r4,r4,-1
 1004e40:	d9000515 	stw	r4,20(sp)
 1004e44:	b42dc83a 	sub	r22,r22,r16
 1004e48:	b5bfffc4 	addi	r22,r22,-1
 1004e4c:	b0026f16 	blt	r22,zero,100580c <_dtoa_r+0xc78>
 1004e50:	d8000815 	stw	zero,32(sp)
 1004e54:	d9c00517 	ldw	r7,20(sp)
 1004e58:	38026416 	blt	r7,zero,10057ec <_dtoa_r+0xc58>
 1004e5c:	b1ed883a 	add	r22,r22,r7
 1004e60:	d9c00d15 	stw	r7,52(sp)
 1004e64:	d8000a15 	stw	zero,40(sp)
 1004e68:	d9800317 	ldw	r6,12(sp)
 1004e6c:	00800244 	movi	r2,9
 1004e70:	11811436 	bltu	r2,r6,10052c4 <_dtoa_r+0x730>
 1004e74:	00800144 	movi	r2,5
 1004e78:	1184e10e 	bge	r2,r6,1006200 <_dtoa_r+0x166c>
 1004e7c:	31bfff04 	addi	r6,r6,-4
 1004e80:	d9800315 	stw	r6,12(sp)
 1004e84:	0023883a 	mov	r17,zero
 1004e88:	d9800317 	ldw	r6,12(sp)
 1004e8c:	008000c4 	movi	r2,3
 1004e90:	30836726 	beq	r6,r2,1005c30 <_dtoa_r+0x109c>
 1004e94:	1183410e 	bge	r2,r6,1005b9c <_dtoa_r+0x1008>
 1004e98:	d9c00317 	ldw	r7,12(sp)
 1004e9c:	00800104 	movi	r2,4
 1004ea0:	38827c26 	beq	r7,r2,1005894 <_dtoa_r+0xd00>
 1004ea4:	00800144 	movi	r2,5
 1004ea8:	3884c41e 	bne	r7,r2,10061bc <_dtoa_r+0x1628>
 1004eac:	00800044 	movi	r2,1
 1004eb0:	d8800b15 	stw	r2,44(sp)
 1004eb4:	d8c00517 	ldw	r3,20(sp)
 1004eb8:	d9002217 	ldw	r4,136(sp)
 1004ebc:	1907883a 	add	r3,r3,r4
 1004ec0:	19800044 	addi	r6,r3,1
 1004ec4:	d8c00c15 	stw	r3,48(sp)
 1004ec8:	d9800615 	stw	r6,24(sp)
 1004ecc:	0183a40e 	bge	zero,r6,1005d60 <_dtoa_r+0x11cc>
 1004ed0:	d9800617 	ldw	r6,24(sp)
 1004ed4:	3021883a 	mov	r16,r6
 1004ed8:	e0001115 	stw	zero,68(fp)
 1004edc:	008005c4 	movi	r2,23
 1004ee0:	1184c92e 	bgeu	r2,r6,1006208 <_dtoa_r+0x1674>
 1004ee4:	00c00044 	movi	r3,1
 1004ee8:	00800104 	movi	r2,4
 1004eec:	1085883a 	add	r2,r2,r2
 1004ef0:	11000504 	addi	r4,r2,20
 1004ef4:	180b883a 	mov	r5,r3
 1004ef8:	18c00044 	addi	r3,r3,1
 1004efc:	313ffb2e 	bgeu	r6,r4,1004eec <__alt_data_end+0xff804eec>
 1004f00:	e1401115 	stw	r5,68(fp)
 1004f04:	e009883a 	mov	r4,fp
 1004f08:	100824c0 	call	100824c <_Balloc>
 1004f0c:	d8800715 	stw	r2,28(sp)
 1004f10:	e0801015 	stw	r2,64(fp)
 1004f14:	00800384 	movi	r2,14
 1004f18:	1400f736 	bltu	r2,r16,10052f8 <_dtoa_r+0x764>
 1004f1c:	8800f626 	beq	r17,zero,10052f8 <_dtoa_r+0x764>
 1004f20:	d9c00517 	ldw	r7,20(sp)
 1004f24:	01c39a0e 	bge	zero,r7,1005d90 <_dtoa_r+0x11fc>
 1004f28:	388003cc 	andi	r2,r7,15
 1004f2c:	100490fa 	slli	r2,r2,3
 1004f30:	382bd13a 	srai	r21,r7,4
 1004f34:	00c04074 	movhi	r3,257
 1004f38:	18c89204 	addi	r3,r3,8776
 1004f3c:	1885883a 	add	r2,r3,r2
 1004f40:	a8c0040c 	andi	r3,r21,16
 1004f44:	12400017 	ldw	r9,0(r2)
 1004f48:	12000117 	ldw	r8,4(r2)
 1004f4c:	18037926 	beq	r3,zero,1005d34 <_dtoa_r+0x11a0>
 1004f50:	00804074 	movhi	r2,257
 1004f54:	10888804 	addi	r2,r2,8736
 1004f58:	11800817 	ldw	r6,32(r2)
 1004f5c:	11c00917 	ldw	r7,36(r2)
 1004f60:	9009883a 	mov	r4,r18
 1004f64:	980b883a 	mov	r5,r19
 1004f68:	da001715 	stw	r8,92(sp)
 1004f6c:	da401615 	stw	r9,88(sp)
 1004f70:	100d1d40 	call	100d1d4 <__divdf3>
 1004f74:	da001717 	ldw	r8,92(sp)
 1004f78:	da401617 	ldw	r9,88(sp)
 1004f7c:	ad4003cc 	andi	r21,r21,15
 1004f80:	040000c4 	movi	r16,3
 1004f84:	1023883a 	mov	r17,r2
 1004f88:	1829883a 	mov	r20,r3
 1004f8c:	a8001126 	beq	r21,zero,1004fd4 <_dtoa_r+0x440>
 1004f90:	05c04074 	movhi	r23,257
 1004f94:	bdc88804 	addi	r23,r23,8736
 1004f98:	4805883a 	mov	r2,r9
 1004f9c:	4007883a 	mov	r3,r8
 1004fa0:	a980004c 	andi	r6,r21,1
 1004fa4:	1009883a 	mov	r4,r2
 1004fa8:	a82bd07a 	srai	r21,r21,1
 1004fac:	180b883a 	mov	r5,r3
 1004fb0:	30000426 	beq	r6,zero,1004fc4 <_dtoa_r+0x430>
 1004fb4:	b9800017 	ldw	r6,0(r23)
 1004fb8:	b9c00117 	ldw	r7,4(r23)
 1004fbc:	84000044 	addi	r16,r16,1
 1004fc0:	100ddfc0 	call	100ddfc <__muldf3>
 1004fc4:	bdc00204 	addi	r23,r23,8
 1004fc8:	a83ff51e 	bne	r21,zero,1004fa0 <__alt_data_end+0xff804fa0>
 1004fcc:	1013883a 	mov	r9,r2
 1004fd0:	1811883a 	mov	r8,r3
 1004fd4:	480d883a 	mov	r6,r9
 1004fd8:	400f883a 	mov	r7,r8
 1004fdc:	8809883a 	mov	r4,r17
 1004fe0:	a00b883a 	mov	r5,r20
 1004fe4:	100d1d40 	call	100d1d4 <__divdf3>
 1004fe8:	d8800f15 	stw	r2,60(sp)
 1004fec:	d8c01015 	stw	r3,64(sp)
 1004ff0:	d8c00e17 	ldw	r3,56(sp)
 1004ff4:	18000626 	beq	r3,zero,1005010 <_dtoa_r+0x47c>
 1004ff8:	d9000f17 	ldw	r4,60(sp)
 1004ffc:	d9401017 	ldw	r5,64(sp)
 1005000:	000d883a 	mov	r6,zero
 1005004:	01cffc34 	movhi	r7,16368
 1005008:	100dd080 	call	100dd08 <__ledf2>
 100500c:	10040b16 	blt	r2,zero,100603c <_dtoa_r+0x14a8>
 1005010:	8009883a 	mov	r4,r16
 1005014:	100efe40 	call	100efe4 <__floatsidf>
 1005018:	d9800f17 	ldw	r6,60(sp)
 100501c:	d9c01017 	ldw	r7,64(sp)
 1005020:	1009883a 	mov	r4,r2
 1005024:	180b883a 	mov	r5,r3
 1005028:	100ddfc0 	call	100ddfc <__muldf3>
 100502c:	000d883a 	mov	r6,zero
 1005030:	01d00734 	movhi	r7,16412
 1005034:	1009883a 	mov	r4,r2
 1005038:	180b883a 	mov	r5,r3
 100503c:	100c9280 	call	100c928 <__adddf3>
 1005040:	1021883a 	mov	r16,r2
 1005044:	d8800617 	ldw	r2,24(sp)
 1005048:	047f3034 	movhi	r17,64704
 100504c:	1c63883a 	add	r17,r3,r17
 1005050:	10031826 	beq	r2,zero,1005cb4 <_dtoa_r+0x1120>
 1005054:	d8c00517 	ldw	r3,20(sp)
 1005058:	db000617 	ldw	r12,24(sp)
 100505c:	d8c01315 	stw	r3,76(sp)
 1005060:	d9000b17 	ldw	r4,44(sp)
 1005064:	20038f26 	beq	r4,zero,1005ea4 <_dtoa_r+0x1310>
 1005068:	60bfffc4 	addi	r2,r12,-1
 100506c:	100490fa 	slli	r2,r2,3
 1005070:	00c04074 	movhi	r3,257
 1005074:	18c89204 	addi	r3,r3,8776
 1005078:	1885883a 	add	r2,r3,r2
 100507c:	11800017 	ldw	r6,0(r2)
 1005080:	11c00117 	ldw	r7,4(r2)
 1005084:	d8800717 	ldw	r2,28(sp)
 1005088:	0009883a 	mov	r4,zero
 100508c:	014ff834 	movhi	r5,16352
 1005090:	db001615 	stw	r12,88(sp)
 1005094:	15c00044 	addi	r23,r2,1
 1005098:	100d1d40 	call	100d1d4 <__divdf3>
 100509c:	800d883a 	mov	r6,r16
 10050a0:	880f883a 	mov	r7,r17
 10050a4:	1009883a 	mov	r4,r2
 10050a8:	180b883a 	mov	r5,r3
 10050ac:	100e6680 	call	100e668 <__subdf3>
 10050b0:	d9401017 	ldw	r5,64(sp)
 10050b4:	d9000f17 	ldw	r4,60(sp)
 10050b8:	102b883a 	mov	r21,r2
 10050bc:	d8c01215 	stw	r3,72(sp)
 10050c0:	100ef640 	call	100ef64 <__fixdfsi>
 10050c4:	1009883a 	mov	r4,r2
 10050c8:	1029883a 	mov	r20,r2
 10050cc:	100efe40 	call	100efe4 <__floatsidf>
 10050d0:	d9000f17 	ldw	r4,60(sp)
 10050d4:	d9401017 	ldw	r5,64(sp)
 10050d8:	100d883a 	mov	r6,r2
 10050dc:	180f883a 	mov	r7,r3
 10050e0:	100e6680 	call	100e668 <__subdf3>
 10050e4:	1823883a 	mov	r17,r3
 10050e8:	d8c00717 	ldw	r3,28(sp)
 10050ec:	d9401217 	ldw	r5,72(sp)
 10050f0:	a2000c04 	addi	r8,r20,48
 10050f4:	1021883a 	mov	r16,r2
 10050f8:	1a000005 	stb	r8,0(r3)
 10050fc:	800d883a 	mov	r6,r16
 1005100:	880f883a 	mov	r7,r17
 1005104:	a809883a 	mov	r4,r21
 1005108:	4029883a 	mov	r20,r8
 100510c:	100dc2c0 	call	100dc2c <__gedf2>
 1005110:	00841d16 	blt	zero,r2,1006188 <_dtoa_r+0x15f4>
 1005114:	800d883a 	mov	r6,r16
 1005118:	880f883a 	mov	r7,r17
 100511c:	0009883a 	mov	r4,zero
 1005120:	014ffc34 	movhi	r5,16368
 1005124:	100e6680 	call	100e668 <__subdf3>
 1005128:	d9401217 	ldw	r5,72(sp)
 100512c:	100d883a 	mov	r6,r2
 1005130:	180f883a 	mov	r7,r3
 1005134:	a809883a 	mov	r4,r21
 1005138:	100dc2c0 	call	100dc2c <__gedf2>
 100513c:	db001617 	ldw	r12,88(sp)
 1005140:	00840e16 	blt	zero,r2,100617c <_dtoa_r+0x15e8>
 1005144:	00800044 	movi	r2,1
 1005148:	13006b0e 	bge	r2,r12,10052f8 <_dtoa_r+0x764>
 100514c:	d9000717 	ldw	r4,28(sp)
 1005150:	dd800f15 	stw	r22,60(sp)
 1005154:	dcc01015 	stw	r19,64(sp)
 1005158:	2319883a 	add	r12,r4,r12
 100515c:	dcc01217 	ldw	r19,72(sp)
 1005160:	602d883a 	mov	r22,r12
 1005164:	dc801215 	stw	r18,72(sp)
 1005168:	b825883a 	mov	r18,r23
 100516c:	00000906 	br	1005194 <_dtoa_r+0x600>
 1005170:	100e6680 	call	100e668 <__subdf3>
 1005174:	a80d883a 	mov	r6,r21
 1005178:	980f883a 	mov	r7,r19
 100517c:	1009883a 	mov	r4,r2
 1005180:	180b883a 	mov	r5,r3
 1005184:	100dd080 	call	100dd08 <__ledf2>
 1005188:	1003e816 	blt	r2,zero,100612c <_dtoa_r+0x1598>
 100518c:	b825883a 	mov	r18,r23
 1005190:	bd83e926 	beq	r23,r22,1006138 <_dtoa_r+0x15a4>
 1005194:	a809883a 	mov	r4,r21
 1005198:	980b883a 	mov	r5,r19
 100519c:	000d883a 	mov	r6,zero
 10051a0:	01d00934 	movhi	r7,16420
 10051a4:	100ddfc0 	call	100ddfc <__muldf3>
 10051a8:	000d883a 	mov	r6,zero
 10051ac:	01d00934 	movhi	r7,16420
 10051b0:	8009883a 	mov	r4,r16
 10051b4:	880b883a 	mov	r5,r17
 10051b8:	102b883a 	mov	r21,r2
 10051bc:	1827883a 	mov	r19,r3
 10051c0:	100ddfc0 	call	100ddfc <__muldf3>
 10051c4:	180b883a 	mov	r5,r3
 10051c8:	1009883a 	mov	r4,r2
 10051cc:	1821883a 	mov	r16,r3
 10051d0:	1023883a 	mov	r17,r2
 10051d4:	100ef640 	call	100ef64 <__fixdfsi>
 10051d8:	1009883a 	mov	r4,r2
 10051dc:	1029883a 	mov	r20,r2
 10051e0:	100efe40 	call	100efe4 <__floatsidf>
 10051e4:	8809883a 	mov	r4,r17
 10051e8:	800b883a 	mov	r5,r16
 10051ec:	100d883a 	mov	r6,r2
 10051f0:	180f883a 	mov	r7,r3
 10051f4:	100e6680 	call	100e668 <__subdf3>
 10051f8:	a5000c04 	addi	r20,r20,48
 10051fc:	a80d883a 	mov	r6,r21
 1005200:	980f883a 	mov	r7,r19
 1005204:	1009883a 	mov	r4,r2
 1005208:	180b883a 	mov	r5,r3
 100520c:	95000005 	stb	r20,0(r18)
 1005210:	1021883a 	mov	r16,r2
 1005214:	1823883a 	mov	r17,r3
 1005218:	100dd080 	call	100dd08 <__ledf2>
 100521c:	bdc00044 	addi	r23,r23,1
 1005220:	800d883a 	mov	r6,r16
 1005224:	880f883a 	mov	r7,r17
 1005228:	0009883a 	mov	r4,zero
 100522c:	014ffc34 	movhi	r5,16368
 1005230:	103fcf0e 	bge	r2,zero,1005170 <__alt_data_end+0xff805170>
 1005234:	d8c01317 	ldw	r3,76(sp)
 1005238:	d8c00515 	stw	r3,20(sp)
 100523c:	d9400917 	ldw	r5,36(sp)
 1005240:	e009883a 	mov	r4,fp
 1005244:	10082f40 	call	10082f4 <_Bfree>
 1005248:	d9000517 	ldw	r4,20(sp)
 100524c:	d9802317 	ldw	r6,140(sp)
 1005250:	d9c02517 	ldw	r7,148(sp)
 1005254:	b8000005 	stb	zero,0(r23)
 1005258:	20800044 	addi	r2,r4,1
 100525c:	30800015 	stw	r2,0(r6)
 1005260:	3802aa26 	beq	r7,zero,1005d0c <_dtoa_r+0x1178>
 1005264:	3dc00015 	stw	r23,0(r7)
 1005268:	d8800717 	ldw	r2,28(sp)
 100526c:	003e7906 	br	1004c54 <__alt_data_end+0xff804c54>
 1005270:	00800434 	movhi	r2,16
 1005274:	10bfffc4 	addi	r2,r2,-1
 1005278:	88a2703a 	and	r17,r17,r2
 100527c:	883e851e 	bne	r17,zero,1004c94 <__alt_data_end+0xff804c94>
 1005280:	00804074 	movhi	r2,257
 1005284:	10887304 	addi	r2,r2,8652
 1005288:	003e8406 	br	1004c9c <__alt_data_end+0xff804c9c>
 100528c:	10c00204 	addi	r3,r2,8
 1005290:	003e8706 	br	1004cb0 <__alt_data_end+0xff804cb0>
 1005294:	01400434 	movhi	r5,16
 1005298:	297fffc4 	addi	r5,r5,-1
 100529c:	994a703a 	and	r5,r19,r5
 10052a0:	9009883a 	mov	r4,r18
 10052a4:	843f0044 	addi	r16,r16,-1023
 10052a8:	294ffc34 	orhi	r5,r5,16368
 10052ac:	dd800217 	ldw	r22,8(sp)
 10052b0:	d8001115 	stw	zero,68(sp)
 10052b4:	003ea506 	br	1004d4c <__alt_data_end+0xff804d4c>
 10052b8:	00804074 	movhi	r2,257
 10052bc:	10886a04 	addi	r2,r2,8616
 10052c0:	003e6406 	br	1004c54 <__alt_data_end+0xff804c54>
 10052c4:	e0001115 	stw	zero,68(fp)
 10052c8:	000b883a 	mov	r5,zero
 10052cc:	e009883a 	mov	r4,fp
 10052d0:	100824c0 	call	100824c <_Balloc>
 10052d4:	01bfffc4 	movi	r6,-1
 10052d8:	01c00044 	movi	r7,1
 10052dc:	d8800715 	stw	r2,28(sp)
 10052e0:	d9800c15 	stw	r6,48(sp)
 10052e4:	e0801015 	stw	r2,64(fp)
 10052e8:	d8000315 	stw	zero,12(sp)
 10052ec:	d9c00b15 	stw	r7,44(sp)
 10052f0:	d9800615 	stw	r6,24(sp)
 10052f4:	d8002215 	stw	zero,136(sp)
 10052f8:	d8800117 	ldw	r2,4(sp)
 10052fc:	10008916 	blt	r2,zero,1005524 <_dtoa_r+0x990>
 1005300:	d9000517 	ldw	r4,20(sp)
 1005304:	00c00384 	movi	r3,14
 1005308:	19008616 	blt	r3,r4,1005524 <_dtoa_r+0x990>
 100530c:	200490fa 	slli	r2,r4,3
 1005310:	00c04074 	movhi	r3,257
 1005314:	d9802217 	ldw	r6,136(sp)
 1005318:	18c89204 	addi	r3,r3,8776
 100531c:	1885883a 	add	r2,r3,r2
 1005320:	14000017 	ldw	r16,0(r2)
 1005324:	14400117 	ldw	r17,4(r2)
 1005328:	30016316 	blt	r6,zero,10058b8 <_dtoa_r+0xd24>
 100532c:	800d883a 	mov	r6,r16
 1005330:	880f883a 	mov	r7,r17
 1005334:	9009883a 	mov	r4,r18
 1005338:	980b883a 	mov	r5,r19
 100533c:	100d1d40 	call	100d1d4 <__divdf3>
 1005340:	180b883a 	mov	r5,r3
 1005344:	1009883a 	mov	r4,r2
 1005348:	100ef640 	call	100ef64 <__fixdfsi>
 100534c:	1009883a 	mov	r4,r2
 1005350:	102b883a 	mov	r21,r2
 1005354:	100efe40 	call	100efe4 <__floatsidf>
 1005358:	800d883a 	mov	r6,r16
 100535c:	880f883a 	mov	r7,r17
 1005360:	1009883a 	mov	r4,r2
 1005364:	180b883a 	mov	r5,r3
 1005368:	100ddfc0 	call	100ddfc <__muldf3>
 100536c:	100d883a 	mov	r6,r2
 1005370:	180f883a 	mov	r7,r3
 1005374:	9009883a 	mov	r4,r18
 1005378:	980b883a 	mov	r5,r19
 100537c:	100e6680 	call	100e668 <__subdf3>
 1005380:	d9c00717 	ldw	r7,28(sp)
 1005384:	1009883a 	mov	r4,r2
 1005388:	a8800c04 	addi	r2,r21,48
 100538c:	38800005 	stb	r2,0(r7)
 1005390:	3dc00044 	addi	r23,r7,1
 1005394:	d9c00617 	ldw	r7,24(sp)
 1005398:	01800044 	movi	r6,1
 100539c:	180b883a 	mov	r5,r3
 10053a0:	2005883a 	mov	r2,r4
 10053a4:	39803826 	beq	r7,r6,1005488 <_dtoa_r+0x8f4>
 10053a8:	000d883a 	mov	r6,zero
 10053ac:	01d00934 	movhi	r7,16420
 10053b0:	100ddfc0 	call	100ddfc <__muldf3>
 10053b4:	000d883a 	mov	r6,zero
 10053b8:	000f883a 	mov	r7,zero
 10053bc:	1009883a 	mov	r4,r2
 10053c0:	180b883a 	mov	r5,r3
 10053c4:	1025883a 	mov	r18,r2
 10053c8:	1827883a 	mov	r19,r3
 10053cc:	100dba40 	call	100dba4 <__eqdf2>
 10053d0:	103f9a26 	beq	r2,zero,100523c <__alt_data_end+0xff80523c>
 10053d4:	d9c00617 	ldw	r7,24(sp)
 10053d8:	d8c00717 	ldw	r3,28(sp)
 10053dc:	b829883a 	mov	r20,r23
 10053e0:	38bfffc4 	addi	r2,r7,-1
 10053e4:	18ad883a 	add	r22,r3,r2
 10053e8:	00000a06 	br	1005414 <_dtoa_r+0x880>
 10053ec:	100ddfc0 	call	100ddfc <__muldf3>
 10053f0:	000d883a 	mov	r6,zero
 10053f4:	000f883a 	mov	r7,zero
 10053f8:	1009883a 	mov	r4,r2
 10053fc:	180b883a 	mov	r5,r3
 1005400:	1025883a 	mov	r18,r2
 1005404:	1827883a 	mov	r19,r3
 1005408:	b829883a 	mov	r20,r23
 100540c:	100dba40 	call	100dba4 <__eqdf2>
 1005410:	103f8a26 	beq	r2,zero,100523c <__alt_data_end+0xff80523c>
 1005414:	800d883a 	mov	r6,r16
 1005418:	880f883a 	mov	r7,r17
 100541c:	9009883a 	mov	r4,r18
 1005420:	980b883a 	mov	r5,r19
 1005424:	100d1d40 	call	100d1d4 <__divdf3>
 1005428:	180b883a 	mov	r5,r3
 100542c:	1009883a 	mov	r4,r2
 1005430:	100ef640 	call	100ef64 <__fixdfsi>
 1005434:	1009883a 	mov	r4,r2
 1005438:	102b883a 	mov	r21,r2
 100543c:	100efe40 	call	100efe4 <__floatsidf>
 1005440:	800d883a 	mov	r6,r16
 1005444:	880f883a 	mov	r7,r17
 1005448:	1009883a 	mov	r4,r2
 100544c:	180b883a 	mov	r5,r3
 1005450:	100ddfc0 	call	100ddfc <__muldf3>
 1005454:	100d883a 	mov	r6,r2
 1005458:	180f883a 	mov	r7,r3
 100545c:	9009883a 	mov	r4,r18
 1005460:	980b883a 	mov	r5,r19
 1005464:	100e6680 	call	100e668 <__subdf3>
 1005468:	aa000c04 	addi	r8,r21,48
 100546c:	a2000005 	stb	r8,0(r20)
 1005470:	000d883a 	mov	r6,zero
 1005474:	01d00934 	movhi	r7,16420
 1005478:	1009883a 	mov	r4,r2
 100547c:	180b883a 	mov	r5,r3
 1005480:	a5c00044 	addi	r23,r20,1
 1005484:	b53fd91e 	bne	r22,r20,10053ec <__alt_data_end+0xff8053ec>
 1005488:	100d883a 	mov	r6,r2
 100548c:	180f883a 	mov	r7,r3
 1005490:	1009883a 	mov	r4,r2
 1005494:	180b883a 	mov	r5,r3
 1005498:	100c9280 	call	100c928 <__adddf3>
 100549c:	100d883a 	mov	r6,r2
 10054a0:	180f883a 	mov	r7,r3
 10054a4:	8009883a 	mov	r4,r16
 10054a8:	880b883a 	mov	r5,r17
 10054ac:	1027883a 	mov	r19,r2
 10054b0:	1825883a 	mov	r18,r3
 10054b4:	100dd080 	call	100dd08 <__ledf2>
 10054b8:	10000816 	blt	r2,zero,10054dc <_dtoa_r+0x948>
 10054bc:	980d883a 	mov	r6,r19
 10054c0:	900f883a 	mov	r7,r18
 10054c4:	8009883a 	mov	r4,r16
 10054c8:	880b883a 	mov	r5,r17
 10054cc:	100dba40 	call	100dba4 <__eqdf2>
 10054d0:	103f5a1e 	bne	r2,zero,100523c <__alt_data_end+0xff80523c>
 10054d4:	ad40004c 	andi	r21,r21,1
 10054d8:	a83f5826 	beq	r21,zero,100523c <__alt_data_end+0xff80523c>
 10054dc:	bd3fffc3 	ldbu	r20,-1(r23)
 10054e0:	b8bfffc4 	addi	r2,r23,-1
 10054e4:	1007883a 	mov	r3,r2
 10054e8:	01400e44 	movi	r5,57
 10054ec:	d9800717 	ldw	r6,28(sp)
 10054f0:	00000506 	br	1005508 <_dtoa_r+0x974>
 10054f4:	18ffffc4 	addi	r3,r3,-1
 10054f8:	11824726 	beq	r2,r6,1005e18 <_dtoa_r+0x1284>
 10054fc:	1d000003 	ldbu	r20,0(r3)
 1005500:	102f883a 	mov	r23,r2
 1005504:	10bfffc4 	addi	r2,r2,-1
 1005508:	a1003fcc 	andi	r4,r20,255
 100550c:	2100201c 	xori	r4,r4,128
 1005510:	213fe004 	addi	r4,r4,-128
 1005514:	217ff726 	beq	r4,r5,10054f4 <__alt_data_end+0xff8054f4>
 1005518:	a2000044 	addi	r8,r20,1
 100551c:	12000005 	stb	r8,0(r2)
 1005520:	003f4606 	br	100523c <__alt_data_end+0xff80523c>
 1005524:	d9000b17 	ldw	r4,44(sp)
 1005528:	2000c826 	beq	r4,zero,100584c <_dtoa_r+0xcb8>
 100552c:	d9800317 	ldw	r6,12(sp)
 1005530:	00c00044 	movi	r3,1
 1005534:	1980f90e 	bge	r3,r6,100591c <_dtoa_r+0xd88>
 1005538:	d8800617 	ldw	r2,24(sp)
 100553c:	d8c00a17 	ldw	r3,40(sp)
 1005540:	157fffc4 	addi	r21,r2,-1
 1005544:	1d41f316 	blt	r3,r21,1005d14 <_dtoa_r+0x1180>
 1005548:	1d6bc83a 	sub	r21,r3,r21
 100554c:	d9c00617 	ldw	r7,24(sp)
 1005550:	3802aa16 	blt	r7,zero,1005ffc <_dtoa_r+0x1468>
 1005554:	dd000817 	ldw	r20,32(sp)
 1005558:	d8800617 	ldw	r2,24(sp)
 100555c:	d8c00817 	ldw	r3,32(sp)
 1005560:	01400044 	movi	r5,1
 1005564:	e009883a 	mov	r4,fp
 1005568:	1887883a 	add	r3,r3,r2
 100556c:	d8c00815 	stw	r3,32(sp)
 1005570:	b0ad883a 	add	r22,r22,r2
 1005574:	10086800 	call	1008680 <__i2b>
 1005578:	1023883a 	mov	r17,r2
 100557c:	a0000826 	beq	r20,zero,10055a0 <_dtoa_r+0xa0c>
 1005580:	0580070e 	bge	zero,r22,10055a0 <_dtoa_r+0xa0c>
 1005584:	a005883a 	mov	r2,r20
 1005588:	b500b916 	blt	r22,r20,1005870 <_dtoa_r+0xcdc>
 100558c:	d9000817 	ldw	r4,32(sp)
 1005590:	a0a9c83a 	sub	r20,r20,r2
 1005594:	b0adc83a 	sub	r22,r22,r2
 1005598:	2089c83a 	sub	r4,r4,r2
 100559c:	d9000815 	stw	r4,32(sp)
 10055a0:	d9800a17 	ldw	r6,40(sp)
 10055a4:	0181810e 	bge	zero,r6,1005bac <_dtoa_r+0x1018>
 10055a8:	d9c00b17 	ldw	r7,44(sp)
 10055ac:	3800b326 	beq	r7,zero,100587c <_dtoa_r+0xce8>
 10055b0:	a800b226 	beq	r21,zero,100587c <_dtoa_r+0xce8>
 10055b4:	880b883a 	mov	r5,r17
 10055b8:	a80d883a 	mov	r6,r21
 10055bc:	e009883a 	mov	r4,fp
 10055c0:	10089480 	call	1008948 <__pow5mult>
 10055c4:	d9800917 	ldw	r6,36(sp)
 10055c8:	100b883a 	mov	r5,r2
 10055cc:	e009883a 	mov	r4,fp
 10055d0:	1023883a 	mov	r17,r2
 10055d4:	10086bc0 	call	10086bc <__multiply>
 10055d8:	1021883a 	mov	r16,r2
 10055dc:	d8800a17 	ldw	r2,40(sp)
 10055e0:	d9400917 	ldw	r5,36(sp)
 10055e4:	e009883a 	mov	r4,fp
 10055e8:	1545c83a 	sub	r2,r2,r21
 10055ec:	d8800a15 	stw	r2,40(sp)
 10055f0:	10082f40 	call	10082f4 <_Bfree>
 10055f4:	d8c00a17 	ldw	r3,40(sp)
 10055f8:	18009f1e 	bne	r3,zero,1005878 <_dtoa_r+0xce4>
 10055fc:	05c00044 	movi	r23,1
 1005600:	e009883a 	mov	r4,fp
 1005604:	b80b883a 	mov	r5,r23
 1005608:	10086800 	call	1008680 <__i2b>
 100560c:	d9000d17 	ldw	r4,52(sp)
 1005610:	102b883a 	mov	r21,r2
 1005614:	2000ce26 	beq	r4,zero,1005950 <_dtoa_r+0xdbc>
 1005618:	200d883a 	mov	r6,r4
 100561c:	100b883a 	mov	r5,r2
 1005620:	e009883a 	mov	r4,fp
 1005624:	10089480 	call	1008948 <__pow5mult>
 1005628:	d9800317 	ldw	r6,12(sp)
 100562c:	102b883a 	mov	r21,r2
 1005630:	b981810e 	bge	r23,r6,1005c38 <_dtoa_r+0x10a4>
 1005634:	0027883a 	mov	r19,zero
 1005638:	a8800417 	ldw	r2,16(r21)
 100563c:	05c00804 	movi	r23,32
 1005640:	10800104 	addi	r2,r2,4
 1005644:	1085883a 	add	r2,r2,r2
 1005648:	1085883a 	add	r2,r2,r2
 100564c:	a885883a 	add	r2,r21,r2
 1005650:	11000017 	ldw	r4,0(r2)
 1005654:	10085680 	call	1008568 <__hi0bits>
 1005658:	b885c83a 	sub	r2,r23,r2
 100565c:	1585883a 	add	r2,r2,r22
 1005660:	108007cc 	andi	r2,r2,31
 1005664:	1000b326 	beq	r2,zero,1005934 <_dtoa_r+0xda0>
 1005668:	00c00804 	movi	r3,32
 100566c:	1887c83a 	sub	r3,r3,r2
 1005670:	01000104 	movi	r4,4
 1005674:	20c2cd0e 	bge	r4,r3,10061ac <_dtoa_r+0x1618>
 1005678:	00c00704 	movi	r3,28
 100567c:	1885c83a 	sub	r2,r3,r2
 1005680:	d8c00817 	ldw	r3,32(sp)
 1005684:	a0a9883a 	add	r20,r20,r2
 1005688:	b0ad883a 	add	r22,r22,r2
 100568c:	1887883a 	add	r3,r3,r2
 1005690:	d8c00815 	stw	r3,32(sp)
 1005694:	d9800817 	ldw	r6,32(sp)
 1005698:	0180040e 	bge	zero,r6,10056ac <_dtoa_r+0xb18>
 100569c:	800b883a 	mov	r5,r16
 10056a0:	e009883a 	mov	r4,fp
 10056a4:	1008a880 	call	1008a88 <__lshift>
 10056a8:	1021883a 	mov	r16,r2
 10056ac:	0580050e 	bge	zero,r22,10056c4 <_dtoa_r+0xb30>
 10056b0:	a80b883a 	mov	r5,r21
 10056b4:	b00d883a 	mov	r6,r22
 10056b8:	e009883a 	mov	r4,fp
 10056bc:	1008a880 	call	1008a88 <__lshift>
 10056c0:	102b883a 	mov	r21,r2
 10056c4:	d9c00e17 	ldw	r7,56(sp)
 10056c8:	3801211e 	bne	r7,zero,1005b50 <_dtoa_r+0xfbc>
 10056cc:	d9800617 	ldw	r6,24(sp)
 10056d0:	0181380e 	bge	zero,r6,1005bb4 <_dtoa_r+0x1020>
 10056d4:	d8c00b17 	ldw	r3,44(sp)
 10056d8:	1800ab1e 	bne	r3,zero,1005988 <_dtoa_r+0xdf4>
 10056dc:	dc800717 	ldw	r18,28(sp)
 10056e0:	dcc00617 	ldw	r19,24(sp)
 10056e4:	9029883a 	mov	r20,r18
 10056e8:	00000206 	br	10056f4 <_dtoa_r+0xb60>
 10056ec:	100831c0 	call	100831c <__multadd>
 10056f0:	1021883a 	mov	r16,r2
 10056f4:	a80b883a 	mov	r5,r21
 10056f8:	8009883a 	mov	r4,r16
 10056fc:	100496c0 	call	100496c <quorem>
 1005700:	10800c04 	addi	r2,r2,48
 1005704:	90800005 	stb	r2,0(r18)
 1005708:	94800044 	addi	r18,r18,1
 100570c:	9507c83a 	sub	r3,r18,r20
 1005710:	000f883a 	mov	r7,zero
 1005714:	01800284 	movi	r6,10
 1005718:	800b883a 	mov	r5,r16
 100571c:	e009883a 	mov	r4,fp
 1005720:	1cfff216 	blt	r3,r19,10056ec <__alt_data_end+0xff8056ec>
 1005724:	1011883a 	mov	r8,r2
 1005728:	d8800617 	ldw	r2,24(sp)
 100572c:	0082370e 	bge	zero,r2,100600c <_dtoa_r+0x1478>
 1005730:	d9000717 	ldw	r4,28(sp)
 1005734:	0025883a 	mov	r18,zero
 1005738:	20af883a 	add	r23,r4,r2
 100573c:	01800044 	movi	r6,1
 1005740:	800b883a 	mov	r5,r16
 1005744:	e009883a 	mov	r4,fp
 1005748:	da001715 	stw	r8,92(sp)
 100574c:	1008a880 	call	1008a88 <__lshift>
 1005750:	a80b883a 	mov	r5,r21
 1005754:	1009883a 	mov	r4,r2
 1005758:	d8800915 	stw	r2,36(sp)
 100575c:	1008bd00 	call	1008bd0 <__mcmp>
 1005760:	da001717 	ldw	r8,92(sp)
 1005764:	0081800e 	bge	zero,r2,1005d68 <_dtoa_r+0x11d4>
 1005768:	b93fffc3 	ldbu	r4,-1(r23)
 100576c:	b8bfffc4 	addi	r2,r23,-1
 1005770:	1007883a 	mov	r3,r2
 1005774:	01800e44 	movi	r6,57
 1005778:	d9c00717 	ldw	r7,28(sp)
 100577c:	00000506 	br	1005794 <_dtoa_r+0xc00>
 1005780:	18ffffc4 	addi	r3,r3,-1
 1005784:	11c12326 	beq	r2,r7,1005c14 <_dtoa_r+0x1080>
 1005788:	19000003 	ldbu	r4,0(r3)
 100578c:	102f883a 	mov	r23,r2
 1005790:	10bfffc4 	addi	r2,r2,-1
 1005794:	21403fcc 	andi	r5,r4,255
 1005798:	2940201c 	xori	r5,r5,128
 100579c:	297fe004 	addi	r5,r5,-128
 10057a0:	29bff726 	beq	r5,r6,1005780 <__alt_data_end+0xff805780>
 10057a4:	21000044 	addi	r4,r4,1
 10057a8:	11000005 	stb	r4,0(r2)
 10057ac:	a80b883a 	mov	r5,r21
 10057b0:	e009883a 	mov	r4,fp
 10057b4:	10082f40 	call	10082f4 <_Bfree>
 10057b8:	883ea026 	beq	r17,zero,100523c <__alt_data_end+0xff80523c>
 10057bc:	90000426 	beq	r18,zero,10057d0 <_dtoa_r+0xc3c>
 10057c0:	94400326 	beq	r18,r17,10057d0 <_dtoa_r+0xc3c>
 10057c4:	900b883a 	mov	r5,r18
 10057c8:	e009883a 	mov	r4,fp
 10057cc:	10082f40 	call	10082f4 <_Bfree>
 10057d0:	880b883a 	mov	r5,r17
 10057d4:	e009883a 	mov	r4,fp
 10057d8:	10082f40 	call	10082f4 <_Bfree>
 10057dc:	003e9706 	br	100523c <__alt_data_end+0xff80523c>
 10057e0:	01800044 	movi	r6,1
 10057e4:	d9800e15 	stw	r6,56(sp)
 10057e8:	003d9606 	br	1004e44 <__alt_data_end+0xff804e44>
 10057ec:	d8800817 	ldw	r2,32(sp)
 10057f0:	d8c00517 	ldw	r3,20(sp)
 10057f4:	d8000d15 	stw	zero,52(sp)
 10057f8:	10c5c83a 	sub	r2,r2,r3
 10057fc:	00c9c83a 	sub	r4,zero,r3
 1005800:	d8800815 	stw	r2,32(sp)
 1005804:	d9000a15 	stw	r4,40(sp)
 1005808:	003d9706 	br	1004e68 <__alt_data_end+0xff804e68>
 100580c:	05adc83a 	sub	r22,zero,r22
 1005810:	dd800815 	stw	r22,32(sp)
 1005814:	002d883a 	mov	r22,zero
 1005818:	003d8e06 	br	1004e54 <__alt_data_end+0xff804e54>
 100581c:	d9000517 	ldw	r4,20(sp)
 1005820:	100efe40 	call	100efe4 <__floatsidf>
 1005824:	100d883a 	mov	r6,r2
 1005828:	180f883a 	mov	r7,r3
 100582c:	a009883a 	mov	r4,r20
 1005830:	880b883a 	mov	r5,r17
 1005834:	100dba40 	call	100dba4 <__eqdf2>
 1005838:	103d7126 	beq	r2,zero,1004e00 <__alt_data_end+0xff804e00>
 100583c:	d9c00517 	ldw	r7,20(sp)
 1005840:	39ffffc4 	addi	r7,r7,-1
 1005844:	d9c00515 	stw	r7,20(sp)
 1005848:	003d6d06 	br	1004e00 <__alt_data_end+0xff804e00>
 100584c:	dd400a17 	ldw	r21,40(sp)
 1005850:	dd000817 	ldw	r20,32(sp)
 1005854:	0023883a 	mov	r17,zero
 1005858:	003f4806 	br	100557c <__alt_data_end+0xff80557c>
 100585c:	10e3c83a 	sub	r17,r2,r3
 1005860:	9448983a 	sll	r4,r18,r17
 1005864:	003d3206 	br	1004d30 <__alt_data_end+0xff804d30>
 1005868:	d8000e15 	stw	zero,56(sp)
 100586c:	003d7506 	br	1004e44 <__alt_data_end+0xff804e44>
 1005870:	b005883a 	mov	r2,r22
 1005874:	003f4506 	br	100558c <__alt_data_end+0xff80558c>
 1005878:	dc000915 	stw	r16,36(sp)
 100587c:	d9800a17 	ldw	r6,40(sp)
 1005880:	d9400917 	ldw	r5,36(sp)
 1005884:	e009883a 	mov	r4,fp
 1005888:	10089480 	call	1008948 <__pow5mult>
 100588c:	1021883a 	mov	r16,r2
 1005890:	003f5a06 	br	10055fc <__alt_data_end+0xff8055fc>
 1005894:	01c00044 	movi	r7,1
 1005898:	d9c00b15 	stw	r7,44(sp)
 100589c:	d8802217 	ldw	r2,136(sp)
 10058a0:	0081280e 	bge	zero,r2,1005d44 <_dtoa_r+0x11b0>
 10058a4:	100d883a 	mov	r6,r2
 10058a8:	1021883a 	mov	r16,r2
 10058ac:	d8800c15 	stw	r2,48(sp)
 10058b0:	d8800615 	stw	r2,24(sp)
 10058b4:	003d8806 	br	1004ed8 <__alt_data_end+0xff804ed8>
 10058b8:	d8800617 	ldw	r2,24(sp)
 10058bc:	00be9b16 	blt	zero,r2,100532c <__alt_data_end+0xff80532c>
 10058c0:	10010f1e 	bne	r2,zero,1005d00 <_dtoa_r+0x116c>
 10058c4:	880b883a 	mov	r5,r17
 10058c8:	000d883a 	mov	r6,zero
 10058cc:	01d00534 	movhi	r7,16404
 10058d0:	8009883a 	mov	r4,r16
 10058d4:	100ddfc0 	call	100ddfc <__muldf3>
 10058d8:	900d883a 	mov	r6,r18
 10058dc:	980f883a 	mov	r7,r19
 10058e0:	1009883a 	mov	r4,r2
 10058e4:	180b883a 	mov	r5,r3
 10058e8:	100dc2c0 	call	100dc2c <__gedf2>
 10058ec:	002b883a 	mov	r21,zero
 10058f0:	0023883a 	mov	r17,zero
 10058f4:	1000bf16 	blt	r2,zero,1005bf4 <_dtoa_r+0x1060>
 10058f8:	d9802217 	ldw	r6,136(sp)
 10058fc:	ddc00717 	ldw	r23,28(sp)
 1005900:	018c303a 	nor	r6,zero,r6
 1005904:	d9800515 	stw	r6,20(sp)
 1005908:	a80b883a 	mov	r5,r21
 100590c:	e009883a 	mov	r4,fp
 1005910:	10082f40 	call	10082f4 <_Bfree>
 1005914:	883e4926 	beq	r17,zero,100523c <__alt_data_end+0xff80523c>
 1005918:	003fad06 	br	10057d0 <__alt_data_end+0xff8057d0>
 100591c:	d9c01117 	ldw	r7,68(sp)
 1005920:	3801bc26 	beq	r7,zero,1006014 <_dtoa_r+0x1480>
 1005924:	10810cc4 	addi	r2,r2,1075
 1005928:	dd400a17 	ldw	r21,40(sp)
 100592c:	dd000817 	ldw	r20,32(sp)
 1005930:	003f0a06 	br	100555c <__alt_data_end+0xff80555c>
 1005934:	00800704 	movi	r2,28
 1005938:	d9000817 	ldw	r4,32(sp)
 100593c:	a0a9883a 	add	r20,r20,r2
 1005940:	b0ad883a 	add	r22,r22,r2
 1005944:	2089883a 	add	r4,r4,r2
 1005948:	d9000815 	stw	r4,32(sp)
 100594c:	003f5106 	br	1005694 <__alt_data_end+0xff805694>
 1005950:	d8c00317 	ldw	r3,12(sp)
 1005954:	b8c1fc0e 	bge	r23,r3,1006148 <_dtoa_r+0x15b4>
 1005958:	0027883a 	mov	r19,zero
 100595c:	b805883a 	mov	r2,r23
 1005960:	003f3e06 	br	100565c <__alt_data_end+0xff80565c>
 1005964:	880b883a 	mov	r5,r17
 1005968:	e009883a 	mov	r4,fp
 100596c:	000f883a 	mov	r7,zero
 1005970:	01800284 	movi	r6,10
 1005974:	100831c0 	call	100831c <__multadd>
 1005978:	d9000c17 	ldw	r4,48(sp)
 100597c:	1023883a 	mov	r17,r2
 1005980:	0102040e 	bge	zero,r4,1006194 <_dtoa_r+0x1600>
 1005984:	d9000615 	stw	r4,24(sp)
 1005988:	0500050e 	bge	zero,r20,10059a0 <_dtoa_r+0xe0c>
 100598c:	880b883a 	mov	r5,r17
 1005990:	a00d883a 	mov	r6,r20
 1005994:	e009883a 	mov	r4,fp
 1005998:	1008a880 	call	1008a88 <__lshift>
 100599c:	1023883a 	mov	r17,r2
 10059a0:	9801241e 	bne	r19,zero,1005e34 <_dtoa_r+0x12a0>
 10059a4:	8829883a 	mov	r20,r17
 10059a8:	d9000617 	ldw	r4,24(sp)
 10059ac:	dcc00717 	ldw	r19,28(sp)
 10059b0:	9480004c 	andi	r18,r18,1
 10059b4:	20bfffc4 	addi	r2,r4,-1
 10059b8:	9885883a 	add	r2,r19,r2
 10059bc:	d8800415 	stw	r2,16(sp)
 10059c0:	dc800615 	stw	r18,24(sp)
 10059c4:	a80b883a 	mov	r5,r21
 10059c8:	8009883a 	mov	r4,r16
 10059cc:	100496c0 	call	100496c <quorem>
 10059d0:	880b883a 	mov	r5,r17
 10059d4:	8009883a 	mov	r4,r16
 10059d8:	102f883a 	mov	r23,r2
 10059dc:	1008bd00 	call	1008bd0 <__mcmp>
 10059e0:	a80b883a 	mov	r5,r21
 10059e4:	a00d883a 	mov	r6,r20
 10059e8:	e009883a 	mov	r4,fp
 10059ec:	102d883a 	mov	r22,r2
 10059f0:	1008c300 	call	1008c30 <__mdiff>
 10059f4:	1007883a 	mov	r3,r2
 10059f8:	10800317 	ldw	r2,12(r2)
 10059fc:	bc800c04 	addi	r18,r23,48
 1005a00:	180b883a 	mov	r5,r3
 1005a04:	10004e1e 	bne	r2,zero,1005b40 <_dtoa_r+0xfac>
 1005a08:	8009883a 	mov	r4,r16
 1005a0c:	d8c01615 	stw	r3,88(sp)
 1005a10:	1008bd00 	call	1008bd0 <__mcmp>
 1005a14:	d8c01617 	ldw	r3,88(sp)
 1005a18:	e009883a 	mov	r4,fp
 1005a1c:	d8801615 	stw	r2,88(sp)
 1005a20:	180b883a 	mov	r5,r3
 1005a24:	10082f40 	call	10082f4 <_Bfree>
 1005a28:	d8801617 	ldw	r2,88(sp)
 1005a2c:	1000041e 	bne	r2,zero,1005a40 <_dtoa_r+0xeac>
 1005a30:	d9800317 	ldw	r6,12(sp)
 1005a34:	3000021e 	bne	r6,zero,1005a40 <_dtoa_r+0xeac>
 1005a38:	d8c00617 	ldw	r3,24(sp)
 1005a3c:	18003726 	beq	r3,zero,1005b1c <_dtoa_r+0xf88>
 1005a40:	b0002016 	blt	r22,zero,1005ac4 <_dtoa_r+0xf30>
 1005a44:	b000041e 	bne	r22,zero,1005a58 <_dtoa_r+0xec4>
 1005a48:	d9000317 	ldw	r4,12(sp)
 1005a4c:	2000021e 	bne	r4,zero,1005a58 <_dtoa_r+0xec4>
 1005a50:	d8c00617 	ldw	r3,24(sp)
 1005a54:	18001b26 	beq	r3,zero,1005ac4 <_dtoa_r+0xf30>
 1005a58:	00810716 	blt	zero,r2,1005e78 <_dtoa_r+0x12e4>
 1005a5c:	d8c00417 	ldw	r3,16(sp)
 1005a60:	9d800044 	addi	r22,r19,1
 1005a64:	9c800005 	stb	r18,0(r19)
 1005a68:	b02f883a 	mov	r23,r22
 1005a6c:	98c10626 	beq	r19,r3,1005e88 <_dtoa_r+0x12f4>
 1005a70:	800b883a 	mov	r5,r16
 1005a74:	000f883a 	mov	r7,zero
 1005a78:	01800284 	movi	r6,10
 1005a7c:	e009883a 	mov	r4,fp
 1005a80:	100831c0 	call	100831c <__multadd>
 1005a84:	1021883a 	mov	r16,r2
 1005a88:	000f883a 	mov	r7,zero
 1005a8c:	01800284 	movi	r6,10
 1005a90:	880b883a 	mov	r5,r17
 1005a94:	e009883a 	mov	r4,fp
 1005a98:	8d002526 	beq	r17,r20,1005b30 <_dtoa_r+0xf9c>
 1005a9c:	100831c0 	call	100831c <__multadd>
 1005aa0:	a00b883a 	mov	r5,r20
 1005aa4:	000f883a 	mov	r7,zero
 1005aa8:	01800284 	movi	r6,10
 1005aac:	e009883a 	mov	r4,fp
 1005ab0:	1023883a 	mov	r17,r2
 1005ab4:	100831c0 	call	100831c <__multadd>
 1005ab8:	1029883a 	mov	r20,r2
 1005abc:	b027883a 	mov	r19,r22
 1005ac0:	003fc006 	br	10059c4 <__alt_data_end+0xff8059c4>
 1005ac4:	9011883a 	mov	r8,r18
 1005ac8:	00800e0e 	bge	zero,r2,1005b04 <_dtoa_r+0xf70>
 1005acc:	800b883a 	mov	r5,r16
 1005ad0:	01800044 	movi	r6,1
 1005ad4:	e009883a 	mov	r4,fp
 1005ad8:	da001715 	stw	r8,92(sp)
 1005adc:	1008a880 	call	1008a88 <__lshift>
 1005ae0:	a80b883a 	mov	r5,r21
 1005ae4:	1009883a 	mov	r4,r2
 1005ae8:	1021883a 	mov	r16,r2
 1005aec:	1008bd00 	call	1008bd0 <__mcmp>
 1005af0:	da001717 	ldw	r8,92(sp)
 1005af4:	0081960e 	bge	zero,r2,1006150 <_dtoa_r+0x15bc>
 1005af8:	00800e44 	movi	r2,57
 1005afc:	40817026 	beq	r8,r2,10060c0 <_dtoa_r+0x152c>
 1005b00:	ba000c44 	addi	r8,r23,49
 1005b04:	8825883a 	mov	r18,r17
 1005b08:	9dc00044 	addi	r23,r19,1
 1005b0c:	9a000005 	stb	r8,0(r19)
 1005b10:	a023883a 	mov	r17,r20
 1005b14:	dc000915 	stw	r16,36(sp)
 1005b18:	003f2406 	br	10057ac <__alt_data_end+0xff8057ac>
 1005b1c:	00800e44 	movi	r2,57
 1005b20:	9011883a 	mov	r8,r18
 1005b24:	90816626 	beq	r18,r2,10060c0 <_dtoa_r+0x152c>
 1005b28:	05bff516 	blt	zero,r22,1005b00 <__alt_data_end+0xff805b00>
 1005b2c:	003ff506 	br	1005b04 <__alt_data_end+0xff805b04>
 1005b30:	100831c0 	call	100831c <__multadd>
 1005b34:	1023883a 	mov	r17,r2
 1005b38:	1029883a 	mov	r20,r2
 1005b3c:	003fdf06 	br	1005abc <__alt_data_end+0xff805abc>
 1005b40:	e009883a 	mov	r4,fp
 1005b44:	10082f40 	call	10082f4 <_Bfree>
 1005b48:	00800044 	movi	r2,1
 1005b4c:	003fbc06 	br	1005a40 <__alt_data_end+0xff805a40>
 1005b50:	a80b883a 	mov	r5,r21
 1005b54:	8009883a 	mov	r4,r16
 1005b58:	1008bd00 	call	1008bd0 <__mcmp>
 1005b5c:	103edb0e 	bge	r2,zero,10056cc <__alt_data_end+0xff8056cc>
 1005b60:	800b883a 	mov	r5,r16
 1005b64:	000f883a 	mov	r7,zero
 1005b68:	01800284 	movi	r6,10
 1005b6c:	e009883a 	mov	r4,fp
 1005b70:	100831c0 	call	100831c <__multadd>
 1005b74:	1021883a 	mov	r16,r2
 1005b78:	d8800517 	ldw	r2,20(sp)
 1005b7c:	d8c00b17 	ldw	r3,44(sp)
 1005b80:	10bfffc4 	addi	r2,r2,-1
 1005b84:	d8800515 	stw	r2,20(sp)
 1005b88:	183f761e 	bne	r3,zero,1005964 <__alt_data_end+0xff805964>
 1005b8c:	d9000c17 	ldw	r4,48(sp)
 1005b90:	0101730e 	bge	zero,r4,1006160 <_dtoa_r+0x15cc>
 1005b94:	d9000615 	stw	r4,24(sp)
 1005b98:	003ed006 	br	10056dc <__alt_data_end+0xff8056dc>
 1005b9c:	00800084 	movi	r2,2
 1005ba0:	3081861e 	bne	r6,r2,10061bc <_dtoa_r+0x1628>
 1005ba4:	d8000b15 	stw	zero,44(sp)
 1005ba8:	003f3c06 	br	100589c <__alt_data_end+0xff80589c>
 1005bac:	dc000917 	ldw	r16,36(sp)
 1005bb0:	003e9206 	br	10055fc <__alt_data_end+0xff8055fc>
 1005bb4:	d9c00317 	ldw	r7,12(sp)
 1005bb8:	00800084 	movi	r2,2
 1005bbc:	11fec50e 	bge	r2,r7,10056d4 <__alt_data_end+0xff8056d4>
 1005bc0:	d9000617 	ldw	r4,24(sp)
 1005bc4:	20013c1e 	bne	r4,zero,10060b8 <_dtoa_r+0x1524>
 1005bc8:	a80b883a 	mov	r5,r21
 1005bcc:	000f883a 	mov	r7,zero
 1005bd0:	01800144 	movi	r6,5
 1005bd4:	e009883a 	mov	r4,fp
 1005bd8:	100831c0 	call	100831c <__multadd>
 1005bdc:	100b883a 	mov	r5,r2
 1005be0:	8009883a 	mov	r4,r16
 1005be4:	102b883a 	mov	r21,r2
 1005be8:	1008bd00 	call	1008bd0 <__mcmp>
 1005bec:	dc000915 	stw	r16,36(sp)
 1005bf0:	00bf410e 	bge	zero,r2,10058f8 <__alt_data_end+0xff8058f8>
 1005bf4:	d9c00717 	ldw	r7,28(sp)
 1005bf8:	00800c44 	movi	r2,49
 1005bfc:	38800005 	stb	r2,0(r7)
 1005c00:	d8800517 	ldw	r2,20(sp)
 1005c04:	3dc00044 	addi	r23,r7,1
 1005c08:	10800044 	addi	r2,r2,1
 1005c0c:	d8800515 	stw	r2,20(sp)
 1005c10:	003f3d06 	br	1005908 <__alt_data_end+0xff805908>
 1005c14:	d9800517 	ldw	r6,20(sp)
 1005c18:	d9c00717 	ldw	r7,28(sp)
 1005c1c:	00800c44 	movi	r2,49
 1005c20:	31800044 	addi	r6,r6,1
 1005c24:	d9800515 	stw	r6,20(sp)
 1005c28:	38800005 	stb	r2,0(r7)
 1005c2c:	003edf06 	br	10057ac <__alt_data_end+0xff8057ac>
 1005c30:	d8000b15 	stw	zero,44(sp)
 1005c34:	003c9f06 	br	1004eb4 <__alt_data_end+0xff804eb4>
 1005c38:	903e7e1e 	bne	r18,zero,1005634 <__alt_data_end+0xff805634>
 1005c3c:	00800434 	movhi	r2,16
 1005c40:	10bfffc4 	addi	r2,r2,-1
 1005c44:	9884703a 	and	r2,r19,r2
 1005c48:	1000ea1e 	bne	r2,zero,1005ff4 <_dtoa_r+0x1460>
 1005c4c:	9cdffc2c 	andhi	r19,r19,32752
 1005c50:	9800e826 	beq	r19,zero,1005ff4 <_dtoa_r+0x1460>
 1005c54:	d9c00817 	ldw	r7,32(sp)
 1005c58:	b5800044 	addi	r22,r22,1
 1005c5c:	04c00044 	movi	r19,1
 1005c60:	39c00044 	addi	r7,r7,1
 1005c64:	d9c00815 	stw	r7,32(sp)
 1005c68:	d8800d17 	ldw	r2,52(sp)
 1005c6c:	103e721e 	bne	r2,zero,1005638 <__alt_data_end+0xff805638>
 1005c70:	00800044 	movi	r2,1
 1005c74:	003e7906 	br	100565c <__alt_data_end+0xff80565c>
 1005c78:	8009883a 	mov	r4,r16
 1005c7c:	100efe40 	call	100efe4 <__floatsidf>
 1005c80:	d9800f17 	ldw	r6,60(sp)
 1005c84:	d9c01017 	ldw	r7,64(sp)
 1005c88:	1009883a 	mov	r4,r2
 1005c8c:	180b883a 	mov	r5,r3
 1005c90:	100ddfc0 	call	100ddfc <__muldf3>
 1005c94:	000d883a 	mov	r6,zero
 1005c98:	01d00734 	movhi	r7,16412
 1005c9c:	1009883a 	mov	r4,r2
 1005ca0:	180b883a 	mov	r5,r3
 1005ca4:	100c9280 	call	100c928 <__adddf3>
 1005ca8:	047f3034 	movhi	r17,64704
 1005cac:	1021883a 	mov	r16,r2
 1005cb0:	1c63883a 	add	r17,r3,r17
 1005cb4:	d9000f17 	ldw	r4,60(sp)
 1005cb8:	d9401017 	ldw	r5,64(sp)
 1005cbc:	000d883a 	mov	r6,zero
 1005cc0:	01d00534 	movhi	r7,16404
 1005cc4:	100e6680 	call	100e668 <__subdf3>
 1005cc8:	800d883a 	mov	r6,r16
 1005ccc:	880f883a 	mov	r7,r17
 1005cd0:	1009883a 	mov	r4,r2
 1005cd4:	180b883a 	mov	r5,r3
 1005cd8:	102b883a 	mov	r21,r2
 1005cdc:	1829883a 	mov	r20,r3
 1005ce0:	100dc2c0 	call	100dc2c <__gedf2>
 1005ce4:	00806c16 	blt	zero,r2,1005e98 <_dtoa_r+0x1304>
 1005ce8:	89e0003c 	xorhi	r7,r17,32768
 1005cec:	800d883a 	mov	r6,r16
 1005cf0:	a809883a 	mov	r4,r21
 1005cf4:	a00b883a 	mov	r5,r20
 1005cf8:	100dd080 	call	100dd08 <__ledf2>
 1005cfc:	103d7e0e 	bge	r2,zero,10052f8 <__alt_data_end+0xff8052f8>
 1005d00:	002b883a 	mov	r21,zero
 1005d04:	0023883a 	mov	r17,zero
 1005d08:	003efb06 	br	10058f8 <__alt_data_end+0xff8058f8>
 1005d0c:	d8800717 	ldw	r2,28(sp)
 1005d10:	003bd006 	br	1004c54 <__alt_data_end+0xff804c54>
 1005d14:	d9000a17 	ldw	r4,40(sp)
 1005d18:	d9800d17 	ldw	r6,52(sp)
 1005d1c:	dd400a15 	stw	r21,40(sp)
 1005d20:	a905c83a 	sub	r2,r21,r4
 1005d24:	308d883a 	add	r6,r6,r2
 1005d28:	d9800d15 	stw	r6,52(sp)
 1005d2c:	002b883a 	mov	r21,zero
 1005d30:	003e0606 	br	100554c <__alt_data_end+0xff80554c>
 1005d34:	9023883a 	mov	r17,r18
 1005d38:	9829883a 	mov	r20,r19
 1005d3c:	04000084 	movi	r16,2
 1005d40:	003c9206 	br	1004f8c <__alt_data_end+0xff804f8c>
 1005d44:	04000044 	movi	r16,1
 1005d48:	dc000c15 	stw	r16,48(sp)
 1005d4c:	dc000615 	stw	r16,24(sp)
 1005d50:	dc002215 	stw	r16,136(sp)
 1005d54:	e0001115 	stw	zero,68(fp)
 1005d58:	000b883a 	mov	r5,zero
 1005d5c:	003c6906 	br	1004f04 <__alt_data_end+0xff804f04>
 1005d60:	3021883a 	mov	r16,r6
 1005d64:	003ffb06 	br	1005d54 <__alt_data_end+0xff805d54>
 1005d68:	1000021e 	bne	r2,zero,1005d74 <_dtoa_r+0x11e0>
 1005d6c:	4200004c 	andi	r8,r8,1
 1005d70:	403e7d1e 	bne	r8,zero,1005768 <__alt_data_end+0xff805768>
 1005d74:	01000c04 	movi	r4,48
 1005d78:	00000106 	br	1005d80 <_dtoa_r+0x11ec>
 1005d7c:	102f883a 	mov	r23,r2
 1005d80:	b8bfffc4 	addi	r2,r23,-1
 1005d84:	10c00007 	ldb	r3,0(r2)
 1005d88:	193ffc26 	beq	r3,r4,1005d7c <__alt_data_end+0xff805d7c>
 1005d8c:	003e8706 	br	10057ac <__alt_data_end+0xff8057ac>
 1005d90:	d8800517 	ldw	r2,20(sp)
 1005d94:	00a3c83a 	sub	r17,zero,r2
 1005d98:	8800a426 	beq	r17,zero,100602c <_dtoa_r+0x1498>
 1005d9c:	888003cc 	andi	r2,r17,15
 1005da0:	100490fa 	slli	r2,r2,3
 1005da4:	00c04074 	movhi	r3,257
 1005da8:	18c89204 	addi	r3,r3,8776
 1005dac:	1885883a 	add	r2,r3,r2
 1005db0:	11800017 	ldw	r6,0(r2)
 1005db4:	11c00117 	ldw	r7,4(r2)
 1005db8:	9009883a 	mov	r4,r18
 1005dbc:	980b883a 	mov	r5,r19
 1005dc0:	8823d13a 	srai	r17,r17,4
 1005dc4:	100ddfc0 	call	100ddfc <__muldf3>
 1005dc8:	d8800f15 	stw	r2,60(sp)
 1005dcc:	d8c01015 	stw	r3,64(sp)
 1005dd0:	8800e826 	beq	r17,zero,1006174 <_dtoa_r+0x15e0>
 1005dd4:	05004074 	movhi	r20,257
 1005dd8:	a5088804 	addi	r20,r20,8736
 1005ddc:	04000084 	movi	r16,2
 1005de0:	8980004c 	andi	r6,r17,1
 1005de4:	1009883a 	mov	r4,r2
 1005de8:	8823d07a 	srai	r17,r17,1
 1005dec:	180b883a 	mov	r5,r3
 1005df0:	30000426 	beq	r6,zero,1005e04 <_dtoa_r+0x1270>
 1005df4:	a1800017 	ldw	r6,0(r20)
 1005df8:	a1c00117 	ldw	r7,4(r20)
 1005dfc:	84000044 	addi	r16,r16,1
 1005e00:	100ddfc0 	call	100ddfc <__muldf3>
 1005e04:	a5000204 	addi	r20,r20,8
 1005e08:	883ff51e 	bne	r17,zero,1005de0 <__alt_data_end+0xff805de0>
 1005e0c:	d8800f15 	stw	r2,60(sp)
 1005e10:	d8c01015 	stw	r3,64(sp)
 1005e14:	003c7606 	br	1004ff0 <__alt_data_end+0xff804ff0>
 1005e18:	00c00c04 	movi	r3,48
 1005e1c:	10c00005 	stb	r3,0(r2)
 1005e20:	d8c00517 	ldw	r3,20(sp)
 1005e24:	bd3fffc3 	ldbu	r20,-1(r23)
 1005e28:	18c00044 	addi	r3,r3,1
 1005e2c:	d8c00515 	stw	r3,20(sp)
 1005e30:	003db906 	br	1005518 <__alt_data_end+0xff805518>
 1005e34:	89400117 	ldw	r5,4(r17)
 1005e38:	e009883a 	mov	r4,fp
 1005e3c:	100824c0 	call	100824c <_Balloc>
 1005e40:	89800417 	ldw	r6,16(r17)
 1005e44:	89400304 	addi	r5,r17,12
 1005e48:	11000304 	addi	r4,r2,12
 1005e4c:	31800084 	addi	r6,r6,2
 1005e50:	318d883a 	add	r6,r6,r6
 1005e54:	318d883a 	add	r6,r6,r6
 1005e58:	1027883a 	mov	r19,r2
 1005e5c:	1007e800 	call	1007e80 <memcpy>
 1005e60:	01800044 	movi	r6,1
 1005e64:	980b883a 	mov	r5,r19
 1005e68:	e009883a 	mov	r4,fp
 1005e6c:	1008a880 	call	1008a88 <__lshift>
 1005e70:	1029883a 	mov	r20,r2
 1005e74:	003ecc06 	br	10059a8 <__alt_data_end+0xff8059a8>
 1005e78:	00800e44 	movi	r2,57
 1005e7c:	90809026 	beq	r18,r2,10060c0 <_dtoa_r+0x152c>
 1005e80:	92000044 	addi	r8,r18,1
 1005e84:	003f1f06 	br	1005b04 <__alt_data_end+0xff805b04>
 1005e88:	9011883a 	mov	r8,r18
 1005e8c:	8825883a 	mov	r18,r17
 1005e90:	a023883a 	mov	r17,r20
 1005e94:	003e2906 	br	100573c <__alt_data_end+0xff80573c>
 1005e98:	002b883a 	mov	r21,zero
 1005e9c:	0023883a 	mov	r17,zero
 1005ea0:	003f5406 	br	1005bf4 <__alt_data_end+0xff805bf4>
 1005ea4:	61bfffc4 	addi	r6,r12,-1
 1005ea8:	300490fa 	slli	r2,r6,3
 1005eac:	00c04074 	movhi	r3,257
 1005eb0:	18c89204 	addi	r3,r3,8776
 1005eb4:	1885883a 	add	r2,r3,r2
 1005eb8:	11000017 	ldw	r4,0(r2)
 1005ebc:	11400117 	ldw	r5,4(r2)
 1005ec0:	d8800717 	ldw	r2,28(sp)
 1005ec4:	880f883a 	mov	r7,r17
 1005ec8:	d9801215 	stw	r6,72(sp)
 1005ecc:	800d883a 	mov	r6,r16
 1005ed0:	db001615 	stw	r12,88(sp)
 1005ed4:	15c00044 	addi	r23,r2,1
 1005ed8:	100ddfc0 	call	100ddfc <__muldf3>
 1005edc:	d9401017 	ldw	r5,64(sp)
 1005ee0:	d9000f17 	ldw	r4,60(sp)
 1005ee4:	d8c01515 	stw	r3,84(sp)
 1005ee8:	d8801415 	stw	r2,80(sp)
 1005eec:	100ef640 	call	100ef64 <__fixdfsi>
 1005ef0:	1009883a 	mov	r4,r2
 1005ef4:	1021883a 	mov	r16,r2
 1005ef8:	100efe40 	call	100efe4 <__floatsidf>
 1005efc:	d9000f17 	ldw	r4,60(sp)
 1005f00:	d9401017 	ldw	r5,64(sp)
 1005f04:	100d883a 	mov	r6,r2
 1005f08:	180f883a 	mov	r7,r3
 1005f0c:	100e6680 	call	100e668 <__subdf3>
 1005f10:	1829883a 	mov	r20,r3
 1005f14:	d8c00717 	ldw	r3,28(sp)
 1005f18:	84000c04 	addi	r16,r16,48
 1005f1c:	1023883a 	mov	r17,r2
 1005f20:	1c000005 	stb	r16,0(r3)
 1005f24:	db001617 	ldw	r12,88(sp)
 1005f28:	00800044 	movi	r2,1
 1005f2c:	60802226 	beq	r12,r2,1005fb8 <_dtoa_r+0x1424>
 1005f30:	d9c00717 	ldw	r7,28(sp)
 1005f34:	8805883a 	mov	r2,r17
 1005f38:	b82b883a 	mov	r21,r23
 1005f3c:	3b19883a 	add	r12,r7,r12
 1005f40:	6023883a 	mov	r17,r12
 1005f44:	a007883a 	mov	r3,r20
 1005f48:	dc800f15 	stw	r18,60(sp)
 1005f4c:	000d883a 	mov	r6,zero
 1005f50:	01d00934 	movhi	r7,16420
 1005f54:	1009883a 	mov	r4,r2
 1005f58:	180b883a 	mov	r5,r3
 1005f5c:	100ddfc0 	call	100ddfc <__muldf3>
 1005f60:	180b883a 	mov	r5,r3
 1005f64:	1009883a 	mov	r4,r2
 1005f68:	1829883a 	mov	r20,r3
 1005f6c:	1025883a 	mov	r18,r2
 1005f70:	100ef640 	call	100ef64 <__fixdfsi>
 1005f74:	1009883a 	mov	r4,r2
 1005f78:	1021883a 	mov	r16,r2
 1005f7c:	100efe40 	call	100efe4 <__floatsidf>
 1005f80:	100d883a 	mov	r6,r2
 1005f84:	180f883a 	mov	r7,r3
 1005f88:	9009883a 	mov	r4,r18
 1005f8c:	a00b883a 	mov	r5,r20
 1005f90:	84000c04 	addi	r16,r16,48
 1005f94:	100e6680 	call	100e668 <__subdf3>
 1005f98:	ad400044 	addi	r21,r21,1
 1005f9c:	ac3fffc5 	stb	r16,-1(r21)
 1005fa0:	ac7fea1e 	bne	r21,r17,1005f4c <__alt_data_end+0xff805f4c>
 1005fa4:	1023883a 	mov	r17,r2
 1005fa8:	d8801217 	ldw	r2,72(sp)
 1005fac:	dc800f17 	ldw	r18,60(sp)
 1005fb0:	1829883a 	mov	r20,r3
 1005fb4:	b8af883a 	add	r23,r23,r2
 1005fb8:	d9001417 	ldw	r4,80(sp)
 1005fbc:	d9401517 	ldw	r5,84(sp)
 1005fc0:	000d883a 	mov	r6,zero
 1005fc4:	01cff834 	movhi	r7,16352
 1005fc8:	100c9280 	call	100c928 <__adddf3>
 1005fcc:	880d883a 	mov	r6,r17
 1005fd0:	a00f883a 	mov	r7,r20
 1005fd4:	1009883a 	mov	r4,r2
 1005fd8:	180b883a 	mov	r5,r3
 1005fdc:	100dd080 	call	100dd08 <__ledf2>
 1005fe0:	10003e0e 	bge	r2,zero,10060dc <_dtoa_r+0x1548>
 1005fe4:	d9001317 	ldw	r4,76(sp)
 1005fe8:	bd3fffc3 	ldbu	r20,-1(r23)
 1005fec:	d9000515 	stw	r4,20(sp)
 1005ff0:	003d3b06 	br	10054e0 <__alt_data_end+0xff8054e0>
 1005ff4:	0027883a 	mov	r19,zero
 1005ff8:	003f1b06 	br	1005c68 <__alt_data_end+0xff805c68>
 1005ffc:	d8800817 	ldw	r2,32(sp)
 1006000:	11e9c83a 	sub	r20,r2,r7
 1006004:	0005883a 	mov	r2,zero
 1006008:	003d5406 	br	100555c <__alt_data_end+0xff80555c>
 100600c:	00800044 	movi	r2,1
 1006010:	003dc706 	br	1005730 <__alt_data_end+0xff805730>
 1006014:	d8c00217 	ldw	r3,8(sp)
 1006018:	00800d84 	movi	r2,54
 100601c:	dd400a17 	ldw	r21,40(sp)
 1006020:	10c5c83a 	sub	r2,r2,r3
 1006024:	dd000817 	ldw	r20,32(sp)
 1006028:	003d4c06 	br	100555c <__alt_data_end+0xff80555c>
 100602c:	dc800f15 	stw	r18,60(sp)
 1006030:	dcc01015 	stw	r19,64(sp)
 1006034:	04000084 	movi	r16,2
 1006038:	003bed06 	br	1004ff0 <__alt_data_end+0xff804ff0>
 100603c:	d9000617 	ldw	r4,24(sp)
 1006040:	203f0d26 	beq	r4,zero,1005c78 <__alt_data_end+0xff805c78>
 1006044:	d9800c17 	ldw	r6,48(sp)
 1006048:	01bcab0e 	bge	zero,r6,10052f8 <__alt_data_end+0xff8052f8>
 100604c:	d9401017 	ldw	r5,64(sp)
 1006050:	d9000f17 	ldw	r4,60(sp)
 1006054:	000d883a 	mov	r6,zero
 1006058:	01d00934 	movhi	r7,16420
 100605c:	100ddfc0 	call	100ddfc <__muldf3>
 1006060:	81000044 	addi	r4,r16,1
 1006064:	d8800f15 	stw	r2,60(sp)
 1006068:	d8c01015 	stw	r3,64(sp)
 100606c:	100efe40 	call	100efe4 <__floatsidf>
 1006070:	d9800f17 	ldw	r6,60(sp)
 1006074:	d9c01017 	ldw	r7,64(sp)
 1006078:	1009883a 	mov	r4,r2
 100607c:	180b883a 	mov	r5,r3
 1006080:	100ddfc0 	call	100ddfc <__muldf3>
 1006084:	01d00734 	movhi	r7,16412
 1006088:	000d883a 	mov	r6,zero
 100608c:	1009883a 	mov	r4,r2
 1006090:	180b883a 	mov	r5,r3
 1006094:	100c9280 	call	100c928 <__adddf3>
 1006098:	d9c00517 	ldw	r7,20(sp)
 100609c:	047f3034 	movhi	r17,64704
 10060a0:	1021883a 	mov	r16,r2
 10060a4:	39ffffc4 	addi	r7,r7,-1
 10060a8:	d9c01315 	stw	r7,76(sp)
 10060ac:	1c63883a 	add	r17,r3,r17
 10060b0:	db000c17 	ldw	r12,48(sp)
 10060b4:	003bea06 	br	1005060 <__alt_data_end+0xff805060>
 10060b8:	dc000915 	stw	r16,36(sp)
 10060bc:	003e0e06 	br	10058f8 <__alt_data_end+0xff8058f8>
 10060c0:	01000e44 	movi	r4,57
 10060c4:	8825883a 	mov	r18,r17
 10060c8:	9dc00044 	addi	r23,r19,1
 10060cc:	99000005 	stb	r4,0(r19)
 10060d0:	a023883a 	mov	r17,r20
 10060d4:	dc000915 	stw	r16,36(sp)
 10060d8:	003da406 	br	100576c <__alt_data_end+0xff80576c>
 10060dc:	d9801417 	ldw	r6,80(sp)
 10060e0:	d9c01517 	ldw	r7,84(sp)
 10060e4:	0009883a 	mov	r4,zero
 10060e8:	014ff834 	movhi	r5,16352
 10060ec:	100e6680 	call	100e668 <__subdf3>
 10060f0:	880d883a 	mov	r6,r17
 10060f4:	a00f883a 	mov	r7,r20
 10060f8:	1009883a 	mov	r4,r2
 10060fc:	180b883a 	mov	r5,r3
 1006100:	100dc2c0 	call	100dc2c <__gedf2>
 1006104:	00bc7c0e 	bge	zero,r2,10052f8 <__alt_data_end+0xff8052f8>
 1006108:	01000c04 	movi	r4,48
 100610c:	00000106 	br	1006114 <_dtoa_r+0x1580>
 1006110:	102f883a 	mov	r23,r2
 1006114:	b8bfffc4 	addi	r2,r23,-1
 1006118:	10c00007 	ldb	r3,0(r2)
 100611c:	193ffc26 	beq	r3,r4,1006110 <__alt_data_end+0xff806110>
 1006120:	d9801317 	ldw	r6,76(sp)
 1006124:	d9800515 	stw	r6,20(sp)
 1006128:	003c4406 	br	100523c <__alt_data_end+0xff80523c>
 100612c:	d9801317 	ldw	r6,76(sp)
 1006130:	d9800515 	stw	r6,20(sp)
 1006134:	003cea06 	br	10054e0 <__alt_data_end+0xff8054e0>
 1006138:	dd800f17 	ldw	r22,60(sp)
 100613c:	dcc01017 	ldw	r19,64(sp)
 1006140:	dc801217 	ldw	r18,72(sp)
 1006144:	003c6c06 	br	10052f8 <__alt_data_end+0xff8052f8>
 1006148:	903e031e 	bne	r18,zero,1005958 <__alt_data_end+0xff805958>
 100614c:	003ebb06 	br	1005c3c <__alt_data_end+0xff805c3c>
 1006150:	103e6c1e 	bne	r2,zero,1005b04 <__alt_data_end+0xff805b04>
 1006154:	4080004c 	andi	r2,r8,1
 1006158:	103e6a26 	beq	r2,zero,1005b04 <__alt_data_end+0xff805b04>
 100615c:	003e6606 	br	1005af8 <__alt_data_end+0xff805af8>
 1006160:	d8c00317 	ldw	r3,12(sp)
 1006164:	00800084 	movi	r2,2
 1006168:	10c02916 	blt	r2,r3,1006210 <_dtoa_r+0x167c>
 100616c:	d9000c17 	ldw	r4,48(sp)
 1006170:	003e8806 	br	1005b94 <__alt_data_end+0xff805b94>
 1006174:	04000084 	movi	r16,2
 1006178:	003b9d06 	br	1004ff0 <__alt_data_end+0xff804ff0>
 100617c:	d9001317 	ldw	r4,76(sp)
 1006180:	d9000515 	stw	r4,20(sp)
 1006184:	003cd606 	br	10054e0 <__alt_data_end+0xff8054e0>
 1006188:	d8801317 	ldw	r2,76(sp)
 100618c:	d8800515 	stw	r2,20(sp)
 1006190:	003c2a06 	br	100523c <__alt_data_end+0xff80523c>
 1006194:	d9800317 	ldw	r6,12(sp)
 1006198:	00800084 	movi	r2,2
 100619c:	11801516 	blt	r2,r6,10061f4 <_dtoa_r+0x1660>
 10061a0:	d9c00c17 	ldw	r7,48(sp)
 10061a4:	d9c00615 	stw	r7,24(sp)
 10061a8:	003df706 	br	1005988 <__alt_data_end+0xff805988>
 10061ac:	193d3926 	beq	r3,r4,1005694 <__alt_data_end+0xff805694>
 10061b0:	00c00f04 	movi	r3,60
 10061b4:	1885c83a 	sub	r2,r3,r2
 10061b8:	003ddf06 	br	1005938 <__alt_data_end+0xff805938>
 10061bc:	e009883a 	mov	r4,fp
 10061c0:	e0001115 	stw	zero,68(fp)
 10061c4:	000b883a 	mov	r5,zero
 10061c8:	100824c0 	call	100824c <_Balloc>
 10061cc:	d8800715 	stw	r2,28(sp)
 10061d0:	d8c00717 	ldw	r3,28(sp)
 10061d4:	00bfffc4 	movi	r2,-1
 10061d8:	01000044 	movi	r4,1
 10061dc:	d8800c15 	stw	r2,48(sp)
 10061e0:	e0c01015 	stw	r3,64(fp)
 10061e4:	d9000b15 	stw	r4,44(sp)
 10061e8:	d8800615 	stw	r2,24(sp)
 10061ec:	d8002215 	stw	zero,136(sp)
 10061f0:	003c4106 	br	10052f8 <__alt_data_end+0xff8052f8>
 10061f4:	d8c00c17 	ldw	r3,48(sp)
 10061f8:	d8c00615 	stw	r3,24(sp)
 10061fc:	003e7006 	br	1005bc0 <__alt_data_end+0xff805bc0>
 1006200:	04400044 	movi	r17,1
 1006204:	003b2006 	br	1004e88 <__alt_data_end+0xff804e88>
 1006208:	000b883a 	mov	r5,zero
 100620c:	003b3d06 	br	1004f04 <__alt_data_end+0xff804f04>
 1006210:	d8800c17 	ldw	r2,48(sp)
 1006214:	d8800615 	stw	r2,24(sp)
 1006218:	003e6906 	br	1005bc0 <__alt_data_end+0xff805bc0>

0100621c <__sflush_r>:
 100621c:	2880030b 	ldhu	r2,12(r5)
 1006220:	defffb04 	addi	sp,sp,-20
 1006224:	dcc00315 	stw	r19,12(sp)
 1006228:	dc400115 	stw	r17,4(sp)
 100622c:	dfc00415 	stw	ra,16(sp)
 1006230:	dc800215 	stw	r18,8(sp)
 1006234:	dc000015 	stw	r16,0(sp)
 1006238:	10c0020c 	andi	r3,r2,8
 100623c:	2823883a 	mov	r17,r5
 1006240:	2027883a 	mov	r19,r4
 1006244:	1800311e 	bne	r3,zero,100630c <__sflush_r+0xf0>
 1006248:	28c00117 	ldw	r3,4(r5)
 100624c:	10820014 	ori	r2,r2,2048
 1006250:	2880030d 	sth	r2,12(r5)
 1006254:	00c04b0e 	bge	zero,r3,1006384 <__sflush_r+0x168>
 1006258:	8a000a17 	ldw	r8,40(r17)
 100625c:	40002326 	beq	r8,zero,10062ec <__sflush_r+0xd0>
 1006260:	9c000017 	ldw	r16,0(r19)
 1006264:	10c4000c 	andi	r3,r2,4096
 1006268:	98000015 	stw	zero,0(r19)
 100626c:	18004826 	beq	r3,zero,1006390 <__sflush_r+0x174>
 1006270:	89801417 	ldw	r6,80(r17)
 1006274:	10c0010c 	andi	r3,r2,4
 1006278:	18000626 	beq	r3,zero,1006294 <__sflush_r+0x78>
 100627c:	88c00117 	ldw	r3,4(r17)
 1006280:	88800c17 	ldw	r2,48(r17)
 1006284:	30cdc83a 	sub	r6,r6,r3
 1006288:	10000226 	beq	r2,zero,1006294 <__sflush_r+0x78>
 100628c:	88800f17 	ldw	r2,60(r17)
 1006290:	308dc83a 	sub	r6,r6,r2
 1006294:	89400717 	ldw	r5,28(r17)
 1006298:	000f883a 	mov	r7,zero
 100629c:	9809883a 	mov	r4,r19
 10062a0:	403ee83a 	callr	r8
 10062a4:	00ffffc4 	movi	r3,-1
 10062a8:	10c04426 	beq	r2,r3,10063bc <__sflush_r+0x1a0>
 10062ac:	88c0030b 	ldhu	r3,12(r17)
 10062b0:	89000417 	ldw	r4,16(r17)
 10062b4:	88000115 	stw	zero,4(r17)
 10062b8:	197dffcc 	andi	r5,r3,63487
 10062bc:	8940030d 	sth	r5,12(r17)
 10062c0:	89000015 	stw	r4,0(r17)
 10062c4:	18c4000c 	andi	r3,r3,4096
 10062c8:	18002c1e 	bne	r3,zero,100637c <__sflush_r+0x160>
 10062cc:	89400c17 	ldw	r5,48(r17)
 10062d0:	9c000015 	stw	r16,0(r19)
 10062d4:	28000526 	beq	r5,zero,10062ec <__sflush_r+0xd0>
 10062d8:	88801004 	addi	r2,r17,64
 10062dc:	28800226 	beq	r5,r2,10062e8 <__sflush_r+0xcc>
 10062e0:	9809883a 	mov	r4,r19
 10062e4:	10069980 	call	1006998 <_free_r>
 10062e8:	88000c15 	stw	zero,48(r17)
 10062ec:	0005883a 	mov	r2,zero
 10062f0:	dfc00417 	ldw	ra,16(sp)
 10062f4:	dcc00317 	ldw	r19,12(sp)
 10062f8:	dc800217 	ldw	r18,8(sp)
 10062fc:	dc400117 	ldw	r17,4(sp)
 1006300:	dc000017 	ldw	r16,0(sp)
 1006304:	dec00504 	addi	sp,sp,20
 1006308:	f800283a 	ret
 100630c:	2c800417 	ldw	r18,16(r5)
 1006310:	903ff626 	beq	r18,zero,10062ec <__alt_data_end+0xff8062ec>
 1006314:	2c000017 	ldw	r16,0(r5)
 1006318:	108000cc 	andi	r2,r2,3
 100631c:	2c800015 	stw	r18,0(r5)
 1006320:	84a1c83a 	sub	r16,r16,r18
 1006324:	1000131e 	bne	r2,zero,1006374 <__sflush_r+0x158>
 1006328:	28800517 	ldw	r2,20(r5)
 100632c:	88800215 	stw	r2,8(r17)
 1006330:	04000316 	blt	zero,r16,1006340 <__sflush_r+0x124>
 1006334:	003fed06 	br	10062ec <__alt_data_end+0xff8062ec>
 1006338:	90a5883a 	add	r18,r18,r2
 100633c:	043feb0e 	bge	zero,r16,10062ec <__alt_data_end+0xff8062ec>
 1006340:	88800917 	ldw	r2,36(r17)
 1006344:	89400717 	ldw	r5,28(r17)
 1006348:	800f883a 	mov	r7,r16
 100634c:	900d883a 	mov	r6,r18
 1006350:	9809883a 	mov	r4,r19
 1006354:	103ee83a 	callr	r2
 1006358:	80a1c83a 	sub	r16,r16,r2
 100635c:	00bff616 	blt	zero,r2,1006338 <__alt_data_end+0xff806338>
 1006360:	88c0030b 	ldhu	r3,12(r17)
 1006364:	00bfffc4 	movi	r2,-1
 1006368:	18c01014 	ori	r3,r3,64
 100636c:	88c0030d 	sth	r3,12(r17)
 1006370:	003fdf06 	br	10062f0 <__alt_data_end+0xff8062f0>
 1006374:	0005883a 	mov	r2,zero
 1006378:	003fec06 	br	100632c <__alt_data_end+0xff80632c>
 100637c:	88801415 	stw	r2,80(r17)
 1006380:	003fd206 	br	10062cc <__alt_data_end+0xff8062cc>
 1006384:	28c00f17 	ldw	r3,60(r5)
 1006388:	00ffb316 	blt	zero,r3,1006258 <__alt_data_end+0xff806258>
 100638c:	003fd706 	br	10062ec <__alt_data_end+0xff8062ec>
 1006390:	89400717 	ldw	r5,28(r17)
 1006394:	000d883a 	mov	r6,zero
 1006398:	01c00044 	movi	r7,1
 100639c:	9809883a 	mov	r4,r19
 10063a0:	403ee83a 	callr	r8
 10063a4:	100d883a 	mov	r6,r2
 10063a8:	00bfffc4 	movi	r2,-1
 10063ac:	30801426 	beq	r6,r2,1006400 <__sflush_r+0x1e4>
 10063b0:	8880030b 	ldhu	r2,12(r17)
 10063b4:	8a000a17 	ldw	r8,40(r17)
 10063b8:	003fae06 	br	1006274 <__alt_data_end+0xff806274>
 10063bc:	98c00017 	ldw	r3,0(r19)
 10063c0:	183fba26 	beq	r3,zero,10062ac <__alt_data_end+0xff8062ac>
 10063c4:	01000744 	movi	r4,29
 10063c8:	19000626 	beq	r3,r4,10063e4 <__sflush_r+0x1c8>
 10063cc:	01000584 	movi	r4,22
 10063d0:	19000426 	beq	r3,r4,10063e4 <__sflush_r+0x1c8>
 10063d4:	88c0030b 	ldhu	r3,12(r17)
 10063d8:	18c01014 	ori	r3,r3,64
 10063dc:	88c0030d 	sth	r3,12(r17)
 10063e0:	003fc306 	br	10062f0 <__alt_data_end+0xff8062f0>
 10063e4:	8880030b 	ldhu	r2,12(r17)
 10063e8:	88c00417 	ldw	r3,16(r17)
 10063ec:	88000115 	stw	zero,4(r17)
 10063f0:	10bdffcc 	andi	r2,r2,63487
 10063f4:	8880030d 	sth	r2,12(r17)
 10063f8:	88c00015 	stw	r3,0(r17)
 10063fc:	003fb306 	br	10062cc <__alt_data_end+0xff8062cc>
 1006400:	98800017 	ldw	r2,0(r19)
 1006404:	103fea26 	beq	r2,zero,10063b0 <__alt_data_end+0xff8063b0>
 1006408:	00c00744 	movi	r3,29
 100640c:	10c00226 	beq	r2,r3,1006418 <__sflush_r+0x1fc>
 1006410:	00c00584 	movi	r3,22
 1006414:	10c0031e 	bne	r2,r3,1006424 <__sflush_r+0x208>
 1006418:	9c000015 	stw	r16,0(r19)
 100641c:	0005883a 	mov	r2,zero
 1006420:	003fb306 	br	10062f0 <__alt_data_end+0xff8062f0>
 1006424:	88c0030b 	ldhu	r3,12(r17)
 1006428:	3005883a 	mov	r2,r6
 100642c:	18c01014 	ori	r3,r3,64
 1006430:	88c0030d 	sth	r3,12(r17)
 1006434:	003fae06 	br	10062f0 <__alt_data_end+0xff8062f0>

01006438 <_fflush_r>:
 1006438:	defffd04 	addi	sp,sp,-12
 100643c:	dc000115 	stw	r16,4(sp)
 1006440:	dfc00215 	stw	ra,8(sp)
 1006444:	2021883a 	mov	r16,r4
 1006448:	20000226 	beq	r4,zero,1006454 <_fflush_r+0x1c>
 100644c:	20800e17 	ldw	r2,56(r4)
 1006450:	10000c26 	beq	r2,zero,1006484 <_fflush_r+0x4c>
 1006454:	2880030f 	ldh	r2,12(r5)
 1006458:	1000051e 	bne	r2,zero,1006470 <_fflush_r+0x38>
 100645c:	0005883a 	mov	r2,zero
 1006460:	dfc00217 	ldw	ra,8(sp)
 1006464:	dc000117 	ldw	r16,4(sp)
 1006468:	dec00304 	addi	sp,sp,12
 100646c:	f800283a 	ret
 1006470:	8009883a 	mov	r4,r16
 1006474:	dfc00217 	ldw	ra,8(sp)
 1006478:	dc000117 	ldw	r16,4(sp)
 100647c:	dec00304 	addi	sp,sp,12
 1006480:	100621c1 	jmpi	100621c <__sflush_r>
 1006484:	d9400015 	stw	r5,0(sp)
 1006488:	10068240 	call	1006824 <__sinit>
 100648c:	d9400017 	ldw	r5,0(sp)
 1006490:	003ff006 	br	1006454 <__alt_data_end+0xff806454>

01006494 <fflush>:
 1006494:	20000526 	beq	r4,zero,10064ac <fflush+0x18>
 1006498:	00804074 	movhi	r2,257
 100649c:	108fc504 	addi	r2,r2,16148
 10064a0:	200b883a 	mov	r5,r4
 10064a4:	11000017 	ldw	r4,0(r2)
 10064a8:	10064381 	jmpi	1006438 <_fflush_r>
 10064ac:	00804074 	movhi	r2,257
 10064b0:	108fc404 	addi	r2,r2,16144
 10064b4:	11000017 	ldw	r4,0(r2)
 10064b8:	01404034 	movhi	r5,256
 10064bc:	29590e04 	addi	r5,r5,25656
 10064c0:	10072341 	jmpi	1007234 <_fwalk_reent>

010064c4 <__fp_unlock>:
 10064c4:	0005883a 	mov	r2,zero
 10064c8:	f800283a 	ret

010064cc <_cleanup_r>:
 10064cc:	01404074 	movhi	r5,257
 10064d0:	296cf404 	addi	r5,r5,-19504
 10064d4:	10072341 	jmpi	1007234 <_fwalk_reent>

010064d8 <__sinit.part.1>:
 10064d8:	defff704 	addi	sp,sp,-36
 10064dc:	00c04034 	movhi	r3,256
 10064e0:	dfc00815 	stw	ra,32(sp)
 10064e4:	ddc00715 	stw	r23,28(sp)
 10064e8:	dd800615 	stw	r22,24(sp)
 10064ec:	dd400515 	stw	r21,20(sp)
 10064f0:	dd000415 	stw	r20,16(sp)
 10064f4:	dcc00315 	stw	r19,12(sp)
 10064f8:	dc800215 	stw	r18,8(sp)
 10064fc:	dc400115 	stw	r17,4(sp)
 1006500:	dc000015 	stw	r16,0(sp)
 1006504:	18d93304 	addi	r3,r3,25804
 1006508:	24000117 	ldw	r16,4(r4)
 100650c:	20c00f15 	stw	r3,60(r4)
 1006510:	2080bb04 	addi	r2,r4,748
 1006514:	00c000c4 	movi	r3,3
 1006518:	20c0b915 	stw	r3,740(r4)
 100651c:	2080ba15 	stw	r2,744(r4)
 1006520:	2000b815 	stw	zero,736(r4)
 1006524:	05c00204 	movi	r23,8
 1006528:	00800104 	movi	r2,4
 100652c:	2025883a 	mov	r18,r4
 1006530:	b80d883a 	mov	r6,r23
 1006534:	81001704 	addi	r4,r16,92
 1006538:	000b883a 	mov	r5,zero
 100653c:	80000015 	stw	zero,0(r16)
 1006540:	80000115 	stw	zero,4(r16)
 1006544:	80000215 	stw	zero,8(r16)
 1006548:	8080030d 	sth	r2,12(r16)
 100654c:	80001915 	stw	zero,100(r16)
 1006550:	8000038d 	sth	zero,14(r16)
 1006554:	80000415 	stw	zero,16(r16)
 1006558:	80000515 	stw	zero,20(r16)
 100655c:	80000615 	stw	zero,24(r16)
 1006560:	10081240 	call	1008124 <memset>
 1006564:	05804074 	movhi	r22,257
 1006568:	94400217 	ldw	r17,8(r18)
 100656c:	05404074 	movhi	r21,257
 1006570:	05004074 	movhi	r20,257
 1006574:	04c04074 	movhi	r19,257
 1006578:	b5a64c04 	addi	r22,r22,-26320
 100657c:	ad666304 	addi	r21,r21,-26228
 1006580:	a5268204 	addi	r20,r20,-26104
 1006584:	9ce69904 	addi	r19,r19,-26012
 1006588:	85800815 	stw	r22,32(r16)
 100658c:	85400915 	stw	r21,36(r16)
 1006590:	85000a15 	stw	r20,40(r16)
 1006594:	84c00b15 	stw	r19,44(r16)
 1006598:	84000715 	stw	r16,28(r16)
 100659c:	00800284 	movi	r2,10
 10065a0:	8880030d 	sth	r2,12(r17)
 10065a4:	00800044 	movi	r2,1
 10065a8:	b80d883a 	mov	r6,r23
 10065ac:	89001704 	addi	r4,r17,92
 10065b0:	000b883a 	mov	r5,zero
 10065b4:	88000015 	stw	zero,0(r17)
 10065b8:	88000115 	stw	zero,4(r17)
 10065bc:	88000215 	stw	zero,8(r17)
 10065c0:	88001915 	stw	zero,100(r17)
 10065c4:	8880038d 	sth	r2,14(r17)
 10065c8:	88000415 	stw	zero,16(r17)
 10065cc:	88000515 	stw	zero,20(r17)
 10065d0:	88000615 	stw	zero,24(r17)
 10065d4:	10081240 	call	1008124 <memset>
 10065d8:	94000317 	ldw	r16,12(r18)
 10065dc:	00800484 	movi	r2,18
 10065e0:	8c400715 	stw	r17,28(r17)
 10065e4:	8d800815 	stw	r22,32(r17)
 10065e8:	8d400915 	stw	r21,36(r17)
 10065ec:	8d000a15 	stw	r20,40(r17)
 10065f0:	8cc00b15 	stw	r19,44(r17)
 10065f4:	8080030d 	sth	r2,12(r16)
 10065f8:	00800084 	movi	r2,2
 10065fc:	80000015 	stw	zero,0(r16)
 1006600:	80000115 	stw	zero,4(r16)
 1006604:	80000215 	stw	zero,8(r16)
 1006608:	80001915 	stw	zero,100(r16)
 100660c:	8080038d 	sth	r2,14(r16)
 1006610:	80000415 	stw	zero,16(r16)
 1006614:	80000515 	stw	zero,20(r16)
 1006618:	80000615 	stw	zero,24(r16)
 100661c:	b80d883a 	mov	r6,r23
 1006620:	000b883a 	mov	r5,zero
 1006624:	81001704 	addi	r4,r16,92
 1006628:	10081240 	call	1008124 <memset>
 100662c:	00800044 	movi	r2,1
 1006630:	84000715 	stw	r16,28(r16)
 1006634:	85800815 	stw	r22,32(r16)
 1006638:	85400915 	stw	r21,36(r16)
 100663c:	85000a15 	stw	r20,40(r16)
 1006640:	84c00b15 	stw	r19,44(r16)
 1006644:	90800e15 	stw	r2,56(r18)
 1006648:	dfc00817 	ldw	ra,32(sp)
 100664c:	ddc00717 	ldw	r23,28(sp)
 1006650:	dd800617 	ldw	r22,24(sp)
 1006654:	dd400517 	ldw	r21,20(sp)
 1006658:	dd000417 	ldw	r20,16(sp)
 100665c:	dcc00317 	ldw	r19,12(sp)
 1006660:	dc800217 	ldw	r18,8(sp)
 1006664:	dc400117 	ldw	r17,4(sp)
 1006668:	dc000017 	ldw	r16,0(sp)
 100666c:	dec00904 	addi	sp,sp,36
 1006670:	f800283a 	ret

01006674 <__fp_lock>:
 1006674:	0005883a 	mov	r2,zero
 1006678:	f800283a 	ret

0100667c <__sfmoreglue>:
 100667c:	defffc04 	addi	sp,sp,-16
 1006680:	dc800215 	stw	r18,8(sp)
 1006684:	2825883a 	mov	r18,r5
 1006688:	dc000015 	stw	r16,0(sp)
 100668c:	01401a04 	movi	r5,104
 1006690:	2021883a 	mov	r16,r4
 1006694:	913fffc4 	addi	r4,r18,-1
 1006698:	dfc00315 	stw	ra,12(sp)
 100669c:	dc400115 	stw	r17,4(sp)
 10066a0:	100c9000 	call	100c900 <__mulsi3>
 10066a4:	8009883a 	mov	r4,r16
 10066a8:	11401d04 	addi	r5,r2,116
 10066ac:	1023883a 	mov	r17,r2
 10066b0:	10075900 	call	1007590 <_malloc_r>
 10066b4:	1021883a 	mov	r16,r2
 10066b8:	10000726 	beq	r2,zero,10066d8 <__sfmoreglue+0x5c>
 10066bc:	11000304 	addi	r4,r2,12
 10066c0:	10000015 	stw	zero,0(r2)
 10066c4:	14800115 	stw	r18,4(r2)
 10066c8:	11000215 	stw	r4,8(r2)
 10066cc:	89801a04 	addi	r6,r17,104
 10066d0:	000b883a 	mov	r5,zero
 10066d4:	10081240 	call	1008124 <memset>
 10066d8:	8005883a 	mov	r2,r16
 10066dc:	dfc00317 	ldw	ra,12(sp)
 10066e0:	dc800217 	ldw	r18,8(sp)
 10066e4:	dc400117 	ldw	r17,4(sp)
 10066e8:	dc000017 	ldw	r16,0(sp)
 10066ec:	dec00404 	addi	sp,sp,16
 10066f0:	f800283a 	ret

010066f4 <__sfp>:
 10066f4:	defffb04 	addi	sp,sp,-20
 10066f8:	dc000015 	stw	r16,0(sp)
 10066fc:	04004074 	movhi	r16,257
 1006700:	840fc404 	addi	r16,r16,16144
 1006704:	dcc00315 	stw	r19,12(sp)
 1006708:	2027883a 	mov	r19,r4
 100670c:	81000017 	ldw	r4,0(r16)
 1006710:	dfc00415 	stw	ra,16(sp)
 1006714:	dc800215 	stw	r18,8(sp)
 1006718:	20800e17 	ldw	r2,56(r4)
 100671c:	dc400115 	stw	r17,4(sp)
 1006720:	1000021e 	bne	r2,zero,100672c <__sfp+0x38>
 1006724:	10064d80 	call	10064d8 <__sinit.part.1>
 1006728:	81000017 	ldw	r4,0(r16)
 100672c:	2480b804 	addi	r18,r4,736
 1006730:	047fffc4 	movi	r17,-1
 1006734:	91000117 	ldw	r4,4(r18)
 1006738:	94000217 	ldw	r16,8(r18)
 100673c:	213fffc4 	addi	r4,r4,-1
 1006740:	20000a16 	blt	r4,zero,100676c <__sfp+0x78>
 1006744:	8080030f 	ldh	r2,12(r16)
 1006748:	10000c26 	beq	r2,zero,100677c <__sfp+0x88>
 100674c:	80c01d04 	addi	r3,r16,116
 1006750:	00000206 	br	100675c <__sfp+0x68>
 1006754:	18bfe60f 	ldh	r2,-104(r3)
 1006758:	10000826 	beq	r2,zero,100677c <__sfp+0x88>
 100675c:	213fffc4 	addi	r4,r4,-1
 1006760:	1c3ffd04 	addi	r16,r3,-12
 1006764:	18c01a04 	addi	r3,r3,104
 1006768:	247ffa1e 	bne	r4,r17,1006754 <__alt_data_end+0xff806754>
 100676c:	90800017 	ldw	r2,0(r18)
 1006770:	10001d26 	beq	r2,zero,10067e8 <__sfp+0xf4>
 1006774:	1025883a 	mov	r18,r2
 1006778:	003fee06 	br	1006734 <__alt_data_end+0xff806734>
 100677c:	00bfffc4 	movi	r2,-1
 1006780:	8080038d 	sth	r2,14(r16)
 1006784:	00800044 	movi	r2,1
 1006788:	8080030d 	sth	r2,12(r16)
 100678c:	80001915 	stw	zero,100(r16)
 1006790:	80000015 	stw	zero,0(r16)
 1006794:	80000215 	stw	zero,8(r16)
 1006798:	80000115 	stw	zero,4(r16)
 100679c:	80000415 	stw	zero,16(r16)
 10067a0:	80000515 	stw	zero,20(r16)
 10067a4:	80000615 	stw	zero,24(r16)
 10067a8:	01800204 	movi	r6,8
 10067ac:	000b883a 	mov	r5,zero
 10067b0:	81001704 	addi	r4,r16,92
 10067b4:	10081240 	call	1008124 <memset>
 10067b8:	8005883a 	mov	r2,r16
 10067bc:	80000c15 	stw	zero,48(r16)
 10067c0:	80000d15 	stw	zero,52(r16)
 10067c4:	80001115 	stw	zero,68(r16)
 10067c8:	80001215 	stw	zero,72(r16)
 10067cc:	dfc00417 	ldw	ra,16(sp)
 10067d0:	dcc00317 	ldw	r19,12(sp)
 10067d4:	dc800217 	ldw	r18,8(sp)
 10067d8:	dc400117 	ldw	r17,4(sp)
 10067dc:	dc000017 	ldw	r16,0(sp)
 10067e0:	dec00504 	addi	sp,sp,20
 10067e4:	f800283a 	ret
 10067e8:	01400104 	movi	r5,4
 10067ec:	9809883a 	mov	r4,r19
 10067f0:	100667c0 	call	100667c <__sfmoreglue>
 10067f4:	90800015 	stw	r2,0(r18)
 10067f8:	103fde1e 	bne	r2,zero,1006774 <__alt_data_end+0xff806774>
 10067fc:	00800304 	movi	r2,12
 1006800:	98800015 	stw	r2,0(r19)
 1006804:	0005883a 	mov	r2,zero
 1006808:	003ff006 	br	10067cc <__alt_data_end+0xff8067cc>

0100680c <_cleanup>:
 100680c:	00804074 	movhi	r2,257
 1006810:	108fc404 	addi	r2,r2,16144
 1006814:	11000017 	ldw	r4,0(r2)
 1006818:	01404074 	movhi	r5,257
 100681c:	296cf404 	addi	r5,r5,-19504
 1006820:	10072341 	jmpi	1007234 <_fwalk_reent>

01006824 <__sinit>:
 1006824:	20800e17 	ldw	r2,56(r4)
 1006828:	10000126 	beq	r2,zero,1006830 <__sinit+0xc>
 100682c:	f800283a 	ret
 1006830:	10064d81 	jmpi	10064d8 <__sinit.part.1>

01006834 <__sfp_lock_acquire>:
 1006834:	f800283a 	ret

01006838 <__sfp_lock_release>:
 1006838:	f800283a 	ret

0100683c <__sinit_lock_acquire>:
 100683c:	f800283a 	ret

01006840 <__sinit_lock_release>:
 1006840:	f800283a 	ret

01006844 <__fp_lock_all>:
 1006844:	00804074 	movhi	r2,257
 1006848:	108fc504 	addi	r2,r2,16148
 100684c:	11000017 	ldw	r4,0(r2)
 1006850:	01404034 	movhi	r5,256
 1006854:	29599d04 	addi	r5,r5,26228
 1006858:	10071701 	jmpi	1007170 <_fwalk>

0100685c <__fp_unlock_all>:
 100685c:	00804074 	movhi	r2,257
 1006860:	108fc504 	addi	r2,r2,16148
 1006864:	11000017 	ldw	r4,0(r2)
 1006868:	01404034 	movhi	r5,256
 100686c:	29593104 	addi	r5,r5,25796
 1006870:	10071701 	jmpi	1007170 <_fwalk>

01006874 <_malloc_trim_r>:
 1006874:	defffb04 	addi	sp,sp,-20
 1006878:	dcc00315 	stw	r19,12(sp)
 100687c:	04c04074 	movhi	r19,257
 1006880:	dc800215 	stw	r18,8(sp)
 1006884:	dc400115 	stw	r17,4(sp)
 1006888:	dc000015 	stw	r16,0(sp)
 100688c:	dfc00415 	stw	ra,16(sp)
 1006890:	2821883a 	mov	r16,r5
 1006894:	9cca4004 	addi	r19,r19,10496
 1006898:	2025883a 	mov	r18,r4
 100689c:	100f7680 	call	100f768 <__malloc_lock>
 10068a0:	98800217 	ldw	r2,8(r19)
 10068a4:	14400117 	ldw	r17,4(r2)
 10068a8:	00bfff04 	movi	r2,-4
 10068ac:	88a2703a 	and	r17,r17,r2
 10068b0:	8c21c83a 	sub	r16,r17,r16
 10068b4:	8403fbc4 	addi	r16,r16,4079
 10068b8:	8020d33a 	srli	r16,r16,12
 10068bc:	0083ffc4 	movi	r2,4095
 10068c0:	843fffc4 	addi	r16,r16,-1
 10068c4:	8020933a 	slli	r16,r16,12
 10068c8:	1400060e 	bge	r2,r16,10068e4 <_malloc_trim_r+0x70>
 10068cc:	000b883a 	mov	r5,zero
 10068d0:	9009883a 	mov	r4,r18
 10068d4:	10098dc0 	call	10098dc <_sbrk_r>
 10068d8:	98c00217 	ldw	r3,8(r19)
 10068dc:	1c47883a 	add	r3,r3,r17
 10068e0:	10c00a26 	beq	r2,r3,100690c <_malloc_trim_r+0x98>
 10068e4:	9009883a 	mov	r4,r18
 10068e8:	100f78c0 	call	100f78c <__malloc_unlock>
 10068ec:	0005883a 	mov	r2,zero
 10068f0:	dfc00417 	ldw	ra,16(sp)
 10068f4:	dcc00317 	ldw	r19,12(sp)
 10068f8:	dc800217 	ldw	r18,8(sp)
 10068fc:	dc400117 	ldw	r17,4(sp)
 1006900:	dc000017 	ldw	r16,0(sp)
 1006904:	dec00504 	addi	sp,sp,20
 1006908:	f800283a 	ret
 100690c:	040bc83a 	sub	r5,zero,r16
 1006910:	9009883a 	mov	r4,r18
 1006914:	10098dc0 	call	10098dc <_sbrk_r>
 1006918:	00ffffc4 	movi	r3,-1
 100691c:	10c00d26 	beq	r2,r3,1006954 <_malloc_trim_r+0xe0>
 1006920:	00c04074 	movhi	r3,257
 1006924:	18d69e04 	addi	r3,r3,23160
 1006928:	18800017 	ldw	r2,0(r3)
 100692c:	99000217 	ldw	r4,8(r19)
 1006930:	8c23c83a 	sub	r17,r17,r16
 1006934:	8c400054 	ori	r17,r17,1
 1006938:	1421c83a 	sub	r16,r2,r16
 100693c:	24400115 	stw	r17,4(r4)
 1006940:	9009883a 	mov	r4,r18
 1006944:	1c000015 	stw	r16,0(r3)
 1006948:	100f78c0 	call	100f78c <__malloc_unlock>
 100694c:	00800044 	movi	r2,1
 1006950:	003fe706 	br	10068f0 <__alt_data_end+0xff8068f0>
 1006954:	000b883a 	mov	r5,zero
 1006958:	9009883a 	mov	r4,r18
 100695c:	10098dc0 	call	10098dc <_sbrk_r>
 1006960:	99000217 	ldw	r4,8(r19)
 1006964:	014003c4 	movi	r5,15
 1006968:	1107c83a 	sub	r3,r2,r4
 100696c:	28ffdd0e 	bge	r5,r3,10068e4 <__alt_data_end+0xff8068e4>
 1006970:	01404074 	movhi	r5,257
 1006974:	294fc704 	addi	r5,r5,16156
 1006978:	29400017 	ldw	r5,0(r5)
 100697c:	18c00054 	ori	r3,r3,1
 1006980:	20c00115 	stw	r3,4(r4)
 1006984:	00c04074 	movhi	r3,257
 1006988:	1145c83a 	sub	r2,r2,r5
 100698c:	18d69e04 	addi	r3,r3,23160
 1006990:	18800015 	stw	r2,0(r3)
 1006994:	003fd306 	br	10068e4 <__alt_data_end+0xff8068e4>

01006998 <_free_r>:
 1006998:	28004126 	beq	r5,zero,1006aa0 <_free_r+0x108>
 100699c:	defffd04 	addi	sp,sp,-12
 10069a0:	dc400115 	stw	r17,4(sp)
 10069a4:	dc000015 	stw	r16,0(sp)
 10069a8:	2023883a 	mov	r17,r4
 10069ac:	2821883a 	mov	r16,r5
 10069b0:	dfc00215 	stw	ra,8(sp)
 10069b4:	100f7680 	call	100f768 <__malloc_lock>
 10069b8:	81ffff17 	ldw	r7,-4(r16)
 10069bc:	00bfff84 	movi	r2,-2
 10069c0:	01004074 	movhi	r4,257
 10069c4:	81bffe04 	addi	r6,r16,-8
 10069c8:	3884703a 	and	r2,r7,r2
 10069cc:	210a4004 	addi	r4,r4,10496
 10069d0:	308b883a 	add	r5,r6,r2
 10069d4:	2a400117 	ldw	r9,4(r5)
 10069d8:	22000217 	ldw	r8,8(r4)
 10069dc:	00ffff04 	movi	r3,-4
 10069e0:	48c6703a 	and	r3,r9,r3
 10069e4:	2a005726 	beq	r5,r8,1006b44 <_free_r+0x1ac>
 10069e8:	28c00115 	stw	r3,4(r5)
 10069ec:	39c0004c 	andi	r7,r7,1
 10069f0:	3800091e 	bne	r7,zero,1006a18 <_free_r+0x80>
 10069f4:	823ffe17 	ldw	r8,-8(r16)
 10069f8:	22400204 	addi	r9,r4,8
 10069fc:	320dc83a 	sub	r6,r6,r8
 1006a00:	31c00217 	ldw	r7,8(r6)
 1006a04:	1205883a 	add	r2,r2,r8
 1006a08:	3a406526 	beq	r7,r9,1006ba0 <_free_r+0x208>
 1006a0c:	32000317 	ldw	r8,12(r6)
 1006a10:	3a000315 	stw	r8,12(r7)
 1006a14:	41c00215 	stw	r7,8(r8)
 1006a18:	28cf883a 	add	r7,r5,r3
 1006a1c:	39c00117 	ldw	r7,4(r7)
 1006a20:	39c0004c 	andi	r7,r7,1
 1006a24:	38003a26 	beq	r7,zero,1006b10 <_free_r+0x178>
 1006a28:	10c00054 	ori	r3,r2,1
 1006a2c:	30c00115 	stw	r3,4(r6)
 1006a30:	3087883a 	add	r3,r6,r2
 1006a34:	18800015 	stw	r2,0(r3)
 1006a38:	00c07fc4 	movi	r3,511
 1006a3c:	18801936 	bltu	r3,r2,1006aa4 <_free_r+0x10c>
 1006a40:	1004d0fa 	srli	r2,r2,3
 1006a44:	01c00044 	movi	r7,1
 1006a48:	21400117 	ldw	r5,4(r4)
 1006a4c:	10c00044 	addi	r3,r2,1
 1006a50:	18c7883a 	add	r3,r3,r3
 1006a54:	1005d0ba 	srai	r2,r2,2
 1006a58:	18c7883a 	add	r3,r3,r3
 1006a5c:	18c7883a 	add	r3,r3,r3
 1006a60:	1907883a 	add	r3,r3,r4
 1006a64:	3884983a 	sll	r2,r7,r2
 1006a68:	19c00017 	ldw	r7,0(r3)
 1006a6c:	1a3ffe04 	addi	r8,r3,-8
 1006a70:	1144b03a 	or	r2,r2,r5
 1006a74:	32000315 	stw	r8,12(r6)
 1006a78:	31c00215 	stw	r7,8(r6)
 1006a7c:	20800115 	stw	r2,4(r4)
 1006a80:	19800015 	stw	r6,0(r3)
 1006a84:	39800315 	stw	r6,12(r7)
 1006a88:	8809883a 	mov	r4,r17
 1006a8c:	dfc00217 	ldw	ra,8(sp)
 1006a90:	dc400117 	ldw	r17,4(sp)
 1006a94:	dc000017 	ldw	r16,0(sp)
 1006a98:	dec00304 	addi	sp,sp,12
 1006a9c:	100f78c1 	jmpi	100f78c <__malloc_unlock>
 1006aa0:	f800283a 	ret
 1006aa4:	100ad27a 	srli	r5,r2,9
 1006aa8:	00c00104 	movi	r3,4
 1006aac:	19404a36 	bltu	r3,r5,1006bd8 <_free_r+0x240>
 1006ab0:	100ad1ba 	srli	r5,r2,6
 1006ab4:	28c00e44 	addi	r3,r5,57
 1006ab8:	18c7883a 	add	r3,r3,r3
 1006abc:	29400e04 	addi	r5,r5,56
 1006ac0:	18c7883a 	add	r3,r3,r3
 1006ac4:	18c7883a 	add	r3,r3,r3
 1006ac8:	1909883a 	add	r4,r3,r4
 1006acc:	20c00017 	ldw	r3,0(r4)
 1006ad0:	01c04074 	movhi	r7,257
 1006ad4:	213ffe04 	addi	r4,r4,-8
 1006ad8:	39ca4004 	addi	r7,r7,10496
 1006adc:	20c04426 	beq	r4,r3,1006bf0 <_free_r+0x258>
 1006ae0:	01ffff04 	movi	r7,-4
 1006ae4:	19400117 	ldw	r5,4(r3)
 1006ae8:	29ca703a 	and	r5,r5,r7
 1006aec:	1140022e 	bgeu	r2,r5,1006af8 <_free_r+0x160>
 1006af0:	18c00217 	ldw	r3,8(r3)
 1006af4:	20fffb1e 	bne	r4,r3,1006ae4 <__alt_data_end+0xff806ae4>
 1006af8:	19000317 	ldw	r4,12(r3)
 1006afc:	31000315 	stw	r4,12(r6)
 1006b00:	30c00215 	stw	r3,8(r6)
 1006b04:	21800215 	stw	r6,8(r4)
 1006b08:	19800315 	stw	r6,12(r3)
 1006b0c:	003fde06 	br	1006a88 <__alt_data_end+0xff806a88>
 1006b10:	29c00217 	ldw	r7,8(r5)
 1006b14:	10c5883a 	add	r2,r2,r3
 1006b18:	00c04074 	movhi	r3,257
 1006b1c:	18ca4204 	addi	r3,r3,10504
 1006b20:	38c03b26 	beq	r7,r3,1006c10 <_free_r+0x278>
 1006b24:	2a000317 	ldw	r8,12(r5)
 1006b28:	11400054 	ori	r5,r2,1
 1006b2c:	3087883a 	add	r3,r6,r2
 1006b30:	3a000315 	stw	r8,12(r7)
 1006b34:	41c00215 	stw	r7,8(r8)
 1006b38:	31400115 	stw	r5,4(r6)
 1006b3c:	18800015 	stw	r2,0(r3)
 1006b40:	003fbd06 	br	1006a38 <__alt_data_end+0xff806a38>
 1006b44:	39c0004c 	andi	r7,r7,1
 1006b48:	10c5883a 	add	r2,r2,r3
 1006b4c:	3800071e 	bne	r7,zero,1006b6c <_free_r+0x1d4>
 1006b50:	81fffe17 	ldw	r7,-8(r16)
 1006b54:	31cdc83a 	sub	r6,r6,r7
 1006b58:	30c00317 	ldw	r3,12(r6)
 1006b5c:	31400217 	ldw	r5,8(r6)
 1006b60:	11c5883a 	add	r2,r2,r7
 1006b64:	28c00315 	stw	r3,12(r5)
 1006b68:	19400215 	stw	r5,8(r3)
 1006b6c:	10c00054 	ori	r3,r2,1
 1006b70:	30c00115 	stw	r3,4(r6)
 1006b74:	00c04074 	movhi	r3,257
 1006b78:	18cfc804 	addi	r3,r3,16160
 1006b7c:	18c00017 	ldw	r3,0(r3)
 1006b80:	21800215 	stw	r6,8(r4)
 1006b84:	10ffc036 	bltu	r2,r3,1006a88 <__alt_data_end+0xff806a88>
 1006b88:	00804074 	movhi	r2,257
 1006b8c:	10969504 	addi	r2,r2,23124
 1006b90:	11400017 	ldw	r5,0(r2)
 1006b94:	8809883a 	mov	r4,r17
 1006b98:	10068740 	call	1006874 <_malloc_trim_r>
 1006b9c:	003fba06 	br	1006a88 <__alt_data_end+0xff806a88>
 1006ba0:	28c9883a 	add	r4,r5,r3
 1006ba4:	21000117 	ldw	r4,4(r4)
 1006ba8:	2100004c 	andi	r4,r4,1
 1006bac:	2000391e 	bne	r4,zero,1006c94 <_free_r+0x2fc>
 1006bb0:	29c00217 	ldw	r7,8(r5)
 1006bb4:	29000317 	ldw	r4,12(r5)
 1006bb8:	1885883a 	add	r2,r3,r2
 1006bbc:	10c00054 	ori	r3,r2,1
 1006bc0:	39000315 	stw	r4,12(r7)
 1006bc4:	21c00215 	stw	r7,8(r4)
 1006bc8:	30c00115 	stw	r3,4(r6)
 1006bcc:	308d883a 	add	r6,r6,r2
 1006bd0:	30800015 	stw	r2,0(r6)
 1006bd4:	003fac06 	br	1006a88 <__alt_data_end+0xff806a88>
 1006bd8:	00c00504 	movi	r3,20
 1006bdc:	19401536 	bltu	r3,r5,1006c34 <_free_r+0x29c>
 1006be0:	28c01704 	addi	r3,r5,92
 1006be4:	18c7883a 	add	r3,r3,r3
 1006be8:	294016c4 	addi	r5,r5,91
 1006bec:	003fb406 	br	1006ac0 <__alt_data_end+0xff806ac0>
 1006bf0:	280bd0ba 	srai	r5,r5,2
 1006bf4:	00c00044 	movi	r3,1
 1006bf8:	38800117 	ldw	r2,4(r7)
 1006bfc:	194a983a 	sll	r5,r3,r5
 1006c00:	2007883a 	mov	r3,r4
 1006c04:	2884b03a 	or	r2,r5,r2
 1006c08:	38800115 	stw	r2,4(r7)
 1006c0c:	003fbb06 	br	1006afc <__alt_data_end+0xff806afc>
 1006c10:	21800515 	stw	r6,20(r4)
 1006c14:	21800415 	stw	r6,16(r4)
 1006c18:	10c00054 	ori	r3,r2,1
 1006c1c:	31c00315 	stw	r7,12(r6)
 1006c20:	31c00215 	stw	r7,8(r6)
 1006c24:	30c00115 	stw	r3,4(r6)
 1006c28:	308d883a 	add	r6,r6,r2
 1006c2c:	30800015 	stw	r2,0(r6)
 1006c30:	003f9506 	br	1006a88 <__alt_data_end+0xff806a88>
 1006c34:	00c01504 	movi	r3,84
 1006c38:	19400536 	bltu	r3,r5,1006c50 <_free_r+0x2b8>
 1006c3c:	100ad33a 	srli	r5,r2,12
 1006c40:	28c01bc4 	addi	r3,r5,111
 1006c44:	18c7883a 	add	r3,r3,r3
 1006c48:	29401b84 	addi	r5,r5,110
 1006c4c:	003f9c06 	br	1006ac0 <__alt_data_end+0xff806ac0>
 1006c50:	00c05504 	movi	r3,340
 1006c54:	19400536 	bltu	r3,r5,1006c6c <_free_r+0x2d4>
 1006c58:	100ad3fa 	srli	r5,r2,15
 1006c5c:	28c01e04 	addi	r3,r5,120
 1006c60:	18c7883a 	add	r3,r3,r3
 1006c64:	29401dc4 	addi	r5,r5,119
 1006c68:	003f9506 	br	1006ac0 <__alt_data_end+0xff806ac0>
 1006c6c:	00c15504 	movi	r3,1364
 1006c70:	19400536 	bltu	r3,r5,1006c88 <_free_r+0x2f0>
 1006c74:	100ad4ba 	srli	r5,r2,18
 1006c78:	28c01f44 	addi	r3,r5,125
 1006c7c:	18c7883a 	add	r3,r3,r3
 1006c80:	29401f04 	addi	r5,r5,124
 1006c84:	003f8e06 	br	1006ac0 <__alt_data_end+0xff806ac0>
 1006c88:	00c03f84 	movi	r3,254
 1006c8c:	01401f84 	movi	r5,126
 1006c90:	003f8b06 	br	1006ac0 <__alt_data_end+0xff806ac0>
 1006c94:	10c00054 	ori	r3,r2,1
 1006c98:	30c00115 	stw	r3,4(r6)
 1006c9c:	308d883a 	add	r6,r6,r2
 1006ca0:	30800015 	stw	r2,0(r6)
 1006ca4:	003f7806 	br	1006a88 <__alt_data_end+0xff806a88>

01006ca8 <__sfvwrite_r>:
 1006ca8:	30800217 	ldw	r2,8(r6)
 1006cac:	10006726 	beq	r2,zero,1006e4c <__sfvwrite_r+0x1a4>
 1006cb0:	28c0030b 	ldhu	r3,12(r5)
 1006cb4:	defff404 	addi	sp,sp,-48
 1006cb8:	dd400715 	stw	r21,28(sp)
 1006cbc:	dd000615 	stw	r20,24(sp)
 1006cc0:	dc000215 	stw	r16,8(sp)
 1006cc4:	dfc00b15 	stw	ra,44(sp)
 1006cc8:	df000a15 	stw	fp,40(sp)
 1006ccc:	ddc00915 	stw	r23,36(sp)
 1006cd0:	dd800815 	stw	r22,32(sp)
 1006cd4:	dcc00515 	stw	r19,20(sp)
 1006cd8:	dc800415 	stw	r18,16(sp)
 1006cdc:	dc400315 	stw	r17,12(sp)
 1006ce0:	1880020c 	andi	r2,r3,8
 1006ce4:	2821883a 	mov	r16,r5
 1006ce8:	202b883a 	mov	r21,r4
 1006cec:	3029883a 	mov	r20,r6
 1006cf0:	10002726 	beq	r2,zero,1006d90 <__sfvwrite_r+0xe8>
 1006cf4:	28800417 	ldw	r2,16(r5)
 1006cf8:	10002526 	beq	r2,zero,1006d90 <__sfvwrite_r+0xe8>
 1006cfc:	1880008c 	andi	r2,r3,2
 1006d00:	a4400017 	ldw	r17,0(r20)
 1006d04:	10002a26 	beq	r2,zero,1006db0 <__sfvwrite_r+0x108>
 1006d08:	05a00034 	movhi	r22,32768
 1006d0c:	0027883a 	mov	r19,zero
 1006d10:	0025883a 	mov	r18,zero
 1006d14:	b5bf0004 	addi	r22,r22,-1024
 1006d18:	980d883a 	mov	r6,r19
 1006d1c:	a809883a 	mov	r4,r21
 1006d20:	90004626 	beq	r18,zero,1006e3c <__sfvwrite_r+0x194>
 1006d24:	900f883a 	mov	r7,r18
 1006d28:	b480022e 	bgeu	r22,r18,1006d34 <__sfvwrite_r+0x8c>
 1006d2c:	01e00034 	movhi	r7,32768
 1006d30:	39ff0004 	addi	r7,r7,-1024
 1006d34:	80800917 	ldw	r2,36(r16)
 1006d38:	81400717 	ldw	r5,28(r16)
 1006d3c:	103ee83a 	callr	r2
 1006d40:	00805a0e 	bge	zero,r2,1006eac <__sfvwrite_r+0x204>
 1006d44:	a0c00217 	ldw	r3,8(r20)
 1006d48:	98a7883a 	add	r19,r19,r2
 1006d4c:	90a5c83a 	sub	r18,r18,r2
 1006d50:	1885c83a 	sub	r2,r3,r2
 1006d54:	a0800215 	stw	r2,8(r20)
 1006d58:	103fef1e 	bne	r2,zero,1006d18 <__alt_data_end+0xff806d18>
 1006d5c:	0005883a 	mov	r2,zero
 1006d60:	dfc00b17 	ldw	ra,44(sp)
 1006d64:	df000a17 	ldw	fp,40(sp)
 1006d68:	ddc00917 	ldw	r23,36(sp)
 1006d6c:	dd800817 	ldw	r22,32(sp)
 1006d70:	dd400717 	ldw	r21,28(sp)
 1006d74:	dd000617 	ldw	r20,24(sp)
 1006d78:	dcc00517 	ldw	r19,20(sp)
 1006d7c:	dc800417 	ldw	r18,16(sp)
 1006d80:	dc400317 	ldw	r17,12(sp)
 1006d84:	dc000217 	ldw	r16,8(sp)
 1006d88:	dec00c04 	addi	sp,sp,48
 1006d8c:	f800283a 	ret
 1006d90:	800b883a 	mov	r5,r16
 1006d94:	a809883a 	mov	r4,r21
 1006d98:	10048180 	call	1004818 <__swsetup_r>
 1006d9c:	1000ee1e 	bne	r2,zero,1007158 <__sfvwrite_r+0x4b0>
 1006da0:	80c0030b 	ldhu	r3,12(r16)
 1006da4:	a4400017 	ldw	r17,0(r20)
 1006da8:	1880008c 	andi	r2,r3,2
 1006dac:	103fd61e 	bne	r2,zero,1006d08 <__alt_data_end+0xff806d08>
 1006db0:	1880004c 	andi	r2,r3,1
 1006db4:	1000421e 	bne	r2,zero,1006ec0 <__sfvwrite_r+0x218>
 1006db8:	0039883a 	mov	fp,zero
 1006dbc:	0025883a 	mov	r18,zero
 1006dc0:	90001a26 	beq	r18,zero,1006e2c <__sfvwrite_r+0x184>
 1006dc4:	1880800c 	andi	r2,r3,512
 1006dc8:	84c00217 	ldw	r19,8(r16)
 1006dcc:	10002126 	beq	r2,zero,1006e54 <__sfvwrite_r+0x1ac>
 1006dd0:	982f883a 	mov	r23,r19
 1006dd4:	94c09636 	bltu	r18,r19,1007030 <__sfvwrite_r+0x388>
 1006dd8:	1881200c 	andi	r2,r3,1152
 1006ddc:	1000a11e 	bne	r2,zero,1007064 <__sfvwrite_r+0x3bc>
 1006de0:	81000017 	ldw	r4,0(r16)
 1006de4:	b80d883a 	mov	r6,r23
 1006de8:	e00b883a 	mov	r5,fp
 1006dec:	1007fc80 	call	1007fc8 <memmove>
 1006df0:	80c00217 	ldw	r3,8(r16)
 1006df4:	81000017 	ldw	r4,0(r16)
 1006df8:	9005883a 	mov	r2,r18
 1006dfc:	1ce7c83a 	sub	r19,r3,r19
 1006e00:	25cf883a 	add	r7,r4,r23
 1006e04:	84c00215 	stw	r19,8(r16)
 1006e08:	81c00015 	stw	r7,0(r16)
 1006e0c:	a0c00217 	ldw	r3,8(r20)
 1006e10:	e0b9883a 	add	fp,fp,r2
 1006e14:	90a5c83a 	sub	r18,r18,r2
 1006e18:	18a7c83a 	sub	r19,r3,r2
 1006e1c:	a4c00215 	stw	r19,8(r20)
 1006e20:	983fce26 	beq	r19,zero,1006d5c <__alt_data_end+0xff806d5c>
 1006e24:	80c0030b 	ldhu	r3,12(r16)
 1006e28:	903fe61e 	bne	r18,zero,1006dc4 <__alt_data_end+0xff806dc4>
 1006e2c:	8f000017 	ldw	fp,0(r17)
 1006e30:	8c800117 	ldw	r18,4(r17)
 1006e34:	8c400204 	addi	r17,r17,8
 1006e38:	003fe106 	br	1006dc0 <__alt_data_end+0xff806dc0>
 1006e3c:	8cc00017 	ldw	r19,0(r17)
 1006e40:	8c800117 	ldw	r18,4(r17)
 1006e44:	8c400204 	addi	r17,r17,8
 1006e48:	003fb306 	br	1006d18 <__alt_data_end+0xff806d18>
 1006e4c:	0005883a 	mov	r2,zero
 1006e50:	f800283a 	ret
 1006e54:	81000017 	ldw	r4,0(r16)
 1006e58:	80800417 	ldw	r2,16(r16)
 1006e5c:	11005a36 	bltu	r2,r4,1006fc8 <__sfvwrite_r+0x320>
 1006e60:	85c00517 	ldw	r23,20(r16)
 1006e64:	95c05836 	bltu	r18,r23,1006fc8 <__sfvwrite_r+0x320>
 1006e68:	00a00034 	movhi	r2,32768
 1006e6c:	10bfffc4 	addi	r2,r2,-1
 1006e70:	9009883a 	mov	r4,r18
 1006e74:	1480012e 	bgeu	r2,r18,1006e7c <__sfvwrite_r+0x1d4>
 1006e78:	1009883a 	mov	r4,r2
 1006e7c:	b80b883a 	mov	r5,r23
 1006e80:	100c74c0 	call	100c74c <__divsi3>
 1006e84:	b80b883a 	mov	r5,r23
 1006e88:	1009883a 	mov	r4,r2
 1006e8c:	100c9000 	call	100c900 <__mulsi3>
 1006e90:	81400717 	ldw	r5,28(r16)
 1006e94:	80c00917 	ldw	r3,36(r16)
 1006e98:	100f883a 	mov	r7,r2
 1006e9c:	e00d883a 	mov	r6,fp
 1006ea0:	a809883a 	mov	r4,r21
 1006ea4:	183ee83a 	callr	r3
 1006ea8:	00bfd816 	blt	zero,r2,1006e0c <__alt_data_end+0xff806e0c>
 1006eac:	8080030b 	ldhu	r2,12(r16)
 1006eb0:	10801014 	ori	r2,r2,64
 1006eb4:	8080030d 	sth	r2,12(r16)
 1006eb8:	00bfffc4 	movi	r2,-1
 1006ebc:	003fa806 	br	1006d60 <__alt_data_end+0xff806d60>
 1006ec0:	0027883a 	mov	r19,zero
 1006ec4:	0011883a 	mov	r8,zero
 1006ec8:	0039883a 	mov	fp,zero
 1006ecc:	0025883a 	mov	r18,zero
 1006ed0:	90001f26 	beq	r18,zero,1006f50 <__sfvwrite_r+0x2a8>
 1006ed4:	40005a26 	beq	r8,zero,1007040 <__sfvwrite_r+0x398>
 1006ed8:	982d883a 	mov	r22,r19
 1006edc:	94c0012e 	bgeu	r18,r19,1006ee4 <__sfvwrite_r+0x23c>
 1006ee0:	902d883a 	mov	r22,r18
 1006ee4:	81000017 	ldw	r4,0(r16)
 1006ee8:	80800417 	ldw	r2,16(r16)
 1006eec:	b02f883a 	mov	r23,r22
 1006ef0:	81c00517 	ldw	r7,20(r16)
 1006ef4:	1100032e 	bgeu	r2,r4,1006f04 <__sfvwrite_r+0x25c>
 1006ef8:	80c00217 	ldw	r3,8(r16)
 1006efc:	38c7883a 	add	r3,r7,r3
 1006f00:	1d801816 	blt	r3,r22,1006f64 <__sfvwrite_r+0x2bc>
 1006f04:	b1c03e16 	blt	r22,r7,1007000 <__sfvwrite_r+0x358>
 1006f08:	80800917 	ldw	r2,36(r16)
 1006f0c:	81400717 	ldw	r5,28(r16)
 1006f10:	e00d883a 	mov	r6,fp
 1006f14:	da000115 	stw	r8,4(sp)
 1006f18:	a809883a 	mov	r4,r21
 1006f1c:	103ee83a 	callr	r2
 1006f20:	102f883a 	mov	r23,r2
 1006f24:	da000117 	ldw	r8,4(sp)
 1006f28:	00bfe00e 	bge	zero,r2,1006eac <__alt_data_end+0xff806eac>
 1006f2c:	9de7c83a 	sub	r19,r19,r23
 1006f30:	98001f26 	beq	r19,zero,1006fb0 <__sfvwrite_r+0x308>
 1006f34:	a0800217 	ldw	r2,8(r20)
 1006f38:	e5f9883a 	add	fp,fp,r23
 1006f3c:	95e5c83a 	sub	r18,r18,r23
 1006f40:	15efc83a 	sub	r23,r2,r23
 1006f44:	a5c00215 	stw	r23,8(r20)
 1006f48:	b83f8426 	beq	r23,zero,1006d5c <__alt_data_end+0xff806d5c>
 1006f4c:	903fe11e 	bne	r18,zero,1006ed4 <__alt_data_end+0xff806ed4>
 1006f50:	8f000017 	ldw	fp,0(r17)
 1006f54:	8c800117 	ldw	r18,4(r17)
 1006f58:	0011883a 	mov	r8,zero
 1006f5c:	8c400204 	addi	r17,r17,8
 1006f60:	003fdb06 	br	1006ed0 <__alt_data_end+0xff806ed0>
 1006f64:	180d883a 	mov	r6,r3
 1006f68:	e00b883a 	mov	r5,fp
 1006f6c:	da000115 	stw	r8,4(sp)
 1006f70:	d8c00015 	stw	r3,0(sp)
 1006f74:	1007fc80 	call	1007fc8 <memmove>
 1006f78:	d8c00017 	ldw	r3,0(sp)
 1006f7c:	80800017 	ldw	r2,0(r16)
 1006f80:	800b883a 	mov	r5,r16
 1006f84:	a809883a 	mov	r4,r21
 1006f88:	10c5883a 	add	r2,r2,r3
 1006f8c:	80800015 	stw	r2,0(r16)
 1006f90:	d8c00015 	stw	r3,0(sp)
 1006f94:	10064380 	call	1006438 <_fflush_r>
 1006f98:	d8c00017 	ldw	r3,0(sp)
 1006f9c:	da000117 	ldw	r8,4(sp)
 1006fa0:	103fc21e 	bne	r2,zero,1006eac <__alt_data_end+0xff806eac>
 1006fa4:	182f883a 	mov	r23,r3
 1006fa8:	9de7c83a 	sub	r19,r19,r23
 1006fac:	983fe11e 	bne	r19,zero,1006f34 <__alt_data_end+0xff806f34>
 1006fb0:	800b883a 	mov	r5,r16
 1006fb4:	a809883a 	mov	r4,r21
 1006fb8:	10064380 	call	1006438 <_fflush_r>
 1006fbc:	103fbb1e 	bne	r2,zero,1006eac <__alt_data_end+0xff806eac>
 1006fc0:	0011883a 	mov	r8,zero
 1006fc4:	003fdb06 	br	1006f34 <__alt_data_end+0xff806f34>
 1006fc8:	94c0012e 	bgeu	r18,r19,1006fd0 <__sfvwrite_r+0x328>
 1006fcc:	9027883a 	mov	r19,r18
 1006fd0:	980d883a 	mov	r6,r19
 1006fd4:	e00b883a 	mov	r5,fp
 1006fd8:	1007fc80 	call	1007fc8 <memmove>
 1006fdc:	80800217 	ldw	r2,8(r16)
 1006fe0:	80c00017 	ldw	r3,0(r16)
 1006fe4:	14c5c83a 	sub	r2,r2,r19
 1006fe8:	1cc7883a 	add	r3,r3,r19
 1006fec:	80800215 	stw	r2,8(r16)
 1006ff0:	80c00015 	stw	r3,0(r16)
 1006ff4:	10004326 	beq	r2,zero,1007104 <__sfvwrite_r+0x45c>
 1006ff8:	9805883a 	mov	r2,r19
 1006ffc:	003f8306 	br	1006e0c <__alt_data_end+0xff806e0c>
 1007000:	b00d883a 	mov	r6,r22
 1007004:	e00b883a 	mov	r5,fp
 1007008:	da000115 	stw	r8,4(sp)
 100700c:	1007fc80 	call	1007fc8 <memmove>
 1007010:	80800217 	ldw	r2,8(r16)
 1007014:	80c00017 	ldw	r3,0(r16)
 1007018:	da000117 	ldw	r8,4(sp)
 100701c:	1585c83a 	sub	r2,r2,r22
 1007020:	1dad883a 	add	r22,r3,r22
 1007024:	80800215 	stw	r2,8(r16)
 1007028:	85800015 	stw	r22,0(r16)
 100702c:	003fbf06 	br	1006f2c <__alt_data_end+0xff806f2c>
 1007030:	81000017 	ldw	r4,0(r16)
 1007034:	9027883a 	mov	r19,r18
 1007038:	902f883a 	mov	r23,r18
 100703c:	003f6906 	br	1006de4 <__alt_data_end+0xff806de4>
 1007040:	900d883a 	mov	r6,r18
 1007044:	01400284 	movi	r5,10
 1007048:	e009883a 	mov	r4,fp
 100704c:	1007d9c0 	call	1007d9c <memchr>
 1007050:	10003e26 	beq	r2,zero,100714c <__sfvwrite_r+0x4a4>
 1007054:	10800044 	addi	r2,r2,1
 1007058:	1727c83a 	sub	r19,r2,fp
 100705c:	02000044 	movi	r8,1
 1007060:	003f9d06 	br	1006ed8 <__alt_data_end+0xff806ed8>
 1007064:	80800517 	ldw	r2,20(r16)
 1007068:	81400417 	ldw	r5,16(r16)
 100706c:	81c00017 	ldw	r7,0(r16)
 1007070:	10a7883a 	add	r19,r2,r2
 1007074:	9885883a 	add	r2,r19,r2
 1007078:	1026d7fa 	srli	r19,r2,31
 100707c:	396dc83a 	sub	r22,r7,r5
 1007080:	b1000044 	addi	r4,r22,1
 1007084:	9885883a 	add	r2,r19,r2
 1007088:	1027d07a 	srai	r19,r2,1
 100708c:	2485883a 	add	r2,r4,r18
 1007090:	980d883a 	mov	r6,r19
 1007094:	9880022e 	bgeu	r19,r2,10070a0 <__sfvwrite_r+0x3f8>
 1007098:	1027883a 	mov	r19,r2
 100709c:	100d883a 	mov	r6,r2
 10070a0:	18c1000c 	andi	r3,r3,1024
 10070a4:	18001c26 	beq	r3,zero,1007118 <__sfvwrite_r+0x470>
 10070a8:	300b883a 	mov	r5,r6
 10070ac:	a809883a 	mov	r4,r21
 10070b0:	10075900 	call	1007590 <_malloc_r>
 10070b4:	102f883a 	mov	r23,r2
 10070b8:	10002926 	beq	r2,zero,1007160 <__sfvwrite_r+0x4b8>
 10070bc:	81400417 	ldw	r5,16(r16)
 10070c0:	b00d883a 	mov	r6,r22
 10070c4:	1009883a 	mov	r4,r2
 10070c8:	1007e800 	call	1007e80 <memcpy>
 10070cc:	8080030b 	ldhu	r2,12(r16)
 10070d0:	00fedfc4 	movi	r3,-1153
 10070d4:	10c4703a 	and	r2,r2,r3
 10070d8:	10802014 	ori	r2,r2,128
 10070dc:	8080030d 	sth	r2,12(r16)
 10070e0:	bd89883a 	add	r4,r23,r22
 10070e4:	9d8fc83a 	sub	r7,r19,r22
 10070e8:	85c00415 	stw	r23,16(r16)
 10070ec:	84c00515 	stw	r19,20(r16)
 10070f0:	81000015 	stw	r4,0(r16)
 10070f4:	9027883a 	mov	r19,r18
 10070f8:	81c00215 	stw	r7,8(r16)
 10070fc:	902f883a 	mov	r23,r18
 1007100:	003f3806 	br	1006de4 <__alt_data_end+0xff806de4>
 1007104:	800b883a 	mov	r5,r16
 1007108:	a809883a 	mov	r4,r21
 100710c:	10064380 	call	1006438 <_fflush_r>
 1007110:	103fb926 	beq	r2,zero,1006ff8 <__alt_data_end+0xff806ff8>
 1007114:	003f6506 	br	1006eac <__alt_data_end+0xff806eac>
 1007118:	a809883a 	mov	r4,r21
 100711c:	10093040 	call	1009304 <_realloc_r>
 1007120:	102f883a 	mov	r23,r2
 1007124:	103fee1e 	bne	r2,zero,10070e0 <__alt_data_end+0xff8070e0>
 1007128:	81400417 	ldw	r5,16(r16)
 100712c:	a809883a 	mov	r4,r21
 1007130:	10069980 	call	1006998 <_free_r>
 1007134:	8080030b 	ldhu	r2,12(r16)
 1007138:	00ffdfc4 	movi	r3,-129
 100713c:	1884703a 	and	r2,r3,r2
 1007140:	00c00304 	movi	r3,12
 1007144:	a8c00015 	stw	r3,0(r21)
 1007148:	003f5906 	br	1006eb0 <__alt_data_end+0xff806eb0>
 100714c:	94c00044 	addi	r19,r18,1
 1007150:	02000044 	movi	r8,1
 1007154:	003f6006 	br	1006ed8 <__alt_data_end+0xff806ed8>
 1007158:	00bfffc4 	movi	r2,-1
 100715c:	003f0006 	br	1006d60 <__alt_data_end+0xff806d60>
 1007160:	00800304 	movi	r2,12
 1007164:	a8800015 	stw	r2,0(r21)
 1007168:	8080030b 	ldhu	r2,12(r16)
 100716c:	003f5006 	br	1006eb0 <__alt_data_end+0xff806eb0>

01007170 <_fwalk>:
 1007170:	defff704 	addi	sp,sp,-36
 1007174:	dd000415 	stw	r20,16(sp)
 1007178:	dfc00815 	stw	ra,32(sp)
 100717c:	ddc00715 	stw	r23,28(sp)
 1007180:	dd800615 	stw	r22,24(sp)
 1007184:	dd400515 	stw	r21,20(sp)
 1007188:	dcc00315 	stw	r19,12(sp)
 100718c:	dc800215 	stw	r18,8(sp)
 1007190:	dc400115 	stw	r17,4(sp)
 1007194:	dc000015 	stw	r16,0(sp)
 1007198:	2500b804 	addi	r20,r4,736
 100719c:	a0002326 	beq	r20,zero,100722c <_fwalk+0xbc>
 10071a0:	282b883a 	mov	r21,r5
 10071a4:	002f883a 	mov	r23,zero
 10071a8:	05800044 	movi	r22,1
 10071ac:	04ffffc4 	movi	r19,-1
 10071b0:	a4400117 	ldw	r17,4(r20)
 10071b4:	a4800217 	ldw	r18,8(r20)
 10071b8:	8c7fffc4 	addi	r17,r17,-1
 10071bc:	88000d16 	blt	r17,zero,10071f4 <_fwalk+0x84>
 10071c0:	94000304 	addi	r16,r18,12
 10071c4:	94800384 	addi	r18,r18,14
 10071c8:	8080000b 	ldhu	r2,0(r16)
 10071cc:	8c7fffc4 	addi	r17,r17,-1
 10071d0:	813ffd04 	addi	r4,r16,-12
 10071d4:	b080042e 	bgeu	r22,r2,10071e8 <_fwalk+0x78>
 10071d8:	9080000f 	ldh	r2,0(r18)
 10071dc:	14c00226 	beq	r2,r19,10071e8 <_fwalk+0x78>
 10071e0:	a83ee83a 	callr	r21
 10071e4:	b8aeb03a 	or	r23,r23,r2
 10071e8:	84001a04 	addi	r16,r16,104
 10071ec:	94801a04 	addi	r18,r18,104
 10071f0:	8cfff51e 	bne	r17,r19,10071c8 <__alt_data_end+0xff8071c8>
 10071f4:	a5000017 	ldw	r20,0(r20)
 10071f8:	a03fed1e 	bne	r20,zero,10071b0 <__alt_data_end+0xff8071b0>
 10071fc:	b805883a 	mov	r2,r23
 1007200:	dfc00817 	ldw	ra,32(sp)
 1007204:	ddc00717 	ldw	r23,28(sp)
 1007208:	dd800617 	ldw	r22,24(sp)
 100720c:	dd400517 	ldw	r21,20(sp)
 1007210:	dd000417 	ldw	r20,16(sp)
 1007214:	dcc00317 	ldw	r19,12(sp)
 1007218:	dc800217 	ldw	r18,8(sp)
 100721c:	dc400117 	ldw	r17,4(sp)
 1007220:	dc000017 	ldw	r16,0(sp)
 1007224:	dec00904 	addi	sp,sp,36
 1007228:	f800283a 	ret
 100722c:	002f883a 	mov	r23,zero
 1007230:	003ff206 	br	10071fc <__alt_data_end+0xff8071fc>

01007234 <_fwalk_reent>:
 1007234:	defff704 	addi	sp,sp,-36
 1007238:	dd000415 	stw	r20,16(sp)
 100723c:	dfc00815 	stw	ra,32(sp)
 1007240:	ddc00715 	stw	r23,28(sp)
 1007244:	dd800615 	stw	r22,24(sp)
 1007248:	dd400515 	stw	r21,20(sp)
 100724c:	dcc00315 	stw	r19,12(sp)
 1007250:	dc800215 	stw	r18,8(sp)
 1007254:	dc400115 	stw	r17,4(sp)
 1007258:	dc000015 	stw	r16,0(sp)
 100725c:	2500b804 	addi	r20,r4,736
 1007260:	a0002326 	beq	r20,zero,10072f0 <_fwalk_reent+0xbc>
 1007264:	282b883a 	mov	r21,r5
 1007268:	2027883a 	mov	r19,r4
 100726c:	002f883a 	mov	r23,zero
 1007270:	05800044 	movi	r22,1
 1007274:	04bfffc4 	movi	r18,-1
 1007278:	a4400117 	ldw	r17,4(r20)
 100727c:	a4000217 	ldw	r16,8(r20)
 1007280:	8c7fffc4 	addi	r17,r17,-1
 1007284:	88000c16 	blt	r17,zero,10072b8 <_fwalk_reent+0x84>
 1007288:	84000304 	addi	r16,r16,12
 100728c:	8080000b 	ldhu	r2,0(r16)
 1007290:	8c7fffc4 	addi	r17,r17,-1
 1007294:	817ffd04 	addi	r5,r16,-12
 1007298:	b080052e 	bgeu	r22,r2,10072b0 <_fwalk_reent+0x7c>
 100729c:	8080008f 	ldh	r2,2(r16)
 10072a0:	9809883a 	mov	r4,r19
 10072a4:	14800226 	beq	r2,r18,10072b0 <_fwalk_reent+0x7c>
 10072a8:	a83ee83a 	callr	r21
 10072ac:	b8aeb03a 	or	r23,r23,r2
 10072b0:	84001a04 	addi	r16,r16,104
 10072b4:	8cbff51e 	bne	r17,r18,100728c <__alt_data_end+0xff80728c>
 10072b8:	a5000017 	ldw	r20,0(r20)
 10072bc:	a03fee1e 	bne	r20,zero,1007278 <__alt_data_end+0xff807278>
 10072c0:	b805883a 	mov	r2,r23
 10072c4:	dfc00817 	ldw	ra,32(sp)
 10072c8:	ddc00717 	ldw	r23,28(sp)
 10072cc:	dd800617 	ldw	r22,24(sp)
 10072d0:	dd400517 	ldw	r21,20(sp)
 10072d4:	dd000417 	ldw	r20,16(sp)
 10072d8:	dcc00317 	ldw	r19,12(sp)
 10072dc:	dc800217 	ldw	r18,8(sp)
 10072e0:	dc400117 	ldw	r17,4(sp)
 10072e4:	dc000017 	ldw	r16,0(sp)
 10072e8:	dec00904 	addi	sp,sp,36
 10072ec:	f800283a 	ret
 10072f0:	002f883a 	mov	r23,zero
 10072f4:	003ff206 	br	10072c0 <__alt_data_end+0xff8072c0>

010072f8 <_setlocale_r>:
 10072f8:	30001b26 	beq	r6,zero,1007368 <_setlocale_r+0x70>
 10072fc:	01404074 	movhi	r5,257
 1007300:	defffe04 	addi	sp,sp,-8
 1007304:	29487804 	addi	r5,r5,8672
 1007308:	3009883a 	mov	r4,r6
 100730c:	dc000015 	stw	r16,0(sp)
 1007310:	dfc00115 	stw	ra,4(sp)
 1007314:	3021883a 	mov	r16,r6
 1007318:	1009a6c0 	call	1009a6c <strcmp>
 100731c:	1000061e 	bne	r2,zero,1007338 <_setlocale_r+0x40>
 1007320:	00804074 	movhi	r2,257
 1007324:	10887704 	addi	r2,r2,8668
 1007328:	dfc00117 	ldw	ra,4(sp)
 100732c:	dc000017 	ldw	r16,0(sp)
 1007330:	dec00204 	addi	sp,sp,8
 1007334:	f800283a 	ret
 1007338:	01404074 	movhi	r5,257
 100733c:	29487704 	addi	r5,r5,8668
 1007340:	8009883a 	mov	r4,r16
 1007344:	1009a6c0 	call	1009a6c <strcmp>
 1007348:	103ff526 	beq	r2,zero,1007320 <__alt_data_end+0xff807320>
 100734c:	01404074 	movhi	r5,257
 1007350:	29486204 	addi	r5,r5,8584
 1007354:	8009883a 	mov	r4,r16
 1007358:	1009a6c0 	call	1009a6c <strcmp>
 100735c:	103ff026 	beq	r2,zero,1007320 <__alt_data_end+0xff807320>
 1007360:	0005883a 	mov	r2,zero
 1007364:	003ff006 	br	1007328 <__alt_data_end+0xff807328>
 1007368:	00804074 	movhi	r2,257
 100736c:	10887704 	addi	r2,r2,8668
 1007370:	f800283a 	ret

01007374 <__locale_charset>:
 1007374:	00804074 	movhi	r2,257
 1007378:	108a2a04 	addi	r2,r2,10408
 100737c:	f800283a 	ret

01007380 <__locale_mb_cur_max>:
 1007380:	00804074 	movhi	r2,257
 1007384:	108fc604 	addi	r2,r2,16152
 1007388:	10800017 	ldw	r2,0(r2)
 100738c:	f800283a 	ret

01007390 <__locale_msgcharset>:
 1007390:	00804074 	movhi	r2,257
 1007394:	108a2204 	addi	r2,r2,10376
 1007398:	f800283a 	ret

0100739c <__locale_cjk_lang>:
 100739c:	0005883a 	mov	r2,zero
 10073a0:	f800283a 	ret

010073a4 <_localeconv_r>:
 10073a4:	00804074 	movhi	r2,257
 10073a8:	108a3204 	addi	r2,r2,10440
 10073ac:	f800283a 	ret

010073b0 <setlocale>:
 10073b0:	00804074 	movhi	r2,257
 10073b4:	108fc504 	addi	r2,r2,16148
 10073b8:	280d883a 	mov	r6,r5
 10073bc:	200b883a 	mov	r5,r4
 10073c0:	11000017 	ldw	r4,0(r2)
 10073c4:	10072f81 	jmpi	10072f8 <_setlocale_r>

010073c8 <localeconv>:
 10073c8:	00804074 	movhi	r2,257
 10073cc:	108a3204 	addi	r2,r2,10440
 10073d0:	f800283a 	ret

010073d4 <__smakebuf_r>:
 10073d4:	2880030b 	ldhu	r2,12(r5)
 10073d8:	10c0008c 	andi	r3,r2,2
 10073dc:	1800411e 	bne	r3,zero,10074e4 <__smakebuf_r+0x110>
 10073e0:	deffec04 	addi	sp,sp,-80
 10073e4:	dc000f15 	stw	r16,60(sp)
 10073e8:	2821883a 	mov	r16,r5
 10073ec:	2940038f 	ldh	r5,14(r5)
 10073f0:	dc401015 	stw	r17,64(sp)
 10073f4:	dfc01315 	stw	ra,76(sp)
 10073f8:	dcc01215 	stw	r19,72(sp)
 10073fc:	dc801115 	stw	r18,68(sp)
 1007400:	2023883a 	mov	r17,r4
 1007404:	28001c16 	blt	r5,zero,1007478 <__smakebuf_r+0xa4>
 1007408:	d80d883a 	mov	r6,sp
 100740c:	100b6dc0 	call	100b6dc <_fstat_r>
 1007410:	10001816 	blt	r2,zero,1007474 <__smakebuf_r+0xa0>
 1007414:	d8800117 	ldw	r2,4(sp)
 1007418:	00e00014 	movui	r3,32768
 100741c:	10bc000c 	andi	r2,r2,61440
 1007420:	14c80020 	cmpeqi	r19,r2,8192
 1007424:	10c03726 	beq	r2,r3,1007504 <__smakebuf_r+0x130>
 1007428:	80c0030b 	ldhu	r3,12(r16)
 100742c:	18c20014 	ori	r3,r3,2048
 1007430:	80c0030d 	sth	r3,12(r16)
 1007434:	00c80004 	movi	r3,8192
 1007438:	10c0521e 	bne	r2,r3,1007584 <__smakebuf_r+0x1b0>
 100743c:	8140038f 	ldh	r5,14(r16)
 1007440:	8809883a 	mov	r4,r17
 1007444:	100b7380 	call	100b738 <_isatty_r>
 1007448:	10004c26 	beq	r2,zero,100757c <__smakebuf_r+0x1a8>
 100744c:	8080030b 	ldhu	r2,12(r16)
 1007450:	80c010c4 	addi	r3,r16,67
 1007454:	80c00015 	stw	r3,0(r16)
 1007458:	10800054 	ori	r2,r2,1
 100745c:	8080030d 	sth	r2,12(r16)
 1007460:	00800044 	movi	r2,1
 1007464:	80c00415 	stw	r3,16(r16)
 1007468:	80800515 	stw	r2,20(r16)
 100746c:	04810004 	movi	r18,1024
 1007470:	00000706 	br	1007490 <__smakebuf_r+0xbc>
 1007474:	8080030b 	ldhu	r2,12(r16)
 1007478:	10c0200c 	andi	r3,r2,128
 100747c:	18001f1e 	bne	r3,zero,10074fc <__smakebuf_r+0x128>
 1007480:	04810004 	movi	r18,1024
 1007484:	10820014 	ori	r2,r2,2048
 1007488:	8080030d 	sth	r2,12(r16)
 100748c:	0027883a 	mov	r19,zero
 1007490:	900b883a 	mov	r5,r18
 1007494:	8809883a 	mov	r4,r17
 1007498:	10075900 	call	1007590 <_malloc_r>
 100749c:	10002c26 	beq	r2,zero,1007550 <__smakebuf_r+0x17c>
 10074a0:	80c0030b 	ldhu	r3,12(r16)
 10074a4:	01004034 	movhi	r4,256
 10074a8:	21193304 	addi	r4,r4,25804
 10074ac:	89000f15 	stw	r4,60(r17)
 10074b0:	18c02014 	ori	r3,r3,128
 10074b4:	80c0030d 	sth	r3,12(r16)
 10074b8:	80800015 	stw	r2,0(r16)
 10074bc:	80800415 	stw	r2,16(r16)
 10074c0:	84800515 	stw	r18,20(r16)
 10074c4:	98001a1e 	bne	r19,zero,1007530 <__smakebuf_r+0x15c>
 10074c8:	dfc01317 	ldw	ra,76(sp)
 10074cc:	dcc01217 	ldw	r19,72(sp)
 10074d0:	dc801117 	ldw	r18,68(sp)
 10074d4:	dc401017 	ldw	r17,64(sp)
 10074d8:	dc000f17 	ldw	r16,60(sp)
 10074dc:	dec01404 	addi	sp,sp,80
 10074e0:	f800283a 	ret
 10074e4:	288010c4 	addi	r2,r5,67
 10074e8:	28800015 	stw	r2,0(r5)
 10074ec:	28800415 	stw	r2,16(r5)
 10074f0:	00800044 	movi	r2,1
 10074f4:	28800515 	stw	r2,20(r5)
 10074f8:	f800283a 	ret
 10074fc:	04801004 	movi	r18,64
 1007500:	003fe006 	br	1007484 <__alt_data_end+0xff807484>
 1007504:	81000a17 	ldw	r4,40(r16)
 1007508:	00c04074 	movhi	r3,257
 100750c:	18e68204 	addi	r3,r3,-26104
 1007510:	20ffc51e 	bne	r4,r3,1007428 <__alt_data_end+0xff807428>
 1007514:	8080030b 	ldhu	r2,12(r16)
 1007518:	04810004 	movi	r18,1024
 100751c:	84801315 	stw	r18,76(r16)
 1007520:	1484b03a 	or	r2,r2,r18
 1007524:	8080030d 	sth	r2,12(r16)
 1007528:	0027883a 	mov	r19,zero
 100752c:	003fd806 	br	1007490 <__alt_data_end+0xff807490>
 1007530:	8140038f 	ldh	r5,14(r16)
 1007534:	8809883a 	mov	r4,r17
 1007538:	100b7380 	call	100b738 <_isatty_r>
 100753c:	103fe226 	beq	r2,zero,10074c8 <__alt_data_end+0xff8074c8>
 1007540:	8080030b 	ldhu	r2,12(r16)
 1007544:	10800054 	ori	r2,r2,1
 1007548:	8080030d 	sth	r2,12(r16)
 100754c:	003fde06 	br	10074c8 <__alt_data_end+0xff8074c8>
 1007550:	8080030b 	ldhu	r2,12(r16)
 1007554:	10c0800c 	andi	r3,r2,512
 1007558:	183fdb1e 	bne	r3,zero,10074c8 <__alt_data_end+0xff8074c8>
 100755c:	10800094 	ori	r2,r2,2
 1007560:	80c010c4 	addi	r3,r16,67
 1007564:	8080030d 	sth	r2,12(r16)
 1007568:	00800044 	movi	r2,1
 100756c:	80c00015 	stw	r3,0(r16)
 1007570:	80c00415 	stw	r3,16(r16)
 1007574:	80800515 	stw	r2,20(r16)
 1007578:	003fd306 	br	10074c8 <__alt_data_end+0xff8074c8>
 100757c:	04810004 	movi	r18,1024
 1007580:	003fc306 	br	1007490 <__alt_data_end+0xff807490>
 1007584:	0027883a 	mov	r19,zero
 1007588:	04810004 	movi	r18,1024
 100758c:	003fc006 	br	1007490 <__alt_data_end+0xff807490>

01007590 <_malloc_r>:
 1007590:	defff504 	addi	sp,sp,-44
 1007594:	dc800315 	stw	r18,12(sp)
 1007598:	dfc00a15 	stw	ra,40(sp)
 100759c:	df000915 	stw	fp,36(sp)
 10075a0:	ddc00815 	stw	r23,32(sp)
 10075a4:	dd800715 	stw	r22,28(sp)
 10075a8:	dd400615 	stw	r21,24(sp)
 10075ac:	dd000515 	stw	r20,20(sp)
 10075b0:	dcc00415 	stw	r19,16(sp)
 10075b4:	dc400215 	stw	r17,8(sp)
 10075b8:	dc000115 	stw	r16,4(sp)
 10075bc:	288002c4 	addi	r2,r5,11
 10075c0:	00c00584 	movi	r3,22
 10075c4:	2025883a 	mov	r18,r4
 10075c8:	18807f2e 	bgeu	r3,r2,10077c8 <_malloc_r+0x238>
 10075cc:	047ffe04 	movi	r17,-8
 10075d0:	1462703a 	and	r17,r2,r17
 10075d4:	8800a316 	blt	r17,zero,1007864 <_malloc_r+0x2d4>
 10075d8:	8940a236 	bltu	r17,r5,1007864 <_malloc_r+0x2d4>
 10075dc:	100f7680 	call	100f768 <__malloc_lock>
 10075e0:	00807dc4 	movi	r2,503
 10075e4:	1441e92e 	bgeu	r2,r17,1007d8c <_malloc_r+0x7fc>
 10075e8:	8804d27a 	srli	r2,r17,9
 10075ec:	1000a126 	beq	r2,zero,1007874 <_malloc_r+0x2e4>
 10075f0:	00c00104 	movi	r3,4
 10075f4:	18811e36 	bltu	r3,r2,1007a70 <_malloc_r+0x4e0>
 10075f8:	8804d1ba 	srli	r2,r17,6
 10075fc:	12000e44 	addi	r8,r2,57
 1007600:	11c00e04 	addi	r7,r2,56
 1007604:	4209883a 	add	r4,r8,r8
 1007608:	04c04074 	movhi	r19,257
 100760c:	2109883a 	add	r4,r4,r4
 1007610:	9cca4004 	addi	r19,r19,10496
 1007614:	2109883a 	add	r4,r4,r4
 1007618:	9909883a 	add	r4,r19,r4
 100761c:	24000117 	ldw	r16,4(r4)
 1007620:	213ffe04 	addi	r4,r4,-8
 1007624:	24009726 	beq	r4,r16,1007884 <_malloc_r+0x2f4>
 1007628:	80800117 	ldw	r2,4(r16)
 100762c:	01bfff04 	movi	r6,-4
 1007630:	014003c4 	movi	r5,15
 1007634:	1184703a 	and	r2,r2,r6
 1007638:	1447c83a 	sub	r3,r2,r17
 100763c:	28c00716 	blt	r5,r3,100765c <_malloc_r+0xcc>
 1007640:	1800920e 	bge	r3,zero,100788c <_malloc_r+0x2fc>
 1007644:	84000317 	ldw	r16,12(r16)
 1007648:	24008e26 	beq	r4,r16,1007884 <_malloc_r+0x2f4>
 100764c:	80800117 	ldw	r2,4(r16)
 1007650:	1184703a 	and	r2,r2,r6
 1007654:	1447c83a 	sub	r3,r2,r17
 1007658:	28fff90e 	bge	r5,r3,1007640 <__alt_data_end+0xff807640>
 100765c:	3809883a 	mov	r4,r7
 1007660:	01804074 	movhi	r6,257
 1007664:	9c000417 	ldw	r16,16(r19)
 1007668:	318a4004 	addi	r6,r6,10496
 100766c:	32000204 	addi	r8,r6,8
 1007670:	82013426 	beq	r16,r8,1007b44 <_malloc_r+0x5b4>
 1007674:	80c00117 	ldw	r3,4(r16)
 1007678:	00bfff04 	movi	r2,-4
 100767c:	188e703a 	and	r7,r3,r2
 1007680:	3c45c83a 	sub	r2,r7,r17
 1007684:	00c003c4 	movi	r3,15
 1007688:	18811f16 	blt	r3,r2,1007b08 <_malloc_r+0x578>
 100768c:	32000515 	stw	r8,20(r6)
 1007690:	32000415 	stw	r8,16(r6)
 1007694:	10007f0e 	bge	r2,zero,1007894 <_malloc_r+0x304>
 1007698:	00807fc4 	movi	r2,511
 100769c:	11c0fd36 	bltu	r2,r7,1007a94 <_malloc_r+0x504>
 10076a0:	3806d0fa 	srli	r3,r7,3
 10076a4:	01c00044 	movi	r7,1
 10076a8:	30800117 	ldw	r2,4(r6)
 10076ac:	19400044 	addi	r5,r3,1
 10076b0:	294b883a 	add	r5,r5,r5
 10076b4:	1807d0ba 	srai	r3,r3,2
 10076b8:	294b883a 	add	r5,r5,r5
 10076bc:	294b883a 	add	r5,r5,r5
 10076c0:	298b883a 	add	r5,r5,r6
 10076c4:	38c6983a 	sll	r3,r7,r3
 10076c8:	29c00017 	ldw	r7,0(r5)
 10076cc:	2a7ffe04 	addi	r9,r5,-8
 10076d0:	1886b03a 	or	r3,r3,r2
 10076d4:	82400315 	stw	r9,12(r16)
 10076d8:	81c00215 	stw	r7,8(r16)
 10076dc:	30c00115 	stw	r3,4(r6)
 10076e0:	2c000015 	stw	r16,0(r5)
 10076e4:	3c000315 	stw	r16,12(r7)
 10076e8:	2005d0ba 	srai	r2,r4,2
 10076ec:	01400044 	movi	r5,1
 10076f0:	288a983a 	sll	r5,r5,r2
 10076f4:	19406f36 	bltu	r3,r5,10078b4 <_malloc_r+0x324>
 10076f8:	28c4703a 	and	r2,r5,r3
 10076fc:	10000a1e 	bne	r2,zero,1007728 <_malloc_r+0x198>
 1007700:	00bfff04 	movi	r2,-4
 1007704:	294b883a 	add	r5,r5,r5
 1007708:	2088703a 	and	r4,r4,r2
 100770c:	28c4703a 	and	r2,r5,r3
 1007710:	21000104 	addi	r4,r4,4
 1007714:	1000041e 	bne	r2,zero,1007728 <_malloc_r+0x198>
 1007718:	294b883a 	add	r5,r5,r5
 100771c:	28c4703a 	and	r2,r5,r3
 1007720:	21000104 	addi	r4,r4,4
 1007724:	103ffc26 	beq	r2,zero,1007718 <__alt_data_end+0xff807718>
 1007728:	02bfff04 	movi	r10,-4
 100772c:	024003c4 	movi	r9,15
 1007730:	21800044 	addi	r6,r4,1
 1007734:	318d883a 	add	r6,r6,r6
 1007738:	318d883a 	add	r6,r6,r6
 100773c:	318d883a 	add	r6,r6,r6
 1007740:	998d883a 	add	r6,r19,r6
 1007744:	333ffe04 	addi	r12,r6,-8
 1007748:	2017883a 	mov	r11,r4
 100774c:	31800104 	addi	r6,r6,4
 1007750:	34000017 	ldw	r16,0(r6)
 1007754:	31fffd04 	addi	r7,r6,-12
 1007758:	81c0041e 	bne	r16,r7,100776c <_malloc_r+0x1dc>
 100775c:	0000fb06 	br	1007b4c <_malloc_r+0x5bc>
 1007760:	1801030e 	bge	r3,zero,1007b70 <_malloc_r+0x5e0>
 1007764:	84000317 	ldw	r16,12(r16)
 1007768:	81c0f826 	beq	r16,r7,1007b4c <_malloc_r+0x5bc>
 100776c:	80800117 	ldw	r2,4(r16)
 1007770:	1284703a 	and	r2,r2,r10
 1007774:	1447c83a 	sub	r3,r2,r17
 1007778:	48fff90e 	bge	r9,r3,1007760 <__alt_data_end+0xff807760>
 100777c:	80800317 	ldw	r2,12(r16)
 1007780:	81000217 	ldw	r4,8(r16)
 1007784:	89400054 	ori	r5,r17,1
 1007788:	81400115 	stw	r5,4(r16)
 100778c:	20800315 	stw	r2,12(r4)
 1007790:	11000215 	stw	r4,8(r2)
 1007794:	8463883a 	add	r17,r16,r17
 1007798:	9c400515 	stw	r17,20(r19)
 100779c:	9c400415 	stw	r17,16(r19)
 10077a0:	18800054 	ori	r2,r3,1
 10077a4:	88800115 	stw	r2,4(r17)
 10077a8:	8a000315 	stw	r8,12(r17)
 10077ac:	8a000215 	stw	r8,8(r17)
 10077b0:	88e3883a 	add	r17,r17,r3
 10077b4:	88c00015 	stw	r3,0(r17)
 10077b8:	9009883a 	mov	r4,r18
 10077bc:	100f78c0 	call	100f78c <__malloc_unlock>
 10077c0:	80800204 	addi	r2,r16,8
 10077c4:	00001b06 	br	1007834 <_malloc_r+0x2a4>
 10077c8:	04400404 	movi	r17,16
 10077cc:	89402536 	bltu	r17,r5,1007864 <_malloc_r+0x2d4>
 10077d0:	100f7680 	call	100f768 <__malloc_lock>
 10077d4:	00800184 	movi	r2,6
 10077d8:	01000084 	movi	r4,2
 10077dc:	04c04074 	movhi	r19,257
 10077e0:	1085883a 	add	r2,r2,r2
 10077e4:	9cca4004 	addi	r19,r19,10496
 10077e8:	1085883a 	add	r2,r2,r2
 10077ec:	9885883a 	add	r2,r19,r2
 10077f0:	14000117 	ldw	r16,4(r2)
 10077f4:	10fffe04 	addi	r3,r2,-8
 10077f8:	80c0d926 	beq	r16,r3,1007b60 <_malloc_r+0x5d0>
 10077fc:	80c00117 	ldw	r3,4(r16)
 1007800:	81000317 	ldw	r4,12(r16)
 1007804:	00bfff04 	movi	r2,-4
 1007808:	1884703a 	and	r2,r3,r2
 100780c:	81400217 	ldw	r5,8(r16)
 1007810:	8085883a 	add	r2,r16,r2
 1007814:	10c00117 	ldw	r3,4(r2)
 1007818:	29000315 	stw	r4,12(r5)
 100781c:	21400215 	stw	r5,8(r4)
 1007820:	18c00054 	ori	r3,r3,1
 1007824:	10c00115 	stw	r3,4(r2)
 1007828:	9009883a 	mov	r4,r18
 100782c:	100f78c0 	call	100f78c <__malloc_unlock>
 1007830:	80800204 	addi	r2,r16,8
 1007834:	dfc00a17 	ldw	ra,40(sp)
 1007838:	df000917 	ldw	fp,36(sp)
 100783c:	ddc00817 	ldw	r23,32(sp)
 1007840:	dd800717 	ldw	r22,28(sp)
 1007844:	dd400617 	ldw	r21,24(sp)
 1007848:	dd000517 	ldw	r20,20(sp)
 100784c:	dcc00417 	ldw	r19,16(sp)
 1007850:	dc800317 	ldw	r18,12(sp)
 1007854:	dc400217 	ldw	r17,8(sp)
 1007858:	dc000117 	ldw	r16,4(sp)
 100785c:	dec00b04 	addi	sp,sp,44
 1007860:	f800283a 	ret
 1007864:	00800304 	movi	r2,12
 1007868:	90800015 	stw	r2,0(r18)
 100786c:	0005883a 	mov	r2,zero
 1007870:	003ff006 	br	1007834 <__alt_data_end+0xff807834>
 1007874:	01002004 	movi	r4,128
 1007878:	02001004 	movi	r8,64
 100787c:	01c00fc4 	movi	r7,63
 1007880:	003f6106 	br	1007608 <__alt_data_end+0xff807608>
 1007884:	4009883a 	mov	r4,r8
 1007888:	003f7506 	br	1007660 <__alt_data_end+0xff807660>
 100788c:	81000317 	ldw	r4,12(r16)
 1007890:	003fde06 	br	100780c <__alt_data_end+0xff80780c>
 1007894:	81c5883a 	add	r2,r16,r7
 1007898:	11400117 	ldw	r5,4(r2)
 100789c:	9009883a 	mov	r4,r18
 10078a0:	29400054 	ori	r5,r5,1
 10078a4:	11400115 	stw	r5,4(r2)
 10078a8:	100f78c0 	call	100f78c <__malloc_unlock>
 10078ac:	80800204 	addi	r2,r16,8
 10078b0:	003fe006 	br	1007834 <__alt_data_end+0xff807834>
 10078b4:	9c000217 	ldw	r16,8(r19)
 10078b8:	00bfff04 	movi	r2,-4
 10078bc:	85800117 	ldw	r22,4(r16)
 10078c0:	b0ac703a 	and	r22,r22,r2
 10078c4:	b4400336 	bltu	r22,r17,10078d4 <_malloc_r+0x344>
 10078c8:	b445c83a 	sub	r2,r22,r17
 10078cc:	00c003c4 	movi	r3,15
 10078d0:	18805d16 	blt	r3,r2,1007a48 <_malloc_r+0x4b8>
 10078d4:	05c04074 	movhi	r23,257
 10078d8:	00804074 	movhi	r2,257
 10078dc:	10969504 	addi	r2,r2,23124
 10078e0:	bdcfc704 	addi	r23,r23,16156
 10078e4:	15400017 	ldw	r21,0(r2)
 10078e8:	b8c00017 	ldw	r3,0(r23)
 10078ec:	00bfffc4 	movi	r2,-1
 10078f0:	858d883a 	add	r6,r16,r22
 10078f4:	8d6b883a 	add	r21,r17,r21
 10078f8:	1880ea26 	beq	r3,r2,1007ca4 <_malloc_r+0x714>
 10078fc:	ad4403c4 	addi	r21,r21,4111
 1007900:	00bc0004 	movi	r2,-4096
 1007904:	a8aa703a 	and	r21,r21,r2
 1007908:	a80b883a 	mov	r5,r21
 100790c:	9009883a 	mov	r4,r18
 1007910:	d9800015 	stw	r6,0(sp)
 1007914:	10098dc0 	call	10098dc <_sbrk_r>
 1007918:	1029883a 	mov	r20,r2
 100791c:	00bfffc4 	movi	r2,-1
 1007920:	d9800017 	ldw	r6,0(sp)
 1007924:	a080e826 	beq	r20,r2,1007cc8 <_malloc_r+0x738>
 1007928:	a180a636 	bltu	r20,r6,1007bc4 <_malloc_r+0x634>
 100792c:	07004074 	movhi	fp,257
 1007930:	e7169e04 	addi	fp,fp,23160
 1007934:	e0800017 	ldw	r2,0(fp)
 1007938:	a887883a 	add	r3,r21,r2
 100793c:	e0c00015 	stw	r3,0(fp)
 1007940:	3500e626 	beq	r6,r20,1007cdc <_malloc_r+0x74c>
 1007944:	b9000017 	ldw	r4,0(r23)
 1007948:	00bfffc4 	movi	r2,-1
 100794c:	2080ee26 	beq	r4,r2,1007d08 <_malloc_r+0x778>
 1007950:	a185c83a 	sub	r2,r20,r6
 1007954:	10c5883a 	add	r2,r2,r3
 1007958:	e0800015 	stw	r2,0(fp)
 100795c:	a0c001cc 	andi	r3,r20,7
 1007960:	1800bc26 	beq	r3,zero,1007c54 <_malloc_r+0x6c4>
 1007964:	a0e9c83a 	sub	r20,r20,r3
 1007968:	00840204 	movi	r2,4104
 100796c:	a5000204 	addi	r20,r20,8
 1007970:	10c7c83a 	sub	r3,r2,r3
 1007974:	a545883a 	add	r2,r20,r21
 1007978:	1083ffcc 	andi	r2,r2,4095
 100797c:	18abc83a 	sub	r21,r3,r2
 1007980:	a80b883a 	mov	r5,r21
 1007984:	9009883a 	mov	r4,r18
 1007988:	10098dc0 	call	10098dc <_sbrk_r>
 100798c:	00ffffc4 	movi	r3,-1
 1007990:	10c0e126 	beq	r2,r3,1007d18 <_malloc_r+0x788>
 1007994:	1505c83a 	sub	r2,r2,r20
 1007998:	1545883a 	add	r2,r2,r21
 100799c:	10800054 	ori	r2,r2,1
 10079a0:	e0c00017 	ldw	r3,0(fp)
 10079a4:	9d000215 	stw	r20,8(r19)
 10079a8:	a0800115 	stw	r2,4(r20)
 10079ac:	a8c7883a 	add	r3,r21,r3
 10079b0:	e0c00015 	stw	r3,0(fp)
 10079b4:	84c00e26 	beq	r16,r19,10079f0 <_malloc_r+0x460>
 10079b8:	018003c4 	movi	r6,15
 10079bc:	3580a72e 	bgeu	r6,r22,1007c5c <_malloc_r+0x6cc>
 10079c0:	81400117 	ldw	r5,4(r16)
 10079c4:	013ffe04 	movi	r4,-8
 10079c8:	b0bffd04 	addi	r2,r22,-12
 10079cc:	1104703a 	and	r2,r2,r4
 10079d0:	2900004c 	andi	r4,r5,1
 10079d4:	2088b03a 	or	r4,r4,r2
 10079d8:	81000115 	stw	r4,4(r16)
 10079dc:	01400144 	movi	r5,5
 10079e0:	8089883a 	add	r4,r16,r2
 10079e4:	21400115 	stw	r5,4(r4)
 10079e8:	21400215 	stw	r5,8(r4)
 10079ec:	3080cd36 	bltu	r6,r2,1007d24 <_malloc_r+0x794>
 10079f0:	00804074 	movhi	r2,257
 10079f4:	10969404 	addi	r2,r2,23120
 10079f8:	11000017 	ldw	r4,0(r2)
 10079fc:	20c0012e 	bgeu	r4,r3,1007a04 <_malloc_r+0x474>
 1007a00:	10c00015 	stw	r3,0(r2)
 1007a04:	00804074 	movhi	r2,257
 1007a08:	10969304 	addi	r2,r2,23116
 1007a0c:	11000017 	ldw	r4,0(r2)
 1007a10:	9c000217 	ldw	r16,8(r19)
 1007a14:	20c0012e 	bgeu	r4,r3,1007a1c <_malloc_r+0x48c>
 1007a18:	10c00015 	stw	r3,0(r2)
 1007a1c:	80c00117 	ldw	r3,4(r16)
 1007a20:	00bfff04 	movi	r2,-4
 1007a24:	1886703a 	and	r3,r3,r2
 1007a28:	1c45c83a 	sub	r2,r3,r17
 1007a2c:	1c400236 	bltu	r3,r17,1007a38 <_malloc_r+0x4a8>
 1007a30:	00c003c4 	movi	r3,15
 1007a34:	18800416 	blt	r3,r2,1007a48 <_malloc_r+0x4b8>
 1007a38:	9009883a 	mov	r4,r18
 1007a3c:	100f78c0 	call	100f78c <__malloc_unlock>
 1007a40:	0005883a 	mov	r2,zero
 1007a44:	003f7b06 	br	1007834 <__alt_data_end+0xff807834>
 1007a48:	88c00054 	ori	r3,r17,1
 1007a4c:	80c00115 	stw	r3,4(r16)
 1007a50:	8463883a 	add	r17,r16,r17
 1007a54:	10800054 	ori	r2,r2,1
 1007a58:	9c400215 	stw	r17,8(r19)
 1007a5c:	88800115 	stw	r2,4(r17)
 1007a60:	9009883a 	mov	r4,r18
 1007a64:	100f78c0 	call	100f78c <__malloc_unlock>
 1007a68:	80800204 	addi	r2,r16,8
 1007a6c:	003f7106 	br	1007834 <__alt_data_end+0xff807834>
 1007a70:	00c00504 	movi	r3,20
 1007a74:	18804a2e 	bgeu	r3,r2,1007ba0 <_malloc_r+0x610>
 1007a78:	00c01504 	movi	r3,84
 1007a7c:	18806e36 	bltu	r3,r2,1007c38 <_malloc_r+0x6a8>
 1007a80:	8804d33a 	srli	r2,r17,12
 1007a84:	12001bc4 	addi	r8,r2,111
 1007a88:	11c01b84 	addi	r7,r2,110
 1007a8c:	4209883a 	add	r4,r8,r8
 1007a90:	003edd06 	br	1007608 <__alt_data_end+0xff807608>
 1007a94:	3804d27a 	srli	r2,r7,9
 1007a98:	00c00104 	movi	r3,4
 1007a9c:	1880442e 	bgeu	r3,r2,1007bb0 <_malloc_r+0x620>
 1007aa0:	00c00504 	movi	r3,20
 1007aa4:	18808136 	bltu	r3,r2,1007cac <_malloc_r+0x71c>
 1007aa8:	11401704 	addi	r5,r2,92
 1007aac:	10c016c4 	addi	r3,r2,91
 1007ab0:	294b883a 	add	r5,r5,r5
 1007ab4:	294b883a 	add	r5,r5,r5
 1007ab8:	294b883a 	add	r5,r5,r5
 1007abc:	994b883a 	add	r5,r19,r5
 1007ac0:	28800017 	ldw	r2,0(r5)
 1007ac4:	01804074 	movhi	r6,257
 1007ac8:	297ffe04 	addi	r5,r5,-8
 1007acc:	318a4004 	addi	r6,r6,10496
 1007ad0:	28806526 	beq	r5,r2,1007c68 <_malloc_r+0x6d8>
 1007ad4:	01bfff04 	movi	r6,-4
 1007ad8:	10c00117 	ldw	r3,4(r2)
 1007adc:	1986703a 	and	r3,r3,r6
 1007ae0:	38c0022e 	bgeu	r7,r3,1007aec <_malloc_r+0x55c>
 1007ae4:	10800217 	ldw	r2,8(r2)
 1007ae8:	28bffb1e 	bne	r5,r2,1007ad8 <__alt_data_end+0xff807ad8>
 1007aec:	11400317 	ldw	r5,12(r2)
 1007af0:	98c00117 	ldw	r3,4(r19)
 1007af4:	81400315 	stw	r5,12(r16)
 1007af8:	80800215 	stw	r2,8(r16)
 1007afc:	2c000215 	stw	r16,8(r5)
 1007b00:	14000315 	stw	r16,12(r2)
 1007b04:	003ef806 	br	10076e8 <__alt_data_end+0xff8076e8>
 1007b08:	88c00054 	ori	r3,r17,1
 1007b0c:	80c00115 	stw	r3,4(r16)
 1007b10:	8463883a 	add	r17,r16,r17
 1007b14:	34400515 	stw	r17,20(r6)
 1007b18:	34400415 	stw	r17,16(r6)
 1007b1c:	10c00054 	ori	r3,r2,1
 1007b20:	8a000315 	stw	r8,12(r17)
 1007b24:	8a000215 	stw	r8,8(r17)
 1007b28:	88c00115 	stw	r3,4(r17)
 1007b2c:	88a3883a 	add	r17,r17,r2
 1007b30:	88800015 	stw	r2,0(r17)
 1007b34:	9009883a 	mov	r4,r18
 1007b38:	100f78c0 	call	100f78c <__malloc_unlock>
 1007b3c:	80800204 	addi	r2,r16,8
 1007b40:	003f3c06 	br	1007834 <__alt_data_end+0xff807834>
 1007b44:	30c00117 	ldw	r3,4(r6)
 1007b48:	003ee706 	br	10076e8 <__alt_data_end+0xff8076e8>
 1007b4c:	5ac00044 	addi	r11,r11,1
 1007b50:	588000cc 	andi	r2,r11,3
 1007b54:	31800204 	addi	r6,r6,8
 1007b58:	103efd1e 	bne	r2,zero,1007750 <__alt_data_end+0xff807750>
 1007b5c:	00002406 	br	1007bf0 <_malloc_r+0x660>
 1007b60:	14000317 	ldw	r16,12(r2)
 1007b64:	143f251e 	bne	r2,r16,10077fc <__alt_data_end+0xff8077fc>
 1007b68:	21000084 	addi	r4,r4,2
 1007b6c:	003ebc06 	br	1007660 <__alt_data_end+0xff807660>
 1007b70:	8085883a 	add	r2,r16,r2
 1007b74:	10c00117 	ldw	r3,4(r2)
 1007b78:	81000317 	ldw	r4,12(r16)
 1007b7c:	81400217 	ldw	r5,8(r16)
 1007b80:	18c00054 	ori	r3,r3,1
 1007b84:	10c00115 	stw	r3,4(r2)
 1007b88:	29000315 	stw	r4,12(r5)
 1007b8c:	21400215 	stw	r5,8(r4)
 1007b90:	9009883a 	mov	r4,r18
 1007b94:	100f78c0 	call	100f78c <__malloc_unlock>
 1007b98:	80800204 	addi	r2,r16,8
 1007b9c:	003f2506 	br	1007834 <__alt_data_end+0xff807834>
 1007ba0:	12001704 	addi	r8,r2,92
 1007ba4:	11c016c4 	addi	r7,r2,91
 1007ba8:	4209883a 	add	r4,r8,r8
 1007bac:	003e9606 	br	1007608 <__alt_data_end+0xff807608>
 1007bb0:	3804d1ba 	srli	r2,r7,6
 1007bb4:	11400e44 	addi	r5,r2,57
 1007bb8:	10c00e04 	addi	r3,r2,56
 1007bbc:	294b883a 	add	r5,r5,r5
 1007bc0:	003fbc06 	br	1007ab4 <__alt_data_end+0xff807ab4>
 1007bc4:	84ff5926 	beq	r16,r19,100792c <__alt_data_end+0xff80792c>
 1007bc8:	00804074 	movhi	r2,257
 1007bcc:	108a4004 	addi	r2,r2,10496
 1007bd0:	14000217 	ldw	r16,8(r2)
 1007bd4:	00bfff04 	movi	r2,-4
 1007bd8:	80c00117 	ldw	r3,4(r16)
 1007bdc:	1886703a 	and	r3,r3,r2
 1007be0:	003f9106 	br	1007a28 <__alt_data_end+0xff807a28>
 1007be4:	60800217 	ldw	r2,8(r12)
 1007be8:	213fffc4 	addi	r4,r4,-1
 1007bec:	1300651e 	bne	r2,r12,1007d84 <_malloc_r+0x7f4>
 1007bf0:	208000cc 	andi	r2,r4,3
 1007bf4:	633ffe04 	addi	r12,r12,-8
 1007bf8:	103ffa1e 	bne	r2,zero,1007be4 <__alt_data_end+0xff807be4>
 1007bfc:	98800117 	ldw	r2,4(r19)
 1007c00:	0146303a 	nor	r3,zero,r5
 1007c04:	1884703a 	and	r2,r3,r2
 1007c08:	98800115 	stw	r2,4(r19)
 1007c0c:	294b883a 	add	r5,r5,r5
 1007c10:	117f2836 	bltu	r2,r5,10078b4 <__alt_data_end+0xff8078b4>
 1007c14:	283f2726 	beq	r5,zero,10078b4 <__alt_data_end+0xff8078b4>
 1007c18:	2886703a 	and	r3,r5,r2
 1007c1c:	5809883a 	mov	r4,r11
 1007c20:	183ec31e 	bne	r3,zero,1007730 <__alt_data_end+0xff807730>
 1007c24:	294b883a 	add	r5,r5,r5
 1007c28:	2886703a 	and	r3,r5,r2
 1007c2c:	21000104 	addi	r4,r4,4
 1007c30:	183ffc26 	beq	r3,zero,1007c24 <__alt_data_end+0xff807c24>
 1007c34:	003ebe06 	br	1007730 <__alt_data_end+0xff807730>
 1007c38:	00c05504 	movi	r3,340
 1007c3c:	18801236 	bltu	r3,r2,1007c88 <_malloc_r+0x6f8>
 1007c40:	8804d3fa 	srli	r2,r17,15
 1007c44:	12001e04 	addi	r8,r2,120
 1007c48:	11c01dc4 	addi	r7,r2,119
 1007c4c:	4209883a 	add	r4,r8,r8
 1007c50:	003e6d06 	br	1007608 <__alt_data_end+0xff807608>
 1007c54:	00c40004 	movi	r3,4096
 1007c58:	003f4606 	br	1007974 <__alt_data_end+0xff807974>
 1007c5c:	00800044 	movi	r2,1
 1007c60:	a0800115 	stw	r2,4(r20)
 1007c64:	003f7406 	br	1007a38 <__alt_data_end+0xff807a38>
 1007c68:	1805d0ba 	srai	r2,r3,2
 1007c6c:	01c00044 	movi	r7,1
 1007c70:	30c00117 	ldw	r3,4(r6)
 1007c74:	388e983a 	sll	r7,r7,r2
 1007c78:	2805883a 	mov	r2,r5
 1007c7c:	38c6b03a 	or	r3,r7,r3
 1007c80:	30c00115 	stw	r3,4(r6)
 1007c84:	003f9b06 	br	1007af4 <__alt_data_end+0xff807af4>
 1007c88:	00c15504 	movi	r3,1364
 1007c8c:	18801a36 	bltu	r3,r2,1007cf8 <_malloc_r+0x768>
 1007c90:	8804d4ba 	srli	r2,r17,18
 1007c94:	12001f44 	addi	r8,r2,125
 1007c98:	11c01f04 	addi	r7,r2,124
 1007c9c:	4209883a 	add	r4,r8,r8
 1007ca0:	003e5906 	br	1007608 <__alt_data_end+0xff807608>
 1007ca4:	ad400404 	addi	r21,r21,16
 1007ca8:	003f1706 	br	1007908 <__alt_data_end+0xff807908>
 1007cac:	00c01504 	movi	r3,84
 1007cb0:	18802336 	bltu	r3,r2,1007d40 <_malloc_r+0x7b0>
 1007cb4:	3804d33a 	srli	r2,r7,12
 1007cb8:	11401bc4 	addi	r5,r2,111
 1007cbc:	10c01b84 	addi	r3,r2,110
 1007cc0:	294b883a 	add	r5,r5,r5
 1007cc4:	003f7b06 	br	1007ab4 <__alt_data_end+0xff807ab4>
 1007cc8:	9c000217 	ldw	r16,8(r19)
 1007ccc:	00bfff04 	movi	r2,-4
 1007cd0:	80c00117 	ldw	r3,4(r16)
 1007cd4:	1886703a 	and	r3,r3,r2
 1007cd8:	003f5306 	br	1007a28 <__alt_data_end+0xff807a28>
 1007cdc:	3083ffcc 	andi	r2,r6,4095
 1007ce0:	103f181e 	bne	r2,zero,1007944 <__alt_data_end+0xff807944>
 1007ce4:	99000217 	ldw	r4,8(r19)
 1007ce8:	b545883a 	add	r2,r22,r21
 1007cec:	10800054 	ori	r2,r2,1
 1007cf0:	20800115 	stw	r2,4(r4)
 1007cf4:	003f3e06 	br	10079f0 <__alt_data_end+0xff8079f0>
 1007cf8:	01003f84 	movi	r4,254
 1007cfc:	02001fc4 	movi	r8,127
 1007d00:	01c01f84 	movi	r7,126
 1007d04:	003e4006 	br	1007608 <__alt_data_end+0xff807608>
 1007d08:	00804074 	movhi	r2,257
 1007d0c:	108fc704 	addi	r2,r2,16156
 1007d10:	15000015 	stw	r20,0(r2)
 1007d14:	003f1106 	br	100795c <__alt_data_end+0xff80795c>
 1007d18:	00800044 	movi	r2,1
 1007d1c:	002b883a 	mov	r21,zero
 1007d20:	003f1f06 	br	10079a0 <__alt_data_end+0xff8079a0>
 1007d24:	81400204 	addi	r5,r16,8
 1007d28:	9009883a 	mov	r4,r18
 1007d2c:	10069980 	call	1006998 <_free_r>
 1007d30:	00804074 	movhi	r2,257
 1007d34:	10969e04 	addi	r2,r2,23160
 1007d38:	10c00017 	ldw	r3,0(r2)
 1007d3c:	003f2c06 	br	10079f0 <__alt_data_end+0xff8079f0>
 1007d40:	00c05504 	movi	r3,340
 1007d44:	18800536 	bltu	r3,r2,1007d5c <_malloc_r+0x7cc>
 1007d48:	3804d3fa 	srli	r2,r7,15
 1007d4c:	11401e04 	addi	r5,r2,120
 1007d50:	10c01dc4 	addi	r3,r2,119
 1007d54:	294b883a 	add	r5,r5,r5
 1007d58:	003f5606 	br	1007ab4 <__alt_data_end+0xff807ab4>
 1007d5c:	00c15504 	movi	r3,1364
 1007d60:	18800536 	bltu	r3,r2,1007d78 <_malloc_r+0x7e8>
 1007d64:	3804d4ba 	srli	r2,r7,18
 1007d68:	11401f44 	addi	r5,r2,125
 1007d6c:	10c01f04 	addi	r3,r2,124
 1007d70:	294b883a 	add	r5,r5,r5
 1007d74:	003f4f06 	br	1007ab4 <__alt_data_end+0xff807ab4>
 1007d78:	01403f84 	movi	r5,254
 1007d7c:	00c01f84 	movi	r3,126
 1007d80:	003f4c06 	br	1007ab4 <__alt_data_end+0xff807ab4>
 1007d84:	98800117 	ldw	r2,4(r19)
 1007d88:	003fa006 	br	1007c0c <__alt_data_end+0xff807c0c>
 1007d8c:	8808d0fa 	srli	r4,r17,3
 1007d90:	20800044 	addi	r2,r4,1
 1007d94:	1085883a 	add	r2,r2,r2
 1007d98:	003e9006 	br	10077dc <__alt_data_end+0xff8077dc>

01007d9c <memchr>:
 1007d9c:	208000cc 	andi	r2,r4,3
 1007da0:	280f883a 	mov	r7,r5
 1007da4:	10003426 	beq	r2,zero,1007e78 <memchr+0xdc>
 1007da8:	30bfffc4 	addi	r2,r6,-1
 1007dac:	30001a26 	beq	r6,zero,1007e18 <memchr+0x7c>
 1007db0:	20c00003 	ldbu	r3,0(r4)
 1007db4:	29803fcc 	andi	r6,r5,255
 1007db8:	30c0051e 	bne	r6,r3,1007dd0 <memchr+0x34>
 1007dbc:	00001806 	br	1007e20 <memchr+0x84>
 1007dc0:	10001526 	beq	r2,zero,1007e18 <memchr+0x7c>
 1007dc4:	20c00003 	ldbu	r3,0(r4)
 1007dc8:	10bfffc4 	addi	r2,r2,-1
 1007dcc:	30c01426 	beq	r6,r3,1007e20 <memchr+0x84>
 1007dd0:	21000044 	addi	r4,r4,1
 1007dd4:	20c000cc 	andi	r3,r4,3
 1007dd8:	183ff91e 	bne	r3,zero,1007dc0 <__alt_data_end+0xff807dc0>
 1007ddc:	020000c4 	movi	r8,3
 1007de0:	40801136 	bltu	r8,r2,1007e28 <memchr+0x8c>
 1007de4:	10000c26 	beq	r2,zero,1007e18 <memchr+0x7c>
 1007de8:	20c00003 	ldbu	r3,0(r4)
 1007dec:	29403fcc 	andi	r5,r5,255
 1007df0:	28c00b26 	beq	r5,r3,1007e20 <memchr+0x84>
 1007df4:	20c00044 	addi	r3,r4,1
 1007df8:	39803fcc 	andi	r6,r7,255
 1007dfc:	2089883a 	add	r4,r4,r2
 1007e00:	00000306 	br	1007e10 <memchr+0x74>
 1007e04:	18c00044 	addi	r3,r3,1
 1007e08:	197fffc3 	ldbu	r5,-1(r3)
 1007e0c:	31400526 	beq	r6,r5,1007e24 <memchr+0x88>
 1007e10:	1805883a 	mov	r2,r3
 1007e14:	20fffb1e 	bne	r4,r3,1007e04 <__alt_data_end+0xff807e04>
 1007e18:	0005883a 	mov	r2,zero
 1007e1c:	f800283a 	ret
 1007e20:	2005883a 	mov	r2,r4
 1007e24:	f800283a 	ret
 1007e28:	28c03fcc 	andi	r3,r5,255
 1007e2c:	1812923a 	slli	r9,r3,8
 1007e30:	02ffbff4 	movhi	r11,65279
 1007e34:	02a02074 	movhi	r10,32897
 1007e38:	48d2b03a 	or	r9,r9,r3
 1007e3c:	4806943a 	slli	r3,r9,16
 1007e40:	5affbfc4 	addi	r11,r11,-257
 1007e44:	52a02004 	addi	r10,r10,-32640
 1007e48:	48d2b03a 	or	r9,r9,r3
 1007e4c:	20c00017 	ldw	r3,0(r4)
 1007e50:	48c6f03a 	xor	r3,r9,r3
 1007e54:	1acd883a 	add	r6,r3,r11
 1007e58:	00c6303a 	nor	r3,zero,r3
 1007e5c:	30c6703a 	and	r3,r6,r3
 1007e60:	1a86703a 	and	r3,r3,r10
 1007e64:	183fe01e 	bne	r3,zero,1007de8 <__alt_data_end+0xff807de8>
 1007e68:	10bfff04 	addi	r2,r2,-4
 1007e6c:	21000104 	addi	r4,r4,4
 1007e70:	40bff636 	bltu	r8,r2,1007e4c <__alt_data_end+0xff807e4c>
 1007e74:	003fdb06 	br	1007de4 <__alt_data_end+0xff807de4>
 1007e78:	3005883a 	mov	r2,r6
 1007e7c:	003fd706 	br	1007ddc <__alt_data_end+0xff807ddc>

01007e80 <memcpy>:
 1007e80:	defffd04 	addi	sp,sp,-12
 1007e84:	dfc00215 	stw	ra,8(sp)
 1007e88:	dc400115 	stw	r17,4(sp)
 1007e8c:	dc000015 	stw	r16,0(sp)
 1007e90:	00c003c4 	movi	r3,15
 1007e94:	2005883a 	mov	r2,r4
 1007e98:	1980452e 	bgeu	r3,r6,1007fb0 <memcpy+0x130>
 1007e9c:	2906b03a 	or	r3,r5,r4
 1007ea0:	18c000cc 	andi	r3,r3,3
 1007ea4:	1800441e 	bne	r3,zero,1007fb8 <memcpy+0x138>
 1007ea8:	347ffc04 	addi	r17,r6,-16
 1007eac:	8822d13a 	srli	r17,r17,4
 1007eb0:	28c00104 	addi	r3,r5,4
 1007eb4:	23400104 	addi	r13,r4,4
 1007eb8:	8820913a 	slli	r16,r17,4
 1007ebc:	2b000204 	addi	r12,r5,8
 1007ec0:	22c00204 	addi	r11,r4,8
 1007ec4:	84000504 	addi	r16,r16,20
 1007ec8:	2a800304 	addi	r10,r5,12
 1007ecc:	22400304 	addi	r9,r4,12
 1007ed0:	2c21883a 	add	r16,r5,r16
 1007ed4:	2811883a 	mov	r8,r5
 1007ed8:	200f883a 	mov	r7,r4
 1007edc:	41000017 	ldw	r4,0(r8)
 1007ee0:	1fc00017 	ldw	ra,0(r3)
 1007ee4:	63c00017 	ldw	r15,0(r12)
 1007ee8:	39000015 	stw	r4,0(r7)
 1007eec:	53800017 	ldw	r14,0(r10)
 1007ef0:	6fc00015 	stw	ra,0(r13)
 1007ef4:	5bc00015 	stw	r15,0(r11)
 1007ef8:	4b800015 	stw	r14,0(r9)
 1007efc:	18c00404 	addi	r3,r3,16
 1007f00:	39c00404 	addi	r7,r7,16
 1007f04:	42000404 	addi	r8,r8,16
 1007f08:	6b400404 	addi	r13,r13,16
 1007f0c:	63000404 	addi	r12,r12,16
 1007f10:	5ac00404 	addi	r11,r11,16
 1007f14:	52800404 	addi	r10,r10,16
 1007f18:	4a400404 	addi	r9,r9,16
 1007f1c:	1c3fef1e 	bne	r3,r16,1007edc <__alt_data_end+0xff807edc>
 1007f20:	89c00044 	addi	r7,r17,1
 1007f24:	380e913a 	slli	r7,r7,4
 1007f28:	310003cc 	andi	r4,r6,15
 1007f2c:	02c000c4 	movi	r11,3
 1007f30:	11c7883a 	add	r3,r2,r7
 1007f34:	29cb883a 	add	r5,r5,r7
 1007f38:	5900212e 	bgeu	r11,r4,1007fc0 <memcpy+0x140>
 1007f3c:	1813883a 	mov	r9,r3
 1007f40:	2811883a 	mov	r8,r5
 1007f44:	200f883a 	mov	r7,r4
 1007f48:	42800017 	ldw	r10,0(r8)
 1007f4c:	4a400104 	addi	r9,r9,4
 1007f50:	39ffff04 	addi	r7,r7,-4
 1007f54:	4abfff15 	stw	r10,-4(r9)
 1007f58:	42000104 	addi	r8,r8,4
 1007f5c:	59fffa36 	bltu	r11,r7,1007f48 <__alt_data_end+0xff807f48>
 1007f60:	213fff04 	addi	r4,r4,-4
 1007f64:	2008d0ba 	srli	r4,r4,2
 1007f68:	318000cc 	andi	r6,r6,3
 1007f6c:	21000044 	addi	r4,r4,1
 1007f70:	2109883a 	add	r4,r4,r4
 1007f74:	2109883a 	add	r4,r4,r4
 1007f78:	1907883a 	add	r3,r3,r4
 1007f7c:	290b883a 	add	r5,r5,r4
 1007f80:	30000626 	beq	r6,zero,1007f9c <memcpy+0x11c>
 1007f84:	198d883a 	add	r6,r3,r6
 1007f88:	29c00003 	ldbu	r7,0(r5)
 1007f8c:	18c00044 	addi	r3,r3,1
 1007f90:	29400044 	addi	r5,r5,1
 1007f94:	19ffffc5 	stb	r7,-1(r3)
 1007f98:	19bffb1e 	bne	r3,r6,1007f88 <__alt_data_end+0xff807f88>
 1007f9c:	dfc00217 	ldw	ra,8(sp)
 1007fa0:	dc400117 	ldw	r17,4(sp)
 1007fa4:	dc000017 	ldw	r16,0(sp)
 1007fa8:	dec00304 	addi	sp,sp,12
 1007fac:	f800283a 	ret
 1007fb0:	2007883a 	mov	r3,r4
 1007fb4:	003ff206 	br	1007f80 <__alt_data_end+0xff807f80>
 1007fb8:	2007883a 	mov	r3,r4
 1007fbc:	003ff106 	br	1007f84 <__alt_data_end+0xff807f84>
 1007fc0:	200d883a 	mov	r6,r4
 1007fc4:	003fee06 	br	1007f80 <__alt_data_end+0xff807f80>

01007fc8 <memmove>:
 1007fc8:	2005883a 	mov	r2,r4
 1007fcc:	29000b2e 	bgeu	r5,r4,1007ffc <memmove+0x34>
 1007fd0:	298f883a 	add	r7,r5,r6
 1007fd4:	21c0092e 	bgeu	r4,r7,1007ffc <memmove+0x34>
 1007fd8:	2187883a 	add	r3,r4,r6
 1007fdc:	198bc83a 	sub	r5,r3,r6
 1007fe0:	30004826 	beq	r6,zero,1008104 <memmove+0x13c>
 1007fe4:	39ffffc4 	addi	r7,r7,-1
 1007fe8:	39000003 	ldbu	r4,0(r7)
 1007fec:	18ffffc4 	addi	r3,r3,-1
 1007ff0:	19000005 	stb	r4,0(r3)
 1007ff4:	28fffb1e 	bne	r5,r3,1007fe4 <__alt_data_end+0xff807fe4>
 1007ff8:	f800283a 	ret
 1007ffc:	00c003c4 	movi	r3,15
 1008000:	1980412e 	bgeu	r3,r6,1008108 <memmove+0x140>
 1008004:	2886b03a 	or	r3,r5,r2
 1008008:	18c000cc 	andi	r3,r3,3
 100800c:	1800401e 	bne	r3,zero,1008110 <memmove+0x148>
 1008010:	33fffc04 	addi	r15,r6,-16
 1008014:	781ed13a 	srli	r15,r15,4
 1008018:	28c00104 	addi	r3,r5,4
 100801c:	13400104 	addi	r13,r2,4
 1008020:	781c913a 	slli	r14,r15,4
 1008024:	2b000204 	addi	r12,r5,8
 1008028:	12c00204 	addi	r11,r2,8
 100802c:	73800504 	addi	r14,r14,20
 1008030:	2a800304 	addi	r10,r5,12
 1008034:	12400304 	addi	r9,r2,12
 1008038:	2b9d883a 	add	r14,r5,r14
 100803c:	2811883a 	mov	r8,r5
 1008040:	100f883a 	mov	r7,r2
 1008044:	41000017 	ldw	r4,0(r8)
 1008048:	39c00404 	addi	r7,r7,16
 100804c:	18c00404 	addi	r3,r3,16
 1008050:	393ffc15 	stw	r4,-16(r7)
 1008054:	193ffc17 	ldw	r4,-16(r3)
 1008058:	6b400404 	addi	r13,r13,16
 100805c:	5ac00404 	addi	r11,r11,16
 1008060:	693ffc15 	stw	r4,-16(r13)
 1008064:	61000017 	ldw	r4,0(r12)
 1008068:	4a400404 	addi	r9,r9,16
 100806c:	42000404 	addi	r8,r8,16
 1008070:	593ffc15 	stw	r4,-16(r11)
 1008074:	51000017 	ldw	r4,0(r10)
 1008078:	63000404 	addi	r12,r12,16
 100807c:	52800404 	addi	r10,r10,16
 1008080:	493ffc15 	stw	r4,-16(r9)
 1008084:	1bbfef1e 	bne	r3,r14,1008044 <__alt_data_end+0xff808044>
 1008088:	79000044 	addi	r4,r15,1
 100808c:	2008913a 	slli	r4,r4,4
 1008090:	328003cc 	andi	r10,r6,15
 1008094:	02c000c4 	movi	r11,3
 1008098:	1107883a 	add	r3,r2,r4
 100809c:	290b883a 	add	r5,r5,r4
 10080a0:	5a801e2e 	bgeu	r11,r10,100811c <memmove+0x154>
 10080a4:	1813883a 	mov	r9,r3
 10080a8:	2811883a 	mov	r8,r5
 10080ac:	500f883a 	mov	r7,r10
 10080b0:	41000017 	ldw	r4,0(r8)
 10080b4:	4a400104 	addi	r9,r9,4
 10080b8:	39ffff04 	addi	r7,r7,-4
 10080bc:	493fff15 	stw	r4,-4(r9)
 10080c0:	42000104 	addi	r8,r8,4
 10080c4:	59fffa36 	bltu	r11,r7,10080b0 <__alt_data_end+0xff8080b0>
 10080c8:	513fff04 	addi	r4,r10,-4
 10080cc:	2008d0ba 	srli	r4,r4,2
 10080d0:	318000cc 	andi	r6,r6,3
 10080d4:	21000044 	addi	r4,r4,1
 10080d8:	2109883a 	add	r4,r4,r4
 10080dc:	2109883a 	add	r4,r4,r4
 10080e0:	1907883a 	add	r3,r3,r4
 10080e4:	290b883a 	add	r5,r5,r4
 10080e8:	30000b26 	beq	r6,zero,1008118 <memmove+0x150>
 10080ec:	198d883a 	add	r6,r3,r6
 10080f0:	29c00003 	ldbu	r7,0(r5)
 10080f4:	18c00044 	addi	r3,r3,1
 10080f8:	29400044 	addi	r5,r5,1
 10080fc:	19ffffc5 	stb	r7,-1(r3)
 1008100:	19bffb1e 	bne	r3,r6,10080f0 <__alt_data_end+0xff8080f0>
 1008104:	f800283a 	ret
 1008108:	1007883a 	mov	r3,r2
 100810c:	003ff606 	br	10080e8 <__alt_data_end+0xff8080e8>
 1008110:	1007883a 	mov	r3,r2
 1008114:	003ff506 	br	10080ec <__alt_data_end+0xff8080ec>
 1008118:	f800283a 	ret
 100811c:	500d883a 	mov	r6,r10
 1008120:	003ff106 	br	10080e8 <__alt_data_end+0xff8080e8>

01008124 <memset>:
 1008124:	20c000cc 	andi	r3,r4,3
 1008128:	2005883a 	mov	r2,r4
 100812c:	18004426 	beq	r3,zero,1008240 <memset+0x11c>
 1008130:	31ffffc4 	addi	r7,r6,-1
 1008134:	30004026 	beq	r6,zero,1008238 <memset+0x114>
 1008138:	2813883a 	mov	r9,r5
 100813c:	200d883a 	mov	r6,r4
 1008140:	2007883a 	mov	r3,r4
 1008144:	00000406 	br	1008158 <memset+0x34>
 1008148:	3a3fffc4 	addi	r8,r7,-1
 100814c:	31800044 	addi	r6,r6,1
 1008150:	38003926 	beq	r7,zero,1008238 <memset+0x114>
 1008154:	400f883a 	mov	r7,r8
 1008158:	18c00044 	addi	r3,r3,1
 100815c:	32400005 	stb	r9,0(r6)
 1008160:	1a0000cc 	andi	r8,r3,3
 1008164:	403ff81e 	bne	r8,zero,1008148 <__alt_data_end+0xff808148>
 1008168:	010000c4 	movi	r4,3
 100816c:	21c02d2e 	bgeu	r4,r7,1008224 <memset+0x100>
 1008170:	29003fcc 	andi	r4,r5,255
 1008174:	200c923a 	slli	r6,r4,8
 1008178:	3108b03a 	or	r4,r6,r4
 100817c:	200c943a 	slli	r6,r4,16
 1008180:	218cb03a 	or	r6,r4,r6
 1008184:	010003c4 	movi	r4,15
 1008188:	21c0182e 	bgeu	r4,r7,10081ec <memset+0xc8>
 100818c:	3b3ffc04 	addi	r12,r7,-16
 1008190:	6018d13a 	srli	r12,r12,4
 1008194:	1a000104 	addi	r8,r3,4
 1008198:	1ac00204 	addi	r11,r3,8
 100819c:	6008913a 	slli	r4,r12,4
 10081a0:	1a800304 	addi	r10,r3,12
 10081a4:	1813883a 	mov	r9,r3
 10081a8:	21000504 	addi	r4,r4,20
 10081ac:	1909883a 	add	r4,r3,r4
 10081b0:	49800015 	stw	r6,0(r9)
 10081b4:	41800015 	stw	r6,0(r8)
 10081b8:	59800015 	stw	r6,0(r11)
 10081bc:	51800015 	stw	r6,0(r10)
 10081c0:	42000404 	addi	r8,r8,16
 10081c4:	4a400404 	addi	r9,r9,16
 10081c8:	5ac00404 	addi	r11,r11,16
 10081cc:	52800404 	addi	r10,r10,16
 10081d0:	413ff71e 	bne	r8,r4,10081b0 <__alt_data_end+0xff8081b0>
 10081d4:	63000044 	addi	r12,r12,1
 10081d8:	6018913a 	slli	r12,r12,4
 10081dc:	39c003cc 	andi	r7,r7,15
 10081e0:	010000c4 	movi	r4,3
 10081e4:	1b07883a 	add	r3,r3,r12
 10081e8:	21c00e2e 	bgeu	r4,r7,1008224 <memset+0x100>
 10081ec:	1813883a 	mov	r9,r3
 10081f0:	3811883a 	mov	r8,r7
 10081f4:	010000c4 	movi	r4,3
 10081f8:	49800015 	stw	r6,0(r9)
 10081fc:	423fff04 	addi	r8,r8,-4
 1008200:	4a400104 	addi	r9,r9,4
 1008204:	223ffc36 	bltu	r4,r8,10081f8 <__alt_data_end+0xff8081f8>
 1008208:	393fff04 	addi	r4,r7,-4
 100820c:	2008d0ba 	srli	r4,r4,2
 1008210:	39c000cc 	andi	r7,r7,3
 1008214:	21000044 	addi	r4,r4,1
 1008218:	2109883a 	add	r4,r4,r4
 100821c:	2109883a 	add	r4,r4,r4
 1008220:	1907883a 	add	r3,r3,r4
 1008224:	38000526 	beq	r7,zero,100823c <memset+0x118>
 1008228:	19cf883a 	add	r7,r3,r7
 100822c:	19400005 	stb	r5,0(r3)
 1008230:	18c00044 	addi	r3,r3,1
 1008234:	38fffd1e 	bne	r7,r3,100822c <__alt_data_end+0xff80822c>
 1008238:	f800283a 	ret
 100823c:	f800283a 	ret
 1008240:	2007883a 	mov	r3,r4
 1008244:	300f883a 	mov	r7,r6
 1008248:	003fc706 	br	1008168 <__alt_data_end+0xff808168>

0100824c <_Balloc>:
 100824c:	20801317 	ldw	r2,76(r4)
 1008250:	defffc04 	addi	sp,sp,-16
 1008254:	dc400115 	stw	r17,4(sp)
 1008258:	dc000015 	stw	r16,0(sp)
 100825c:	dfc00315 	stw	ra,12(sp)
 1008260:	dc800215 	stw	r18,8(sp)
 1008264:	2023883a 	mov	r17,r4
 1008268:	2821883a 	mov	r16,r5
 100826c:	10000f26 	beq	r2,zero,10082ac <_Balloc+0x60>
 1008270:	8407883a 	add	r3,r16,r16
 1008274:	18c7883a 	add	r3,r3,r3
 1008278:	10c7883a 	add	r3,r2,r3
 100827c:	18800017 	ldw	r2,0(r3)
 1008280:	10001126 	beq	r2,zero,10082c8 <_Balloc+0x7c>
 1008284:	11000017 	ldw	r4,0(r2)
 1008288:	19000015 	stw	r4,0(r3)
 100828c:	10000415 	stw	zero,16(r2)
 1008290:	10000315 	stw	zero,12(r2)
 1008294:	dfc00317 	ldw	ra,12(sp)
 1008298:	dc800217 	ldw	r18,8(sp)
 100829c:	dc400117 	ldw	r17,4(sp)
 10082a0:	dc000017 	ldw	r16,0(sp)
 10082a4:	dec00404 	addi	sp,sp,16
 10082a8:	f800283a 	ret
 10082ac:	01800844 	movi	r6,33
 10082b0:	01400104 	movi	r5,4
 10082b4:	100b2f40 	call	100b2f4 <_calloc_r>
 10082b8:	88801315 	stw	r2,76(r17)
 10082bc:	103fec1e 	bne	r2,zero,1008270 <__alt_data_end+0xff808270>
 10082c0:	0005883a 	mov	r2,zero
 10082c4:	003ff306 	br	1008294 <__alt_data_end+0xff808294>
 10082c8:	01400044 	movi	r5,1
 10082cc:	2c24983a 	sll	r18,r5,r16
 10082d0:	8809883a 	mov	r4,r17
 10082d4:	91800144 	addi	r6,r18,5
 10082d8:	318d883a 	add	r6,r6,r6
 10082dc:	318d883a 	add	r6,r6,r6
 10082e0:	100b2f40 	call	100b2f4 <_calloc_r>
 10082e4:	103ff626 	beq	r2,zero,10082c0 <__alt_data_end+0xff8082c0>
 10082e8:	14000115 	stw	r16,4(r2)
 10082ec:	14800215 	stw	r18,8(r2)
 10082f0:	003fe606 	br	100828c <__alt_data_end+0xff80828c>

010082f4 <_Bfree>:
 10082f4:	28000826 	beq	r5,zero,1008318 <_Bfree+0x24>
 10082f8:	28c00117 	ldw	r3,4(r5)
 10082fc:	20801317 	ldw	r2,76(r4)
 1008300:	18c7883a 	add	r3,r3,r3
 1008304:	18c7883a 	add	r3,r3,r3
 1008308:	10c5883a 	add	r2,r2,r3
 100830c:	10c00017 	ldw	r3,0(r2)
 1008310:	28c00015 	stw	r3,0(r5)
 1008314:	11400015 	stw	r5,0(r2)
 1008318:	f800283a 	ret

0100831c <__multadd>:
 100831c:	defff704 	addi	sp,sp,-36
 1008320:	dc800215 	stw	r18,8(sp)
 1008324:	2c800417 	ldw	r18,16(r5)
 1008328:	dd800615 	stw	r22,24(sp)
 100832c:	dd400515 	stw	r21,20(sp)
 1008330:	dd000415 	stw	r20,16(sp)
 1008334:	dcc00315 	stw	r19,12(sp)
 1008338:	dc400115 	stw	r17,4(sp)
 100833c:	dc000015 	stw	r16,0(sp)
 1008340:	dfc00815 	stw	ra,32(sp)
 1008344:	ddc00715 	stw	r23,28(sp)
 1008348:	2827883a 	mov	r19,r5
 100834c:	2029883a 	mov	r20,r4
 1008350:	3023883a 	mov	r17,r6
 1008354:	3821883a 	mov	r16,r7
 1008358:	2d400504 	addi	r21,r5,20
 100835c:	002d883a 	mov	r22,zero
 1008360:	adc00017 	ldw	r23,0(r21)
 1008364:	880b883a 	mov	r5,r17
 1008368:	ad400104 	addi	r21,r21,4
 100836c:	b93fffcc 	andi	r4,r23,65535
 1008370:	100c9000 	call	100c900 <__mulsi3>
 1008374:	b808d43a 	srli	r4,r23,16
 1008378:	880b883a 	mov	r5,r17
 100837c:	1421883a 	add	r16,r2,r16
 1008380:	100c9000 	call	100c900 <__mulsi3>
 1008384:	800ed43a 	srli	r7,r16,16
 1008388:	80ffffcc 	andi	r3,r16,65535
 100838c:	b5800044 	addi	r22,r22,1
 1008390:	11c5883a 	add	r2,r2,r7
 1008394:	100e943a 	slli	r7,r2,16
 1008398:	1020d43a 	srli	r16,r2,16
 100839c:	38c7883a 	add	r3,r7,r3
 10083a0:	a8ffff15 	stw	r3,-4(r21)
 10083a4:	b4bfee16 	blt	r22,r18,1008360 <__alt_data_end+0xff808360>
 10083a8:	80000926 	beq	r16,zero,10083d0 <__multadd+0xb4>
 10083ac:	98800217 	ldw	r2,8(r19)
 10083b0:	9080130e 	bge	r18,r2,1008400 <__multadd+0xe4>
 10083b4:	90800144 	addi	r2,r18,5
 10083b8:	1085883a 	add	r2,r2,r2
 10083bc:	1085883a 	add	r2,r2,r2
 10083c0:	9885883a 	add	r2,r19,r2
 10083c4:	14000015 	stw	r16,0(r2)
 10083c8:	94800044 	addi	r18,r18,1
 10083cc:	9c800415 	stw	r18,16(r19)
 10083d0:	9805883a 	mov	r2,r19
 10083d4:	dfc00817 	ldw	ra,32(sp)
 10083d8:	ddc00717 	ldw	r23,28(sp)
 10083dc:	dd800617 	ldw	r22,24(sp)
 10083e0:	dd400517 	ldw	r21,20(sp)
 10083e4:	dd000417 	ldw	r20,16(sp)
 10083e8:	dcc00317 	ldw	r19,12(sp)
 10083ec:	dc800217 	ldw	r18,8(sp)
 10083f0:	dc400117 	ldw	r17,4(sp)
 10083f4:	dc000017 	ldw	r16,0(sp)
 10083f8:	dec00904 	addi	sp,sp,36
 10083fc:	f800283a 	ret
 1008400:	99400117 	ldw	r5,4(r19)
 1008404:	a009883a 	mov	r4,r20
 1008408:	29400044 	addi	r5,r5,1
 100840c:	100824c0 	call	100824c <_Balloc>
 1008410:	99800417 	ldw	r6,16(r19)
 1008414:	99400304 	addi	r5,r19,12
 1008418:	11000304 	addi	r4,r2,12
 100841c:	31800084 	addi	r6,r6,2
 1008420:	318d883a 	add	r6,r6,r6
 1008424:	318d883a 	add	r6,r6,r6
 1008428:	1023883a 	mov	r17,r2
 100842c:	1007e800 	call	1007e80 <memcpy>
 1008430:	98000a26 	beq	r19,zero,100845c <__multadd+0x140>
 1008434:	98c00117 	ldw	r3,4(r19)
 1008438:	a0801317 	ldw	r2,76(r20)
 100843c:	18c7883a 	add	r3,r3,r3
 1008440:	18c7883a 	add	r3,r3,r3
 1008444:	10c5883a 	add	r2,r2,r3
 1008448:	10c00017 	ldw	r3,0(r2)
 100844c:	98c00015 	stw	r3,0(r19)
 1008450:	14c00015 	stw	r19,0(r2)
 1008454:	8827883a 	mov	r19,r17
 1008458:	003fd606 	br	10083b4 <__alt_data_end+0xff8083b4>
 100845c:	8827883a 	mov	r19,r17
 1008460:	003fd406 	br	10083b4 <__alt_data_end+0xff8083b4>

01008464 <__s2b>:
 1008464:	defff904 	addi	sp,sp,-28
 1008468:	dc400115 	stw	r17,4(sp)
 100846c:	dc000015 	stw	r16,0(sp)
 1008470:	2023883a 	mov	r17,r4
 1008474:	2821883a 	mov	r16,r5
 1008478:	39000204 	addi	r4,r7,8
 100847c:	01400244 	movi	r5,9
 1008480:	dcc00315 	stw	r19,12(sp)
 1008484:	dc800215 	stw	r18,8(sp)
 1008488:	dfc00615 	stw	ra,24(sp)
 100848c:	dd400515 	stw	r21,20(sp)
 1008490:	dd000415 	stw	r20,16(sp)
 1008494:	3825883a 	mov	r18,r7
 1008498:	3027883a 	mov	r19,r6
 100849c:	100c74c0 	call	100c74c <__divsi3>
 10084a0:	00c00044 	movi	r3,1
 10084a4:	000b883a 	mov	r5,zero
 10084a8:	1880030e 	bge	r3,r2,10084b8 <__s2b+0x54>
 10084ac:	18c7883a 	add	r3,r3,r3
 10084b0:	29400044 	addi	r5,r5,1
 10084b4:	18bffd16 	blt	r3,r2,10084ac <__alt_data_end+0xff8084ac>
 10084b8:	8809883a 	mov	r4,r17
 10084bc:	100824c0 	call	100824c <_Balloc>
 10084c0:	d8c00717 	ldw	r3,28(sp)
 10084c4:	10c00515 	stw	r3,20(r2)
 10084c8:	00c00044 	movi	r3,1
 10084cc:	10c00415 	stw	r3,16(r2)
 10084d0:	00c00244 	movi	r3,9
 10084d4:	1cc0210e 	bge	r3,r19,100855c <__s2b+0xf8>
 10084d8:	80eb883a 	add	r21,r16,r3
 10084dc:	a829883a 	mov	r20,r21
 10084e0:	84e1883a 	add	r16,r16,r19
 10084e4:	a1c00007 	ldb	r7,0(r20)
 10084e8:	01800284 	movi	r6,10
 10084ec:	a5000044 	addi	r20,r20,1
 10084f0:	100b883a 	mov	r5,r2
 10084f4:	39fff404 	addi	r7,r7,-48
 10084f8:	8809883a 	mov	r4,r17
 10084fc:	100831c0 	call	100831c <__multadd>
 1008500:	a43ff81e 	bne	r20,r16,10084e4 <__alt_data_end+0xff8084e4>
 1008504:	ace1883a 	add	r16,r21,r19
 1008508:	843ffe04 	addi	r16,r16,-8
 100850c:	9c800a0e 	bge	r19,r18,1008538 <__s2b+0xd4>
 1008510:	94e5c83a 	sub	r18,r18,r19
 1008514:	84a5883a 	add	r18,r16,r18
 1008518:	81c00007 	ldb	r7,0(r16)
 100851c:	01800284 	movi	r6,10
 1008520:	84000044 	addi	r16,r16,1
 1008524:	100b883a 	mov	r5,r2
 1008528:	39fff404 	addi	r7,r7,-48
 100852c:	8809883a 	mov	r4,r17
 1008530:	100831c0 	call	100831c <__multadd>
 1008534:	84bff81e 	bne	r16,r18,1008518 <__alt_data_end+0xff808518>
 1008538:	dfc00617 	ldw	ra,24(sp)
 100853c:	dd400517 	ldw	r21,20(sp)
 1008540:	dd000417 	ldw	r20,16(sp)
 1008544:	dcc00317 	ldw	r19,12(sp)
 1008548:	dc800217 	ldw	r18,8(sp)
 100854c:	dc400117 	ldw	r17,4(sp)
 1008550:	dc000017 	ldw	r16,0(sp)
 1008554:	dec00704 	addi	sp,sp,28
 1008558:	f800283a 	ret
 100855c:	84000284 	addi	r16,r16,10
 1008560:	1827883a 	mov	r19,r3
 1008564:	003fe906 	br	100850c <__alt_data_end+0xff80850c>

01008568 <__hi0bits>:
 1008568:	20bfffec 	andhi	r2,r4,65535
 100856c:	1000141e 	bne	r2,zero,10085c0 <__hi0bits+0x58>
 1008570:	2008943a 	slli	r4,r4,16
 1008574:	00800404 	movi	r2,16
 1008578:	20ffc02c 	andhi	r3,r4,65280
 100857c:	1800021e 	bne	r3,zero,1008588 <__hi0bits+0x20>
 1008580:	2008923a 	slli	r4,r4,8
 1008584:	10800204 	addi	r2,r2,8
 1008588:	20fc002c 	andhi	r3,r4,61440
 100858c:	1800021e 	bne	r3,zero,1008598 <__hi0bits+0x30>
 1008590:	2008913a 	slli	r4,r4,4
 1008594:	10800104 	addi	r2,r2,4
 1008598:	20f0002c 	andhi	r3,r4,49152
 100859c:	1800031e 	bne	r3,zero,10085ac <__hi0bits+0x44>
 10085a0:	2109883a 	add	r4,r4,r4
 10085a4:	10800084 	addi	r2,r2,2
 10085a8:	2109883a 	add	r4,r4,r4
 10085ac:	20000316 	blt	r4,zero,10085bc <__hi0bits+0x54>
 10085b0:	2110002c 	andhi	r4,r4,16384
 10085b4:	2000041e 	bne	r4,zero,10085c8 <__hi0bits+0x60>
 10085b8:	00800804 	movi	r2,32
 10085bc:	f800283a 	ret
 10085c0:	0005883a 	mov	r2,zero
 10085c4:	003fec06 	br	1008578 <__alt_data_end+0xff808578>
 10085c8:	10800044 	addi	r2,r2,1
 10085cc:	f800283a 	ret

010085d0 <__lo0bits>:
 10085d0:	20c00017 	ldw	r3,0(r4)
 10085d4:	188001cc 	andi	r2,r3,7
 10085d8:	10000826 	beq	r2,zero,10085fc <__lo0bits+0x2c>
 10085dc:	1880004c 	andi	r2,r3,1
 10085e0:	1000211e 	bne	r2,zero,1008668 <__lo0bits+0x98>
 10085e4:	1880008c 	andi	r2,r3,2
 10085e8:	1000211e 	bne	r2,zero,1008670 <__lo0bits+0xa0>
 10085ec:	1806d0ba 	srli	r3,r3,2
 10085f0:	00800084 	movi	r2,2
 10085f4:	20c00015 	stw	r3,0(r4)
 10085f8:	f800283a 	ret
 10085fc:	18bfffcc 	andi	r2,r3,65535
 1008600:	10001326 	beq	r2,zero,1008650 <__lo0bits+0x80>
 1008604:	0005883a 	mov	r2,zero
 1008608:	19403fcc 	andi	r5,r3,255
 100860c:	2800021e 	bne	r5,zero,1008618 <__lo0bits+0x48>
 1008610:	1806d23a 	srli	r3,r3,8
 1008614:	10800204 	addi	r2,r2,8
 1008618:	194003cc 	andi	r5,r3,15
 100861c:	2800021e 	bne	r5,zero,1008628 <__lo0bits+0x58>
 1008620:	1806d13a 	srli	r3,r3,4
 1008624:	10800104 	addi	r2,r2,4
 1008628:	194000cc 	andi	r5,r3,3
 100862c:	2800021e 	bne	r5,zero,1008638 <__lo0bits+0x68>
 1008630:	1806d0ba 	srli	r3,r3,2
 1008634:	10800084 	addi	r2,r2,2
 1008638:	1940004c 	andi	r5,r3,1
 100863c:	2800081e 	bne	r5,zero,1008660 <__lo0bits+0x90>
 1008640:	1806d07a 	srli	r3,r3,1
 1008644:	1800051e 	bne	r3,zero,100865c <__lo0bits+0x8c>
 1008648:	00800804 	movi	r2,32
 100864c:	f800283a 	ret
 1008650:	1806d43a 	srli	r3,r3,16
 1008654:	00800404 	movi	r2,16
 1008658:	003feb06 	br	1008608 <__alt_data_end+0xff808608>
 100865c:	10800044 	addi	r2,r2,1
 1008660:	20c00015 	stw	r3,0(r4)
 1008664:	f800283a 	ret
 1008668:	0005883a 	mov	r2,zero
 100866c:	f800283a 	ret
 1008670:	1806d07a 	srli	r3,r3,1
 1008674:	00800044 	movi	r2,1
 1008678:	20c00015 	stw	r3,0(r4)
 100867c:	f800283a 	ret

01008680 <__i2b>:
 1008680:	defffd04 	addi	sp,sp,-12
 1008684:	dc000015 	stw	r16,0(sp)
 1008688:	04000044 	movi	r16,1
 100868c:	dc400115 	stw	r17,4(sp)
 1008690:	2823883a 	mov	r17,r5
 1008694:	800b883a 	mov	r5,r16
 1008698:	dfc00215 	stw	ra,8(sp)
 100869c:	100824c0 	call	100824c <_Balloc>
 10086a0:	14400515 	stw	r17,20(r2)
 10086a4:	14000415 	stw	r16,16(r2)
 10086a8:	dfc00217 	ldw	ra,8(sp)
 10086ac:	dc400117 	ldw	r17,4(sp)
 10086b0:	dc000017 	ldw	r16,0(sp)
 10086b4:	dec00304 	addi	sp,sp,12
 10086b8:	f800283a 	ret

010086bc <__multiply>:
 10086bc:	deffef04 	addi	sp,sp,-68
 10086c0:	dc400815 	stw	r17,32(sp)
 10086c4:	dc000715 	stw	r16,28(sp)
 10086c8:	34400417 	ldw	r17,16(r6)
 10086cc:	2c000417 	ldw	r16,16(r5)
 10086d0:	dd800d15 	stw	r22,52(sp)
 10086d4:	dc800915 	stw	r18,36(sp)
 10086d8:	dfc01015 	stw	ra,64(sp)
 10086dc:	df000f15 	stw	fp,60(sp)
 10086e0:	ddc00e15 	stw	r23,56(sp)
 10086e4:	dd400c15 	stw	r21,48(sp)
 10086e8:	dd000b15 	stw	r20,44(sp)
 10086ec:	dcc00a15 	stw	r19,40(sp)
 10086f0:	2825883a 	mov	r18,r5
 10086f4:	302d883a 	mov	r22,r6
 10086f8:	8440050e 	bge	r16,r17,1008710 <__multiply+0x54>
 10086fc:	8007883a 	mov	r3,r16
 1008700:	3025883a 	mov	r18,r6
 1008704:	8821883a 	mov	r16,r17
 1008708:	282d883a 	mov	r22,r5
 100870c:	1823883a 	mov	r17,r3
 1008710:	90800217 	ldw	r2,8(r18)
 1008714:	8447883a 	add	r3,r16,r17
 1008718:	d8c00215 	stw	r3,8(sp)
 100871c:	91400117 	ldw	r5,4(r18)
 1008720:	10c0010e 	bge	r2,r3,1008728 <__multiply+0x6c>
 1008724:	29400044 	addi	r5,r5,1
 1008728:	100824c0 	call	100824c <_Balloc>
 100872c:	d8c00217 	ldw	r3,8(sp)
 1008730:	d8800615 	stw	r2,24(sp)
 1008734:	18eb883a 	add	r21,r3,r3
 1008738:	ad6b883a 	add	r21,r21,r21
 100873c:	10c00504 	addi	r3,r2,20
 1008740:	1d6b883a 	add	r21,r3,r21
 1008744:	d8c00115 	stw	r3,4(sp)
 1008748:	dd400315 	stw	r21,12(sp)
 100874c:	1805883a 	mov	r2,r3
 1008750:	1d40042e 	bgeu	r3,r21,1008764 <__multiply+0xa8>
 1008754:	d8c00317 	ldw	r3,12(sp)
 1008758:	10000015 	stw	zero,0(r2)
 100875c:	10800104 	addi	r2,r2,4
 1008760:	10fffc36 	bltu	r2,r3,1008754 <__alt_data_end+0xff808754>
 1008764:	8c63883a 	add	r17,r17,r17
 1008768:	b5800504 	addi	r22,r22,20
 100876c:	8c63883a 	add	r17,r17,r17
 1008770:	94800504 	addi	r18,r18,20
 1008774:	8421883a 	add	r16,r16,r16
 1008778:	b463883a 	add	r17,r22,r17
 100877c:	8421883a 	add	r16,r16,r16
 1008780:	dd800015 	stw	r22,0(sp)
 1008784:	dc800415 	stw	r18,16(sp)
 1008788:	dc400515 	stw	r17,20(sp)
 100878c:	9429883a 	add	r20,r18,r16
 1008790:	b4404f2e 	bgeu	r22,r17,10088d0 <__multiply+0x214>
 1008794:	d8c00017 	ldw	r3,0(sp)
 1008798:	1c800017 	ldw	r18,0(r3)
 100879c:	947fffcc 	andi	r17,r18,65535
 10087a0:	88001e26 	beq	r17,zero,100881c <__multiply+0x160>
 10087a4:	dd800117 	ldw	r22,4(sp)
 10087a8:	dd400417 	ldw	r21,16(sp)
 10087ac:	0027883a 	mov	r19,zero
 10087b0:	ac800017 	ldw	r18,0(r21)
 10087b4:	b4000017 	ldw	r16,0(r22)
 10087b8:	880b883a 	mov	r5,r17
 10087bc:	913fffcc 	andi	r4,r18,65535
 10087c0:	100c9000 	call	100c900 <__mulsi3>
 10087c4:	9008d43a 	srli	r4,r18,16
 10087c8:	84bfffcc 	andi	r18,r16,65535
 10087cc:	1485883a 	add	r2,r2,r18
 10087d0:	14e5883a 	add	r18,r2,r19
 10087d4:	8020d43a 	srli	r16,r16,16
 10087d8:	9026d43a 	srli	r19,r18,16
 10087dc:	880b883a 	mov	r5,r17
 10087e0:	100c9000 	call	100c900 <__mulsi3>
 10087e4:	1405883a 	add	r2,r2,r16
 10087e8:	14e1883a 	add	r16,r2,r19
 10087ec:	90ffffcc 	andi	r3,r18,65535
 10087f0:	8024943a 	slli	r18,r16,16
 10087f4:	ad400104 	addi	r21,r21,4
 10087f8:	b005883a 	mov	r2,r22
 10087fc:	90c6b03a 	or	r3,r18,r3
 1008800:	b0c00015 	stw	r3,0(r22)
 1008804:	8026d43a 	srli	r19,r16,16
 1008808:	b5800104 	addi	r22,r22,4
 100880c:	ad3fe836 	bltu	r21,r20,10087b0 <__alt_data_end+0xff8087b0>
 1008810:	d8c00017 	ldw	r3,0(sp)
 1008814:	14c00115 	stw	r19,4(r2)
 1008818:	1c800017 	ldw	r18,0(r3)
 100881c:	9024d43a 	srli	r18,r18,16
 1008820:	90002226 	beq	r18,zero,10088ac <__multiply+0x1f0>
 1008824:	d8c00117 	ldw	r3,4(sp)
 1008828:	dd800417 	ldw	r22,16(sp)
 100882c:	002f883a 	mov	r23,zero
 1008830:	1f000017 	ldw	fp,0(r3)
 1008834:	1823883a 	mov	r17,r3
 1008838:	182b883a 	mov	r21,r3
 100883c:	e021883a 	mov	r16,fp
 1008840:	00000106 	br	1008848 <__multiply+0x18c>
 1008844:	982b883a 	mov	r21,r19
 1008848:	b100000b 	ldhu	r4,0(r22)
 100884c:	8020d43a 	srli	r16,r16,16
 1008850:	900b883a 	mov	r5,r18
 1008854:	100c9000 	call	100c900 <__mulsi3>
 1008858:	1405883a 	add	r2,r2,r16
 100885c:	15ef883a 	add	r23,r2,r23
 1008860:	b804943a 	slli	r2,r23,16
 1008864:	e0ffffcc 	andi	r3,fp,65535
 1008868:	8c400104 	addi	r17,r17,4
 100886c:	10c6b03a 	or	r3,r2,r3
 1008870:	88ffff15 	stw	r3,-4(r17)
 1008874:	b5800104 	addi	r22,r22,4
 1008878:	b13fff17 	ldw	r4,-4(r22)
 100887c:	acc00104 	addi	r19,r21,4
 1008880:	900b883a 	mov	r5,r18
 1008884:	2008d43a 	srli	r4,r4,16
 1008888:	9c000017 	ldw	r16,0(r19)
 100888c:	100c9000 	call	100c900 <__mulsi3>
 1008890:	b806d43a 	srli	r3,r23,16
 1008894:	813fffcc 	andi	r4,r16,65535
 1008898:	1105883a 	add	r2,r2,r4
 100889c:	10f9883a 	add	fp,r2,r3
 10088a0:	e02ed43a 	srli	r23,fp,16
 10088a4:	b53fe736 	bltu	r22,r20,1008844 <__alt_data_end+0xff808844>
 10088a8:	af000115 	stw	fp,4(r21)
 10088ac:	d8c00017 	ldw	r3,0(sp)
 10088b0:	d9000517 	ldw	r4,20(sp)
 10088b4:	18c00104 	addi	r3,r3,4
 10088b8:	d8c00015 	stw	r3,0(sp)
 10088bc:	d8c00117 	ldw	r3,4(sp)
 10088c0:	18c00104 	addi	r3,r3,4
 10088c4:	d8c00115 	stw	r3,4(sp)
 10088c8:	d8c00017 	ldw	r3,0(sp)
 10088cc:	193fb136 	bltu	r3,r4,1008794 <__alt_data_end+0xff808794>
 10088d0:	d8c00217 	ldw	r3,8(sp)
 10088d4:	00c00c0e 	bge	zero,r3,1008908 <__multiply+0x24c>
 10088d8:	d8c00317 	ldw	r3,12(sp)
 10088dc:	18bfff17 	ldw	r2,-4(r3)
 10088e0:	1d7fff04 	addi	r21,r3,-4
 10088e4:	10000326 	beq	r2,zero,10088f4 <__multiply+0x238>
 10088e8:	00000706 	br	1008908 <__multiply+0x24c>
 10088ec:	a8800017 	ldw	r2,0(r21)
 10088f0:	1000051e 	bne	r2,zero,1008908 <__multiply+0x24c>
 10088f4:	d8c00217 	ldw	r3,8(sp)
 10088f8:	ad7fff04 	addi	r21,r21,-4
 10088fc:	18ffffc4 	addi	r3,r3,-1
 1008900:	d8c00215 	stw	r3,8(sp)
 1008904:	183ff91e 	bne	r3,zero,10088ec <__alt_data_end+0xff8088ec>
 1008908:	d8c00617 	ldw	r3,24(sp)
 100890c:	d9000217 	ldw	r4,8(sp)
 1008910:	1805883a 	mov	r2,r3
 1008914:	19000415 	stw	r4,16(r3)
 1008918:	dfc01017 	ldw	ra,64(sp)
 100891c:	df000f17 	ldw	fp,60(sp)
 1008920:	ddc00e17 	ldw	r23,56(sp)
 1008924:	dd800d17 	ldw	r22,52(sp)
 1008928:	dd400c17 	ldw	r21,48(sp)
 100892c:	dd000b17 	ldw	r20,44(sp)
 1008930:	dcc00a17 	ldw	r19,40(sp)
 1008934:	dc800917 	ldw	r18,36(sp)
 1008938:	dc400817 	ldw	r17,32(sp)
 100893c:	dc000717 	ldw	r16,28(sp)
 1008940:	dec01104 	addi	sp,sp,68
 1008944:	f800283a 	ret

01008948 <__pow5mult>:
 1008948:	defffa04 	addi	sp,sp,-24
 100894c:	dcc00315 	stw	r19,12(sp)
 1008950:	dc000015 	stw	r16,0(sp)
 1008954:	dfc00515 	stw	ra,20(sp)
 1008958:	dd000415 	stw	r20,16(sp)
 100895c:	dc800215 	stw	r18,8(sp)
 1008960:	dc400115 	stw	r17,4(sp)
 1008964:	308000cc 	andi	r2,r6,3
 1008968:	3021883a 	mov	r16,r6
 100896c:	2027883a 	mov	r19,r4
 1008970:	10002f1e 	bne	r2,zero,1008a30 <__pow5mult+0xe8>
 1008974:	2825883a 	mov	r18,r5
 1008978:	8021d0ba 	srai	r16,r16,2
 100897c:	80001a26 	beq	r16,zero,10089e8 <__pow5mult+0xa0>
 1008980:	9c401217 	ldw	r17,72(r19)
 1008984:	8800061e 	bne	r17,zero,10089a0 <__pow5mult+0x58>
 1008988:	00003406 	br	1008a5c <__pow5mult+0x114>
 100898c:	8021d07a 	srai	r16,r16,1
 1008990:	80001526 	beq	r16,zero,10089e8 <__pow5mult+0xa0>
 1008994:	88800017 	ldw	r2,0(r17)
 1008998:	10001c26 	beq	r2,zero,1008a0c <__pow5mult+0xc4>
 100899c:	1023883a 	mov	r17,r2
 10089a0:	8080004c 	andi	r2,r16,1
 10089a4:	103ff926 	beq	r2,zero,100898c <__alt_data_end+0xff80898c>
 10089a8:	880d883a 	mov	r6,r17
 10089ac:	900b883a 	mov	r5,r18
 10089b0:	9809883a 	mov	r4,r19
 10089b4:	10086bc0 	call	10086bc <__multiply>
 10089b8:	90001b26 	beq	r18,zero,1008a28 <__pow5mult+0xe0>
 10089bc:	91000117 	ldw	r4,4(r18)
 10089c0:	98c01317 	ldw	r3,76(r19)
 10089c4:	8021d07a 	srai	r16,r16,1
 10089c8:	2109883a 	add	r4,r4,r4
 10089cc:	2109883a 	add	r4,r4,r4
 10089d0:	1907883a 	add	r3,r3,r4
 10089d4:	19000017 	ldw	r4,0(r3)
 10089d8:	91000015 	stw	r4,0(r18)
 10089dc:	1c800015 	stw	r18,0(r3)
 10089e0:	1025883a 	mov	r18,r2
 10089e4:	803feb1e 	bne	r16,zero,1008994 <__alt_data_end+0xff808994>
 10089e8:	9005883a 	mov	r2,r18
 10089ec:	dfc00517 	ldw	ra,20(sp)
 10089f0:	dd000417 	ldw	r20,16(sp)
 10089f4:	dcc00317 	ldw	r19,12(sp)
 10089f8:	dc800217 	ldw	r18,8(sp)
 10089fc:	dc400117 	ldw	r17,4(sp)
 1008a00:	dc000017 	ldw	r16,0(sp)
 1008a04:	dec00604 	addi	sp,sp,24
 1008a08:	f800283a 	ret
 1008a0c:	880d883a 	mov	r6,r17
 1008a10:	880b883a 	mov	r5,r17
 1008a14:	9809883a 	mov	r4,r19
 1008a18:	10086bc0 	call	10086bc <__multiply>
 1008a1c:	88800015 	stw	r2,0(r17)
 1008a20:	10000015 	stw	zero,0(r2)
 1008a24:	003fdd06 	br	100899c <__alt_data_end+0xff80899c>
 1008a28:	1025883a 	mov	r18,r2
 1008a2c:	003fd706 	br	100898c <__alt_data_end+0xff80898c>
 1008a30:	10bfffc4 	addi	r2,r2,-1
 1008a34:	1085883a 	add	r2,r2,r2
 1008a38:	00c04074 	movhi	r3,257
 1008a3c:	18c87b04 	addi	r3,r3,8684
 1008a40:	1085883a 	add	r2,r2,r2
 1008a44:	1885883a 	add	r2,r3,r2
 1008a48:	11800017 	ldw	r6,0(r2)
 1008a4c:	000f883a 	mov	r7,zero
 1008a50:	100831c0 	call	100831c <__multadd>
 1008a54:	1025883a 	mov	r18,r2
 1008a58:	003fc706 	br	1008978 <__alt_data_end+0xff808978>
 1008a5c:	05000044 	movi	r20,1
 1008a60:	a00b883a 	mov	r5,r20
 1008a64:	9809883a 	mov	r4,r19
 1008a68:	100824c0 	call	100824c <_Balloc>
 1008a6c:	1023883a 	mov	r17,r2
 1008a70:	00809c44 	movi	r2,625
 1008a74:	88800515 	stw	r2,20(r17)
 1008a78:	8d000415 	stw	r20,16(r17)
 1008a7c:	9c401215 	stw	r17,72(r19)
 1008a80:	88000015 	stw	zero,0(r17)
 1008a84:	003fc606 	br	10089a0 <__alt_data_end+0xff8089a0>

01008a88 <__lshift>:
 1008a88:	defff904 	addi	sp,sp,-28
 1008a8c:	dd400515 	stw	r21,20(sp)
 1008a90:	dcc00315 	stw	r19,12(sp)
 1008a94:	302bd17a 	srai	r21,r6,5
 1008a98:	2cc00417 	ldw	r19,16(r5)
 1008a9c:	28800217 	ldw	r2,8(r5)
 1008aa0:	dd000415 	stw	r20,16(sp)
 1008aa4:	ace7883a 	add	r19,r21,r19
 1008aa8:	dc800215 	stw	r18,8(sp)
 1008aac:	dc400115 	stw	r17,4(sp)
 1008ab0:	dc000015 	stw	r16,0(sp)
 1008ab4:	dfc00615 	stw	ra,24(sp)
 1008ab8:	9c000044 	addi	r16,r19,1
 1008abc:	2823883a 	mov	r17,r5
 1008ac0:	3029883a 	mov	r20,r6
 1008ac4:	2025883a 	mov	r18,r4
 1008ac8:	29400117 	ldw	r5,4(r5)
 1008acc:	1400030e 	bge	r2,r16,1008adc <__lshift+0x54>
 1008ad0:	1085883a 	add	r2,r2,r2
 1008ad4:	29400044 	addi	r5,r5,1
 1008ad8:	143ffd16 	blt	r2,r16,1008ad0 <__alt_data_end+0xff808ad0>
 1008adc:	9009883a 	mov	r4,r18
 1008ae0:	100824c0 	call	100824c <_Balloc>
 1008ae4:	10c00504 	addi	r3,r2,20
 1008ae8:	0540070e 	bge	zero,r21,1008b08 <__lshift+0x80>
 1008aec:	ad6b883a 	add	r21,r21,r21
 1008af0:	ad6b883a 	add	r21,r21,r21
 1008af4:	1809883a 	mov	r4,r3
 1008af8:	1d47883a 	add	r3,r3,r21
 1008afc:	20000015 	stw	zero,0(r4)
 1008b00:	21000104 	addi	r4,r4,4
 1008b04:	193ffd1e 	bne	r3,r4,1008afc <__alt_data_end+0xff808afc>
 1008b08:	8a000417 	ldw	r8,16(r17)
 1008b0c:	89000504 	addi	r4,r17,20
 1008b10:	a18007cc 	andi	r6,r20,31
 1008b14:	4211883a 	add	r8,r8,r8
 1008b18:	4211883a 	add	r8,r8,r8
 1008b1c:	2211883a 	add	r8,r4,r8
 1008b20:	30002326 	beq	r6,zero,1008bb0 <__lshift+0x128>
 1008b24:	02400804 	movi	r9,32
 1008b28:	4993c83a 	sub	r9,r9,r6
 1008b2c:	000b883a 	mov	r5,zero
 1008b30:	21c00017 	ldw	r7,0(r4)
 1008b34:	1815883a 	mov	r10,r3
 1008b38:	18c00104 	addi	r3,r3,4
 1008b3c:	398e983a 	sll	r7,r7,r6
 1008b40:	21000104 	addi	r4,r4,4
 1008b44:	394ab03a 	or	r5,r7,r5
 1008b48:	197fff15 	stw	r5,-4(r3)
 1008b4c:	217fff17 	ldw	r5,-4(r4)
 1008b50:	2a4ad83a 	srl	r5,r5,r9
 1008b54:	223ff636 	bltu	r4,r8,1008b30 <__alt_data_end+0xff808b30>
 1008b58:	51400115 	stw	r5,4(r10)
 1008b5c:	28001a1e 	bne	r5,zero,1008bc8 <__lshift+0x140>
 1008b60:	843fffc4 	addi	r16,r16,-1
 1008b64:	14000415 	stw	r16,16(r2)
 1008b68:	88000826 	beq	r17,zero,1008b8c <__lshift+0x104>
 1008b6c:	89000117 	ldw	r4,4(r17)
 1008b70:	90c01317 	ldw	r3,76(r18)
 1008b74:	2109883a 	add	r4,r4,r4
 1008b78:	2109883a 	add	r4,r4,r4
 1008b7c:	1907883a 	add	r3,r3,r4
 1008b80:	19000017 	ldw	r4,0(r3)
 1008b84:	89000015 	stw	r4,0(r17)
 1008b88:	1c400015 	stw	r17,0(r3)
 1008b8c:	dfc00617 	ldw	ra,24(sp)
 1008b90:	dd400517 	ldw	r21,20(sp)
 1008b94:	dd000417 	ldw	r20,16(sp)
 1008b98:	dcc00317 	ldw	r19,12(sp)
 1008b9c:	dc800217 	ldw	r18,8(sp)
 1008ba0:	dc400117 	ldw	r17,4(sp)
 1008ba4:	dc000017 	ldw	r16,0(sp)
 1008ba8:	dec00704 	addi	sp,sp,28
 1008bac:	f800283a 	ret
 1008bb0:	21400017 	ldw	r5,0(r4)
 1008bb4:	18c00104 	addi	r3,r3,4
 1008bb8:	21000104 	addi	r4,r4,4
 1008bbc:	197fff15 	stw	r5,-4(r3)
 1008bc0:	223ffb36 	bltu	r4,r8,1008bb0 <__alt_data_end+0xff808bb0>
 1008bc4:	003fe606 	br	1008b60 <__alt_data_end+0xff808b60>
 1008bc8:	9c000084 	addi	r16,r19,2
 1008bcc:	003fe406 	br	1008b60 <__alt_data_end+0xff808b60>

01008bd0 <__mcmp>:
 1008bd0:	20800417 	ldw	r2,16(r4)
 1008bd4:	28c00417 	ldw	r3,16(r5)
 1008bd8:	10c5c83a 	sub	r2,r2,r3
 1008bdc:	1000111e 	bne	r2,zero,1008c24 <__mcmp+0x54>
 1008be0:	18c7883a 	add	r3,r3,r3
 1008be4:	18c7883a 	add	r3,r3,r3
 1008be8:	21000504 	addi	r4,r4,20
 1008bec:	29400504 	addi	r5,r5,20
 1008bf0:	20c5883a 	add	r2,r4,r3
 1008bf4:	28cb883a 	add	r5,r5,r3
 1008bf8:	00000106 	br	1008c00 <__mcmp+0x30>
 1008bfc:	20800a2e 	bgeu	r4,r2,1008c28 <__mcmp+0x58>
 1008c00:	10bfff04 	addi	r2,r2,-4
 1008c04:	297fff04 	addi	r5,r5,-4
 1008c08:	11800017 	ldw	r6,0(r2)
 1008c0c:	28c00017 	ldw	r3,0(r5)
 1008c10:	30fffa26 	beq	r6,r3,1008bfc <__alt_data_end+0xff808bfc>
 1008c14:	30c00236 	bltu	r6,r3,1008c20 <__mcmp+0x50>
 1008c18:	00800044 	movi	r2,1
 1008c1c:	f800283a 	ret
 1008c20:	00bfffc4 	movi	r2,-1
 1008c24:	f800283a 	ret
 1008c28:	0005883a 	mov	r2,zero
 1008c2c:	f800283a 	ret

01008c30 <__mdiff>:
 1008c30:	28c00417 	ldw	r3,16(r5)
 1008c34:	30800417 	ldw	r2,16(r6)
 1008c38:	defffa04 	addi	sp,sp,-24
 1008c3c:	dcc00315 	stw	r19,12(sp)
 1008c40:	dc800215 	stw	r18,8(sp)
 1008c44:	dfc00515 	stw	ra,20(sp)
 1008c48:	dd000415 	stw	r20,16(sp)
 1008c4c:	dc400115 	stw	r17,4(sp)
 1008c50:	dc000015 	stw	r16,0(sp)
 1008c54:	1887c83a 	sub	r3,r3,r2
 1008c58:	2825883a 	mov	r18,r5
 1008c5c:	3027883a 	mov	r19,r6
 1008c60:	1800141e 	bne	r3,zero,1008cb4 <__mdiff+0x84>
 1008c64:	1085883a 	add	r2,r2,r2
 1008c68:	1085883a 	add	r2,r2,r2
 1008c6c:	2a000504 	addi	r8,r5,20
 1008c70:	34000504 	addi	r16,r6,20
 1008c74:	4087883a 	add	r3,r8,r2
 1008c78:	8085883a 	add	r2,r16,r2
 1008c7c:	00000106 	br	1008c84 <__mdiff+0x54>
 1008c80:	40c0592e 	bgeu	r8,r3,1008de8 <__mdiff+0x1b8>
 1008c84:	18ffff04 	addi	r3,r3,-4
 1008c88:	10bfff04 	addi	r2,r2,-4
 1008c8c:	19c00017 	ldw	r7,0(r3)
 1008c90:	11400017 	ldw	r5,0(r2)
 1008c94:	397ffa26 	beq	r7,r5,1008c80 <__alt_data_end+0xff808c80>
 1008c98:	3940592e 	bgeu	r7,r5,1008e00 <__mdiff+0x1d0>
 1008c9c:	9005883a 	mov	r2,r18
 1008ca0:	4023883a 	mov	r17,r8
 1008ca4:	9825883a 	mov	r18,r19
 1008ca8:	05000044 	movi	r20,1
 1008cac:	1027883a 	mov	r19,r2
 1008cb0:	00000406 	br	1008cc4 <__mdiff+0x94>
 1008cb4:	18005616 	blt	r3,zero,1008e10 <__mdiff+0x1e0>
 1008cb8:	34400504 	addi	r17,r6,20
 1008cbc:	2c000504 	addi	r16,r5,20
 1008cc0:	0029883a 	mov	r20,zero
 1008cc4:	91400117 	ldw	r5,4(r18)
 1008cc8:	100824c0 	call	100824c <_Balloc>
 1008ccc:	92400417 	ldw	r9,16(r18)
 1008cd0:	9b000417 	ldw	r12,16(r19)
 1008cd4:	12c00504 	addi	r11,r2,20
 1008cd8:	4a51883a 	add	r8,r9,r9
 1008cdc:	6319883a 	add	r12,r12,r12
 1008ce0:	4211883a 	add	r8,r8,r8
 1008ce4:	6319883a 	add	r12,r12,r12
 1008ce8:	15000315 	stw	r20,12(r2)
 1008cec:	8211883a 	add	r8,r16,r8
 1008cf0:	8b19883a 	add	r12,r17,r12
 1008cf4:	0007883a 	mov	r3,zero
 1008cf8:	81400017 	ldw	r5,0(r16)
 1008cfc:	89c00017 	ldw	r7,0(r17)
 1008d00:	59800104 	addi	r6,r11,4
 1008d04:	293fffcc 	andi	r4,r5,65535
 1008d08:	20c7883a 	add	r3,r4,r3
 1008d0c:	393fffcc 	andi	r4,r7,65535
 1008d10:	1909c83a 	sub	r4,r3,r4
 1008d14:	280ad43a 	srli	r5,r5,16
 1008d18:	380ed43a 	srli	r7,r7,16
 1008d1c:	2007d43a 	srai	r3,r4,16
 1008d20:	213fffcc 	andi	r4,r4,65535
 1008d24:	29cbc83a 	sub	r5,r5,r7
 1008d28:	28c7883a 	add	r3,r5,r3
 1008d2c:	180a943a 	slli	r5,r3,16
 1008d30:	8c400104 	addi	r17,r17,4
 1008d34:	84000104 	addi	r16,r16,4
 1008d38:	2908b03a 	or	r4,r5,r4
 1008d3c:	59000015 	stw	r4,0(r11)
 1008d40:	1807d43a 	srai	r3,r3,16
 1008d44:	3015883a 	mov	r10,r6
 1008d48:	3017883a 	mov	r11,r6
 1008d4c:	8b3fea36 	bltu	r17,r12,1008cf8 <__alt_data_end+0xff808cf8>
 1008d50:	8200162e 	bgeu	r16,r8,1008dac <__mdiff+0x17c>
 1008d54:	8017883a 	mov	r11,r16
 1008d58:	59400017 	ldw	r5,0(r11)
 1008d5c:	31800104 	addi	r6,r6,4
 1008d60:	5ac00104 	addi	r11,r11,4
 1008d64:	293fffcc 	andi	r4,r5,65535
 1008d68:	20c7883a 	add	r3,r4,r3
 1008d6c:	280ed43a 	srli	r7,r5,16
 1008d70:	180bd43a 	srai	r5,r3,16
 1008d74:	193fffcc 	andi	r4,r3,65535
 1008d78:	3947883a 	add	r3,r7,r5
 1008d7c:	180a943a 	slli	r5,r3,16
 1008d80:	1807d43a 	srai	r3,r3,16
 1008d84:	2908b03a 	or	r4,r5,r4
 1008d88:	313fff15 	stw	r4,-4(r6)
 1008d8c:	5a3ff236 	bltu	r11,r8,1008d58 <__alt_data_end+0xff808d58>
 1008d90:	0406303a 	nor	r3,zero,r16
 1008d94:	1a07883a 	add	r3,r3,r8
 1008d98:	1806d0ba 	srli	r3,r3,2
 1008d9c:	18c00044 	addi	r3,r3,1
 1008da0:	18c7883a 	add	r3,r3,r3
 1008da4:	18c7883a 	add	r3,r3,r3
 1008da8:	50d5883a 	add	r10,r10,r3
 1008dac:	50ffff04 	addi	r3,r10,-4
 1008db0:	2000041e 	bne	r4,zero,1008dc4 <__mdiff+0x194>
 1008db4:	18ffff04 	addi	r3,r3,-4
 1008db8:	19000017 	ldw	r4,0(r3)
 1008dbc:	4a7fffc4 	addi	r9,r9,-1
 1008dc0:	203ffc26 	beq	r4,zero,1008db4 <__alt_data_end+0xff808db4>
 1008dc4:	12400415 	stw	r9,16(r2)
 1008dc8:	dfc00517 	ldw	ra,20(sp)
 1008dcc:	dd000417 	ldw	r20,16(sp)
 1008dd0:	dcc00317 	ldw	r19,12(sp)
 1008dd4:	dc800217 	ldw	r18,8(sp)
 1008dd8:	dc400117 	ldw	r17,4(sp)
 1008ddc:	dc000017 	ldw	r16,0(sp)
 1008de0:	dec00604 	addi	sp,sp,24
 1008de4:	f800283a 	ret
 1008de8:	000b883a 	mov	r5,zero
 1008dec:	100824c0 	call	100824c <_Balloc>
 1008df0:	00c00044 	movi	r3,1
 1008df4:	10c00415 	stw	r3,16(r2)
 1008df8:	10000515 	stw	zero,20(r2)
 1008dfc:	003ff206 	br	1008dc8 <__alt_data_end+0xff808dc8>
 1008e00:	8023883a 	mov	r17,r16
 1008e04:	0029883a 	mov	r20,zero
 1008e08:	4021883a 	mov	r16,r8
 1008e0c:	003fad06 	br	1008cc4 <__alt_data_end+0xff808cc4>
 1008e10:	9005883a 	mov	r2,r18
 1008e14:	94400504 	addi	r17,r18,20
 1008e18:	9c000504 	addi	r16,r19,20
 1008e1c:	9825883a 	mov	r18,r19
 1008e20:	05000044 	movi	r20,1
 1008e24:	1027883a 	mov	r19,r2
 1008e28:	003fa606 	br	1008cc4 <__alt_data_end+0xff808cc4>

01008e2c <__ulp>:
 1008e2c:	295ffc2c 	andhi	r5,r5,32752
 1008e30:	00bf3034 	movhi	r2,64704
 1008e34:	2887883a 	add	r3,r5,r2
 1008e38:	00c0020e 	bge	zero,r3,1008e44 <__ulp+0x18>
 1008e3c:	0005883a 	mov	r2,zero
 1008e40:	f800283a 	ret
 1008e44:	00c7c83a 	sub	r3,zero,r3
 1008e48:	1807d53a 	srai	r3,r3,20
 1008e4c:	008004c4 	movi	r2,19
 1008e50:	10c00b0e 	bge	r2,r3,1008e80 <__ulp+0x54>
 1008e54:	18bffb04 	addi	r2,r3,-20
 1008e58:	01000784 	movi	r4,30
 1008e5c:	0007883a 	mov	r3,zero
 1008e60:	20800516 	blt	r4,r2,1008e78 <__ulp+0x4c>
 1008e64:	010007c4 	movi	r4,31
 1008e68:	2089c83a 	sub	r4,r4,r2
 1008e6c:	00800044 	movi	r2,1
 1008e70:	1104983a 	sll	r2,r2,r4
 1008e74:	f800283a 	ret
 1008e78:	00800044 	movi	r2,1
 1008e7c:	f800283a 	ret
 1008e80:	01400234 	movhi	r5,8
 1008e84:	28c7d83a 	sra	r3,r5,r3
 1008e88:	0005883a 	mov	r2,zero
 1008e8c:	f800283a 	ret

01008e90 <__b2d>:
 1008e90:	defffa04 	addi	sp,sp,-24
 1008e94:	dc000015 	stw	r16,0(sp)
 1008e98:	24000417 	ldw	r16,16(r4)
 1008e9c:	dc400115 	stw	r17,4(sp)
 1008ea0:	24400504 	addi	r17,r4,20
 1008ea4:	8421883a 	add	r16,r16,r16
 1008ea8:	8421883a 	add	r16,r16,r16
 1008eac:	8c21883a 	add	r16,r17,r16
 1008eb0:	dc800215 	stw	r18,8(sp)
 1008eb4:	84bfff17 	ldw	r18,-4(r16)
 1008eb8:	dd000415 	stw	r20,16(sp)
 1008ebc:	dcc00315 	stw	r19,12(sp)
 1008ec0:	9009883a 	mov	r4,r18
 1008ec4:	2829883a 	mov	r20,r5
 1008ec8:	dfc00515 	stw	ra,20(sp)
 1008ecc:	10085680 	call	1008568 <__hi0bits>
 1008ed0:	00c00804 	movi	r3,32
 1008ed4:	1889c83a 	sub	r4,r3,r2
 1008ed8:	a1000015 	stw	r4,0(r20)
 1008edc:	01000284 	movi	r4,10
 1008ee0:	84ffff04 	addi	r19,r16,-4
 1008ee4:	20801216 	blt	r4,r2,1008f30 <__b2d+0xa0>
 1008ee8:	018002c4 	movi	r6,11
 1008eec:	308dc83a 	sub	r6,r6,r2
 1008ef0:	9186d83a 	srl	r3,r18,r6
 1008ef4:	18cffc34 	orhi	r3,r3,16368
 1008ef8:	8cc0212e 	bgeu	r17,r19,1008f80 <__b2d+0xf0>
 1008efc:	813ffe17 	ldw	r4,-8(r16)
 1008f00:	218cd83a 	srl	r6,r4,r6
 1008f04:	10800544 	addi	r2,r2,21
 1008f08:	9084983a 	sll	r2,r18,r2
 1008f0c:	1184b03a 	or	r2,r2,r6
 1008f10:	dfc00517 	ldw	ra,20(sp)
 1008f14:	dd000417 	ldw	r20,16(sp)
 1008f18:	dcc00317 	ldw	r19,12(sp)
 1008f1c:	dc800217 	ldw	r18,8(sp)
 1008f20:	dc400117 	ldw	r17,4(sp)
 1008f24:	dc000017 	ldw	r16,0(sp)
 1008f28:	dec00604 	addi	sp,sp,24
 1008f2c:	f800283a 	ret
 1008f30:	8cc00f2e 	bgeu	r17,r19,1008f70 <__b2d+0xe0>
 1008f34:	117ffd44 	addi	r5,r2,-11
 1008f38:	80bffe17 	ldw	r2,-8(r16)
 1008f3c:	28000e26 	beq	r5,zero,1008f78 <__b2d+0xe8>
 1008f40:	1949c83a 	sub	r4,r3,r5
 1008f44:	9164983a 	sll	r18,r18,r5
 1008f48:	1106d83a 	srl	r3,r2,r4
 1008f4c:	81bffe04 	addi	r6,r16,-8
 1008f50:	948ffc34 	orhi	r18,r18,16368
 1008f54:	90c6b03a 	or	r3,r18,r3
 1008f58:	89800e2e 	bgeu	r17,r6,1008f94 <__b2d+0x104>
 1008f5c:	81bffd17 	ldw	r6,-12(r16)
 1008f60:	1144983a 	sll	r2,r2,r5
 1008f64:	310ad83a 	srl	r5,r6,r4
 1008f68:	2884b03a 	or	r2,r5,r2
 1008f6c:	003fe806 	br	1008f10 <__alt_data_end+0xff808f10>
 1008f70:	10bffd44 	addi	r2,r2,-11
 1008f74:	1000041e 	bne	r2,zero,1008f88 <__b2d+0xf8>
 1008f78:	90cffc34 	orhi	r3,r18,16368
 1008f7c:	003fe406 	br	1008f10 <__alt_data_end+0xff808f10>
 1008f80:	000d883a 	mov	r6,zero
 1008f84:	003fdf06 	br	1008f04 <__alt_data_end+0xff808f04>
 1008f88:	90a4983a 	sll	r18,r18,r2
 1008f8c:	0005883a 	mov	r2,zero
 1008f90:	003ff906 	br	1008f78 <__alt_data_end+0xff808f78>
 1008f94:	1144983a 	sll	r2,r2,r5
 1008f98:	003fdd06 	br	1008f10 <__alt_data_end+0xff808f10>

01008f9c <__d2b>:
 1008f9c:	defff804 	addi	sp,sp,-32
 1008fa0:	dc000215 	stw	r16,8(sp)
 1008fa4:	3021883a 	mov	r16,r6
 1008fa8:	dc400315 	stw	r17,12(sp)
 1008fac:	8022907a 	slli	r17,r16,1
 1008fb0:	dd000615 	stw	r20,24(sp)
 1008fb4:	2829883a 	mov	r20,r5
 1008fb8:	01400044 	movi	r5,1
 1008fbc:	dcc00515 	stw	r19,20(sp)
 1008fc0:	dc800415 	stw	r18,16(sp)
 1008fc4:	dfc00715 	stw	ra,28(sp)
 1008fc8:	3825883a 	mov	r18,r7
 1008fcc:	8822d57a 	srli	r17,r17,21
 1008fd0:	100824c0 	call	100824c <_Balloc>
 1008fd4:	1027883a 	mov	r19,r2
 1008fd8:	00800434 	movhi	r2,16
 1008fdc:	10bfffc4 	addi	r2,r2,-1
 1008fe0:	808c703a 	and	r6,r16,r2
 1008fe4:	88000126 	beq	r17,zero,1008fec <__d2b+0x50>
 1008fe8:	31800434 	orhi	r6,r6,16
 1008fec:	d9800015 	stw	r6,0(sp)
 1008ff0:	a0002426 	beq	r20,zero,1009084 <__d2b+0xe8>
 1008ff4:	d9000104 	addi	r4,sp,4
 1008ff8:	dd000115 	stw	r20,4(sp)
 1008ffc:	10085d00 	call	10085d0 <__lo0bits>
 1009000:	d8c00017 	ldw	r3,0(sp)
 1009004:	10002f1e 	bne	r2,zero,10090c4 <__d2b+0x128>
 1009008:	d9000117 	ldw	r4,4(sp)
 100900c:	99000515 	stw	r4,20(r19)
 1009010:	1821003a 	cmpeq	r16,r3,zero
 1009014:	01000084 	movi	r4,2
 1009018:	2421c83a 	sub	r16,r4,r16
 100901c:	98c00615 	stw	r3,24(r19)
 1009020:	9c000415 	stw	r16,16(r19)
 1009024:	88001f1e 	bne	r17,zero,10090a4 <__d2b+0x108>
 1009028:	10bef384 	addi	r2,r2,-1074
 100902c:	90800015 	stw	r2,0(r18)
 1009030:	00900034 	movhi	r2,16384
 1009034:	10bfffc4 	addi	r2,r2,-1
 1009038:	8085883a 	add	r2,r16,r2
 100903c:	1085883a 	add	r2,r2,r2
 1009040:	1085883a 	add	r2,r2,r2
 1009044:	9885883a 	add	r2,r19,r2
 1009048:	11000517 	ldw	r4,20(r2)
 100904c:	8020917a 	slli	r16,r16,5
 1009050:	10085680 	call	1008568 <__hi0bits>
 1009054:	d8c00817 	ldw	r3,32(sp)
 1009058:	8085c83a 	sub	r2,r16,r2
 100905c:	18800015 	stw	r2,0(r3)
 1009060:	9805883a 	mov	r2,r19
 1009064:	dfc00717 	ldw	ra,28(sp)
 1009068:	dd000617 	ldw	r20,24(sp)
 100906c:	dcc00517 	ldw	r19,20(sp)
 1009070:	dc800417 	ldw	r18,16(sp)
 1009074:	dc400317 	ldw	r17,12(sp)
 1009078:	dc000217 	ldw	r16,8(sp)
 100907c:	dec00804 	addi	sp,sp,32
 1009080:	f800283a 	ret
 1009084:	d809883a 	mov	r4,sp
 1009088:	10085d00 	call	10085d0 <__lo0bits>
 100908c:	d8c00017 	ldw	r3,0(sp)
 1009090:	04000044 	movi	r16,1
 1009094:	9c000415 	stw	r16,16(r19)
 1009098:	98c00515 	stw	r3,20(r19)
 100909c:	10800804 	addi	r2,r2,32
 10090a0:	883fe126 	beq	r17,zero,1009028 <__alt_data_end+0xff809028>
 10090a4:	00c00d44 	movi	r3,53
 10090a8:	8c7ef344 	addi	r17,r17,-1075
 10090ac:	88a3883a 	add	r17,r17,r2
 10090b0:	1885c83a 	sub	r2,r3,r2
 10090b4:	d8c00817 	ldw	r3,32(sp)
 10090b8:	94400015 	stw	r17,0(r18)
 10090bc:	18800015 	stw	r2,0(r3)
 10090c0:	003fe706 	br	1009060 <__alt_data_end+0xff809060>
 10090c4:	01000804 	movi	r4,32
 10090c8:	2089c83a 	sub	r4,r4,r2
 10090cc:	1908983a 	sll	r4,r3,r4
 10090d0:	d9400117 	ldw	r5,4(sp)
 10090d4:	1886d83a 	srl	r3,r3,r2
 10090d8:	2148b03a 	or	r4,r4,r5
 10090dc:	99000515 	stw	r4,20(r19)
 10090e0:	d8c00015 	stw	r3,0(sp)
 10090e4:	003fca06 	br	1009010 <__alt_data_end+0xff809010>

010090e8 <__ratio>:
 10090e8:	defff904 	addi	sp,sp,-28
 10090ec:	dc400315 	stw	r17,12(sp)
 10090f0:	2823883a 	mov	r17,r5
 10090f4:	d9400104 	addi	r5,sp,4
 10090f8:	dfc00615 	stw	ra,24(sp)
 10090fc:	dcc00515 	stw	r19,20(sp)
 1009100:	dc800415 	stw	r18,16(sp)
 1009104:	2027883a 	mov	r19,r4
 1009108:	dc000215 	stw	r16,8(sp)
 100910c:	1008e900 	call	1008e90 <__b2d>
 1009110:	d80b883a 	mov	r5,sp
 1009114:	8809883a 	mov	r4,r17
 1009118:	1025883a 	mov	r18,r2
 100911c:	1821883a 	mov	r16,r3
 1009120:	1008e900 	call	1008e90 <__b2d>
 1009124:	8a000417 	ldw	r8,16(r17)
 1009128:	99000417 	ldw	r4,16(r19)
 100912c:	d9400117 	ldw	r5,4(sp)
 1009130:	2209c83a 	sub	r4,r4,r8
 1009134:	2010917a 	slli	r8,r4,5
 1009138:	d9000017 	ldw	r4,0(sp)
 100913c:	2909c83a 	sub	r4,r5,r4
 1009140:	4109883a 	add	r4,r8,r4
 1009144:	01000e0e 	bge	zero,r4,1009180 <__ratio+0x98>
 1009148:	2008953a 	slli	r4,r4,20
 100914c:	2421883a 	add	r16,r4,r16
 1009150:	100d883a 	mov	r6,r2
 1009154:	180f883a 	mov	r7,r3
 1009158:	9009883a 	mov	r4,r18
 100915c:	800b883a 	mov	r5,r16
 1009160:	100d1d40 	call	100d1d4 <__divdf3>
 1009164:	dfc00617 	ldw	ra,24(sp)
 1009168:	dcc00517 	ldw	r19,20(sp)
 100916c:	dc800417 	ldw	r18,16(sp)
 1009170:	dc400317 	ldw	r17,12(sp)
 1009174:	dc000217 	ldw	r16,8(sp)
 1009178:	dec00704 	addi	sp,sp,28
 100917c:	f800283a 	ret
 1009180:	2008953a 	slli	r4,r4,20
 1009184:	1907c83a 	sub	r3,r3,r4
 1009188:	003ff106 	br	1009150 <__alt_data_end+0xff809150>

0100918c <_mprec_log10>:
 100918c:	defffe04 	addi	sp,sp,-8
 1009190:	dc000015 	stw	r16,0(sp)
 1009194:	dfc00115 	stw	ra,4(sp)
 1009198:	008005c4 	movi	r2,23
 100919c:	2021883a 	mov	r16,r4
 10091a0:	11000d0e 	bge	r2,r4,10091d8 <_mprec_log10+0x4c>
 10091a4:	0005883a 	mov	r2,zero
 10091a8:	00cffc34 	movhi	r3,16368
 10091ac:	843fffc4 	addi	r16,r16,-1
 10091b0:	000d883a 	mov	r6,zero
 10091b4:	01d00934 	movhi	r7,16420
 10091b8:	1009883a 	mov	r4,r2
 10091bc:	180b883a 	mov	r5,r3
 10091c0:	100ddfc0 	call	100ddfc <__muldf3>
 10091c4:	803ff91e 	bne	r16,zero,10091ac <__alt_data_end+0xff8091ac>
 10091c8:	dfc00117 	ldw	ra,4(sp)
 10091cc:	dc000017 	ldw	r16,0(sp)
 10091d0:	dec00204 	addi	sp,sp,8
 10091d4:	f800283a 	ret
 10091d8:	202090fa 	slli	r16,r4,3
 10091dc:	00804074 	movhi	r2,257
 10091e0:	10889204 	addi	r2,r2,8776
 10091e4:	1421883a 	add	r16,r2,r16
 10091e8:	80800017 	ldw	r2,0(r16)
 10091ec:	80c00117 	ldw	r3,4(r16)
 10091f0:	dfc00117 	ldw	ra,4(sp)
 10091f4:	dc000017 	ldw	r16,0(sp)
 10091f8:	dec00204 	addi	sp,sp,8
 10091fc:	f800283a 	ret

01009200 <__copybits>:
 1009200:	297fffc4 	addi	r5,r5,-1
 1009204:	280fd17a 	srai	r7,r5,5
 1009208:	30c00417 	ldw	r3,16(r6)
 100920c:	30800504 	addi	r2,r6,20
 1009210:	39c00044 	addi	r7,r7,1
 1009214:	18c7883a 	add	r3,r3,r3
 1009218:	39cf883a 	add	r7,r7,r7
 100921c:	18c7883a 	add	r3,r3,r3
 1009220:	39cf883a 	add	r7,r7,r7
 1009224:	10c7883a 	add	r3,r2,r3
 1009228:	21cf883a 	add	r7,r4,r7
 100922c:	10c00d2e 	bgeu	r2,r3,1009264 <__copybits+0x64>
 1009230:	200b883a 	mov	r5,r4
 1009234:	12000017 	ldw	r8,0(r2)
 1009238:	29400104 	addi	r5,r5,4
 100923c:	10800104 	addi	r2,r2,4
 1009240:	2a3fff15 	stw	r8,-4(r5)
 1009244:	10fffb36 	bltu	r2,r3,1009234 <__alt_data_end+0xff809234>
 1009248:	1985c83a 	sub	r2,r3,r6
 100924c:	10bffac4 	addi	r2,r2,-21
 1009250:	1004d0ba 	srli	r2,r2,2
 1009254:	10800044 	addi	r2,r2,1
 1009258:	1085883a 	add	r2,r2,r2
 100925c:	1085883a 	add	r2,r2,r2
 1009260:	2089883a 	add	r4,r4,r2
 1009264:	21c0032e 	bgeu	r4,r7,1009274 <__copybits+0x74>
 1009268:	20000015 	stw	zero,0(r4)
 100926c:	21000104 	addi	r4,r4,4
 1009270:	21fffd36 	bltu	r4,r7,1009268 <__alt_data_end+0xff809268>
 1009274:	f800283a 	ret

01009278 <__any_on>:
 1009278:	20c00417 	ldw	r3,16(r4)
 100927c:	2805d17a 	srai	r2,r5,5
 1009280:	21000504 	addi	r4,r4,20
 1009284:	18800d0e 	bge	r3,r2,10092bc <__any_on+0x44>
 1009288:	18c7883a 	add	r3,r3,r3
 100928c:	18c7883a 	add	r3,r3,r3
 1009290:	20c7883a 	add	r3,r4,r3
 1009294:	20c0192e 	bgeu	r4,r3,10092fc <__any_on+0x84>
 1009298:	18bfff17 	ldw	r2,-4(r3)
 100929c:	18ffff04 	addi	r3,r3,-4
 10092a0:	1000041e 	bne	r2,zero,10092b4 <__any_on+0x3c>
 10092a4:	20c0142e 	bgeu	r4,r3,10092f8 <__any_on+0x80>
 10092a8:	18ffff04 	addi	r3,r3,-4
 10092ac:	19400017 	ldw	r5,0(r3)
 10092b0:	283ffc26 	beq	r5,zero,10092a4 <__alt_data_end+0xff8092a4>
 10092b4:	00800044 	movi	r2,1
 10092b8:	f800283a 	ret
 10092bc:	10c00a0e 	bge	r2,r3,10092e8 <__any_on+0x70>
 10092c0:	1085883a 	add	r2,r2,r2
 10092c4:	1085883a 	add	r2,r2,r2
 10092c8:	294007cc 	andi	r5,r5,31
 10092cc:	2087883a 	add	r3,r4,r2
 10092d0:	283ff026 	beq	r5,zero,1009294 <__alt_data_end+0xff809294>
 10092d4:	19800017 	ldw	r6,0(r3)
 10092d8:	3144d83a 	srl	r2,r6,r5
 10092dc:	114a983a 	sll	r5,r2,r5
 10092e0:	317ff41e 	bne	r6,r5,10092b4 <__alt_data_end+0xff8092b4>
 10092e4:	003feb06 	br	1009294 <__alt_data_end+0xff809294>
 10092e8:	1085883a 	add	r2,r2,r2
 10092ec:	1085883a 	add	r2,r2,r2
 10092f0:	2087883a 	add	r3,r4,r2
 10092f4:	003fe706 	br	1009294 <__alt_data_end+0xff809294>
 10092f8:	f800283a 	ret
 10092fc:	0005883a 	mov	r2,zero
 1009300:	f800283a 	ret

01009304 <_realloc_r>:
 1009304:	defff604 	addi	sp,sp,-40
 1009308:	dc800215 	stw	r18,8(sp)
 100930c:	dfc00915 	stw	ra,36(sp)
 1009310:	df000815 	stw	fp,32(sp)
 1009314:	ddc00715 	stw	r23,28(sp)
 1009318:	dd800615 	stw	r22,24(sp)
 100931c:	dd400515 	stw	r21,20(sp)
 1009320:	dd000415 	stw	r20,16(sp)
 1009324:	dcc00315 	stw	r19,12(sp)
 1009328:	dc400115 	stw	r17,4(sp)
 100932c:	dc000015 	stw	r16,0(sp)
 1009330:	3025883a 	mov	r18,r6
 1009334:	2800b726 	beq	r5,zero,1009614 <_realloc_r+0x310>
 1009338:	282b883a 	mov	r21,r5
 100933c:	2029883a 	mov	r20,r4
 1009340:	100f7680 	call	100f768 <__malloc_lock>
 1009344:	a8bfff17 	ldw	r2,-4(r21)
 1009348:	043fff04 	movi	r16,-4
 100934c:	90c002c4 	addi	r3,r18,11
 1009350:	01000584 	movi	r4,22
 1009354:	acfffe04 	addi	r19,r21,-8
 1009358:	1420703a 	and	r16,r2,r16
 100935c:	20c0332e 	bgeu	r4,r3,100942c <_realloc_r+0x128>
 1009360:	047ffe04 	movi	r17,-8
 1009364:	1c62703a 	and	r17,r3,r17
 1009368:	8807883a 	mov	r3,r17
 100936c:	88005816 	blt	r17,zero,10094d0 <_realloc_r+0x1cc>
 1009370:	8c805736 	bltu	r17,r18,10094d0 <_realloc_r+0x1cc>
 1009374:	80c0300e 	bge	r16,r3,1009438 <_realloc_r+0x134>
 1009378:	07004074 	movhi	fp,257
 100937c:	e70a4004 	addi	fp,fp,10496
 1009380:	e1c00217 	ldw	r7,8(fp)
 1009384:	9c09883a 	add	r4,r19,r16
 1009388:	22000117 	ldw	r8,4(r4)
 100938c:	21c06326 	beq	r4,r7,100951c <_realloc_r+0x218>
 1009390:	017fff84 	movi	r5,-2
 1009394:	414a703a 	and	r5,r8,r5
 1009398:	214b883a 	add	r5,r4,r5
 100939c:	29800117 	ldw	r6,4(r5)
 10093a0:	3180004c 	andi	r6,r6,1
 10093a4:	30003f26 	beq	r6,zero,10094a4 <_realloc_r+0x1a0>
 10093a8:	1080004c 	andi	r2,r2,1
 10093ac:	10008326 	beq	r2,zero,10095bc <_realloc_r+0x2b8>
 10093b0:	900b883a 	mov	r5,r18
 10093b4:	a009883a 	mov	r4,r20
 10093b8:	10075900 	call	1007590 <_malloc_r>
 10093bc:	1025883a 	mov	r18,r2
 10093c0:	10011e26 	beq	r2,zero,100983c <_realloc_r+0x538>
 10093c4:	a93fff17 	ldw	r4,-4(r21)
 10093c8:	10fffe04 	addi	r3,r2,-8
 10093cc:	00bfff84 	movi	r2,-2
 10093d0:	2084703a 	and	r2,r4,r2
 10093d4:	9885883a 	add	r2,r19,r2
 10093d8:	1880ee26 	beq	r3,r2,1009794 <_realloc_r+0x490>
 10093dc:	81bfff04 	addi	r6,r16,-4
 10093e0:	00800904 	movi	r2,36
 10093e4:	1180b836 	bltu	r2,r6,10096c8 <_realloc_r+0x3c4>
 10093e8:	00c004c4 	movi	r3,19
 10093ec:	19809636 	bltu	r3,r6,1009648 <_realloc_r+0x344>
 10093f0:	9005883a 	mov	r2,r18
 10093f4:	a807883a 	mov	r3,r21
 10093f8:	19000017 	ldw	r4,0(r3)
 10093fc:	11000015 	stw	r4,0(r2)
 1009400:	19000117 	ldw	r4,4(r3)
 1009404:	11000115 	stw	r4,4(r2)
 1009408:	18c00217 	ldw	r3,8(r3)
 100940c:	10c00215 	stw	r3,8(r2)
 1009410:	a80b883a 	mov	r5,r21
 1009414:	a009883a 	mov	r4,r20
 1009418:	10069980 	call	1006998 <_free_r>
 100941c:	a009883a 	mov	r4,r20
 1009420:	100f78c0 	call	100f78c <__malloc_unlock>
 1009424:	9005883a 	mov	r2,r18
 1009428:	00001206 	br	1009474 <_realloc_r+0x170>
 100942c:	00c00404 	movi	r3,16
 1009430:	1823883a 	mov	r17,r3
 1009434:	003fce06 	br	1009370 <__alt_data_end+0xff809370>
 1009438:	a825883a 	mov	r18,r21
 100943c:	8445c83a 	sub	r2,r16,r17
 1009440:	00c003c4 	movi	r3,15
 1009444:	18802636 	bltu	r3,r2,10094e0 <_realloc_r+0x1dc>
 1009448:	99800117 	ldw	r6,4(r19)
 100944c:	9c07883a 	add	r3,r19,r16
 1009450:	3180004c 	andi	r6,r6,1
 1009454:	3420b03a 	or	r16,r6,r16
 1009458:	9c000115 	stw	r16,4(r19)
 100945c:	18800117 	ldw	r2,4(r3)
 1009460:	10800054 	ori	r2,r2,1
 1009464:	18800115 	stw	r2,4(r3)
 1009468:	a009883a 	mov	r4,r20
 100946c:	100f78c0 	call	100f78c <__malloc_unlock>
 1009470:	9005883a 	mov	r2,r18
 1009474:	dfc00917 	ldw	ra,36(sp)
 1009478:	df000817 	ldw	fp,32(sp)
 100947c:	ddc00717 	ldw	r23,28(sp)
 1009480:	dd800617 	ldw	r22,24(sp)
 1009484:	dd400517 	ldw	r21,20(sp)
 1009488:	dd000417 	ldw	r20,16(sp)
 100948c:	dcc00317 	ldw	r19,12(sp)
 1009490:	dc800217 	ldw	r18,8(sp)
 1009494:	dc400117 	ldw	r17,4(sp)
 1009498:	dc000017 	ldw	r16,0(sp)
 100949c:	dec00a04 	addi	sp,sp,40
 10094a0:	f800283a 	ret
 10094a4:	017fff04 	movi	r5,-4
 10094a8:	414a703a 	and	r5,r8,r5
 10094ac:	814d883a 	add	r6,r16,r5
 10094b0:	30c01f16 	blt	r6,r3,1009530 <_realloc_r+0x22c>
 10094b4:	20800317 	ldw	r2,12(r4)
 10094b8:	20c00217 	ldw	r3,8(r4)
 10094bc:	a825883a 	mov	r18,r21
 10094c0:	3021883a 	mov	r16,r6
 10094c4:	18800315 	stw	r2,12(r3)
 10094c8:	10c00215 	stw	r3,8(r2)
 10094cc:	003fdb06 	br	100943c <__alt_data_end+0xff80943c>
 10094d0:	00800304 	movi	r2,12
 10094d4:	a0800015 	stw	r2,0(r20)
 10094d8:	0005883a 	mov	r2,zero
 10094dc:	003fe506 	br	1009474 <__alt_data_end+0xff809474>
 10094e0:	98c00117 	ldw	r3,4(r19)
 10094e4:	9c4b883a 	add	r5,r19,r17
 10094e8:	11000054 	ori	r4,r2,1
 10094ec:	18c0004c 	andi	r3,r3,1
 10094f0:	1c62b03a 	or	r17,r3,r17
 10094f4:	9c400115 	stw	r17,4(r19)
 10094f8:	29000115 	stw	r4,4(r5)
 10094fc:	2885883a 	add	r2,r5,r2
 1009500:	10c00117 	ldw	r3,4(r2)
 1009504:	29400204 	addi	r5,r5,8
 1009508:	a009883a 	mov	r4,r20
 100950c:	18c00054 	ori	r3,r3,1
 1009510:	10c00115 	stw	r3,4(r2)
 1009514:	10069980 	call	1006998 <_free_r>
 1009518:	003fd306 	br	1009468 <__alt_data_end+0xff809468>
 100951c:	017fff04 	movi	r5,-4
 1009520:	414a703a 	and	r5,r8,r5
 1009524:	89800404 	addi	r6,r17,16
 1009528:	8151883a 	add	r8,r16,r5
 100952c:	4180590e 	bge	r8,r6,1009694 <_realloc_r+0x390>
 1009530:	1080004c 	andi	r2,r2,1
 1009534:	103f9e1e 	bne	r2,zero,10093b0 <__alt_data_end+0xff8093b0>
 1009538:	adbffe17 	ldw	r22,-8(r21)
 100953c:	00bfff04 	movi	r2,-4
 1009540:	9dadc83a 	sub	r22,r19,r22
 1009544:	b1800117 	ldw	r6,4(r22)
 1009548:	3084703a 	and	r2,r6,r2
 100954c:	20002026 	beq	r4,zero,10095d0 <_realloc_r+0x2cc>
 1009550:	80af883a 	add	r23,r16,r2
 1009554:	b96f883a 	add	r23,r23,r5
 1009558:	21c05f26 	beq	r4,r7,10096d8 <_realloc_r+0x3d4>
 100955c:	b8c01c16 	blt	r23,r3,10095d0 <_realloc_r+0x2cc>
 1009560:	20800317 	ldw	r2,12(r4)
 1009564:	20c00217 	ldw	r3,8(r4)
 1009568:	81bfff04 	addi	r6,r16,-4
 100956c:	01000904 	movi	r4,36
 1009570:	18800315 	stw	r2,12(r3)
 1009574:	10c00215 	stw	r3,8(r2)
 1009578:	b0c00217 	ldw	r3,8(r22)
 100957c:	b0800317 	ldw	r2,12(r22)
 1009580:	b4800204 	addi	r18,r22,8
 1009584:	18800315 	stw	r2,12(r3)
 1009588:	10c00215 	stw	r3,8(r2)
 100958c:	21801b36 	bltu	r4,r6,10095fc <_realloc_r+0x2f8>
 1009590:	008004c4 	movi	r2,19
 1009594:	1180352e 	bgeu	r2,r6,100966c <_realloc_r+0x368>
 1009598:	a8800017 	ldw	r2,0(r21)
 100959c:	b0800215 	stw	r2,8(r22)
 10095a0:	a8800117 	ldw	r2,4(r21)
 10095a4:	b0800315 	stw	r2,12(r22)
 10095a8:	008006c4 	movi	r2,27
 10095ac:	11807f36 	bltu	r2,r6,10097ac <_realloc_r+0x4a8>
 10095b0:	b0800404 	addi	r2,r22,16
 10095b4:	ad400204 	addi	r21,r21,8
 10095b8:	00002d06 	br	1009670 <_realloc_r+0x36c>
 10095bc:	adbffe17 	ldw	r22,-8(r21)
 10095c0:	00bfff04 	movi	r2,-4
 10095c4:	9dadc83a 	sub	r22,r19,r22
 10095c8:	b1000117 	ldw	r4,4(r22)
 10095cc:	2084703a 	and	r2,r4,r2
 10095d0:	b03f7726 	beq	r22,zero,10093b0 <__alt_data_end+0xff8093b0>
 10095d4:	80af883a 	add	r23,r16,r2
 10095d8:	b8ff7516 	blt	r23,r3,10093b0 <__alt_data_end+0xff8093b0>
 10095dc:	b0800317 	ldw	r2,12(r22)
 10095e0:	b0c00217 	ldw	r3,8(r22)
 10095e4:	81bfff04 	addi	r6,r16,-4
 10095e8:	01000904 	movi	r4,36
 10095ec:	18800315 	stw	r2,12(r3)
 10095f0:	10c00215 	stw	r3,8(r2)
 10095f4:	b4800204 	addi	r18,r22,8
 10095f8:	21bfe52e 	bgeu	r4,r6,1009590 <__alt_data_end+0xff809590>
 10095fc:	a80b883a 	mov	r5,r21
 1009600:	9009883a 	mov	r4,r18
 1009604:	1007fc80 	call	1007fc8 <memmove>
 1009608:	b821883a 	mov	r16,r23
 100960c:	b027883a 	mov	r19,r22
 1009610:	003f8a06 	br	100943c <__alt_data_end+0xff80943c>
 1009614:	300b883a 	mov	r5,r6
 1009618:	dfc00917 	ldw	ra,36(sp)
 100961c:	df000817 	ldw	fp,32(sp)
 1009620:	ddc00717 	ldw	r23,28(sp)
 1009624:	dd800617 	ldw	r22,24(sp)
 1009628:	dd400517 	ldw	r21,20(sp)
 100962c:	dd000417 	ldw	r20,16(sp)
 1009630:	dcc00317 	ldw	r19,12(sp)
 1009634:	dc800217 	ldw	r18,8(sp)
 1009638:	dc400117 	ldw	r17,4(sp)
 100963c:	dc000017 	ldw	r16,0(sp)
 1009640:	dec00a04 	addi	sp,sp,40
 1009644:	10075901 	jmpi	1007590 <_malloc_r>
 1009648:	a8c00017 	ldw	r3,0(r21)
 100964c:	90c00015 	stw	r3,0(r18)
 1009650:	a8c00117 	ldw	r3,4(r21)
 1009654:	90c00115 	stw	r3,4(r18)
 1009658:	00c006c4 	movi	r3,27
 100965c:	19804536 	bltu	r3,r6,1009774 <_realloc_r+0x470>
 1009660:	90800204 	addi	r2,r18,8
 1009664:	a8c00204 	addi	r3,r21,8
 1009668:	003f6306 	br	10093f8 <__alt_data_end+0xff8093f8>
 100966c:	9005883a 	mov	r2,r18
 1009670:	a8c00017 	ldw	r3,0(r21)
 1009674:	b821883a 	mov	r16,r23
 1009678:	b027883a 	mov	r19,r22
 100967c:	10c00015 	stw	r3,0(r2)
 1009680:	a8c00117 	ldw	r3,4(r21)
 1009684:	10c00115 	stw	r3,4(r2)
 1009688:	a8c00217 	ldw	r3,8(r21)
 100968c:	10c00215 	stw	r3,8(r2)
 1009690:	003f6a06 	br	100943c <__alt_data_end+0xff80943c>
 1009694:	9c67883a 	add	r19,r19,r17
 1009698:	4445c83a 	sub	r2,r8,r17
 100969c:	e4c00215 	stw	r19,8(fp)
 10096a0:	10800054 	ori	r2,r2,1
 10096a4:	98800115 	stw	r2,4(r19)
 10096a8:	a8bfff17 	ldw	r2,-4(r21)
 10096ac:	a009883a 	mov	r4,r20
 10096b0:	1080004c 	andi	r2,r2,1
 10096b4:	1462b03a 	or	r17,r2,r17
 10096b8:	ac7fff15 	stw	r17,-4(r21)
 10096bc:	100f78c0 	call	100f78c <__malloc_unlock>
 10096c0:	a805883a 	mov	r2,r21
 10096c4:	003f6b06 	br	1009474 <__alt_data_end+0xff809474>
 10096c8:	a80b883a 	mov	r5,r21
 10096cc:	9009883a 	mov	r4,r18
 10096d0:	1007fc80 	call	1007fc8 <memmove>
 10096d4:	003f4e06 	br	1009410 <__alt_data_end+0xff809410>
 10096d8:	89000404 	addi	r4,r17,16
 10096dc:	b93fbc16 	blt	r23,r4,10095d0 <__alt_data_end+0xff8095d0>
 10096e0:	b0800317 	ldw	r2,12(r22)
 10096e4:	b0c00217 	ldw	r3,8(r22)
 10096e8:	81bfff04 	addi	r6,r16,-4
 10096ec:	01000904 	movi	r4,36
 10096f0:	18800315 	stw	r2,12(r3)
 10096f4:	10c00215 	stw	r3,8(r2)
 10096f8:	b4800204 	addi	r18,r22,8
 10096fc:	21804336 	bltu	r4,r6,100980c <_realloc_r+0x508>
 1009700:	008004c4 	movi	r2,19
 1009704:	11803f2e 	bgeu	r2,r6,1009804 <_realloc_r+0x500>
 1009708:	a8800017 	ldw	r2,0(r21)
 100970c:	b0800215 	stw	r2,8(r22)
 1009710:	a8800117 	ldw	r2,4(r21)
 1009714:	b0800315 	stw	r2,12(r22)
 1009718:	008006c4 	movi	r2,27
 100971c:	11803f36 	bltu	r2,r6,100981c <_realloc_r+0x518>
 1009720:	b0800404 	addi	r2,r22,16
 1009724:	ad400204 	addi	r21,r21,8
 1009728:	a8c00017 	ldw	r3,0(r21)
 100972c:	10c00015 	stw	r3,0(r2)
 1009730:	a8c00117 	ldw	r3,4(r21)
 1009734:	10c00115 	stw	r3,4(r2)
 1009738:	a8c00217 	ldw	r3,8(r21)
 100973c:	10c00215 	stw	r3,8(r2)
 1009740:	b447883a 	add	r3,r22,r17
 1009744:	bc45c83a 	sub	r2,r23,r17
 1009748:	e0c00215 	stw	r3,8(fp)
 100974c:	10800054 	ori	r2,r2,1
 1009750:	18800115 	stw	r2,4(r3)
 1009754:	b0800117 	ldw	r2,4(r22)
 1009758:	a009883a 	mov	r4,r20
 100975c:	1080004c 	andi	r2,r2,1
 1009760:	1462b03a 	or	r17,r2,r17
 1009764:	b4400115 	stw	r17,4(r22)
 1009768:	100f78c0 	call	100f78c <__malloc_unlock>
 100976c:	9005883a 	mov	r2,r18
 1009770:	003f4006 	br	1009474 <__alt_data_end+0xff809474>
 1009774:	a8c00217 	ldw	r3,8(r21)
 1009778:	90c00215 	stw	r3,8(r18)
 100977c:	a8c00317 	ldw	r3,12(r21)
 1009780:	90c00315 	stw	r3,12(r18)
 1009784:	30801126 	beq	r6,r2,10097cc <_realloc_r+0x4c8>
 1009788:	90800404 	addi	r2,r18,16
 100978c:	a8c00404 	addi	r3,r21,16
 1009790:	003f1906 	br	10093f8 <__alt_data_end+0xff8093f8>
 1009794:	90ffff17 	ldw	r3,-4(r18)
 1009798:	00bfff04 	movi	r2,-4
 100979c:	a825883a 	mov	r18,r21
 10097a0:	1884703a 	and	r2,r3,r2
 10097a4:	80a1883a 	add	r16,r16,r2
 10097a8:	003f2406 	br	100943c <__alt_data_end+0xff80943c>
 10097ac:	a8800217 	ldw	r2,8(r21)
 10097b0:	b0800415 	stw	r2,16(r22)
 10097b4:	a8800317 	ldw	r2,12(r21)
 10097b8:	b0800515 	stw	r2,20(r22)
 10097bc:	31000a26 	beq	r6,r4,10097e8 <_realloc_r+0x4e4>
 10097c0:	b0800604 	addi	r2,r22,24
 10097c4:	ad400404 	addi	r21,r21,16
 10097c8:	003fa906 	br	1009670 <__alt_data_end+0xff809670>
 10097cc:	a9000417 	ldw	r4,16(r21)
 10097d0:	90800604 	addi	r2,r18,24
 10097d4:	a8c00604 	addi	r3,r21,24
 10097d8:	91000415 	stw	r4,16(r18)
 10097dc:	a9000517 	ldw	r4,20(r21)
 10097e0:	91000515 	stw	r4,20(r18)
 10097e4:	003f0406 	br	10093f8 <__alt_data_end+0xff8093f8>
 10097e8:	a8c00417 	ldw	r3,16(r21)
 10097ec:	ad400604 	addi	r21,r21,24
 10097f0:	b0800804 	addi	r2,r22,32
 10097f4:	b0c00615 	stw	r3,24(r22)
 10097f8:	a8ffff17 	ldw	r3,-4(r21)
 10097fc:	b0c00715 	stw	r3,28(r22)
 1009800:	003f9b06 	br	1009670 <__alt_data_end+0xff809670>
 1009804:	9005883a 	mov	r2,r18
 1009808:	003fc706 	br	1009728 <__alt_data_end+0xff809728>
 100980c:	a80b883a 	mov	r5,r21
 1009810:	9009883a 	mov	r4,r18
 1009814:	1007fc80 	call	1007fc8 <memmove>
 1009818:	003fc906 	br	1009740 <__alt_data_end+0xff809740>
 100981c:	a8800217 	ldw	r2,8(r21)
 1009820:	b0800415 	stw	r2,16(r22)
 1009824:	a8800317 	ldw	r2,12(r21)
 1009828:	b0800515 	stw	r2,20(r22)
 100982c:	31000726 	beq	r6,r4,100984c <_realloc_r+0x548>
 1009830:	b0800604 	addi	r2,r22,24
 1009834:	ad400404 	addi	r21,r21,16
 1009838:	003fbb06 	br	1009728 <__alt_data_end+0xff809728>
 100983c:	a009883a 	mov	r4,r20
 1009840:	100f78c0 	call	100f78c <__malloc_unlock>
 1009844:	0005883a 	mov	r2,zero
 1009848:	003f0a06 	br	1009474 <__alt_data_end+0xff809474>
 100984c:	a8c00417 	ldw	r3,16(r21)
 1009850:	ad400604 	addi	r21,r21,24
 1009854:	b0800804 	addi	r2,r22,32
 1009858:	b0c00615 	stw	r3,24(r22)
 100985c:	a8ffff17 	ldw	r3,-4(r21)
 1009860:	b0c00715 	stw	r3,28(r22)
 1009864:	003fb006 	br	1009728 <__alt_data_end+0xff809728>

01009868 <__fpclassifyd>:
 1009868:	00a00034 	movhi	r2,32768
 100986c:	10bfffc4 	addi	r2,r2,-1
 1009870:	2884703a 	and	r2,r5,r2
 1009874:	10000726 	beq	r2,zero,1009894 <__fpclassifyd+0x2c>
 1009878:	00fffc34 	movhi	r3,65520
 100987c:	019ff834 	movhi	r6,32736
 1009880:	28c7883a 	add	r3,r5,r3
 1009884:	31bfffc4 	addi	r6,r6,-1
 1009888:	30c00536 	bltu	r6,r3,10098a0 <__fpclassifyd+0x38>
 100988c:	00800104 	movi	r2,4
 1009890:	f800283a 	ret
 1009894:	2000021e 	bne	r4,zero,10098a0 <__fpclassifyd+0x38>
 1009898:	00800084 	movi	r2,2
 100989c:	f800283a 	ret
 10098a0:	00dffc34 	movhi	r3,32752
 10098a4:	019ff834 	movhi	r6,32736
 10098a8:	28cb883a 	add	r5,r5,r3
 10098ac:	31bfffc4 	addi	r6,r6,-1
 10098b0:	317ff62e 	bgeu	r6,r5,100988c <__alt_data_end+0xff80988c>
 10098b4:	01400434 	movhi	r5,16
 10098b8:	297fffc4 	addi	r5,r5,-1
 10098bc:	28800236 	bltu	r5,r2,10098c8 <__fpclassifyd+0x60>
 10098c0:	008000c4 	movi	r2,3
 10098c4:	f800283a 	ret
 10098c8:	10c00226 	beq	r2,r3,10098d4 <__fpclassifyd+0x6c>
 10098cc:	0005883a 	mov	r2,zero
 10098d0:	f800283a 	ret
 10098d4:	2005003a 	cmpeq	r2,r4,zero
 10098d8:	f800283a 	ret

010098dc <_sbrk_r>:
 10098dc:	defffd04 	addi	sp,sp,-12
 10098e0:	dc000015 	stw	r16,0(sp)
 10098e4:	04004074 	movhi	r16,257
 10098e8:	dc400115 	stw	r17,4(sp)
 10098ec:	84169604 	addi	r16,r16,23128
 10098f0:	2023883a 	mov	r17,r4
 10098f4:	2809883a 	mov	r4,r5
 10098f8:	dfc00215 	stw	ra,8(sp)
 10098fc:	80000015 	stw	zero,0(r16)
 1009900:	100f9740 	call	100f974 <sbrk>
 1009904:	00ffffc4 	movi	r3,-1
 1009908:	10c00526 	beq	r2,r3,1009920 <_sbrk_r+0x44>
 100990c:	dfc00217 	ldw	ra,8(sp)
 1009910:	dc400117 	ldw	r17,4(sp)
 1009914:	dc000017 	ldw	r16,0(sp)
 1009918:	dec00304 	addi	sp,sp,12
 100991c:	f800283a 	ret
 1009920:	80c00017 	ldw	r3,0(r16)
 1009924:	183ff926 	beq	r3,zero,100990c <__alt_data_end+0xff80990c>
 1009928:	88c00015 	stw	r3,0(r17)
 100992c:	003ff706 	br	100990c <__alt_data_end+0xff80990c>

01009930 <__sread>:
 1009930:	defffe04 	addi	sp,sp,-8
 1009934:	dc000015 	stw	r16,0(sp)
 1009938:	2821883a 	mov	r16,r5
 100993c:	2940038f 	ldh	r5,14(r5)
 1009940:	dfc00115 	stw	ra,4(sp)
 1009944:	100b7ec0 	call	100b7ec <_read_r>
 1009948:	10000716 	blt	r2,zero,1009968 <__sread+0x38>
 100994c:	80c01417 	ldw	r3,80(r16)
 1009950:	1887883a 	add	r3,r3,r2
 1009954:	80c01415 	stw	r3,80(r16)
 1009958:	dfc00117 	ldw	ra,4(sp)
 100995c:	dc000017 	ldw	r16,0(sp)
 1009960:	dec00204 	addi	sp,sp,8
 1009964:	f800283a 	ret
 1009968:	80c0030b 	ldhu	r3,12(r16)
 100996c:	18fbffcc 	andi	r3,r3,61439
 1009970:	80c0030d 	sth	r3,12(r16)
 1009974:	dfc00117 	ldw	ra,4(sp)
 1009978:	dc000017 	ldw	r16,0(sp)
 100997c:	dec00204 	addi	sp,sp,8
 1009980:	f800283a 	ret

01009984 <__seofread>:
 1009984:	0005883a 	mov	r2,zero
 1009988:	f800283a 	ret

0100998c <__swrite>:
 100998c:	2880030b 	ldhu	r2,12(r5)
 1009990:	defffb04 	addi	sp,sp,-20
 1009994:	dcc00315 	stw	r19,12(sp)
 1009998:	dc800215 	stw	r18,8(sp)
 100999c:	dc400115 	stw	r17,4(sp)
 10099a0:	dc000015 	stw	r16,0(sp)
 10099a4:	dfc00415 	stw	ra,16(sp)
 10099a8:	10c0400c 	andi	r3,r2,256
 10099ac:	2821883a 	mov	r16,r5
 10099b0:	2023883a 	mov	r17,r4
 10099b4:	3025883a 	mov	r18,r6
 10099b8:	3827883a 	mov	r19,r7
 10099bc:	18000526 	beq	r3,zero,10099d4 <__swrite+0x48>
 10099c0:	2940038f 	ldh	r5,14(r5)
 10099c4:	01c00084 	movi	r7,2
 10099c8:	000d883a 	mov	r6,zero
 10099cc:	100b78c0 	call	100b78c <_lseek_r>
 10099d0:	8080030b 	ldhu	r2,12(r16)
 10099d4:	8140038f 	ldh	r5,14(r16)
 10099d8:	10bbffcc 	andi	r2,r2,61439
 10099dc:	980f883a 	mov	r7,r19
 10099e0:	900d883a 	mov	r6,r18
 10099e4:	8809883a 	mov	r4,r17
 10099e8:	8080030d 	sth	r2,12(r16)
 10099ec:	dfc00417 	ldw	ra,16(sp)
 10099f0:	dcc00317 	ldw	r19,12(sp)
 10099f4:	dc800217 	ldw	r18,8(sp)
 10099f8:	dc400117 	ldw	r17,4(sp)
 10099fc:	dc000017 	ldw	r16,0(sp)
 1009a00:	dec00504 	addi	sp,sp,20
 1009a04:	100b2401 	jmpi	100b240 <_write_r>

01009a08 <__sseek>:
 1009a08:	defffe04 	addi	sp,sp,-8
 1009a0c:	dc000015 	stw	r16,0(sp)
 1009a10:	2821883a 	mov	r16,r5
 1009a14:	2940038f 	ldh	r5,14(r5)
 1009a18:	dfc00115 	stw	ra,4(sp)
 1009a1c:	100b78c0 	call	100b78c <_lseek_r>
 1009a20:	00ffffc4 	movi	r3,-1
 1009a24:	10c00826 	beq	r2,r3,1009a48 <__sseek+0x40>
 1009a28:	80c0030b 	ldhu	r3,12(r16)
 1009a2c:	80801415 	stw	r2,80(r16)
 1009a30:	18c40014 	ori	r3,r3,4096
 1009a34:	80c0030d 	sth	r3,12(r16)
 1009a38:	dfc00117 	ldw	ra,4(sp)
 1009a3c:	dc000017 	ldw	r16,0(sp)
 1009a40:	dec00204 	addi	sp,sp,8
 1009a44:	f800283a 	ret
 1009a48:	80c0030b 	ldhu	r3,12(r16)
 1009a4c:	18fbffcc 	andi	r3,r3,61439
 1009a50:	80c0030d 	sth	r3,12(r16)
 1009a54:	dfc00117 	ldw	ra,4(sp)
 1009a58:	dc000017 	ldw	r16,0(sp)
 1009a5c:	dec00204 	addi	sp,sp,8
 1009a60:	f800283a 	ret

01009a64 <__sclose>:
 1009a64:	2940038f 	ldh	r5,14(r5)
 1009a68:	100b2a01 	jmpi	100b2a0 <_close_r>

01009a6c <strcmp>:
 1009a6c:	2144b03a 	or	r2,r4,r5
 1009a70:	108000cc 	andi	r2,r2,3
 1009a74:	1000171e 	bne	r2,zero,1009ad4 <strcmp+0x68>
 1009a78:	20800017 	ldw	r2,0(r4)
 1009a7c:	28c00017 	ldw	r3,0(r5)
 1009a80:	10c0141e 	bne	r2,r3,1009ad4 <strcmp+0x68>
 1009a84:	027fbff4 	movhi	r9,65279
 1009a88:	4a7fbfc4 	addi	r9,r9,-257
 1009a8c:	0086303a 	nor	r3,zero,r2
 1009a90:	02202074 	movhi	r8,32897
 1009a94:	1245883a 	add	r2,r2,r9
 1009a98:	42202004 	addi	r8,r8,-32640
 1009a9c:	10c4703a 	and	r2,r2,r3
 1009aa0:	1204703a 	and	r2,r2,r8
 1009aa4:	10000226 	beq	r2,zero,1009ab0 <strcmp+0x44>
 1009aa8:	00002306 	br	1009b38 <strcmp+0xcc>
 1009aac:	1000221e 	bne	r2,zero,1009b38 <strcmp+0xcc>
 1009ab0:	21000104 	addi	r4,r4,4
 1009ab4:	20c00017 	ldw	r3,0(r4)
 1009ab8:	29400104 	addi	r5,r5,4
 1009abc:	29800017 	ldw	r6,0(r5)
 1009ac0:	1a4f883a 	add	r7,r3,r9
 1009ac4:	00c4303a 	nor	r2,zero,r3
 1009ac8:	3884703a 	and	r2,r7,r2
 1009acc:	1204703a 	and	r2,r2,r8
 1009ad0:	19bff626 	beq	r3,r6,1009aac <__alt_data_end+0xff809aac>
 1009ad4:	20800003 	ldbu	r2,0(r4)
 1009ad8:	10c03fcc 	andi	r3,r2,255
 1009adc:	18c0201c 	xori	r3,r3,128
 1009ae0:	18ffe004 	addi	r3,r3,-128
 1009ae4:	18000c26 	beq	r3,zero,1009b18 <strcmp+0xac>
 1009ae8:	29800007 	ldb	r6,0(r5)
 1009aec:	19800326 	beq	r3,r6,1009afc <strcmp+0x90>
 1009af0:	00001306 	br	1009b40 <strcmp+0xd4>
 1009af4:	29800007 	ldb	r6,0(r5)
 1009af8:	11800b1e 	bne	r2,r6,1009b28 <strcmp+0xbc>
 1009afc:	21000044 	addi	r4,r4,1
 1009b00:	20c00003 	ldbu	r3,0(r4)
 1009b04:	29400044 	addi	r5,r5,1
 1009b08:	18803fcc 	andi	r2,r3,255
 1009b0c:	1080201c 	xori	r2,r2,128
 1009b10:	10bfe004 	addi	r2,r2,-128
 1009b14:	103ff71e 	bne	r2,zero,1009af4 <__alt_data_end+0xff809af4>
 1009b18:	0007883a 	mov	r3,zero
 1009b1c:	28800003 	ldbu	r2,0(r5)
 1009b20:	1885c83a 	sub	r2,r3,r2
 1009b24:	f800283a 	ret
 1009b28:	28800003 	ldbu	r2,0(r5)
 1009b2c:	18c03fcc 	andi	r3,r3,255
 1009b30:	1885c83a 	sub	r2,r3,r2
 1009b34:	f800283a 	ret
 1009b38:	0005883a 	mov	r2,zero
 1009b3c:	f800283a 	ret
 1009b40:	10c03fcc 	andi	r3,r2,255
 1009b44:	003ff506 	br	1009b1c <__alt_data_end+0xff809b1c>

01009b48 <__sprint_r.part.0>:
 1009b48:	28801917 	ldw	r2,100(r5)
 1009b4c:	defff604 	addi	sp,sp,-40
 1009b50:	dd400515 	stw	r21,20(sp)
 1009b54:	dfc00915 	stw	ra,36(sp)
 1009b58:	df000815 	stw	fp,32(sp)
 1009b5c:	ddc00715 	stw	r23,28(sp)
 1009b60:	dd800615 	stw	r22,24(sp)
 1009b64:	dd000415 	stw	r20,16(sp)
 1009b68:	dcc00315 	stw	r19,12(sp)
 1009b6c:	dc800215 	stw	r18,8(sp)
 1009b70:	dc400115 	stw	r17,4(sp)
 1009b74:	dc000015 	stw	r16,0(sp)
 1009b78:	1088000c 	andi	r2,r2,8192
 1009b7c:	302b883a 	mov	r21,r6
 1009b80:	10002e26 	beq	r2,zero,1009c3c <__sprint_r.part.0+0xf4>
 1009b84:	30800217 	ldw	r2,8(r6)
 1009b88:	35800017 	ldw	r22,0(r6)
 1009b8c:	10002926 	beq	r2,zero,1009c34 <__sprint_r.part.0+0xec>
 1009b90:	2827883a 	mov	r19,r5
 1009b94:	2029883a 	mov	r20,r4
 1009b98:	b5c00104 	addi	r23,r22,4
 1009b9c:	04bfffc4 	movi	r18,-1
 1009ba0:	bc400017 	ldw	r17,0(r23)
 1009ba4:	b4000017 	ldw	r16,0(r22)
 1009ba8:	0039883a 	mov	fp,zero
 1009bac:	8822d0ba 	srli	r17,r17,2
 1009bb0:	8800031e 	bne	r17,zero,1009bc0 <__sprint_r.part.0+0x78>
 1009bb4:	00001806 	br	1009c18 <__sprint_r.part.0+0xd0>
 1009bb8:	84000104 	addi	r16,r16,4
 1009bbc:	8f001526 	beq	r17,fp,1009c14 <__sprint_r.part.0+0xcc>
 1009bc0:	81400017 	ldw	r5,0(r16)
 1009bc4:	980d883a 	mov	r6,r19
 1009bc8:	a009883a 	mov	r4,r20
 1009bcc:	100b6380 	call	100b638 <_fputwc_r>
 1009bd0:	e7000044 	addi	fp,fp,1
 1009bd4:	14bff81e 	bne	r2,r18,1009bb8 <__alt_data_end+0xff809bb8>
 1009bd8:	9005883a 	mov	r2,r18
 1009bdc:	a8000215 	stw	zero,8(r21)
 1009be0:	a8000115 	stw	zero,4(r21)
 1009be4:	dfc00917 	ldw	ra,36(sp)
 1009be8:	df000817 	ldw	fp,32(sp)
 1009bec:	ddc00717 	ldw	r23,28(sp)
 1009bf0:	dd800617 	ldw	r22,24(sp)
 1009bf4:	dd400517 	ldw	r21,20(sp)
 1009bf8:	dd000417 	ldw	r20,16(sp)
 1009bfc:	dcc00317 	ldw	r19,12(sp)
 1009c00:	dc800217 	ldw	r18,8(sp)
 1009c04:	dc400117 	ldw	r17,4(sp)
 1009c08:	dc000017 	ldw	r16,0(sp)
 1009c0c:	dec00a04 	addi	sp,sp,40
 1009c10:	f800283a 	ret
 1009c14:	a8800217 	ldw	r2,8(r21)
 1009c18:	8c63883a 	add	r17,r17,r17
 1009c1c:	8c63883a 	add	r17,r17,r17
 1009c20:	1445c83a 	sub	r2,r2,r17
 1009c24:	a8800215 	stw	r2,8(r21)
 1009c28:	b5800204 	addi	r22,r22,8
 1009c2c:	bdc00204 	addi	r23,r23,8
 1009c30:	103fdb1e 	bne	r2,zero,1009ba0 <__alt_data_end+0xff809ba0>
 1009c34:	0005883a 	mov	r2,zero
 1009c38:	003fe806 	br	1009bdc <__alt_data_end+0xff809bdc>
 1009c3c:	1006ca80 	call	1006ca8 <__sfvwrite_r>
 1009c40:	003fe606 	br	1009bdc <__alt_data_end+0xff809bdc>

01009c44 <__sprint_r>:
 1009c44:	30c00217 	ldw	r3,8(r6)
 1009c48:	18000126 	beq	r3,zero,1009c50 <__sprint_r+0xc>
 1009c4c:	1009b481 	jmpi	1009b48 <__sprint_r.part.0>
 1009c50:	30000115 	stw	zero,4(r6)
 1009c54:	0005883a 	mov	r2,zero
 1009c58:	f800283a 	ret

01009c5c <___vfiprintf_internal_r>:
 1009c5c:	deffca04 	addi	sp,sp,-216
 1009c60:	dd403115 	stw	r21,196(sp)
 1009c64:	dfc03515 	stw	ra,212(sp)
 1009c68:	df003415 	stw	fp,208(sp)
 1009c6c:	ddc03315 	stw	r23,204(sp)
 1009c70:	dd803215 	stw	r22,200(sp)
 1009c74:	dd003015 	stw	r20,192(sp)
 1009c78:	dcc02f15 	stw	r19,188(sp)
 1009c7c:	dc802e15 	stw	r18,184(sp)
 1009c80:	dc402d15 	stw	r17,180(sp)
 1009c84:	dc002c15 	stw	r16,176(sp)
 1009c88:	d9002115 	stw	r4,132(sp)
 1009c8c:	d9402015 	stw	r5,128(sp)
 1009c90:	d9c02215 	stw	r7,136(sp)
 1009c94:	302b883a 	mov	r21,r6
 1009c98:	20000226 	beq	r4,zero,1009ca4 <___vfiprintf_internal_r+0x48>
 1009c9c:	20800e17 	ldw	r2,56(r4)
 1009ca0:	1000cf26 	beq	r2,zero,1009fe0 <___vfiprintf_internal_r+0x384>
 1009ca4:	d8c02017 	ldw	r3,128(sp)
 1009ca8:	1880030b 	ldhu	r2,12(r3)
 1009cac:	10c8000c 	andi	r3,r2,8192
 1009cb0:	1800071e 	bne	r3,zero,1009cd0 <___vfiprintf_internal_r+0x74>
 1009cb4:	d9402017 	ldw	r5,128(sp)
 1009cb8:	00f7ffc4 	movi	r3,-8193
 1009cbc:	10880014 	ori	r2,r2,8192
 1009cc0:	29001917 	ldw	r4,100(r5)
 1009cc4:	2880030d 	sth	r2,12(r5)
 1009cc8:	20c6703a 	and	r3,r4,r3
 1009ccc:	28c01915 	stw	r3,100(r5)
 1009cd0:	10c0020c 	andi	r3,r2,8
 1009cd4:	1800a526 	beq	r3,zero,1009f6c <___vfiprintf_internal_r+0x310>
 1009cd8:	d9002017 	ldw	r4,128(sp)
 1009cdc:	20c00417 	ldw	r3,16(r4)
 1009ce0:	1800a226 	beq	r3,zero,1009f6c <___vfiprintf_internal_r+0x310>
 1009ce4:	1080068c 	andi	r2,r2,26
 1009ce8:	00c00284 	movi	r3,10
 1009cec:	10c0a826 	beq	r2,r3,1009f90 <___vfiprintf_internal_r+0x334>
 1009cf0:	d9001a04 	addi	r4,sp,104
 1009cf4:	d94019c4 	addi	r5,sp,103
 1009cf8:	04804074 	movhi	r18,257
 1009cfc:	2145c83a 	sub	r2,r4,r5
 1009d00:	9488c404 	addi	r18,r18,8976
 1009d04:	d9001e15 	stw	r4,120(sp)
 1009d08:	d9401f15 	stw	r5,124(sp)
 1009d0c:	dec01a15 	stw	sp,104(sp)
 1009d10:	d8001c15 	stw	zero,112(sp)
 1009d14:	d8001b15 	stw	zero,108(sp)
 1009d18:	d811883a 	mov	r8,sp
 1009d1c:	d8002615 	stw	zero,152(sp)
 1009d20:	d8002415 	stw	zero,144(sp)
 1009d24:	d8802815 	stw	r2,160(sp)
 1009d28:	a82d883a 	mov	r22,r21
 1009d2c:	b0800007 	ldb	r2,0(r22)
 1009d30:	10040d26 	beq	r2,zero,100ad68 <___vfiprintf_internal_r+0x110c>
 1009d34:	00c00944 	movi	r3,37
 1009d38:	b029883a 	mov	r20,r22
 1009d3c:	10c0021e 	bne	r2,r3,1009d48 <___vfiprintf_internal_r+0xec>
 1009d40:	00001606 	br	1009d9c <___vfiprintf_internal_r+0x140>
 1009d44:	10c00326 	beq	r2,r3,1009d54 <___vfiprintf_internal_r+0xf8>
 1009d48:	a5000044 	addi	r20,r20,1
 1009d4c:	a0800007 	ldb	r2,0(r20)
 1009d50:	103ffc1e 	bne	r2,zero,1009d44 <__alt_data_end+0xff809d44>
 1009d54:	a5a1c83a 	sub	r16,r20,r22
 1009d58:	80001026 	beq	r16,zero,1009d9c <___vfiprintf_internal_r+0x140>
 1009d5c:	d8c01c17 	ldw	r3,112(sp)
 1009d60:	d8801b17 	ldw	r2,108(sp)
 1009d64:	45800015 	stw	r22,0(r8)
 1009d68:	80c7883a 	add	r3,r16,r3
 1009d6c:	10800044 	addi	r2,r2,1
 1009d70:	44000115 	stw	r16,4(r8)
 1009d74:	d8c01c15 	stw	r3,112(sp)
 1009d78:	d8801b15 	stw	r2,108(sp)
 1009d7c:	010001c4 	movi	r4,7
 1009d80:	2080750e 	bge	r4,r2,1009f58 <___vfiprintf_internal_r+0x2fc>
 1009d84:	1803951e 	bne	r3,zero,100abdc <___vfiprintf_internal_r+0xf80>
 1009d88:	d8c02417 	ldw	r3,144(sp)
 1009d8c:	d8001b15 	stw	zero,108(sp)
 1009d90:	d811883a 	mov	r8,sp
 1009d94:	1c07883a 	add	r3,r3,r16
 1009d98:	d8c02415 	stw	r3,144(sp)
 1009d9c:	a0800007 	ldb	r2,0(r20)
 1009da0:	1002e026 	beq	r2,zero,100a924 <___vfiprintf_internal_r+0xcc8>
 1009da4:	a5800044 	addi	r22,r20,1
 1009da8:	a0c00047 	ldb	r3,1(r20)
 1009dac:	d8001d85 	stb	zero,118(sp)
 1009db0:	0027883a 	mov	r19,zero
 1009db4:	d8002305 	stb	zero,140(sp)
 1009db8:	043fffc4 	movi	r16,-1
 1009dbc:	d8002515 	stw	zero,148(sp)
 1009dc0:	0023883a 	mov	r17,zero
 1009dc4:	05001604 	movi	r20,88
 1009dc8:	05400244 	movi	r21,9
 1009dcc:	402f883a 	mov	r23,r8
 1009dd0:	b5800044 	addi	r22,r22,1
 1009dd4:	18bff804 	addi	r2,r3,-32
 1009dd8:	a0827736 	bltu	r20,r2,100a7b8 <___vfiprintf_internal_r+0xb5c>
 1009ddc:	100490ba 	slli	r2,r2,2
 1009de0:	01004074 	movhi	r4,257
 1009de4:	21277d04 	addi	r4,r4,-25100
 1009de8:	1105883a 	add	r2,r2,r4
 1009dec:	10800017 	ldw	r2,0(r2)
 1009df0:	1000683a 	jmp	r2
 1009df4:	0100a4b8 	rdprs	r4,zero,658
 1009df8:	0100a7b8 	rdprs	r4,zero,670
 1009dfc:	0100a7b8 	rdprs	r4,zero,670
 1009e00:	0100a4d4 	movui	r4,659
 1009e04:	0100a7b8 	rdprs	r4,zero,670
 1009e08:	0100a7b8 	rdprs	r4,zero,670
 1009e0c:	0100a7b8 	rdprs	r4,zero,670
 1009e10:	0100a7b8 	rdprs	r4,zero,670
 1009e14:	0100a7b8 	rdprs	r4,zero,670
 1009e18:	0100a7b8 	rdprs	r4,zero,670
 1009e1c:	0100a6dc 	xori	r4,zero,667
 1009e20:	0100a700 	call	100a70 <__alt_mem_onchip_memory2_0+0x100a70>
 1009e24:	0100a7b8 	rdprs	r4,zero,670
 1009e28:	01009ff8 	rdprs	r4,zero,639
 1009e2c:	0100a714 	movui	r4,668
 1009e30:	0100a7b8 	rdprs	r4,zero,670
 1009e34:	0100a4e0 	cmpeqi	r4,zero,659
 1009e38:	0100a4ec 	andhi	r4,zero,659
 1009e3c:	0100a4ec 	andhi	r4,zero,659
 1009e40:	0100a4ec 	andhi	r4,zero,659
 1009e44:	0100a4ec 	andhi	r4,zero,659
 1009e48:	0100a4ec 	andhi	r4,zero,659
 1009e4c:	0100a4ec 	andhi	r4,zero,659
 1009e50:	0100a4ec 	andhi	r4,zero,659
 1009e54:	0100a4ec 	andhi	r4,zero,659
 1009e58:	0100a4ec 	andhi	r4,zero,659
 1009e5c:	0100a7b8 	rdprs	r4,zero,670
 1009e60:	0100a7b8 	rdprs	r4,zero,670
 1009e64:	0100a7b8 	rdprs	r4,zero,670
 1009e68:	0100a7b8 	rdprs	r4,zero,670
 1009e6c:	0100a7b8 	rdprs	r4,zero,670
 1009e70:	0100a7b8 	rdprs	r4,zero,670
 1009e74:	0100a7b8 	rdprs	r4,zero,670
 1009e78:	0100a7b8 	rdprs	r4,zero,670
 1009e7c:	0100a7b8 	rdprs	r4,zero,670
 1009e80:	0100a7b8 	rdprs	r4,zero,670
 1009e84:	0100a52c 	andhi	r4,zero,660
 1009e88:	0100a7b8 	rdprs	r4,zero,670
 1009e8c:	0100a7b8 	rdprs	r4,zero,670
 1009e90:	0100a7b8 	rdprs	r4,zero,670
 1009e94:	0100a7b8 	rdprs	r4,zero,670
 1009e98:	0100a7b8 	rdprs	r4,zero,670
 1009e9c:	0100a7b8 	rdprs	r4,zero,670
 1009ea0:	0100a7b8 	rdprs	r4,zero,670
 1009ea4:	0100a7b8 	rdprs	r4,zero,670
 1009ea8:	0100a7b8 	rdprs	r4,zero,670
 1009eac:	0100a7b8 	rdprs	r4,zero,670
 1009eb0:	0100a568 	cmpgeui	r4,zero,661
 1009eb4:	0100a7b8 	rdprs	r4,zero,670
 1009eb8:	0100a7b8 	rdprs	r4,zero,670
 1009ebc:	0100a7b8 	rdprs	r4,zero,670
 1009ec0:	0100a7b8 	rdprs	r4,zero,670
 1009ec4:	0100a7b8 	rdprs	r4,zero,670
 1009ec8:	0100a5c4 	movi	r4,663
 1009ecc:	0100a7b8 	rdprs	r4,zero,670
 1009ed0:	0100a7b8 	rdprs	r4,zero,670
 1009ed4:	0100a638 	rdprs	r4,zero,664
 1009ed8:	0100a7b8 	rdprs	r4,zero,670
 1009edc:	0100a7b8 	rdprs	r4,zero,670
 1009ee0:	0100a7b8 	rdprs	r4,zero,670
 1009ee4:	0100a7b8 	rdprs	r4,zero,670
 1009ee8:	0100a7b8 	rdprs	r4,zero,670
 1009eec:	0100a7b8 	rdprs	r4,zero,670
 1009ef0:	0100a7b8 	rdprs	r4,zero,670
 1009ef4:	0100a7b8 	rdprs	r4,zero,670
 1009ef8:	0100a7b8 	rdprs	r4,zero,670
 1009efc:	0100a7b8 	rdprs	r4,zero,670
 1009f00:	0100a3e0 	cmpeqi	r4,zero,655
 1009f04:	0100a410 	cmplti	r4,zero,656
 1009f08:	0100a7b8 	rdprs	r4,zero,670
 1009f0c:	0100a7b8 	rdprs	r4,zero,670
 1009f10:	0100a7b8 	rdprs	r4,zero,670
 1009f14:	0100a760 	cmpeqi	r4,zero,669
 1009f18:	0100a410 	cmplti	r4,zero,656
 1009f1c:	0100a7b8 	rdprs	r4,zero,670
 1009f20:	0100a7b8 	rdprs	r4,zero,670
 1009f24:	0100a2b8 	rdprs	r4,zero,650
 1009f28:	0100a7b8 	rdprs	r4,zero,670
 1009f2c:	0100a2cc 	andi	r4,zero,651
 1009f30:	0100a304 	movi	r4,652
 1009f34:	0100a004 	movi	r4,640
 1009f38:	0100a2ac 	andhi	r4,zero,650
 1009f3c:	0100a7b8 	rdprs	r4,zero,670
 1009f40:	0100a678 	rdprs	r4,zero,665
 1009f44:	0100a7b8 	rdprs	r4,zero,670
 1009f48:	0100a6c4 	movi	r4,667
 1009f4c:	0100a7b8 	rdprs	r4,zero,670
 1009f50:	0100a7b8 	rdprs	r4,zero,670
 1009f54:	0100a388 	cmpgei	r4,zero,654
 1009f58:	42000204 	addi	r8,r8,8
 1009f5c:	d8c02417 	ldw	r3,144(sp)
 1009f60:	1c07883a 	add	r3,r3,r16
 1009f64:	d8c02415 	stw	r3,144(sp)
 1009f68:	003f8c06 	br	1009d9c <__alt_data_end+0xff809d9c>
 1009f6c:	d9402017 	ldw	r5,128(sp)
 1009f70:	d9002117 	ldw	r4,132(sp)
 1009f74:	10048180 	call	1004818 <__swsetup_r>
 1009f78:	1003c11e 	bne	r2,zero,100ae80 <___vfiprintf_internal_r+0x1224>
 1009f7c:	d9402017 	ldw	r5,128(sp)
 1009f80:	00c00284 	movi	r3,10
 1009f84:	2880030b 	ldhu	r2,12(r5)
 1009f88:	1080068c 	andi	r2,r2,26
 1009f8c:	10ff581e 	bne	r2,r3,1009cf0 <__alt_data_end+0xff809cf0>
 1009f90:	d8c02017 	ldw	r3,128(sp)
 1009f94:	1880038f 	ldh	r2,14(r3)
 1009f98:	103f5516 	blt	r2,zero,1009cf0 <__alt_data_end+0xff809cf0>
 1009f9c:	d9c02217 	ldw	r7,136(sp)
 1009fa0:	d9002117 	ldw	r4,132(sp)
 1009fa4:	a80d883a 	mov	r6,r21
 1009fa8:	180b883a 	mov	r5,r3
 1009fac:	100b1840 	call	100b184 <__sbprintf>
 1009fb0:	dfc03517 	ldw	ra,212(sp)
 1009fb4:	df003417 	ldw	fp,208(sp)
 1009fb8:	ddc03317 	ldw	r23,204(sp)
 1009fbc:	dd803217 	ldw	r22,200(sp)
 1009fc0:	dd403117 	ldw	r21,196(sp)
 1009fc4:	dd003017 	ldw	r20,192(sp)
 1009fc8:	dcc02f17 	ldw	r19,188(sp)
 1009fcc:	dc802e17 	ldw	r18,184(sp)
 1009fd0:	dc402d17 	ldw	r17,180(sp)
 1009fd4:	dc002c17 	ldw	r16,176(sp)
 1009fd8:	dec03604 	addi	sp,sp,216
 1009fdc:	f800283a 	ret
 1009fe0:	10068240 	call	1006824 <__sinit>
 1009fe4:	003f2f06 	br	1009ca4 <__alt_data_end+0xff809ca4>
 1009fe8:	d8c02517 	ldw	r3,148(sp)
 1009fec:	d8802215 	stw	r2,136(sp)
 1009ff0:	00c7c83a 	sub	r3,zero,r3
 1009ff4:	d8c02515 	stw	r3,148(sp)
 1009ff8:	8c400114 	ori	r17,r17,4
 1009ffc:	b0c00007 	ldb	r3,0(r22)
 100a000:	003f7306 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a004:	00800c04 	movi	r2,48
 100a008:	d9402217 	ldw	r5,136(sp)
 100a00c:	d8801d05 	stb	r2,116(sp)
 100a010:	00801e04 	movi	r2,120
 100a014:	d8801d45 	stb	r2,117(sp)
 100a018:	d8001d85 	stb	zero,118(sp)
 100a01c:	b811883a 	mov	r8,r23
 100a020:	28c00104 	addi	r3,r5,4
 100a024:	2cc00017 	ldw	r19,0(r5)
 100a028:	0029883a 	mov	r20,zero
 100a02c:	88800094 	ori	r2,r17,2
 100a030:	80032516 	blt	r16,zero,100acc8 <___vfiprintf_internal_r+0x106c>
 100a034:	00bfdfc4 	movi	r2,-129
 100a038:	88a2703a 	and	r17,r17,r2
 100a03c:	d8c02215 	stw	r3,136(sp)
 100a040:	8c400094 	ori	r17,r17,2
 100a044:	98032a1e 	bne	r19,zero,100acf0 <___vfiprintf_internal_r+0x1094>
 100a048:	00804074 	movhi	r2,257
 100a04c:	10886304 	addi	r2,r2,8588
 100a050:	d8802615 	stw	r2,152(sp)
 100a054:	002b883a 	mov	r21,zero
 100a058:	8001741e 	bne	r16,zero,100a62c <___vfiprintf_internal_r+0x9d0>
 100a05c:	0021883a 	mov	r16,zero
 100a060:	0029883a 	mov	r20,zero
 100a064:	ddc01a04 	addi	r23,sp,104
 100a068:	8027883a 	mov	r19,r16
 100a06c:	8500010e 	bge	r16,r20,100a074 <___vfiprintf_internal_r+0x418>
 100a070:	a027883a 	mov	r19,r20
 100a074:	ad403fcc 	andi	r21,r21,255
 100a078:	ad40201c 	xori	r21,r21,128
 100a07c:	ad7fe004 	addi	r21,r21,-128
 100a080:	a8000126 	beq	r21,zero,100a088 <___vfiprintf_internal_r+0x42c>
 100a084:	9cc00044 	addi	r19,r19,1
 100a088:	89c0008c 	andi	r7,r17,2
 100a08c:	38000126 	beq	r7,zero,100a094 <___vfiprintf_internal_r+0x438>
 100a090:	9cc00084 	addi	r19,r19,2
 100a094:	88c0210c 	andi	r3,r17,132
 100a098:	1801dd1e 	bne	r3,zero,100a810 <___vfiprintf_internal_r+0xbb4>
 100a09c:	d9402517 	ldw	r5,148(sp)
 100a0a0:	2cebc83a 	sub	r21,r5,r19
 100a0a4:	0541da0e 	bge	zero,r21,100a810 <___vfiprintf_internal_r+0xbb4>
 100a0a8:	07000404 	movi	fp,16
 100a0ac:	d8801c17 	ldw	r2,112(sp)
 100a0b0:	e543be0e 	bge	fp,r21,100afac <___vfiprintf_internal_r+0x1350>
 100a0b4:	01404074 	movhi	r5,257
 100a0b8:	2948c804 	addi	r5,r5,8992
 100a0bc:	dc002715 	stw	r16,156(sp)
 100a0c0:	d9801b17 	ldw	r6,108(sp)
 100a0c4:	a821883a 	mov	r16,r21
 100a0c8:	d9402315 	stw	r5,140(sp)
 100a0cc:	028001c4 	movi	r10,7
 100a0d0:	d9c02915 	stw	r7,164(sp)
 100a0d4:	182b883a 	mov	r21,r3
 100a0d8:	00000506 	br	100a0f0 <___vfiprintf_internal_r+0x494>
 100a0dc:	31000084 	addi	r4,r6,2
 100a0e0:	42000204 	addi	r8,r8,8
 100a0e4:	180d883a 	mov	r6,r3
 100a0e8:	843ffc04 	addi	r16,r16,-16
 100a0ec:	e4000f0e 	bge	fp,r16,100a12c <___vfiprintf_internal_r+0x4d0>
 100a0f0:	01004074 	movhi	r4,257
 100a0f4:	10800404 	addi	r2,r2,16
 100a0f8:	30c00044 	addi	r3,r6,1
 100a0fc:	2108c804 	addi	r4,r4,8992
 100a100:	41000015 	stw	r4,0(r8)
 100a104:	47000115 	stw	fp,4(r8)
 100a108:	d8801c15 	stw	r2,112(sp)
 100a10c:	d8c01b15 	stw	r3,108(sp)
 100a110:	50fff20e 	bge	r10,r3,100a0dc <__alt_data_end+0xff80a0dc>
 100a114:	1001b21e 	bne	r2,zero,100a7e0 <___vfiprintf_internal_r+0xb84>
 100a118:	843ffc04 	addi	r16,r16,-16
 100a11c:	000d883a 	mov	r6,zero
 100a120:	01000044 	movi	r4,1
 100a124:	d811883a 	mov	r8,sp
 100a128:	e43ff116 	blt	fp,r16,100a0f0 <__alt_data_end+0xff80a0f0>
 100a12c:	a807883a 	mov	r3,r21
 100a130:	d9c02917 	ldw	r7,164(sp)
 100a134:	802b883a 	mov	r21,r16
 100a138:	dc002717 	ldw	r16,156(sp)
 100a13c:	d9402317 	ldw	r5,140(sp)
 100a140:	a885883a 	add	r2,r21,r2
 100a144:	45400115 	stw	r21,4(r8)
 100a148:	41400015 	stw	r5,0(r8)
 100a14c:	d8801c15 	stw	r2,112(sp)
 100a150:	d9001b15 	stw	r4,108(sp)
 100a154:	014001c4 	movi	r5,7
 100a158:	29026216 	blt	r5,r4,100aae4 <___vfiprintf_internal_r+0xe88>
 100a15c:	d9801d87 	ldb	r6,118(sp)
 100a160:	42000204 	addi	r8,r8,8
 100a164:	21400044 	addi	r5,r4,1
 100a168:	3001ae1e 	bne	r6,zero,100a824 <___vfiprintf_internal_r+0xbc8>
 100a16c:	3801bb26 	beq	r7,zero,100a85c <___vfiprintf_internal_r+0xc00>
 100a170:	d9001d04 	addi	r4,sp,116
 100a174:	10800084 	addi	r2,r2,2
 100a178:	41000015 	stw	r4,0(r8)
 100a17c:	01000084 	movi	r4,2
 100a180:	41000115 	stw	r4,4(r8)
 100a184:	d8801c15 	stw	r2,112(sp)
 100a188:	d9401b15 	stw	r5,108(sp)
 100a18c:	010001c4 	movi	r4,7
 100a190:	2142680e 	bge	r4,r5,100ab34 <___vfiprintf_internal_r+0xed8>
 100a194:	1002b11e 	bne	r2,zero,100ac5c <___vfiprintf_internal_r+0x1000>
 100a198:	01802004 	movi	r6,128
 100a19c:	01400044 	movi	r5,1
 100a1a0:	0009883a 	mov	r4,zero
 100a1a4:	d811883a 	mov	r8,sp
 100a1a8:	1981ae1e 	bne	r3,r6,100a864 <___vfiprintf_internal_r+0xc08>
 100a1ac:	d8c02517 	ldw	r3,148(sp)
 100a1b0:	1cf9c83a 	sub	fp,r3,r19
 100a1b4:	0701ab0e 	bge	zero,fp,100a864 <___vfiprintf_internal_r+0xc08>
 100a1b8:	05400404 	movi	r21,16
 100a1bc:	af03a90e 	bge	r21,fp,100b064 <___vfiprintf_internal_r+0x1408>
 100a1c0:	01404074 	movhi	r5,257
 100a1c4:	2948c404 	addi	r5,r5,8976
 100a1c8:	d9402315 	stw	r5,140(sp)
 100a1cc:	01c001c4 	movi	r7,7
 100a1d0:	00000506 	br	100a1e8 <___vfiprintf_internal_r+0x58c>
 100a1d4:	21800084 	addi	r6,r4,2
 100a1d8:	42000204 	addi	r8,r8,8
 100a1dc:	1809883a 	mov	r4,r3
 100a1e0:	e73ffc04 	addi	fp,fp,-16
 100a1e4:	af000d0e 	bge	r21,fp,100a21c <___vfiprintf_internal_r+0x5c0>
 100a1e8:	10800404 	addi	r2,r2,16
 100a1ec:	20c00044 	addi	r3,r4,1
 100a1f0:	44800015 	stw	r18,0(r8)
 100a1f4:	45400115 	stw	r21,4(r8)
 100a1f8:	d8801c15 	stw	r2,112(sp)
 100a1fc:	d8c01b15 	stw	r3,108(sp)
 100a200:	38fff40e 	bge	r7,r3,100a1d4 <__alt_data_end+0xff80a1d4>
 100a204:	10022b1e 	bne	r2,zero,100aab4 <___vfiprintf_internal_r+0xe58>
 100a208:	e73ffc04 	addi	fp,fp,-16
 100a20c:	01800044 	movi	r6,1
 100a210:	0009883a 	mov	r4,zero
 100a214:	d811883a 	mov	r8,sp
 100a218:	af3ff316 	blt	r21,fp,100a1e8 <__alt_data_end+0xff80a1e8>
 100a21c:	d8c02317 	ldw	r3,140(sp)
 100a220:	1705883a 	add	r2,r2,fp
 100a224:	47000115 	stw	fp,4(r8)
 100a228:	40c00015 	stw	r3,0(r8)
 100a22c:	d8801c15 	stw	r2,112(sp)
 100a230:	d9801b15 	stw	r6,108(sp)
 100a234:	00c001c4 	movi	r3,7
 100a238:	19829416 	blt	r3,r6,100ac8c <___vfiprintf_internal_r+0x1030>
 100a23c:	8521c83a 	sub	r16,r16,r20
 100a240:	42000204 	addi	r8,r8,8
 100a244:	31400044 	addi	r5,r6,1
 100a248:	3009883a 	mov	r4,r6
 100a24c:	04018716 	blt	zero,r16,100a86c <___vfiprintf_internal_r+0xc10>
 100a250:	a085883a 	add	r2,r20,r2
 100a254:	45c00015 	stw	r23,0(r8)
 100a258:	45000115 	stw	r20,4(r8)
 100a25c:	d8801c15 	stw	r2,112(sp)
 100a260:	d9401b15 	stw	r5,108(sp)
 100a264:	00c001c4 	movi	r3,7
 100a268:	1941c20e 	bge	r3,r5,100a974 <___vfiprintf_internal_r+0xd18>
 100a26c:	1002531e 	bne	r2,zero,100abbc <___vfiprintf_internal_r+0xf60>
 100a270:	d8001b15 	stw	zero,108(sp)
 100a274:	8c40010c 	andi	r17,r17,4
 100a278:	88023226 	beq	r17,zero,100ab44 <___vfiprintf_internal_r+0xee8>
 100a27c:	d9002517 	ldw	r4,148(sp)
 100a280:	24e3c83a 	sub	r17,r4,r19
 100a284:	04432916 	blt	zero,r17,100af2c <___vfiprintf_internal_r+0x12d0>
 100a288:	d8802517 	ldw	r2,148(sp)
 100a28c:	14c0010e 	bge	r2,r19,100a294 <___vfiprintf_internal_r+0x638>
 100a290:	9805883a 	mov	r2,r19
 100a294:	d8c02417 	ldw	r3,144(sp)
 100a298:	1887883a 	add	r3,r3,r2
 100a29c:	d8c02415 	stw	r3,144(sp)
 100a2a0:	d8001b15 	stw	zero,108(sp)
 100a2a4:	d811883a 	mov	r8,sp
 100a2a8:	003ea006 	br	1009d2c <__alt_data_end+0xff809d2c>
 100a2ac:	8c400814 	ori	r17,r17,32
 100a2b0:	b0c00007 	ldb	r3,0(r22)
 100a2b4:	003ec606 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a2b8:	b0c00007 	ldb	r3,0(r22)
 100a2bc:	00801b04 	movi	r2,108
 100a2c0:	18832026 	beq	r3,r2,100af44 <___vfiprintf_internal_r+0x12e8>
 100a2c4:	8c400414 	ori	r17,r17,16
 100a2c8:	003ec106 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a2cc:	9cc03fcc 	andi	r19,r19,255
 100a2d0:	b811883a 	mov	r8,r23
 100a2d4:	9803981e 	bne	r19,zero,100b138 <___vfiprintf_internal_r+0x14dc>
 100a2d8:	8880080c 	andi	r2,r17,32
 100a2dc:	1002be26 	beq	r2,zero,100add8 <___vfiprintf_internal_r+0x117c>
 100a2e0:	d9002217 	ldw	r4,136(sp)
 100a2e4:	d9402417 	ldw	r5,144(sp)
 100a2e8:	20800017 	ldw	r2,0(r4)
 100a2ec:	2807d7fa 	srai	r3,r5,31
 100a2f0:	21000104 	addi	r4,r4,4
 100a2f4:	d9002215 	stw	r4,136(sp)
 100a2f8:	11400015 	stw	r5,0(r2)
 100a2fc:	10c00115 	stw	r3,4(r2)
 100a300:	003e8a06 	br	1009d2c <__alt_data_end+0xff809d2c>
 100a304:	9cc03fcc 	andi	r19,r19,255
 100a308:	b811883a 	mov	r8,r23
 100a30c:	9803871e 	bne	r19,zero,100b12c <___vfiprintf_internal_r+0x14d0>
 100a310:	8880080c 	andi	r2,r17,32
 100a314:	10009a26 	beq	r2,zero,100a580 <___vfiprintf_internal_r+0x924>
 100a318:	d9002217 	ldw	r4,136(sp)
 100a31c:	d8001d85 	stb	zero,118(sp)
 100a320:	20800204 	addi	r2,r4,8
 100a324:	24c00017 	ldw	r19,0(r4)
 100a328:	25000117 	ldw	r20,4(r4)
 100a32c:	8002a416 	blt	r16,zero,100adc0 <___vfiprintf_internal_r+0x1164>
 100a330:	013fdfc4 	movi	r4,-129
 100a334:	9d06b03a 	or	r3,r19,r20
 100a338:	d8802215 	stw	r2,136(sp)
 100a33c:	8922703a 	and	r17,r17,r4
 100a340:	18009b26 	beq	r3,zero,100a5b0 <___vfiprintf_internal_r+0x954>
 100a344:	002b883a 	mov	r21,zero
 100a348:	ddc01a04 	addi	r23,sp,104
 100a34c:	9806d0fa 	srli	r3,r19,3
 100a350:	a008977a 	slli	r4,r20,29
 100a354:	a028d0fa 	srli	r20,r20,3
 100a358:	9cc001cc 	andi	r19,r19,7
 100a35c:	98800c04 	addi	r2,r19,48
 100a360:	bdffffc4 	addi	r23,r23,-1
 100a364:	20e6b03a 	or	r19,r4,r3
 100a368:	b8800005 	stb	r2,0(r23)
 100a36c:	9d06b03a 	or	r3,r19,r20
 100a370:	183ff61e 	bne	r3,zero,100a34c <__alt_data_end+0xff80a34c>
 100a374:	88c0004c 	andi	r3,r17,1
 100a378:	18021f1e 	bne	r3,zero,100abf8 <___vfiprintf_internal_r+0xf9c>
 100a37c:	d9401e17 	ldw	r5,120(sp)
 100a380:	2de9c83a 	sub	r20,r5,r23
 100a384:	003f3806 	br	100a068 <__alt_data_end+0xff80a068>
 100a388:	9cc03fcc 	andi	r19,r19,255
 100a38c:	b811883a 	mov	r8,r23
 100a390:	98034f1e 	bne	r19,zero,100b0d0 <___vfiprintf_internal_r+0x1474>
 100a394:	00804074 	movhi	r2,257
 100a398:	10886304 	addi	r2,r2,8588
 100a39c:	d8802615 	stw	r2,152(sp)
 100a3a0:	8880080c 	andi	r2,r17,32
 100a3a4:	1000ac26 	beq	r2,zero,100a658 <___vfiprintf_internal_r+0x9fc>
 100a3a8:	d9002217 	ldw	r4,136(sp)
 100a3ac:	24c00017 	ldw	r19,0(r4)
 100a3b0:	25000117 	ldw	r20,4(r4)
 100a3b4:	21000204 	addi	r4,r4,8
 100a3b8:	d9002215 	stw	r4,136(sp)
 100a3bc:	8880004c 	andi	r2,r17,1
 100a3c0:	1001e726 	beq	r2,zero,100ab60 <___vfiprintf_internal_r+0xf04>
 100a3c4:	9d04b03a 	or	r2,r19,r20
 100a3c8:	10025c1e 	bne	r2,zero,100ad3c <___vfiprintf_internal_r+0x10e0>
 100a3cc:	d8001d85 	stb	zero,118(sp)
 100a3d0:	80024416 	blt	r16,zero,100ace4 <___vfiprintf_internal_r+0x1088>
 100a3d4:	00bfdfc4 	movi	r2,-129
 100a3d8:	88a2703a 	and	r17,r17,r2
 100a3dc:	003f1d06 	br	100a054 <__alt_data_end+0xff80a054>
 100a3e0:	d8c02217 	ldw	r3,136(sp)
 100a3e4:	04c00044 	movi	r19,1
 100a3e8:	b811883a 	mov	r8,r23
 100a3ec:	18800017 	ldw	r2,0(r3)
 100a3f0:	18c00104 	addi	r3,r3,4
 100a3f4:	d8001d85 	stb	zero,118(sp)
 100a3f8:	d8801005 	stb	r2,64(sp)
 100a3fc:	d8c02215 	stw	r3,136(sp)
 100a400:	9829883a 	mov	r20,r19
 100a404:	ddc01004 	addi	r23,sp,64
 100a408:	0021883a 	mov	r16,zero
 100a40c:	003f1e06 	br	100a088 <__alt_data_end+0xff80a088>
 100a410:	9cc03fcc 	andi	r19,r19,255
 100a414:	b811883a 	mov	r8,r23
 100a418:	9803331e 	bne	r19,zero,100b0e8 <___vfiprintf_internal_r+0x148c>
 100a41c:	8880080c 	andi	r2,r17,32
 100a420:	10004826 	beq	r2,zero,100a544 <___vfiprintf_internal_r+0x8e8>
 100a424:	d9002217 	ldw	r4,136(sp)
 100a428:	20800117 	ldw	r2,4(r4)
 100a42c:	24c00017 	ldw	r19,0(r4)
 100a430:	21000204 	addi	r4,r4,8
 100a434:	d9002215 	stw	r4,136(sp)
 100a438:	1029883a 	mov	r20,r2
 100a43c:	10024c16 	blt	r2,zero,100ad70 <___vfiprintf_internal_r+0x1114>
 100a440:	dd401d83 	ldbu	r21,118(sp)
 100a444:	80007116 	blt	r16,zero,100a60c <___vfiprintf_internal_r+0x9b0>
 100a448:	00ffdfc4 	movi	r3,-129
 100a44c:	9d04b03a 	or	r2,r19,r20
 100a450:	88e2703a 	and	r17,r17,r3
 100a454:	1000d126 	beq	r2,zero,100a79c <___vfiprintf_internal_r+0xb40>
 100a458:	a0023526 	beq	r20,zero,100ad30 <___vfiprintf_internal_r+0x10d4>
 100a45c:	ddc01a04 	addi	r23,sp,104
 100a460:	4039883a 	mov	fp,r8
 100a464:	9809883a 	mov	r4,r19
 100a468:	a00b883a 	mov	r5,r20
 100a46c:	01800284 	movi	r6,10
 100a470:	000f883a 	mov	r7,zero
 100a474:	100c1880 	call	100c188 <__umoddi3>
 100a478:	10800c04 	addi	r2,r2,48
 100a47c:	bdffffc4 	addi	r23,r23,-1
 100a480:	9809883a 	mov	r4,r19
 100a484:	a00b883a 	mov	r5,r20
 100a488:	b8800005 	stb	r2,0(r23)
 100a48c:	01800284 	movi	r6,10
 100a490:	000f883a 	mov	r7,zero
 100a494:	100bb8c0 	call	100bb8c <__udivdi3>
 100a498:	1027883a 	mov	r19,r2
 100a49c:	10c4b03a 	or	r2,r2,r3
 100a4a0:	1829883a 	mov	r20,r3
 100a4a4:	103fef1e 	bne	r2,zero,100a464 <__alt_data_end+0xff80a464>
 100a4a8:	d9001e17 	ldw	r4,120(sp)
 100a4ac:	e011883a 	mov	r8,fp
 100a4b0:	25e9c83a 	sub	r20,r4,r23
 100a4b4:	003eec06 	br	100a068 <__alt_data_end+0xff80a068>
 100a4b8:	d8802307 	ldb	r2,140(sp)
 100a4bc:	1002361e 	bne	r2,zero,100ad98 <___vfiprintf_internal_r+0x113c>
 100a4c0:	00c00804 	movi	r3,32
 100a4c4:	d8c02305 	stb	r3,140(sp)
 100a4c8:	04c00044 	movi	r19,1
 100a4cc:	b0c00007 	ldb	r3,0(r22)
 100a4d0:	003e3f06 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a4d4:	8c400054 	ori	r17,r17,1
 100a4d8:	b0c00007 	ldb	r3,0(r22)
 100a4dc:	003e3c06 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a4e0:	8c402014 	ori	r17,r17,128
 100a4e4:	b0c00007 	ldb	r3,0(r22)
 100a4e8:	003e3906 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a4ec:	dc002715 	stw	r16,156(sp)
 100a4f0:	d8002515 	stw	zero,148(sp)
 100a4f4:	1f3ff404 	addi	fp,r3,-48
 100a4f8:	0009883a 	mov	r4,zero
 100a4fc:	b021883a 	mov	r16,r22
 100a500:	01400284 	movi	r5,10
 100a504:	100c9000 	call	100c900 <__mulsi3>
 100a508:	80c00007 	ldb	r3,0(r16)
 100a50c:	e089883a 	add	r4,fp,r2
 100a510:	b5800044 	addi	r22,r22,1
 100a514:	1f3ff404 	addi	fp,r3,-48
 100a518:	b021883a 	mov	r16,r22
 100a51c:	af3ff82e 	bgeu	r21,fp,100a500 <__alt_data_end+0xff80a500>
 100a520:	d9002515 	stw	r4,148(sp)
 100a524:	dc002717 	ldw	r16,156(sp)
 100a528:	003e2a06 	br	1009dd4 <__alt_data_end+0xff809dd4>
 100a52c:	9cc03fcc 	andi	r19,r19,255
 100a530:	b811883a 	mov	r8,r23
 100a534:	9802e91e 	bne	r19,zero,100b0dc <___vfiprintf_internal_r+0x1480>
 100a538:	8c400414 	ori	r17,r17,16
 100a53c:	8880080c 	andi	r2,r17,32
 100a540:	103fb81e 	bne	r2,zero,100a424 <__alt_data_end+0xff80a424>
 100a544:	8880040c 	andi	r2,r17,16
 100a548:	10022e26 	beq	r2,zero,100ae04 <___vfiprintf_internal_r+0x11a8>
 100a54c:	d9402217 	ldw	r5,136(sp)
 100a550:	2cc00017 	ldw	r19,0(r5)
 100a554:	29400104 	addi	r5,r5,4
 100a558:	d9402215 	stw	r5,136(sp)
 100a55c:	9829d7fa 	srai	r20,r19,31
 100a560:	a005883a 	mov	r2,r20
 100a564:	003fb506 	br	100a43c <__alt_data_end+0xff80a43c>
 100a568:	9cc03fcc 	andi	r19,r19,255
 100a56c:	b811883a 	mov	r8,r23
 100a570:	9802fa1e 	bne	r19,zero,100b15c <___vfiprintf_internal_r+0x1500>
 100a574:	8c400414 	ori	r17,r17,16
 100a578:	8880080c 	andi	r2,r17,32
 100a57c:	103f661e 	bne	r2,zero,100a318 <__alt_data_end+0xff80a318>
 100a580:	8880040c 	andi	r2,r17,16
 100a584:	10020626 	beq	r2,zero,100ada0 <___vfiprintf_internal_r+0x1144>
 100a588:	d9402217 	ldw	r5,136(sp)
 100a58c:	d8001d85 	stb	zero,118(sp)
 100a590:	0029883a 	mov	r20,zero
 100a594:	28800104 	addi	r2,r5,4
 100a598:	2cc00017 	ldw	r19,0(r5)
 100a59c:	80020816 	blt	r16,zero,100adc0 <___vfiprintf_internal_r+0x1164>
 100a5a0:	00ffdfc4 	movi	r3,-129
 100a5a4:	d8802215 	stw	r2,136(sp)
 100a5a8:	88e2703a 	and	r17,r17,r3
 100a5ac:	983f651e 	bne	r19,zero,100a344 <__alt_data_end+0xff80a344>
 100a5b0:	002b883a 	mov	r21,zero
 100a5b4:	8002cf26 	beq	r16,zero,100b0f4 <___vfiprintf_internal_r+0x1498>
 100a5b8:	0027883a 	mov	r19,zero
 100a5bc:	0029883a 	mov	r20,zero
 100a5c0:	003f6106 	br	100a348 <__alt_data_end+0xff80a348>
 100a5c4:	9cc03fcc 	andi	r19,r19,255
 100a5c8:	b811883a 	mov	r8,r23
 100a5cc:	9802e01e 	bne	r19,zero,100b150 <___vfiprintf_internal_r+0x14f4>
 100a5d0:	8c400414 	ori	r17,r17,16
 100a5d4:	8880080c 	andi	r2,r17,32
 100a5d8:	1000641e 	bne	r2,zero,100a76c <___vfiprintf_internal_r+0xb10>
 100a5dc:	8880040c 	andi	r2,r17,16
 100a5e0:	1001c81e 	bne	r2,zero,100ad04 <___vfiprintf_internal_r+0x10a8>
 100a5e4:	8880100c 	andi	r2,r17,64
 100a5e8:	d8001d85 	stb	zero,118(sp)
 100a5ec:	1002281e 	bne	r2,zero,100ae90 <___vfiprintf_internal_r+0x1234>
 100a5f0:	d9002217 	ldw	r4,136(sp)
 100a5f4:	0029883a 	mov	r20,zero
 100a5f8:	20800104 	addi	r2,r4,4
 100a5fc:	24c00017 	ldw	r19,0(r4)
 100a600:	8001c60e 	bge	r16,zero,100ad1c <___vfiprintf_internal_r+0x10c0>
 100a604:	d8802215 	stw	r2,136(sp)
 100a608:	002b883a 	mov	r21,zero
 100a60c:	9d04b03a 	or	r2,r19,r20
 100a610:	103f911e 	bne	r2,zero,100a458 <__alt_data_end+0xff80a458>
 100a614:	00800044 	movi	r2,1
 100a618:	10803fcc 	andi	r2,r2,255
 100a61c:	00c00044 	movi	r3,1
 100a620:	10c05f26 	beq	r2,r3,100a7a0 <___vfiprintf_internal_r+0xb44>
 100a624:	00c00084 	movi	r3,2
 100a628:	10ffe31e 	bne	r2,r3,100a5b8 <__alt_data_end+0xff80a5b8>
 100a62c:	0027883a 	mov	r19,zero
 100a630:	0029883a 	mov	r20,zero
 100a634:	00015106 	br	100ab7c <___vfiprintf_internal_r+0xf20>
 100a638:	9cc03fcc 	andi	r19,r19,255
 100a63c:	b811883a 	mov	r8,r23
 100a640:	9802c01e 	bne	r19,zero,100b144 <___vfiprintf_internal_r+0x14e8>
 100a644:	01404074 	movhi	r5,257
 100a648:	29485e04 	addi	r5,r5,8568
 100a64c:	d9402615 	stw	r5,152(sp)
 100a650:	8880080c 	andi	r2,r17,32
 100a654:	103f541e 	bne	r2,zero,100a3a8 <__alt_data_end+0xff80a3a8>
 100a658:	8880040c 	andi	r2,r17,16
 100a65c:	1001f226 	beq	r2,zero,100ae28 <___vfiprintf_internal_r+0x11cc>
 100a660:	d9402217 	ldw	r5,136(sp)
 100a664:	0029883a 	mov	r20,zero
 100a668:	2cc00017 	ldw	r19,0(r5)
 100a66c:	29400104 	addi	r5,r5,4
 100a670:	d9402215 	stw	r5,136(sp)
 100a674:	003f5106 	br	100a3bc <__alt_data_end+0xff80a3bc>
 100a678:	d8c02217 	ldw	r3,136(sp)
 100a67c:	b811883a 	mov	r8,r23
 100a680:	d8001d85 	stb	zero,118(sp)
 100a684:	1dc00017 	ldw	r23,0(r3)
 100a688:	1f000104 	addi	fp,r3,4
 100a68c:	b8025926 	beq	r23,zero,100aff4 <___vfiprintf_internal_r+0x1398>
 100a690:	80023316 	blt	r16,zero,100af60 <___vfiprintf_internal_r+0x1304>
 100a694:	800d883a 	mov	r6,r16
 100a698:	000b883a 	mov	r5,zero
 100a69c:	b809883a 	mov	r4,r23
 100a6a0:	da002a15 	stw	r8,168(sp)
 100a6a4:	1007d9c0 	call	1007d9c <memchr>
 100a6a8:	da002a17 	ldw	r8,168(sp)
 100a6ac:	10026826 	beq	r2,zero,100b050 <___vfiprintf_internal_r+0x13f4>
 100a6b0:	15e9c83a 	sub	r20,r2,r23
 100a6b4:	dd401d83 	ldbu	r21,118(sp)
 100a6b8:	df002215 	stw	fp,136(sp)
 100a6bc:	0021883a 	mov	r16,zero
 100a6c0:	003e6906 	br	100a068 <__alt_data_end+0xff80a068>
 100a6c4:	9cc03fcc 	andi	r19,r19,255
 100a6c8:	b811883a 	mov	r8,r23
 100a6cc:	983fc126 	beq	r19,zero,100a5d4 <__alt_data_end+0xff80a5d4>
 100a6d0:	d8c02303 	ldbu	r3,140(sp)
 100a6d4:	d8c01d85 	stb	r3,118(sp)
 100a6d8:	003fbe06 	br	100a5d4 <__alt_data_end+0xff80a5d4>
 100a6dc:	d9002217 	ldw	r4,136(sp)
 100a6e0:	d9402217 	ldw	r5,136(sp)
 100a6e4:	21000017 	ldw	r4,0(r4)
 100a6e8:	28800104 	addi	r2,r5,4
 100a6ec:	d9002515 	stw	r4,148(sp)
 100a6f0:	203e3d16 	blt	r4,zero,1009fe8 <__alt_data_end+0xff809fe8>
 100a6f4:	d8802215 	stw	r2,136(sp)
 100a6f8:	b0c00007 	ldb	r3,0(r22)
 100a6fc:	003db406 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a700:	00c00ac4 	movi	r3,43
 100a704:	d8c02305 	stb	r3,140(sp)
 100a708:	04c00044 	movi	r19,1
 100a70c:	b0c00007 	ldb	r3,0(r22)
 100a710:	003daf06 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a714:	b0c00007 	ldb	r3,0(r22)
 100a718:	01000a84 	movi	r4,42
 100a71c:	b4000044 	addi	r16,r22,1
 100a720:	19025e26 	beq	r3,r4,100b09c <___vfiprintf_internal_r+0x1440>
 100a724:	1f3ff404 	addi	fp,r3,-48
 100a728:	0009883a 	mov	r4,zero
 100a72c:	af025236 	bltu	r21,fp,100b078 <___vfiprintf_internal_r+0x141c>
 100a730:	01400284 	movi	r5,10
 100a734:	100c9000 	call	100c900 <__mulsi3>
 100a738:	80c00007 	ldb	r3,0(r16)
 100a73c:	1709883a 	add	r4,r2,fp
 100a740:	85800044 	addi	r22,r16,1
 100a744:	1f3ff404 	addi	fp,r3,-48
 100a748:	b021883a 	mov	r16,r22
 100a74c:	af3ff82e 	bgeu	r21,fp,100a730 <__alt_data_end+0xff80a730>
 100a750:	2021883a 	mov	r16,r4
 100a754:	203d9f0e 	bge	r4,zero,1009dd4 <__alt_data_end+0xff809dd4>
 100a758:	043fffc4 	movi	r16,-1
 100a75c:	003d9d06 	br	1009dd4 <__alt_data_end+0xff809dd4>
 100a760:	8c401014 	ori	r17,r17,64
 100a764:	b0c00007 	ldb	r3,0(r22)
 100a768:	003d9906 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100a76c:	d9002217 	ldw	r4,136(sp)
 100a770:	d8001d85 	stb	zero,118(sp)
 100a774:	20c00204 	addi	r3,r4,8
 100a778:	24c00017 	ldw	r19,0(r4)
 100a77c:	25000117 	ldw	r20,4(r4)
 100a780:	8001e716 	blt	r16,zero,100af20 <___vfiprintf_internal_r+0x12c4>
 100a784:	013fdfc4 	movi	r4,-129
 100a788:	9d04b03a 	or	r2,r19,r20
 100a78c:	d8c02215 	stw	r3,136(sp)
 100a790:	8922703a 	and	r17,r17,r4
 100a794:	002b883a 	mov	r21,zero
 100a798:	103f2f1e 	bne	r2,zero,100a458 <__alt_data_end+0xff80a458>
 100a79c:	803e2f26 	beq	r16,zero,100a05c <__alt_data_end+0xff80a05c>
 100a7a0:	0027883a 	mov	r19,zero
 100a7a4:	9cc00c04 	addi	r19,r19,48
 100a7a8:	dcc019c5 	stb	r19,103(sp)
 100a7ac:	dd002817 	ldw	r20,160(sp)
 100a7b0:	ddc019c4 	addi	r23,sp,103
 100a7b4:	003e2c06 	br	100a068 <__alt_data_end+0xff80a068>
 100a7b8:	9cc03fcc 	andi	r19,r19,255
 100a7bc:	b811883a 	mov	r8,r23
 100a7c0:	9802571e 	bne	r19,zero,100b120 <___vfiprintf_internal_r+0x14c4>
 100a7c4:	18005726 	beq	r3,zero,100a924 <___vfiprintf_internal_r+0xcc8>
 100a7c8:	04c00044 	movi	r19,1
 100a7cc:	d8c01005 	stb	r3,64(sp)
 100a7d0:	d8001d85 	stb	zero,118(sp)
 100a7d4:	9829883a 	mov	r20,r19
 100a7d8:	ddc01004 	addi	r23,sp,64
 100a7dc:	003f0a06 	br	100a408 <__alt_data_end+0xff80a408>
 100a7e0:	d9402017 	ldw	r5,128(sp)
 100a7e4:	d9002117 	ldw	r4,132(sp)
 100a7e8:	d9801a04 	addi	r6,sp,104
 100a7ec:	da802a15 	stw	r10,168(sp)
 100a7f0:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100a7f4:	da802a17 	ldw	r10,168(sp)
 100a7f8:	1000501e 	bne	r2,zero,100a93c <___vfiprintf_internal_r+0xce0>
 100a7fc:	d9801b17 	ldw	r6,108(sp)
 100a800:	d8801c17 	ldw	r2,112(sp)
 100a804:	d811883a 	mov	r8,sp
 100a808:	31000044 	addi	r4,r6,1
 100a80c:	003e3606 	br	100a0e8 <__alt_data_end+0xff80a0e8>
 100a810:	d9001b17 	ldw	r4,108(sp)
 100a814:	d8801c17 	ldw	r2,112(sp)
 100a818:	21400044 	addi	r5,r4,1
 100a81c:	d9801d87 	ldb	r6,118(sp)
 100a820:	303e5226 	beq	r6,zero,100a16c <__alt_data_end+0xff80a16c>
 100a824:	01800044 	movi	r6,1
 100a828:	d9001d84 	addi	r4,sp,118
 100a82c:	1185883a 	add	r2,r2,r6
 100a830:	41000015 	stw	r4,0(r8)
 100a834:	41800115 	stw	r6,4(r8)
 100a838:	d8801c15 	stw	r2,112(sp)
 100a83c:	d9401b15 	stw	r5,108(sp)
 100a840:	010001c4 	movi	r4,7
 100a844:	2140b00e 	bge	r4,r5,100ab08 <___vfiprintf_internal_r+0xeac>
 100a848:	1000f61e 	bne	r2,zero,100ac24 <___vfiprintf_internal_r+0xfc8>
 100a84c:	3800b31e 	bne	r7,zero,100ab1c <___vfiprintf_internal_r+0xec0>
 100a850:	0009883a 	mov	r4,zero
 100a854:	300b883a 	mov	r5,r6
 100a858:	d811883a 	mov	r8,sp
 100a85c:	01802004 	movi	r6,128
 100a860:	19be5226 	beq	r3,r6,100a1ac <__alt_data_end+0xff80a1ac>
 100a864:	8521c83a 	sub	r16,r16,r20
 100a868:	043e790e 	bge	zero,r16,100a250 <__alt_data_end+0xff80a250>
 100a86c:	05400404 	movi	r21,16
 100a870:	ac01b00e 	bge	r21,r16,100af34 <___vfiprintf_internal_r+0x12d8>
 100a874:	01404074 	movhi	r5,257
 100a878:	2948c404 	addi	r5,r5,8976
 100a87c:	d9402315 	stw	r5,140(sp)
 100a880:	070001c4 	movi	fp,7
 100a884:	00000506 	br	100a89c <___vfiprintf_internal_r+0xc40>
 100a888:	21400084 	addi	r5,r4,2
 100a88c:	42000204 	addi	r8,r8,8
 100a890:	1809883a 	mov	r4,r3
 100a894:	843ffc04 	addi	r16,r16,-16
 100a898:	ac000d0e 	bge	r21,r16,100a8d0 <___vfiprintf_internal_r+0xc74>
 100a89c:	10800404 	addi	r2,r2,16
 100a8a0:	20c00044 	addi	r3,r4,1
 100a8a4:	44800015 	stw	r18,0(r8)
 100a8a8:	45400115 	stw	r21,4(r8)
 100a8ac:	d8801c15 	stw	r2,112(sp)
 100a8b0:	d8c01b15 	stw	r3,108(sp)
 100a8b4:	e0fff40e 	bge	fp,r3,100a888 <__alt_data_end+0xff80a888>
 100a8b8:	1000101e 	bne	r2,zero,100a8fc <___vfiprintf_internal_r+0xca0>
 100a8bc:	843ffc04 	addi	r16,r16,-16
 100a8c0:	01400044 	movi	r5,1
 100a8c4:	0009883a 	mov	r4,zero
 100a8c8:	d811883a 	mov	r8,sp
 100a8cc:	ac3ff316 	blt	r21,r16,100a89c <__alt_data_end+0xff80a89c>
 100a8d0:	d8c02317 	ldw	r3,140(sp)
 100a8d4:	1405883a 	add	r2,r2,r16
 100a8d8:	44000115 	stw	r16,4(r8)
 100a8dc:	40c00015 	stw	r3,0(r8)
 100a8e0:	d8801c15 	stw	r2,112(sp)
 100a8e4:	d9401b15 	stw	r5,108(sp)
 100a8e8:	00c001c4 	movi	r3,7
 100a8ec:	19401916 	blt	r3,r5,100a954 <___vfiprintf_internal_r+0xcf8>
 100a8f0:	42000204 	addi	r8,r8,8
 100a8f4:	29400044 	addi	r5,r5,1
 100a8f8:	003e5506 	br	100a250 <__alt_data_end+0xff80a250>
 100a8fc:	d9402017 	ldw	r5,128(sp)
 100a900:	d9002117 	ldw	r4,132(sp)
 100a904:	d9801a04 	addi	r6,sp,104
 100a908:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100a90c:	10000b1e 	bne	r2,zero,100a93c <___vfiprintf_internal_r+0xce0>
 100a910:	d9001b17 	ldw	r4,108(sp)
 100a914:	d8801c17 	ldw	r2,112(sp)
 100a918:	d811883a 	mov	r8,sp
 100a91c:	21400044 	addi	r5,r4,1
 100a920:	003fdc06 	br	100a894 <__alt_data_end+0xff80a894>
 100a924:	d8801c17 	ldw	r2,112(sp)
 100a928:	10000426 	beq	r2,zero,100a93c <___vfiprintf_internal_r+0xce0>
 100a92c:	d9402017 	ldw	r5,128(sp)
 100a930:	d9002117 	ldw	r4,132(sp)
 100a934:	d9801a04 	addi	r6,sp,104
 100a938:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100a93c:	d9402017 	ldw	r5,128(sp)
 100a940:	2880030b 	ldhu	r2,12(r5)
 100a944:	1080100c 	andi	r2,r2,64
 100a948:	10014d1e 	bne	r2,zero,100ae80 <___vfiprintf_internal_r+0x1224>
 100a94c:	d8802417 	ldw	r2,144(sp)
 100a950:	003d9706 	br	1009fb0 <__alt_data_end+0xff809fb0>
 100a954:	1000d21e 	bne	r2,zero,100aca0 <___vfiprintf_internal_r+0x1044>
 100a958:	00c00044 	movi	r3,1
 100a95c:	a005883a 	mov	r2,r20
 100a960:	ddc00015 	stw	r23,0(sp)
 100a964:	dd000115 	stw	r20,4(sp)
 100a968:	dd001c15 	stw	r20,112(sp)
 100a96c:	d8c01b15 	stw	r3,108(sp)
 100a970:	d811883a 	mov	r8,sp
 100a974:	42000204 	addi	r8,r8,8
 100a978:	8c40010c 	andi	r17,r17,4
 100a97c:	88004026 	beq	r17,zero,100aa80 <___vfiprintf_internal_r+0xe24>
 100a980:	d9002517 	ldw	r4,148(sp)
 100a984:	24e3c83a 	sub	r17,r4,r19
 100a988:	04403d0e 	bge	zero,r17,100aa80 <___vfiprintf_internal_r+0xe24>
 100a98c:	04000404 	movi	r16,16
 100a990:	8441a90e 	bge	r16,r17,100b038 <___vfiprintf_internal_r+0x13dc>
 100a994:	00c04074 	movhi	r3,257
 100a998:	18c8c804 	addi	r3,r3,8992
 100a99c:	d9001b17 	ldw	r4,108(sp)
 100a9a0:	d8c02315 	stw	r3,140(sp)
 100a9a4:	050001c4 	movi	r20,7
 100a9a8:	dd402117 	ldw	r21,132(sp)
 100a9ac:	ddc02017 	ldw	r23,128(sp)
 100a9b0:	00000506 	br	100a9c8 <___vfiprintf_internal_r+0xd6c>
 100a9b4:	21400084 	addi	r5,r4,2
 100a9b8:	42000204 	addi	r8,r8,8
 100a9bc:	1809883a 	mov	r4,r3
 100a9c0:	8c7ffc04 	addi	r17,r17,-16
 100a9c4:	84400f0e 	bge	r16,r17,100aa04 <___vfiprintf_internal_r+0xda8>
 100a9c8:	01404074 	movhi	r5,257
 100a9cc:	10800404 	addi	r2,r2,16
 100a9d0:	20c00044 	addi	r3,r4,1
 100a9d4:	2948c804 	addi	r5,r5,8992
 100a9d8:	41400015 	stw	r5,0(r8)
 100a9dc:	44000115 	stw	r16,4(r8)
 100a9e0:	d8801c15 	stw	r2,112(sp)
 100a9e4:	d8c01b15 	stw	r3,108(sp)
 100a9e8:	a0fff20e 	bge	r20,r3,100a9b4 <__alt_data_end+0xff80a9b4>
 100a9ec:	1000141e 	bne	r2,zero,100aa40 <___vfiprintf_internal_r+0xde4>
 100a9f0:	8c7ffc04 	addi	r17,r17,-16
 100a9f4:	01400044 	movi	r5,1
 100a9f8:	0009883a 	mov	r4,zero
 100a9fc:	d811883a 	mov	r8,sp
 100aa00:	847ff116 	blt	r16,r17,100a9c8 <__alt_data_end+0xff80a9c8>
 100aa04:	d8c02317 	ldw	r3,140(sp)
 100aa08:	1445883a 	add	r2,r2,r17
 100aa0c:	44400115 	stw	r17,4(r8)
 100aa10:	40c00015 	stw	r3,0(r8)
 100aa14:	d8801c15 	stw	r2,112(sp)
 100aa18:	d9401b15 	stw	r5,108(sp)
 100aa1c:	00c001c4 	movi	r3,7
 100aa20:	1940170e 	bge	r3,r5,100aa80 <___vfiprintf_internal_r+0xe24>
 100aa24:	1000101e 	bne	r2,zero,100aa68 <___vfiprintf_internal_r+0xe0c>
 100aa28:	d8802517 	ldw	r2,148(sp)
 100aa2c:	14c11616 	blt	r2,r19,100ae88 <___vfiprintf_internal_r+0x122c>
 100aa30:	d9002417 	ldw	r4,144(sp)
 100aa34:	2089883a 	add	r4,r4,r2
 100aa38:	d9002415 	stw	r4,144(sp)
 100aa3c:	003e1806 	br	100a2a0 <__alt_data_end+0xff80a2a0>
 100aa40:	d9801a04 	addi	r6,sp,104
 100aa44:	b80b883a 	mov	r5,r23
 100aa48:	a809883a 	mov	r4,r21
 100aa4c:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100aa50:	103fba1e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100aa54:	d9001b17 	ldw	r4,108(sp)
 100aa58:	d8801c17 	ldw	r2,112(sp)
 100aa5c:	d811883a 	mov	r8,sp
 100aa60:	21400044 	addi	r5,r4,1
 100aa64:	003fd606 	br	100a9c0 <__alt_data_end+0xff80a9c0>
 100aa68:	d9402017 	ldw	r5,128(sp)
 100aa6c:	d9002117 	ldw	r4,132(sp)
 100aa70:	d9801a04 	addi	r6,sp,104
 100aa74:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100aa78:	103fb01e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100aa7c:	d8801c17 	ldw	r2,112(sp)
 100aa80:	d8c02517 	ldw	r3,148(sp)
 100aa84:	1cc0010e 	bge	r3,r19,100aa8c <___vfiprintf_internal_r+0xe30>
 100aa88:	9807883a 	mov	r3,r19
 100aa8c:	d9002417 	ldw	r4,144(sp)
 100aa90:	20c9883a 	add	r4,r4,r3
 100aa94:	d9002415 	stw	r4,144(sp)
 100aa98:	103e0126 	beq	r2,zero,100a2a0 <__alt_data_end+0xff80a2a0>
 100aa9c:	d9402017 	ldw	r5,128(sp)
 100aaa0:	d9002117 	ldw	r4,132(sp)
 100aaa4:	d9801a04 	addi	r6,sp,104
 100aaa8:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100aaac:	103dfc26 	beq	r2,zero,100a2a0 <__alt_data_end+0xff80a2a0>
 100aab0:	003fa206 	br	100a93c <__alt_data_end+0xff80a93c>
 100aab4:	d9402017 	ldw	r5,128(sp)
 100aab8:	d9002117 	ldw	r4,132(sp)
 100aabc:	d9801a04 	addi	r6,sp,104
 100aac0:	d9c02b15 	stw	r7,172(sp)
 100aac4:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100aac8:	d9c02b17 	ldw	r7,172(sp)
 100aacc:	103f9b1e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100aad0:	d9001b17 	ldw	r4,108(sp)
 100aad4:	d8801c17 	ldw	r2,112(sp)
 100aad8:	d811883a 	mov	r8,sp
 100aadc:	21800044 	addi	r6,r4,1
 100aae0:	003dbf06 	br	100a1e0 <__alt_data_end+0xff80a1e0>
 100aae4:	1000d81e 	bne	r2,zero,100ae48 <___vfiprintf_internal_r+0x11ec>
 100aae8:	d9001d87 	ldb	r4,118(sp)
 100aaec:	20000a26 	beq	r4,zero,100ab18 <___vfiprintf_internal_r+0xebc>
 100aaf0:	00800044 	movi	r2,1
 100aaf4:	d9001d84 	addi	r4,sp,118
 100aaf8:	100b883a 	mov	r5,r2
 100aafc:	d9000015 	stw	r4,0(sp)
 100ab00:	d8800115 	stw	r2,4(sp)
 100ab04:	d811883a 	mov	r8,sp
 100ab08:	2809883a 	mov	r4,r5
 100ab0c:	42000204 	addi	r8,r8,8
 100ab10:	29400044 	addi	r5,r5,1
 100ab14:	003d9506 	br	100a16c <__alt_data_end+0xff80a16c>
 100ab18:	3800fd26 	beq	r7,zero,100af10 <___vfiprintf_internal_r+0x12b4>
 100ab1c:	00800084 	movi	r2,2
 100ab20:	d9001d04 	addi	r4,sp,116
 100ab24:	d9000015 	stw	r4,0(sp)
 100ab28:	d8800115 	stw	r2,4(sp)
 100ab2c:	01400044 	movi	r5,1
 100ab30:	d811883a 	mov	r8,sp
 100ab34:	2809883a 	mov	r4,r5
 100ab38:	42000204 	addi	r8,r8,8
 100ab3c:	29400044 	addi	r5,r5,1
 100ab40:	003f4606 	br	100a85c <__alt_data_end+0xff80a85c>
 100ab44:	d8802517 	ldw	r2,148(sp)
 100ab48:	14c0010e 	bge	r2,r19,100ab50 <___vfiprintf_internal_r+0xef4>
 100ab4c:	9805883a 	mov	r2,r19
 100ab50:	d9402417 	ldw	r5,144(sp)
 100ab54:	288b883a 	add	r5,r5,r2
 100ab58:	d9402415 	stw	r5,144(sp)
 100ab5c:	003dd006 	br	100a2a0 <__alt_data_end+0xff80a2a0>
 100ab60:	d8001d85 	stb	zero,118(sp)
 100ab64:	80005d16 	blt	r16,zero,100acdc <___vfiprintf_internal_r+0x1080>
 100ab68:	00ffdfc4 	movi	r3,-129
 100ab6c:	9d04b03a 	or	r2,r19,r20
 100ab70:	88e2703a 	and	r17,r17,r3
 100ab74:	103d3726 	beq	r2,zero,100a054 <__alt_data_end+0xff80a054>
 100ab78:	002b883a 	mov	r21,zero
 100ab7c:	d9002617 	ldw	r4,152(sp)
 100ab80:	ddc01a04 	addi	r23,sp,104
 100ab84:	988003cc 	andi	r2,r19,15
 100ab88:	a006973a 	slli	r3,r20,28
 100ab8c:	2085883a 	add	r2,r4,r2
 100ab90:	9826d13a 	srli	r19,r19,4
 100ab94:	10800003 	ldbu	r2,0(r2)
 100ab98:	a028d13a 	srli	r20,r20,4
 100ab9c:	bdffffc4 	addi	r23,r23,-1
 100aba0:	1ce6b03a 	or	r19,r3,r19
 100aba4:	b8800005 	stb	r2,0(r23)
 100aba8:	9d04b03a 	or	r2,r19,r20
 100abac:	103ff51e 	bne	r2,zero,100ab84 <__alt_data_end+0xff80ab84>
 100abb0:	d8801e17 	ldw	r2,120(sp)
 100abb4:	15e9c83a 	sub	r20,r2,r23
 100abb8:	003d2b06 	br	100a068 <__alt_data_end+0xff80a068>
 100abbc:	d9402017 	ldw	r5,128(sp)
 100abc0:	d9002117 	ldw	r4,132(sp)
 100abc4:	d9801a04 	addi	r6,sp,104
 100abc8:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100abcc:	103f5b1e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100abd0:	d8801c17 	ldw	r2,112(sp)
 100abd4:	d811883a 	mov	r8,sp
 100abd8:	003f6706 	br	100a978 <__alt_data_end+0xff80a978>
 100abdc:	d9402017 	ldw	r5,128(sp)
 100abe0:	d9002117 	ldw	r4,132(sp)
 100abe4:	d9801a04 	addi	r6,sp,104
 100abe8:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100abec:	103f531e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100abf0:	d811883a 	mov	r8,sp
 100abf4:	003cd906 	br	1009f5c <__alt_data_end+0xff809f5c>
 100abf8:	10803fcc 	andi	r2,r2,255
 100abfc:	1080201c 	xori	r2,r2,128
 100ac00:	10bfe004 	addi	r2,r2,-128
 100ac04:	00c00c04 	movi	r3,48
 100ac08:	10ffe926 	beq	r2,r3,100abb0 <__alt_data_end+0xff80abb0>
 100ac0c:	b8ffffc5 	stb	r3,-1(r23)
 100ac10:	d8c01e17 	ldw	r3,120(sp)
 100ac14:	b8bfffc4 	addi	r2,r23,-1
 100ac18:	102f883a 	mov	r23,r2
 100ac1c:	18a9c83a 	sub	r20,r3,r2
 100ac20:	003d1106 	br	100a068 <__alt_data_end+0xff80a068>
 100ac24:	d9402017 	ldw	r5,128(sp)
 100ac28:	d9002117 	ldw	r4,132(sp)
 100ac2c:	d9801a04 	addi	r6,sp,104
 100ac30:	d8c02a15 	stw	r3,168(sp)
 100ac34:	d9c02b15 	stw	r7,172(sp)
 100ac38:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100ac3c:	d8c02a17 	ldw	r3,168(sp)
 100ac40:	d9c02b17 	ldw	r7,172(sp)
 100ac44:	103f3d1e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100ac48:	d9001b17 	ldw	r4,108(sp)
 100ac4c:	d8801c17 	ldw	r2,112(sp)
 100ac50:	d811883a 	mov	r8,sp
 100ac54:	21400044 	addi	r5,r4,1
 100ac58:	003d4406 	br	100a16c <__alt_data_end+0xff80a16c>
 100ac5c:	d9402017 	ldw	r5,128(sp)
 100ac60:	d9002117 	ldw	r4,132(sp)
 100ac64:	d9801a04 	addi	r6,sp,104
 100ac68:	d8c02a15 	stw	r3,168(sp)
 100ac6c:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100ac70:	d8c02a17 	ldw	r3,168(sp)
 100ac74:	103f311e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100ac78:	d9001b17 	ldw	r4,108(sp)
 100ac7c:	d8801c17 	ldw	r2,112(sp)
 100ac80:	d811883a 	mov	r8,sp
 100ac84:	21400044 	addi	r5,r4,1
 100ac88:	003ef406 	br	100a85c <__alt_data_end+0xff80a85c>
 100ac8c:	1000bd1e 	bne	r2,zero,100af84 <___vfiprintf_internal_r+0x1328>
 100ac90:	01400044 	movi	r5,1
 100ac94:	0009883a 	mov	r4,zero
 100ac98:	d811883a 	mov	r8,sp
 100ac9c:	003ef106 	br	100a864 <__alt_data_end+0xff80a864>
 100aca0:	d9402017 	ldw	r5,128(sp)
 100aca4:	d9002117 	ldw	r4,132(sp)
 100aca8:	d9801a04 	addi	r6,sp,104
 100acac:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100acb0:	103f221e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100acb4:	d9401b17 	ldw	r5,108(sp)
 100acb8:	d8801c17 	ldw	r2,112(sp)
 100acbc:	d811883a 	mov	r8,sp
 100acc0:	29400044 	addi	r5,r5,1
 100acc4:	003d6206 	br	100a250 <__alt_data_end+0xff80a250>
 100acc8:	01404074 	movhi	r5,257
 100accc:	29486304 	addi	r5,r5,8588
 100acd0:	d9402615 	stw	r5,152(sp)
 100acd4:	d8c02215 	stw	r3,136(sp)
 100acd8:	1023883a 	mov	r17,r2
 100acdc:	9d04b03a 	or	r2,r19,r20
 100ace0:	103fa51e 	bne	r2,zero,100ab78 <__alt_data_end+0xff80ab78>
 100ace4:	002b883a 	mov	r21,zero
 100ace8:	00800084 	movi	r2,2
 100acec:	003e4a06 	br	100a618 <__alt_data_end+0xff80a618>
 100acf0:	01404074 	movhi	r5,257
 100acf4:	29486304 	addi	r5,r5,8588
 100acf8:	002b883a 	mov	r21,zero
 100acfc:	d9402615 	stw	r5,152(sp)
 100ad00:	003f9e06 	br	100ab7c <__alt_data_end+0xff80ab7c>
 100ad04:	d9402217 	ldw	r5,136(sp)
 100ad08:	d8001d85 	stb	zero,118(sp)
 100ad0c:	0029883a 	mov	r20,zero
 100ad10:	28800104 	addi	r2,r5,4
 100ad14:	2cc00017 	ldw	r19,0(r5)
 100ad18:	803e3a16 	blt	r16,zero,100a604 <__alt_data_end+0xff80a604>
 100ad1c:	00ffdfc4 	movi	r3,-129
 100ad20:	d8802215 	stw	r2,136(sp)
 100ad24:	88e2703a 	and	r17,r17,r3
 100ad28:	002b883a 	mov	r21,zero
 100ad2c:	983e9b26 	beq	r19,zero,100a79c <__alt_data_end+0xff80a79c>
 100ad30:	00800244 	movi	r2,9
 100ad34:	14fdc936 	bltu	r2,r19,100a45c <__alt_data_end+0xff80a45c>
 100ad38:	003e9a06 	br	100a7a4 <__alt_data_end+0xff80a7a4>
 100ad3c:	00800c04 	movi	r2,48
 100ad40:	d8c01d45 	stb	r3,117(sp)
 100ad44:	d8801d05 	stb	r2,116(sp)
 100ad48:	d8001d85 	stb	zero,118(sp)
 100ad4c:	88c00094 	ori	r3,r17,2
 100ad50:	80009c16 	blt	r16,zero,100afc4 <___vfiprintf_internal_r+0x1368>
 100ad54:	00bfdfc4 	movi	r2,-129
 100ad58:	88a2703a 	and	r17,r17,r2
 100ad5c:	8c400094 	ori	r17,r17,2
 100ad60:	002b883a 	mov	r21,zero
 100ad64:	003f8506 	br	100ab7c <__alt_data_end+0xff80ab7c>
 100ad68:	b029883a 	mov	r20,r22
 100ad6c:	003c0b06 	br	1009d9c <__alt_data_end+0xff809d9c>
 100ad70:	04e7c83a 	sub	r19,zero,r19
 100ad74:	05400b44 	movi	r21,45
 100ad78:	9804c03a 	cmpne	r2,r19,zero
 100ad7c:	0529c83a 	sub	r20,zero,r20
 100ad80:	dd401d85 	stb	r21,118(sp)
 100ad84:	a0a9c83a 	sub	r20,r20,r2
 100ad88:	80009716 	blt	r16,zero,100afe8 <___vfiprintf_internal_r+0x138c>
 100ad8c:	00bfdfc4 	movi	r2,-129
 100ad90:	88a2703a 	and	r17,r17,r2
 100ad94:	003db006 	br	100a458 <__alt_data_end+0xff80a458>
 100ad98:	b0c00007 	ldb	r3,0(r22)
 100ad9c:	003c0c06 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100ada0:	8880100c 	andi	r2,r17,64
 100ada4:	d8001d85 	stb	zero,118(sp)
 100ada8:	1000461e 	bne	r2,zero,100aec4 <___vfiprintf_internal_r+0x1268>
 100adac:	d9002217 	ldw	r4,136(sp)
 100adb0:	0029883a 	mov	r20,zero
 100adb4:	20800104 	addi	r2,r4,4
 100adb8:	24c00017 	ldw	r19,0(r4)
 100adbc:	803df80e 	bge	r16,zero,100a5a0 <__alt_data_end+0xff80a5a0>
 100adc0:	9d06b03a 	or	r3,r19,r20
 100adc4:	d8802215 	stw	r2,136(sp)
 100adc8:	183d5e1e 	bne	r3,zero,100a344 <__alt_data_end+0xff80a344>
 100adcc:	002b883a 	mov	r21,zero
 100add0:	0005883a 	mov	r2,zero
 100add4:	003e1006 	br	100a618 <__alt_data_end+0xff80a618>
 100add8:	8880040c 	andi	r2,r17,16
 100addc:	1000321e 	bne	r2,zero,100aea8 <___vfiprintf_internal_r+0x124c>
 100ade0:	8c40100c 	andi	r17,r17,64
 100ade4:	88008d26 	beq	r17,zero,100b01c <___vfiprintf_internal_r+0x13c0>
 100ade8:	d9402217 	ldw	r5,136(sp)
 100adec:	d8c02417 	ldw	r3,144(sp)
 100adf0:	28800017 	ldw	r2,0(r5)
 100adf4:	29400104 	addi	r5,r5,4
 100adf8:	d9402215 	stw	r5,136(sp)
 100adfc:	10c0000d 	sth	r3,0(r2)
 100ae00:	003bca06 	br	1009d2c <__alt_data_end+0xff809d2c>
 100ae04:	8880100c 	andi	r2,r17,64
 100ae08:	10003a26 	beq	r2,zero,100aef4 <___vfiprintf_internal_r+0x1298>
 100ae0c:	d8802217 	ldw	r2,136(sp)
 100ae10:	14c0000f 	ldh	r19,0(r2)
 100ae14:	10800104 	addi	r2,r2,4
 100ae18:	d8802215 	stw	r2,136(sp)
 100ae1c:	9829d7fa 	srai	r20,r19,31
 100ae20:	a005883a 	mov	r2,r20
 100ae24:	003d8506 	br	100a43c <__alt_data_end+0xff80a43c>
 100ae28:	8880100c 	andi	r2,r17,64
 100ae2c:	10002b26 	beq	r2,zero,100aedc <___vfiprintf_internal_r+0x1280>
 100ae30:	d8802217 	ldw	r2,136(sp)
 100ae34:	0029883a 	mov	r20,zero
 100ae38:	14c0000b 	ldhu	r19,0(r2)
 100ae3c:	10800104 	addi	r2,r2,4
 100ae40:	d8802215 	stw	r2,136(sp)
 100ae44:	003d5d06 	br	100a3bc <__alt_data_end+0xff80a3bc>
 100ae48:	d9402017 	ldw	r5,128(sp)
 100ae4c:	d9002117 	ldw	r4,132(sp)
 100ae50:	d9801a04 	addi	r6,sp,104
 100ae54:	d8c02a15 	stw	r3,168(sp)
 100ae58:	d9c02b15 	stw	r7,172(sp)
 100ae5c:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100ae60:	d8c02a17 	ldw	r3,168(sp)
 100ae64:	d9c02b17 	ldw	r7,172(sp)
 100ae68:	103eb41e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100ae6c:	d9001b17 	ldw	r4,108(sp)
 100ae70:	d8801c17 	ldw	r2,112(sp)
 100ae74:	d811883a 	mov	r8,sp
 100ae78:	21400044 	addi	r5,r4,1
 100ae7c:	003e6706 	br	100a81c <__alt_data_end+0xff80a81c>
 100ae80:	00bfffc4 	movi	r2,-1
 100ae84:	003c4a06 	br	1009fb0 <__alt_data_end+0xff809fb0>
 100ae88:	9805883a 	mov	r2,r19
 100ae8c:	003ee806 	br	100aa30 <__alt_data_end+0xff80aa30>
 100ae90:	d8c02217 	ldw	r3,136(sp)
 100ae94:	0029883a 	mov	r20,zero
 100ae98:	18800104 	addi	r2,r3,4
 100ae9c:	1cc0000b 	ldhu	r19,0(r3)
 100aea0:	803f9e0e 	bge	r16,zero,100ad1c <__alt_data_end+0xff80ad1c>
 100aea4:	003dd706 	br	100a604 <__alt_data_end+0xff80a604>
 100aea8:	d8c02217 	ldw	r3,136(sp)
 100aeac:	d9002417 	ldw	r4,144(sp)
 100aeb0:	18800017 	ldw	r2,0(r3)
 100aeb4:	18c00104 	addi	r3,r3,4
 100aeb8:	d8c02215 	stw	r3,136(sp)
 100aebc:	11000015 	stw	r4,0(r2)
 100aec0:	003b9a06 	br	1009d2c <__alt_data_end+0xff809d2c>
 100aec4:	d8c02217 	ldw	r3,136(sp)
 100aec8:	0029883a 	mov	r20,zero
 100aecc:	18800104 	addi	r2,r3,4
 100aed0:	1cc0000b 	ldhu	r19,0(r3)
 100aed4:	803db20e 	bge	r16,zero,100a5a0 <__alt_data_end+0xff80a5a0>
 100aed8:	003fb906 	br	100adc0 <__alt_data_end+0xff80adc0>
 100aedc:	d9002217 	ldw	r4,136(sp)
 100aee0:	0029883a 	mov	r20,zero
 100aee4:	24c00017 	ldw	r19,0(r4)
 100aee8:	21000104 	addi	r4,r4,4
 100aeec:	d9002215 	stw	r4,136(sp)
 100aef0:	003d3206 	br	100a3bc <__alt_data_end+0xff80a3bc>
 100aef4:	d8c02217 	ldw	r3,136(sp)
 100aef8:	1cc00017 	ldw	r19,0(r3)
 100aefc:	18c00104 	addi	r3,r3,4
 100af00:	d8c02215 	stw	r3,136(sp)
 100af04:	9829d7fa 	srai	r20,r19,31
 100af08:	a005883a 	mov	r2,r20
 100af0c:	003d4b06 	br	100a43c <__alt_data_end+0xff80a43c>
 100af10:	0009883a 	mov	r4,zero
 100af14:	01400044 	movi	r5,1
 100af18:	d811883a 	mov	r8,sp
 100af1c:	003e4f06 	br	100a85c <__alt_data_end+0xff80a85c>
 100af20:	d8c02215 	stw	r3,136(sp)
 100af24:	002b883a 	mov	r21,zero
 100af28:	003db806 	br	100a60c <__alt_data_end+0xff80a60c>
 100af2c:	d811883a 	mov	r8,sp
 100af30:	003e9606 	br	100a98c <__alt_data_end+0xff80a98c>
 100af34:	01004074 	movhi	r4,257
 100af38:	2108c404 	addi	r4,r4,8976
 100af3c:	d9002315 	stw	r4,140(sp)
 100af40:	003e6306 	br	100a8d0 <__alt_data_end+0xff80a8d0>
 100af44:	b0c00043 	ldbu	r3,1(r22)
 100af48:	8c400814 	ori	r17,r17,32
 100af4c:	b5800044 	addi	r22,r22,1
 100af50:	18c03fcc 	andi	r3,r3,255
 100af54:	18c0201c 	xori	r3,r3,128
 100af58:	18ffe004 	addi	r3,r3,-128
 100af5c:	003b9c06 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100af60:	b809883a 	mov	r4,r23
 100af64:	da002a15 	stw	r8,168(sp)
 100af68:	10023cc0 	call	10023cc <strlen>
 100af6c:	1029883a 	mov	r20,r2
 100af70:	dd401d83 	ldbu	r21,118(sp)
 100af74:	df002215 	stw	fp,136(sp)
 100af78:	0021883a 	mov	r16,zero
 100af7c:	da002a17 	ldw	r8,168(sp)
 100af80:	003c3906 	br	100a068 <__alt_data_end+0xff80a068>
 100af84:	d9402017 	ldw	r5,128(sp)
 100af88:	d9002117 	ldw	r4,132(sp)
 100af8c:	d9801a04 	addi	r6,sp,104
 100af90:	1009b480 	call	1009b48 <__sprint_r.part.0>
 100af94:	103e691e 	bne	r2,zero,100a93c <__alt_data_end+0xff80a93c>
 100af98:	d9001b17 	ldw	r4,108(sp)
 100af9c:	d8801c17 	ldw	r2,112(sp)
 100afa0:	d811883a 	mov	r8,sp
 100afa4:	21400044 	addi	r5,r4,1
 100afa8:	003e2e06 	br	100a864 <__alt_data_end+0xff80a864>
 100afac:	01004074 	movhi	r4,257
 100afb0:	2108c804 	addi	r4,r4,8992
 100afb4:	d9002315 	stw	r4,140(sp)
 100afb8:	d9001b17 	ldw	r4,108(sp)
 100afbc:	21000044 	addi	r4,r4,1
 100afc0:	003c5e06 	br	100a13c <__alt_data_end+0xff80a13c>
 100afc4:	002b883a 	mov	r21,zero
 100afc8:	00800084 	movi	r2,2
 100afcc:	10803fcc 	andi	r2,r2,255
 100afd0:	01000044 	movi	r4,1
 100afd4:	11002b26 	beq	r2,r4,100b084 <___vfiprintf_internal_r+0x1428>
 100afd8:	01000084 	movi	r4,2
 100afdc:	11002b1e 	bne	r2,r4,100b08c <___vfiprintf_internal_r+0x1430>
 100afe0:	1823883a 	mov	r17,r3
 100afe4:	003ee506 	br	100ab7c <__alt_data_end+0xff80ab7c>
 100afe8:	8807883a 	mov	r3,r17
 100afec:	00800044 	movi	r2,1
 100aff0:	003ff606 	br	100afcc <__alt_data_end+0xff80afcc>
 100aff4:	00800184 	movi	r2,6
 100aff8:	1400012e 	bgeu	r2,r16,100b000 <___vfiprintf_internal_r+0x13a4>
 100affc:	1021883a 	mov	r16,r2
 100b000:	8029883a 	mov	r20,r16
 100b004:	8027883a 	mov	r19,r16
 100b008:	80002216 	blt	r16,zero,100b094 <___vfiprintf_internal_r+0x1438>
 100b00c:	05c04074 	movhi	r23,257
 100b010:	df002215 	stw	fp,136(sp)
 100b014:	bdc86804 	addi	r23,r23,8608
 100b018:	003cfb06 	br	100a408 <__alt_data_end+0xff80a408>
 100b01c:	d9002217 	ldw	r4,136(sp)
 100b020:	d9402417 	ldw	r5,144(sp)
 100b024:	20800017 	ldw	r2,0(r4)
 100b028:	21000104 	addi	r4,r4,4
 100b02c:	d9002215 	stw	r4,136(sp)
 100b030:	11400015 	stw	r5,0(r2)
 100b034:	003b3d06 	br	1009d2c <__alt_data_end+0xff809d2c>
 100b038:	01404074 	movhi	r5,257
 100b03c:	2948c804 	addi	r5,r5,8992
 100b040:	d9402315 	stw	r5,140(sp)
 100b044:	d9401b17 	ldw	r5,108(sp)
 100b048:	29400044 	addi	r5,r5,1
 100b04c:	003e6d06 	br	100aa04 <__alt_data_end+0xff80aa04>
 100b050:	8029883a 	mov	r20,r16
 100b054:	dd401d83 	ldbu	r21,118(sp)
 100b058:	df002215 	stw	fp,136(sp)
 100b05c:	0021883a 	mov	r16,zero
 100b060:	003c0106 	br	100a068 <__alt_data_end+0xff80a068>
 100b064:	00c04074 	movhi	r3,257
 100b068:	18c8c404 	addi	r3,r3,8976
 100b06c:	d8c02315 	stw	r3,140(sp)
 100b070:	280d883a 	mov	r6,r5
 100b074:	003c6906 	br	100a21c <__alt_data_end+0xff80a21c>
 100b078:	802d883a 	mov	r22,r16
 100b07c:	0021883a 	mov	r16,zero
 100b080:	003b5406 	br	1009dd4 <__alt_data_end+0xff809dd4>
 100b084:	1823883a 	mov	r17,r3
 100b088:	003cf306 	br	100a458 <__alt_data_end+0xff80a458>
 100b08c:	1823883a 	mov	r17,r3
 100b090:	003cad06 	br	100a348 <__alt_data_end+0xff80a348>
 100b094:	0027883a 	mov	r19,zero
 100b098:	003fdc06 	br	100b00c <__alt_data_end+0xff80b00c>
 100b09c:	d9402217 	ldw	r5,136(sp)
 100b0a0:	8005883a 	mov	r2,r16
 100b0a4:	b0c00043 	ldbu	r3,1(r22)
 100b0a8:	2c000017 	ldw	r16,0(r5)
 100b0ac:	29000104 	addi	r4,r5,4
 100b0b0:	d9002215 	stw	r4,136(sp)
 100b0b4:	102d883a 	mov	r22,r2
 100b0b8:	803fa50e 	bge	r16,zero,100af50 <__alt_data_end+0xff80af50>
 100b0bc:	18c03fcc 	andi	r3,r3,255
 100b0c0:	18c0201c 	xori	r3,r3,128
 100b0c4:	043fffc4 	movi	r16,-1
 100b0c8:	18ffe004 	addi	r3,r3,-128
 100b0cc:	003b4006 	br	1009dd0 <__alt_data_end+0xff809dd0>
 100b0d0:	d9402303 	ldbu	r5,140(sp)
 100b0d4:	d9401d85 	stb	r5,118(sp)
 100b0d8:	003cae06 	br	100a394 <__alt_data_end+0xff80a394>
 100b0dc:	d8c02303 	ldbu	r3,140(sp)
 100b0e0:	d8c01d85 	stb	r3,118(sp)
 100b0e4:	003d1406 	br	100a538 <__alt_data_end+0xff80a538>
 100b0e8:	d8c02303 	ldbu	r3,140(sp)
 100b0ec:	d8c01d85 	stb	r3,118(sp)
 100b0f0:	003cca06 	br	100a41c <__alt_data_end+0xff80a41c>
 100b0f4:	8880004c 	andi	r2,r17,1
 100b0f8:	002b883a 	mov	r21,zero
 100b0fc:	10000526 	beq	r2,zero,100b114 <___vfiprintf_internal_r+0x14b8>
 100b100:	00800c04 	movi	r2,48
 100b104:	d88019c5 	stb	r2,103(sp)
 100b108:	dd002817 	ldw	r20,160(sp)
 100b10c:	ddc019c4 	addi	r23,sp,103
 100b110:	003bd506 	br	100a068 <__alt_data_end+0xff80a068>
 100b114:	0029883a 	mov	r20,zero
 100b118:	ddc01a04 	addi	r23,sp,104
 100b11c:	003bd206 	br	100a068 <__alt_data_end+0xff80a068>
 100b120:	d9002303 	ldbu	r4,140(sp)
 100b124:	d9001d85 	stb	r4,118(sp)
 100b128:	003da606 	br	100a7c4 <__alt_data_end+0xff80a7c4>
 100b12c:	d8c02303 	ldbu	r3,140(sp)
 100b130:	d8c01d85 	stb	r3,118(sp)
 100b134:	003c7606 	br	100a310 <__alt_data_end+0xff80a310>
 100b138:	d8c02303 	ldbu	r3,140(sp)
 100b13c:	d8c01d85 	stb	r3,118(sp)
 100b140:	003c6506 	br	100a2d8 <__alt_data_end+0xff80a2d8>
 100b144:	d9002303 	ldbu	r4,140(sp)
 100b148:	d9001d85 	stb	r4,118(sp)
 100b14c:	003d3d06 	br	100a644 <__alt_data_end+0xff80a644>
 100b150:	d8c02303 	ldbu	r3,140(sp)
 100b154:	d8c01d85 	stb	r3,118(sp)
 100b158:	003d1d06 	br	100a5d0 <__alt_data_end+0xff80a5d0>
 100b15c:	d8c02303 	ldbu	r3,140(sp)
 100b160:	d8c01d85 	stb	r3,118(sp)
 100b164:	003d0306 	br	100a574 <__alt_data_end+0xff80a574>

0100b168 <__vfiprintf_internal>:
 100b168:	00804074 	movhi	r2,257
 100b16c:	108fc504 	addi	r2,r2,16148
 100b170:	300f883a 	mov	r7,r6
 100b174:	280d883a 	mov	r6,r5
 100b178:	200b883a 	mov	r5,r4
 100b17c:	11000017 	ldw	r4,0(r2)
 100b180:	1009c5c1 	jmpi	1009c5c <___vfiprintf_internal_r>

0100b184 <__sbprintf>:
 100b184:	2880030b 	ldhu	r2,12(r5)
 100b188:	2ac01917 	ldw	r11,100(r5)
 100b18c:	2a80038b 	ldhu	r10,14(r5)
 100b190:	2a400717 	ldw	r9,28(r5)
 100b194:	2a000917 	ldw	r8,36(r5)
 100b198:	defee204 	addi	sp,sp,-1144
 100b19c:	00c10004 	movi	r3,1024
 100b1a0:	dc011a15 	stw	r16,1128(sp)
 100b1a4:	10bfff4c 	andi	r2,r2,65533
 100b1a8:	2821883a 	mov	r16,r5
 100b1ac:	d8cb883a 	add	r5,sp,r3
 100b1b0:	dc811c15 	stw	r18,1136(sp)
 100b1b4:	dc411b15 	stw	r17,1132(sp)
 100b1b8:	dfc11d15 	stw	ra,1140(sp)
 100b1bc:	2025883a 	mov	r18,r4
 100b1c0:	d881030d 	sth	r2,1036(sp)
 100b1c4:	dac11915 	stw	r11,1124(sp)
 100b1c8:	da81038d 	sth	r10,1038(sp)
 100b1cc:	da410715 	stw	r9,1052(sp)
 100b1d0:	da010915 	stw	r8,1060(sp)
 100b1d4:	dec10015 	stw	sp,1024(sp)
 100b1d8:	dec10415 	stw	sp,1040(sp)
 100b1dc:	d8c10215 	stw	r3,1032(sp)
 100b1e0:	d8c10515 	stw	r3,1044(sp)
 100b1e4:	d8010615 	stw	zero,1048(sp)
 100b1e8:	1009c5c0 	call	1009c5c <___vfiprintf_internal_r>
 100b1ec:	1023883a 	mov	r17,r2
 100b1f0:	10000416 	blt	r2,zero,100b204 <__sbprintf+0x80>
 100b1f4:	d9410004 	addi	r5,sp,1024
 100b1f8:	9009883a 	mov	r4,r18
 100b1fc:	10064380 	call	1006438 <_fflush_r>
 100b200:	10000d1e 	bne	r2,zero,100b238 <__sbprintf+0xb4>
 100b204:	d881030b 	ldhu	r2,1036(sp)
 100b208:	1080100c 	andi	r2,r2,64
 100b20c:	10000326 	beq	r2,zero,100b21c <__sbprintf+0x98>
 100b210:	8080030b 	ldhu	r2,12(r16)
 100b214:	10801014 	ori	r2,r2,64
 100b218:	8080030d 	sth	r2,12(r16)
 100b21c:	8805883a 	mov	r2,r17
 100b220:	dfc11d17 	ldw	ra,1140(sp)
 100b224:	dc811c17 	ldw	r18,1136(sp)
 100b228:	dc411b17 	ldw	r17,1132(sp)
 100b22c:	dc011a17 	ldw	r16,1128(sp)
 100b230:	dec11e04 	addi	sp,sp,1144
 100b234:	f800283a 	ret
 100b238:	047fffc4 	movi	r17,-1
 100b23c:	003ff106 	br	100b204 <__alt_data_end+0xff80b204>

0100b240 <_write_r>:
 100b240:	defffd04 	addi	sp,sp,-12
 100b244:	2805883a 	mov	r2,r5
 100b248:	dc000015 	stw	r16,0(sp)
 100b24c:	04004074 	movhi	r16,257
 100b250:	dc400115 	stw	r17,4(sp)
 100b254:	300b883a 	mov	r5,r6
 100b258:	84169604 	addi	r16,r16,23128
 100b25c:	2023883a 	mov	r17,r4
 100b260:	380d883a 	mov	r6,r7
 100b264:	1009883a 	mov	r4,r2
 100b268:	dfc00215 	stw	ra,8(sp)
 100b26c:	80000015 	stw	zero,0(r16)
 100b270:	100fa900 	call	100fa90 <write>
 100b274:	00ffffc4 	movi	r3,-1
 100b278:	10c00526 	beq	r2,r3,100b290 <_write_r+0x50>
 100b27c:	dfc00217 	ldw	ra,8(sp)
 100b280:	dc400117 	ldw	r17,4(sp)
 100b284:	dc000017 	ldw	r16,0(sp)
 100b288:	dec00304 	addi	sp,sp,12
 100b28c:	f800283a 	ret
 100b290:	80c00017 	ldw	r3,0(r16)
 100b294:	183ff926 	beq	r3,zero,100b27c <__alt_data_end+0xff80b27c>
 100b298:	88c00015 	stw	r3,0(r17)
 100b29c:	003ff706 	br	100b27c <__alt_data_end+0xff80b27c>

0100b2a0 <_close_r>:
 100b2a0:	defffd04 	addi	sp,sp,-12
 100b2a4:	dc000015 	stw	r16,0(sp)
 100b2a8:	04004074 	movhi	r16,257
 100b2ac:	dc400115 	stw	r17,4(sp)
 100b2b0:	84169604 	addi	r16,r16,23128
 100b2b4:	2023883a 	mov	r17,r4
 100b2b8:	2809883a 	mov	r4,r5
 100b2bc:	dfc00215 	stw	ra,8(sp)
 100b2c0:	80000015 	stw	zero,0(r16)
 100b2c4:	100f2080 	call	100f208 <close>
 100b2c8:	00ffffc4 	movi	r3,-1
 100b2cc:	10c00526 	beq	r2,r3,100b2e4 <_close_r+0x44>
 100b2d0:	dfc00217 	ldw	ra,8(sp)
 100b2d4:	dc400117 	ldw	r17,4(sp)
 100b2d8:	dc000017 	ldw	r16,0(sp)
 100b2dc:	dec00304 	addi	sp,sp,12
 100b2e0:	f800283a 	ret
 100b2e4:	80c00017 	ldw	r3,0(r16)
 100b2e8:	183ff926 	beq	r3,zero,100b2d0 <__alt_data_end+0xff80b2d0>
 100b2ec:	88c00015 	stw	r3,0(r17)
 100b2f0:	003ff706 	br	100b2d0 <__alt_data_end+0xff80b2d0>

0100b2f4 <_calloc_r>:
 100b2f4:	defffe04 	addi	sp,sp,-8
 100b2f8:	2805883a 	mov	r2,r5
 100b2fc:	dc000015 	stw	r16,0(sp)
 100b300:	300b883a 	mov	r5,r6
 100b304:	2021883a 	mov	r16,r4
 100b308:	1009883a 	mov	r4,r2
 100b30c:	dfc00115 	stw	ra,4(sp)
 100b310:	100c9000 	call	100c900 <__mulsi3>
 100b314:	100b883a 	mov	r5,r2
 100b318:	8009883a 	mov	r4,r16
 100b31c:	10075900 	call	1007590 <_malloc_r>
 100b320:	10002926 	beq	r2,zero,100b3c8 <_calloc_r+0xd4>
 100b324:	11bfff17 	ldw	r6,-4(r2)
 100b328:	1021883a 	mov	r16,r2
 100b32c:	00bfff04 	movi	r2,-4
 100b330:	308c703a 	and	r6,r6,r2
 100b334:	00c00904 	movi	r3,36
 100b338:	308d883a 	add	r6,r6,r2
 100b33c:	19801636 	bltu	r3,r6,100b398 <_calloc_r+0xa4>
 100b340:	008004c4 	movi	r2,19
 100b344:	11800b2e 	bgeu	r2,r6,100b374 <_calloc_r+0x80>
 100b348:	80000015 	stw	zero,0(r16)
 100b34c:	80000115 	stw	zero,4(r16)
 100b350:	008006c4 	movi	r2,27
 100b354:	11801a2e 	bgeu	r2,r6,100b3c0 <_calloc_r+0xcc>
 100b358:	80000215 	stw	zero,8(r16)
 100b35c:	80000315 	stw	zero,12(r16)
 100b360:	30c0151e 	bne	r6,r3,100b3b8 <_calloc_r+0xc4>
 100b364:	80000415 	stw	zero,16(r16)
 100b368:	80800604 	addi	r2,r16,24
 100b36c:	80000515 	stw	zero,20(r16)
 100b370:	00000106 	br	100b378 <_calloc_r+0x84>
 100b374:	8005883a 	mov	r2,r16
 100b378:	10000015 	stw	zero,0(r2)
 100b37c:	10000115 	stw	zero,4(r2)
 100b380:	10000215 	stw	zero,8(r2)
 100b384:	8005883a 	mov	r2,r16
 100b388:	dfc00117 	ldw	ra,4(sp)
 100b38c:	dc000017 	ldw	r16,0(sp)
 100b390:	dec00204 	addi	sp,sp,8
 100b394:	f800283a 	ret
 100b398:	000b883a 	mov	r5,zero
 100b39c:	8009883a 	mov	r4,r16
 100b3a0:	10081240 	call	1008124 <memset>
 100b3a4:	8005883a 	mov	r2,r16
 100b3a8:	dfc00117 	ldw	ra,4(sp)
 100b3ac:	dc000017 	ldw	r16,0(sp)
 100b3b0:	dec00204 	addi	sp,sp,8
 100b3b4:	f800283a 	ret
 100b3b8:	80800404 	addi	r2,r16,16
 100b3bc:	003fee06 	br	100b378 <__alt_data_end+0xff80b378>
 100b3c0:	80800204 	addi	r2,r16,8
 100b3c4:	003fec06 	br	100b378 <__alt_data_end+0xff80b378>
 100b3c8:	0005883a 	mov	r2,zero
 100b3cc:	003fee06 	br	100b388 <__alt_data_end+0xff80b388>

0100b3d0 <_fclose_r>:
 100b3d0:	28003926 	beq	r5,zero,100b4b8 <_fclose_r+0xe8>
 100b3d4:	defffc04 	addi	sp,sp,-16
 100b3d8:	dc400115 	stw	r17,4(sp)
 100b3dc:	dc000015 	stw	r16,0(sp)
 100b3e0:	dfc00315 	stw	ra,12(sp)
 100b3e4:	dc800215 	stw	r18,8(sp)
 100b3e8:	2023883a 	mov	r17,r4
 100b3ec:	2821883a 	mov	r16,r5
 100b3f0:	20000226 	beq	r4,zero,100b3fc <_fclose_r+0x2c>
 100b3f4:	20800e17 	ldw	r2,56(r4)
 100b3f8:	10002726 	beq	r2,zero,100b498 <_fclose_r+0xc8>
 100b3fc:	8080030f 	ldh	r2,12(r16)
 100b400:	1000071e 	bne	r2,zero,100b420 <_fclose_r+0x50>
 100b404:	0005883a 	mov	r2,zero
 100b408:	dfc00317 	ldw	ra,12(sp)
 100b40c:	dc800217 	ldw	r18,8(sp)
 100b410:	dc400117 	ldw	r17,4(sp)
 100b414:	dc000017 	ldw	r16,0(sp)
 100b418:	dec00404 	addi	sp,sp,16
 100b41c:	f800283a 	ret
 100b420:	800b883a 	mov	r5,r16
 100b424:	8809883a 	mov	r4,r17
 100b428:	100621c0 	call	100621c <__sflush_r>
 100b42c:	1025883a 	mov	r18,r2
 100b430:	80800b17 	ldw	r2,44(r16)
 100b434:	10000426 	beq	r2,zero,100b448 <_fclose_r+0x78>
 100b438:	81400717 	ldw	r5,28(r16)
 100b43c:	8809883a 	mov	r4,r17
 100b440:	103ee83a 	callr	r2
 100b444:	10001616 	blt	r2,zero,100b4a0 <_fclose_r+0xd0>
 100b448:	8080030b 	ldhu	r2,12(r16)
 100b44c:	1080200c 	andi	r2,r2,128
 100b450:	1000151e 	bne	r2,zero,100b4a8 <_fclose_r+0xd8>
 100b454:	81400c17 	ldw	r5,48(r16)
 100b458:	28000526 	beq	r5,zero,100b470 <_fclose_r+0xa0>
 100b45c:	80801004 	addi	r2,r16,64
 100b460:	28800226 	beq	r5,r2,100b46c <_fclose_r+0x9c>
 100b464:	8809883a 	mov	r4,r17
 100b468:	10069980 	call	1006998 <_free_r>
 100b46c:	80000c15 	stw	zero,48(r16)
 100b470:	81401117 	ldw	r5,68(r16)
 100b474:	28000326 	beq	r5,zero,100b484 <_fclose_r+0xb4>
 100b478:	8809883a 	mov	r4,r17
 100b47c:	10069980 	call	1006998 <_free_r>
 100b480:	80001115 	stw	zero,68(r16)
 100b484:	10068340 	call	1006834 <__sfp_lock_acquire>
 100b488:	8000030d 	sth	zero,12(r16)
 100b48c:	10068380 	call	1006838 <__sfp_lock_release>
 100b490:	9005883a 	mov	r2,r18
 100b494:	003fdc06 	br	100b408 <__alt_data_end+0xff80b408>
 100b498:	10068240 	call	1006824 <__sinit>
 100b49c:	003fd706 	br	100b3fc <__alt_data_end+0xff80b3fc>
 100b4a0:	04bfffc4 	movi	r18,-1
 100b4a4:	003fe806 	br	100b448 <__alt_data_end+0xff80b448>
 100b4a8:	81400417 	ldw	r5,16(r16)
 100b4ac:	8809883a 	mov	r4,r17
 100b4b0:	10069980 	call	1006998 <_free_r>
 100b4b4:	003fe706 	br	100b454 <__alt_data_end+0xff80b454>
 100b4b8:	0005883a 	mov	r2,zero
 100b4bc:	f800283a 	ret

0100b4c0 <fclose>:
 100b4c0:	00804074 	movhi	r2,257
 100b4c4:	108fc504 	addi	r2,r2,16148
 100b4c8:	200b883a 	mov	r5,r4
 100b4cc:	11000017 	ldw	r4,0(r2)
 100b4d0:	100b3d01 	jmpi	100b3d0 <_fclose_r>

0100b4d4 <__fputwc>:
 100b4d4:	defff804 	addi	sp,sp,-32
 100b4d8:	dcc00415 	stw	r19,16(sp)
 100b4dc:	dc800315 	stw	r18,12(sp)
 100b4e0:	dc000115 	stw	r16,4(sp)
 100b4e4:	dfc00715 	stw	ra,28(sp)
 100b4e8:	dd400615 	stw	r21,24(sp)
 100b4ec:	dd000515 	stw	r20,20(sp)
 100b4f0:	dc400215 	stw	r17,8(sp)
 100b4f4:	2027883a 	mov	r19,r4
 100b4f8:	2825883a 	mov	r18,r5
 100b4fc:	3021883a 	mov	r16,r6
 100b500:	10073800 	call	1007380 <__locale_mb_cur_max>
 100b504:	00c00044 	movi	r3,1
 100b508:	10c03e26 	beq	r2,r3,100b604 <__fputwc+0x130>
 100b50c:	81c01704 	addi	r7,r16,92
 100b510:	900d883a 	mov	r6,r18
 100b514:	d80b883a 	mov	r5,sp
 100b518:	9809883a 	mov	r4,r19
 100b51c:	100b9a40 	call	100b9a4 <_wcrtomb_r>
 100b520:	1029883a 	mov	r20,r2
 100b524:	00bfffc4 	movi	r2,-1
 100b528:	a0802026 	beq	r20,r2,100b5ac <__fputwc+0xd8>
 100b52c:	d9400003 	ldbu	r5,0(sp)
 100b530:	a0001c26 	beq	r20,zero,100b5a4 <__fputwc+0xd0>
 100b534:	0023883a 	mov	r17,zero
 100b538:	05400284 	movi	r21,10
 100b53c:	00000906 	br	100b564 <__fputwc+0x90>
 100b540:	80800017 	ldw	r2,0(r16)
 100b544:	11400005 	stb	r5,0(r2)
 100b548:	80c00017 	ldw	r3,0(r16)
 100b54c:	18c00044 	addi	r3,r3,1
 100b550:	80c00015 	stw	r3,0(r16)
 100b554:	8c400044 	addi	r17,r17,1
 100b558:	dc45883a 	add	r2,sp,r17
 100b55c:	8d00112e 	bgeu	r17,r20,100b5a4 <__fputwc+0xd0>
 100b560:	11400003 	ldbu	r5,0(r2)
 100b564:	80c00217 	ldw	r3,8(r16)
 100b568:	18ffffc4 	addi	r3,r3,-1
 100b56c:	80c00215 	stw	r3,8(r16)
 100b570:	183ff30e 	bge	r3,zero,100b540 <__alt_data_end+0xff80b540>
 100b574:	80800617 	ldw	r2,24(r16)
 100b578:	18801916 	blt	r3,r2,100b5e0 <__fputwc+0x10c>
 100b57c:	80800017 	ldw	r2,0(r16)
 100b580:	11400005 	stb	r5,0(r2)
 100b584:	80800017 	ldw	r2,0(r16)
 100b588:	10c00003 	ldbu	r3,0(r2)
 100b58c:	10800044 	addi	r2,r2,1
 100b590:	1d402326 	beq	r3,r21,100b620 <__fputwc+0x14c>
 100b594:	80800015 	stw	r2,0(r16)
 100b598:	8c400044 	addi	r17,r17,1
 100b59c:	dc45883a 	add	r2,sp,r17
 100b5a0:	8d3fef36 	bltu	r17,r20,100b560 <__alt_data_end+0xff80b560>
 100b5a4:	9005883a 	mov	r2,r18
 100b5a8:	00000406 	br	100b5bc <__fputwc+0xe8>
 100b5ac:	80c0030b 	ldhu	r3,12(r16)
 100b5b0:	a005883a 	mov	r2,r20
 100b5b4:	18c01014 	ori	r3,r3,64
 100b5b8:	80c0030d 	sth	r3,12(r16)
 100b5bc:	dfc00717 	ldw	ra,28(sp)
 100b5c0:	dd400617 	ldw	r21,24(sp)
 100b5c4:	dd000517 	ldw	r20,20(sp)
 100b5c8:	dcc00417 	ldw	r19,16(sp)
 100b5cc:	dc800317 	ldw	r18,12(sp)
 100b5d0:	dc400217 	ldw	r17,8(sp)
 100b5d4:	dc000117 	ldw	r16,4(sp)
 100b5d8:	dec00804 	addi	sp,sp,32
 100b5dc:	f800283a 	ret
 100b5e0:	800d883a 	mov	r6,r16
 100b5e4:	29403fcc 	andi	r5,r5,255
 100b5e8:	9809883a 	mov	r4,r19
 100b5ec:	100b84c0 	call	100b84c <__swbuf_r>
 100b5f0:	10bfffe0 	cmpeqi	r2,r2,-1
 100b5f4:	10803fcc 	andi	r2,r2,255
 100b5f8:	103fd626 	beq	r2,zero,100b554 <__alt_data_end+0xff80b554>
 100b5fc:	00bfffc4 	movi	r2,-1
 100b600:	003fee06 	br	100b5bc <__alt_data_end+0xff80b5bc>
 100b604:	90ffffc4 	addi	r3,r18,-1
 100b608:	01003f84 	movi	r4,254
 100b60c:	20ffbf36 	bltu	r4,r3,100b50c <__alt_data_end+0xff80b50c>
 100b610:	900b883a 	mov	r5,r18
 100b614:	dc800005 	stb	r18,0(sp)
 100b618:	1029883a 	mov	r20,r2
 100b61c:	003fc506 	br	100b534 <__alt_data_end+0xff80b534>
 100b620:	800d883a 	mov	r6,r16
 100b624:	a80b883a 	mov	r5,r21
 100b628:	9809883a 	mov	r4,r19
 100b62c:	100b84c0 	call	100b84c <__swbuf_r>
 100b630:	10bfffe0 	cmpeqi	r2,r2,-1
 100b634:	003fef06 	br	100b5f4 <__alt_data_end+0xff80b5f4>

0100b638 <_fputwc_r>:
 100b638:	3080030b 	ldhu	r2,12(r6)
 100b63c:	10c8000c 	andi	r3,r2,8192
 100b640:	1800051e 	bne	r3,zero,100b658 <_fputwc_r+0x20>
 100b644:	30c01917 	ldw	r3,100(r6)
 100b648:	10880014 	ori	r2,r2,8192
 100b64c:	3080030d 	sth	r2,12(r6)
 100b650:	18880014 	ori	r2,r3,8192
 100b654:	30801915 	stw	r2,100(r6)
 100b658:	100b4d41 	jmpi	100b4d4 <__fputwc>

0100b65c <fputwc>:
 100b65c:	00804074 	movhi	r2,257
 100b660:	defffc04 	addi	sp,sp,-16
 100b664:	108fc504 	addi	r2,r2,16148
 100b668:	dc000115 	stw	r16,4(sp)
 100b66c:	14000017 	ldw	r16,0(r2)
 100b670:	dc400215 	stw	r17,8(sp)
 100b674:	dfc00315 	stw	ra,12(sp)
 100b678:	2023883a 	mov	r17,r4
 100b67c:	80000226 	beq	r16,zero,100b688 <fputwc+0x2c>
 100b680:	80800e17 	ldw	r2,56(r16)
 100b684:	10001026 	beq	r2,zero,100b6c8 <fputwc+0x6c>
 100b688:	2880030b 	ldhu	r2,12(r5)
 100b68c:	10c8000c 	andi	r3,r2,8192
 100b690:	1800051e 	bne	r3,zero,100b6a8 <fputwc+0x4c>
 100b694:	28c01917 	ldw	r3,100(r5)
 100b698:	10880014 	ori	r2,r2,8192
 100b69c:	2880030d 	sth	r2,12(r5)
 100b6a0:	18880014 	ori	r2,r3,8192
 100b6a4:	28801915 	stw	r2,100(r5)
 100b6a8:	280d883a 	mov	r6,r5
 100b6ac:	8009883a 	mov	r4,r16
 100b6b0:	880b883a 	mov	r5,r17
 100b6b4:	dfc00317 	ldw	ra,12(sp)
 100b6b8:	dc400217 	ldw	r17,8(sp)
 100b6bc:	dc000117 	ldw	r16,4(sp)
 100b6c0:	dec00404 	addi	sp,sp,16
 100b6c4:	100b4d41 	jmpi	100b4d4 <__fputwc>
 100b6c8:	8009883a 	mov	r4,r16
 100b6cc:	d9400015 	stw	r5,0(sp)
 100b6d0:	10068240 	call	1006824 <__sinit>
 100b6d4:	d9400017 	ldw	r5,0(sp)
 100b6d8:	003feb06 	br	100b688 <__alt_data_end+0xff80b688>

0100b6dc <_fstat_r>:
 100b6dc:	defffd04 	addi	sp,sp,-12
 100b6e0:	2805883a 	mov	r2,r5
 100b6e4:	dc000015 	stw	r16,0(sp)
 100b6e8:	04004074 	movhi	r16,257
 100b6ec:	dc400115 	stw	r17,4(sp)
 100b6f0:	84169604 	addi	r16,r16,23128
 100b6f4:	2023883a 	mov	r17,r4
 100b6f8:	300b883a 	mov	r5,r6
 100b6fc:	1009883a 	mov	r4,r2
 100b700:	dfc00215 	stw	ra,8(sp)
 100b704:	80000015 	stw	zero,0(r16)
 100b708:	100f3480 	call	100f348 <fstat>
 100b70c:	00ffffc4 	movi	r3,-1
 100b710:	10c00526 	beq	r2,r3,100b728 <_fstat_r+0x4c>
 100b714:	dfc00217 	ldw	ra,8(sp)
 100b718:	dc400117 	ldw	r17,4(sp)
 100b71c:	dc000017 	ldw	r16,0(sp)
 100b720:	dec00304 	addi	sp,sp,12
 100b724:	f800283a 	ret
 100b728:	80c00017 	ldw	r3,0(r16)
 100b72c:	183ff926 	beq	r3,zero,100b714 <__alt_data_end+0xff80b714>
 100b730:	88c00015 	stw	r3,0(r17)
 100b734:	003ff706 	br	100b714 <__alt_data_end+0xff80b714>

0100b738 <_isatty_r>:
 100b738:	defffd04 	addi	sp,sp,-12
 100b73c:	dc000015 	stw	r16,0(sp)
 100b740:	04004074 	movhi	r16,257
 100b744:	dc400115 	stw	r17,4(sp)
 100b748:	84169604 	addi	r16,r16,23128
 100b74c:	2023883a 	mov	r17,r4
 100b750:	2809883a 	mov	r4,r5
 100b754:	dfc00215 	stw	ra,8(sp)
 100b758:	80000015 	stw	zero,0(r16)
 100b75c:	100f43c0 	call	100f43c <isatty>
 100b760:	00ffffc4 	movi	r3,-1
 100b764:	10c00526 	beq	r2,r3,100b77c <_isatty_r+0x44>
 100b768:	dfc00217 	ldw	ra,8(sp)
 100b76c:	dc400117 	ldw	r17,4(sp)
 100b770:	dc000017 	ldw	r16,0(sp)
 100b774:	dec00304 	addi	sp,sp,12
 100b778:	f800283a 	ret
 100b77c:	80c00017 	ldw	r3,0(r16)
 100b780:	183ff926 	beq	r3,zero,100b768 <__alt_data_end+0xff80b768>
 100b784:	88c00015 	stw	r3,0(r17)
 100b788:	003ff706 	br	100b768 <__alt_data_end+0xff80b768>

0100b78c <_lseek_r>:
 100b78c:	defffd04 	addi	sp,sp,-12
 100b790:	2805883a 	mov	r2,r5
 100b794:	dc000015 	stw	r16,0(sp)
 100b798:	04004074 	movhi	r16,257
 100b79c:	dc400115 	stw	r17,4(sp)
 100b7a0:	300b883a 	mov	r5,r6
 100b7a4:	84169604 	addi	r16,r16,23128
 100b7a8:	2023883a 	mov	r17,r4
 100b7ac:	380d883a 	mov	r6,r7
 100b7b0:	1009883a 	mov	r4,r2
 100b7b4:	dfc00215 	stw	ra,8(sp)
 100b7b8:	80000015 	stw	zero,0(r16)
 100b7bc:	100f6100 	call	100f610 <lseek>
 100b7c0:	00ffffc4 	movi	r3,-1
 100b7c4:	10c00526 	beq	r2,r3,100b7dc <_lseek_r+0x50>
 100b7c8:	dfc00217 	ldw	ra,8(sp)
 100b7cc:	dc400117 	ldw	r17,4(sp)
 100b7d0:	dc000017 	ldw	r16,0(sp)
 100b7d4:	dec00304 	addi	sp,sp,12
 100b7d8:	f800283a 	ret
 100b7dc:	80c00017 	ldw	r3,0(r16)
 100b7e0:	183ff926 	beq	r3,zero,100b7c8 <__alt_data_end+0xff80b7c8>
 100b7e4:	88c00015 	stw	r3,0(r17)
 100b7e8:	003ff706 	br	100b7c8 <__alt_data_end+0xff80b7c8>

0100b7ec <_read_r>:
 100b7ec:	defffd04 	addi	sp,sp,-12
 100b7f0:	2805883a 	mov	r2,r5
 100b7f4:	dc000015 	stw	r16,0(sp)
 100b7f8:	04004074 	movhi	r16,257
 100b7fc:	dc400115 	stw	r17,4(sp)
 100b800:	300b883a 	mov	r5,r6
 100b804:	84169604 	addi	r16,r16,23128
 100b808:	2023883a 	mov	r17,r4
 100b80c:	380d883a 	mov	r6,r7
 100b810:	1009883a 	mov	r4,r2
 100b814:	dfc00215 	stw	ra,8(sp)
 100b818:	80000015 	stw	zero,0(r16)
 100b81c:	100f7ec0 	call	100f7ec <read>
 100b820:	00ffffc4 	movi	r3,-1
 100b824:	10c00526 	beq	r2,r3,100b83c <_read_r+0x50>
 100b828:	dfc00217 	ldw	ra,8(sp)
 100b82c:	dc400117 	ldw	r17,4(sp)
 100b830:	dc000017 	ldw	r16,0(sp)
 100b834:	dec00304 	addi	sp,sp,12
 100b838:	f800283a 	ret
 100b83c:	80c00017 	ldw	r3,0(r16)
 100b840:	183ff926 	beq	r3,zero,100b828 <__alt_data_end+0xff80b828>
 100b844:	88c00015 	stw	r3,0(r17)
 100b848:	003ff706 	br	100b828 <__alt_data_end+0xff80b828>

0100b84c <__swbuf_r>:
 100b84c:	defffb04 	addi	sp,sp,-20
 100b850:	dcc00315 	stw	r19,12(sp)
 100b854:	dc800215 	stw	r18,8(sp)
 100b858:	dc000015 	stw	r16,0(sp)
 100b85c:	dfc00415 	stw	ra,16(sp)
 100b860:	dc400115 	stw	r17,4(sp)
 100b864:	2025883a 	mov	r18,r4
 100b868:	2827883a 	mov	r19,r5
 100b86c:	3021883a 	mov	r16,r6
 100b870:	20000226 	beq	r4,zero,100b87c <__swbuf_r+0x30>
 100b874:	20800e17 	ldw	r2,56(r4)
 100b878:	10004226 	beq	r2,zero,100b984 <__swbuf_r+0x138>
 100b87c:	80800617 	ldw	r2,24(r16)
 100b880:	8100030b 	ldhu	r4,12(r16)
 100b884:	80800215 	stw	r2,8(r16)
 100b888:	2080020c 	andi	r2,r4,8
 100b88c:	10003626 	beq	r2,zero,100b968 <__swbuf_r+0x11c>
 100b890:	80c00417 	ldw	r3,16(r16)
 100b894:	18003426 	beq	r3,zero,100b968 <__swbuf_r+0x11c>
 100b898:	2088000c 	andi	r2,r4,8192
 100b89c:	9c403fcc 	andi	r17,r19,255
 100b8a0:	10001a26 	beq	r2,zero,100b90c <__swbuf_r+0xc0>
 100b8a4:	80800017 	ldw	r2,0(r16)
 100b8a8:	81000517 	ldw	r4,20(r16)
 100b8ac:	10c7c83a 	sub	r3,r2,r3
 100b8b0:	1900200e 	bge	r3,r4,100b934 <__swbuf_r+0xe8>
 100b8b4:	18c00044 	addi	r3,r3,1
 100b8b8:	81000217 	ldw	r4,8(r16)
 100b8bc:	11400044 	addi	r5,r2,1
 100b8c0:	81400015 	stw	r5,0(r16)
 100b8c4:	213fffc4 	addi	r4,r4,-1
 100b8c8:	81000215 	stw	r4,8(r16)
 100b8cc:	14c00005 	stb	r19,0(r2)
 100b8d0:	80800517 	ldw	r2,20(r16)
 100b8d4:	10c01e26 	beq	r2,r3,100b950 <__swbuf_r+0x104>
 100b8d8:	8080030b 	ldhu	r2,12(r16)
 100b8dc:	1080004c 	andi	r2,r2,1
 100b8e0:	10000226 	beq	r2,zero,100b8ec <__swbuf_r+0xa0>
 100b8e4:	00800284 	movi	r2,10
 100b8e8:	88801926 	beq	r17,r2,100b950 <__swbuf_r+0x104>
 100b8ec:	8805883a 	mov	r2,r17
 100b8f0:	dfc00417 	ldw	ra,16(sp)
 100b8f4:	dcc00317 	ldw	r19,12(sp)
 100b8f8:	dc800217 	ldw	r18,8(sp)
 100b8fc:	dc400117 	ldw	r17,4(sp)
 100b900:	dc000017 	ldw	r16,0(sp)
 100b904:	dec00504 	addi	sp,sp,20
 100b908:	f800283a 	ret
 100b90c:	81401917 	ldw	r5,100(r16)
 100b910:	00b7ffc4 	movi	r2,-8193
 100b914:	21080014 	ori	r4,r4,8192
 100b918:	2884703a 	and	r2,r5,r2
 100b91c:	80801915 	stw	r2,100(r16)
 100b920:	80800017 	ldw	r2,0(r16)
 100b924:	8100030d 	sth	r4,12(r16)
 100b928:	81000517 	ldw	r4,20(r16)
 100b92c:	10c7c83a 	sub	r3,r2,r3
 100b930:	193fe016 	blt	r3,r4,100b8b4 <__alt_data_end+0xff80b8b4>
 100b934:	800b883a 	mov	r5,r16
 100b938:	9009883a 	mov	r4,r18
 100b93c:	10064380 	call	1006438 <_fflush_r>
 100b940:	1000071e 	bne	r2,zero,100b960 <__swbuf_r+0x114>
 100b944:	80800017 	ldw	r2,0(r16)
 100b948:	00c00044 	movi	r3,1
 100b94c:	003fda06 	br	100b8b8 <__alt_data_end+0xff80b8b8>
 100b950:	800b883a 	mov	r5,r16
 100b954:	9009883a 	mov	r4,r18
 100b958:	10064380 	call	1006438 <_fflush_r>
 100b95c:	103fe326 	beq	r2,zero,100b8ec <__alt_data_end+0xff80b8ec>
 100b960:	00bfffc4 	movi	r2,-1
 100b964:	003fe206 	br	100b8f0 <__alt_data_end+0xff80b8f0>
 100b968:	800b883a 	mov	r5,r16
 100b96c:	9009883a 	mov	r4,r18
 100b970:	10048180 	call	1004818 <__swsetup_r>
 100b974:	103ffa1e 	bne	r2,zero,100b960 <__alt_data_end+0xff80b960>
 100b978:	8100030b 	ldhu	r4,12(r16)
 100b97c:	80c00417 	ldw	r3,16(r16)
 100b980:	003fc506 	br	100b898 <__alt_data_end+0xff80b898>
 100b984:	10068240 	call	1006824 <__sinit>
 100b988:	003fbc06 	br	100b87c <__alt_data_end+0xff80b87c>

0100b98c <__swbuf>:
 100b98c:	00804074 	movhi	r2,257
 100b990:	108fc504 	addi	r2,r2,16148
 100b994:	280d883a 	mov	r6,r5
 100b998:	200b883a 	mov	r5,r4
 100b99c:	11000017 	ldw	r4,0(r2)
 100b9a0:	100b84c1 	jmpi	100b84c <__swbuf_r>

0100b9a4 <_wcrtomb_r>:
 100b9a4:	defff604 	addi	sp,sp,-40
 100b9a8:	00804074 	movhi	r2,257
 100b9ac:	dc800815 	stw	r18,32(sp)
 100b9b0:	dc400715 	stw	r17,28(sp)
 100b9b4:	dc000615 	stw	r16,24(sp)
 100b9b8:	108fc904 	addi	r2,r2,16164
 100b9bc:	dfc00915 	stw	ra,36(sp)
 100b9c0:	2021883a 	mov	r16,r4
 100b9c4:	3823883a 	mov	r17,r7
 100b9c8:	14800017 	ldw	r18,0(r2)
 100b9cc:	28001426 	beq	r5,zero,100ba20 <_wcrtomb_r+0x7c>
 100b9d0:	d9400415 	stw	r5,16(sp)
 100b9d4:	d9800515 	stw	r6,20(sp)
 100b9d8:	10073740 	call	1007374 <__locale_charset>
 100b9dc:	d9800517 	ldw	r6,20(sp)
 100b9e0:	d9400417 	ldw	r5,16(sp)
 100b9e4:	100f883a 	mov	r7,r2
 100b9e8:	dc400015 	stw	r17,0(sp)
 100b9ec:	8009883a 	mov	r4,r16
 100b9f0:	903ee83a 	callr	r18
 100b9f4:	00ffffc4 	movi	r3,-1
 100b9f8:	10c0031e 	bne	r2,r3,100ba08 <_wcrtomb_r+0x64>
 100b9fc:	88000015 	stw	zero,0(r17)
 100ba00:	00c02284 	movi	r3,138
 100ba04:	80c00015 	stw	r3,0(r16)
 100ba08:	dfc00917 	ldw	ra,36(sp)
 100ba0c:	dc800817 	ldw	r18,32(sp)
 100ba10:	dc400717 	ldw	r17,28(sp)
 100ba14:	dc000617 	ldw	r16,24(sp)
 100ba18:	dec00a04 	addi	sp,sp,40
 100ba1c:	f800283a 	ret
 100ba20:	10073740 	call	1007374 <__locale_charset>
 100ba24:	100f883a 	mov	r7,r2
 100ba28:	dc400015 	stw	r17,0(sp)
 100ba2c:	000d883a 	mov	r6,zero
 100ba30:	d9400104 	addi	r5,sp,4
 100ba34:	8009883a 	mov	r4,r16
 100ba38:	903ee83a 	callr	r18
 100ba3c:	003fed06 	br	100b9f4 <__alt_data_end+0xff80b9f4>

0100ba40 <wcrtomb>:
 100ba40:	defff604 	addi	sp,sp,-40
 100ba44:	00804074 	movhi	r2,257
 100ba48:	dc800615 	stw	r18,24(sp)
 100ba4c:	dc400515 	stw	r17,20(sp)
 100ba50:	108fc504 	addi	r2,r2,16148
 100ba54:	dfc00915 	stw	ra,36(sp)
 100ba58:	dd000815 	stw	r20,32(sp)
 100ba5c:	dcc00715 	stw	r19,28(sp)
 100ba60:	dc000415 	stw	r16,16(sp)
 100ba64:	3025883a 	mov	r18,r6
 100ba68:	14400017 	ldw	r17,0(r2)
 100ba6c:	20001926 	beq	r4,zero,100bad4 <wcrtomb+0x94>
 100ba70:	00804074 	movhi	r2,257
 100ba74:	108fc904 	addi	r2,r2,16164
 100ba78:	15000017 	ldw	r20,0(r2)
 100ba7c:	2021883a 	mov	r16,r4
 100ba80:	2827883a 	mov	r19,r5
 100ba84:	10073740 	call	1007374 <__locale_charset>
 100ba88:	100f883a 	mov	r7,r2
 100ba8c:	dc800015 	stw	r18,0(sp)
 100ba90:	980d883a 	mov	r6,r19
 100ba94:	800b883a 	mov	r5,r16
 100ba98:	8809883a 	mov	r4,r17
 100ba9c:	a03ee83a 	callr	r20
 100baa0:	00ffffc4 	movi	r3,-1
 100baa4:	10c0031e 	bne	r2,r3,100bab4 <wcrtomb+0x74>
 100baa8:	90000015 	stw	zero,0(r18)
 100baac:	00c02284 	movi	r3,138
 100bab0:	88c00015 	stw	r3,0(r17)
 100bab4:	dfc00917 	ldw	ra,36(sp)
 100bab8:	dd000817 	ldw	r20,32(sp)
 100babc:	dcc00717 	ldw	r19,28(sp)
 100bac0:	dc800617 	ldw	r18,24(sp)
 100bac4:	dc400517 	ldw	r17,20(sp)
 100bac8:	dc000417 	ldw	r16,16(sp)
 100bacc:	dec00a04 	addi	sp,sp,40
 100bad0:	f800283a 	ret
 100bad4:	00804074 	movhi	r2,257
 100bad8:	108fc904 	addi	r2,r2,16164
 100badc:	14000017 	ldw	r16,0(r2)
 100bae0:	10073740 	call	1007374 <__locale_charset>
 100bae4:	100f883a 	mov	r7,r2
 100bae8:	dc800015 	stw	r18,0(sp)
 100baec:	000d883a 	mov	r6,zero
 100baf0:	d9400104 	addi	r5,sp,4
 100baf4:	8809883a 	mov	r4,r17
 100baf8:	803ee83a 	callr	r16
 100bafc:	003fe806 	br	100baa0 <__alt_data_end+0xff80baa0>

0100bb00 <__ascii_wctomb>:
 100bb00:	28000526 	beq	r5,zero,100bb18 <__ascii_wctomb+0x18>
 100bb04:	00803fc4 	movi	r2,255
 100bb08:	11800536 	bltu	r2,r6,100bb20 <__ascii_wctomb+0x20>
 100bb0c:	29800005 	stb	r6,0(r5)
 100bb10:	00800044 	movi	r2,1
 100bb14:	f800283a 	ret
 100bb18:	0005883a 	mov	r2,zero
 100bb1c:	f800283a 	ret
 100bb20:	00802284 	movi	r2,138
 100bb24:	20800015 	stw	r2,0(r4)
 100bb28:	00bfffc4 	movi	r2,-1
 100bb2c:	f800283a 	ret

0100bb30 <_wctomb_r>:
 100bb30:	00804074 	movhi	r2,257
 100bb34:	defff904 	addi	sp,sp,-28
 100bb38:	108fc904 	addi	r2,r2,16164
 100bb3c:	dfc00615 	stw	ra,24(sp)
 100bb40:	dc400515 	stw	r17,20(sp)
 100bb44:	dc000415 	stw	r16,16(sp)
 100bb48:	3823883a 	mov	r17,r7
 100bb4c:	14000017 	ldw	r16,0(r2)
 100bb50:	d9000115 	stw	r4,4(sp)
 100bb54:	d9400215 	stw	r5,8(sp)
 100bb58:	d9800315 	stw	r6,12(sp)
 100bb5c:	10073740 	call	1007374 <__locale_charset>
 100bb60:	d9800317 	ldw	r6,12(sp)
 100bb64:	d9400217 	ldw	r5,8(sp)
 100bb68:	d9000117 	ldw	r4,4(sp)
 100bb6c:	100f883a 	mov	r7,r2
 100bb70:	dc400015 	stw	r17,0(sp)
 100bb74:	803ee83a 	callr	r16
 100bb78:	dfc00617 	ldw	ra,24(sp)
 100bb7c:	dc400517 	ldw	r17,20(sp)
 100bb80:	dc000417 	ldw	r16,16(sp)
 100bb84:	dec00704 	addi	sp,sp,28
 100bb88:	f800283a 	ret

0100bb8c <__udivdi3>:
 100bb8c:	defff404 	addi	sp,sp,-48
 100bb90:	dcc00515 	stw	r19,20(sp)
 100bb94:	dc000215 	stw	r16,8(sp)
 100bb98:	dfc00b15 	stw	ra,44(sp)
 100bb9c:	df000a15 	stw	fp,40(sp)
 100bba0:	ddc00915 	stw	r23,36(sp)
 100bba4:	dd800815 	stw	r22,32(sp)
 100bba8:	dd400715 	stw	r21,28(sp)
 100bbac:	dd000615 	stw	r20,24(sp)
 100bbb0:	dc800415 	stw	r18,16(sp)
 100bbb4:	dc400315 	stw	r17,12(sp)
 100bbb8:	2027883a 	mov	r19,r4
 100bbbc:	2821883a 	mov	r16,r5
 100bbc0:	3800461e 	bne	r7,zero,100bcdc <__udivdi3+0x150>
 100bbc4:	3023883a 	mov	r17,r6
 100bbc8:	2025883a 	mov	r18,r4
 100bbcc:	2980572e 	bgeu	r5,r6,100bd2c <__udivdi3+0x1a0>
 100bbd0:	00bfffd4 	movui	r2,65535
 100bbd4:	282d883a 	mov	r22,r5
 100bbd8:	1180b236 	bltu	r2,r6,100bea4 <__udivdi3+0x318>
 100bbdc:	00803fc4 	movi	r2,255
 100bbe0:	1185803a 	cmpltu	r2,r2,r6
 100bbe4:	100490fa 	slli	r2,r2,3
 100bbe8:	3086d83a 	srl	r3,r6,r2
 100bbec:	01004074 	movhi	r4,257
 100bbf0:	2108cc04 	addi	r4,r4,9008
 100bbf4:	20c7883a 	add	r3,r4,r3
 100bbf8:	18c00003 	ldbu	r3,0(r3)
 100bbfc:	1885883a 	add	r2,r3,r2
 100bc00:	00c00804 	movi	r3,32
 100bc04:	1887c83a 	sub	r3,r3,r2
 100bc08:	18000526 	beq	r3,zero,100bc20 <__udivdi3+0x94>
 100bc0c:	80e0983a 	sll	r16,r16,r3
 100bc10:	9884d83a 	srl	r2,r19,r2
 100bc14:	30e2983a 	sll	r17,r6,r3
 100bc18:	98e4983a 	sll	r18,r19,r3
 100bc1c:	142cb03a 	or	r22,r2,r16
 100bc20:	882ad43a 	srli	r21,r17,16
 100bc24:	b009883a 	mov	r4,r22
 100bc28:	8d3fffcc 	andi	r20,r17,65535
 100bc2c:	a80b883a 	mov	r5,r21
 100bc30:	100c8a80 	call	100c8a8 <__umodsi3>
 100bc34:	b009883a 	mov	r4,r22
 100bc38:	a80b883a 	mov	r5,r21
 100bc3c:	1027883a 	mov	r19,r2
 100bc40:	100c8440 	call	100c844 <__udivsi3>
 100bc44:	100b883a 	mov	r5,r2
 100bc48:	a009883a 	mov	r4,r20
 100bc4c:	102d883a 	mov	r22,r2
 100bc50:	100c9000 	call	100c900 <__mulsi3>
 100bc54:	9826943a 	slli	r19,r19,16
 100bc58:	9006d43a 	srli	r3,r18,16
 100bc5c:	1cc6b03a 	or	r3,r3,r19
 100bc60:	1880052e 	bgeu	r3,r2,100bc78 <__udivdi3+0xec>
 100bc64:	1c47883a 	add	r3,r3,r17
 100bc68:	b13fffc4 	addi	r4,r22,-1
 100bc6c:	1c400136 	bltu	r3,r17,100bc74 <__udivdi3+0xe8>
 100bc70:	18814236 	bltu	r3,r2,100c17c <__udivdi3+0x5f0>
 100bc74:	202d883a 	mov	r22,r4
 100bc78:	18a1c83a 	sub	r16,r3,r2
 100bc7c:	8009883a 	mov	r4,r16
 100bc80:	a80b883a 	mov	r5,r21
 100bc84:	100c8a80 	call	100c8a8 <__umodsi3>
 100bc88:	1027883a 	mov	r19,r2
 100bc8c:	8009883a 	mov	r4,r16
 100bc90:	a80b883a 	mov	r5,r21
 100bc94:	9826943a 	slli	r19,r19,16
 100bc98:	100c8440 	call	100c844 <__udivsi3>
 100bc9c:	100b883a 	mov	r5,r2
 100bca0:	a009883a 	mov	r4,r20
 100bca4:	94bfffcc 	andi	r18,r18,65535
 100bca8:	1021883a 	mov	r16,r2
 100bcac:	94e4b03a 	or	r18,r18,r19
 100bcb0:	100c9000 	call	100c900 <__mulsi3>
 100bcb4:	9080052e 	bgeu	r18,r2,100bccc <__udivdi3+0x140>
 100bcb8:	8ca5883a 	add	r18,r17,r18
 100bcbc:	80ffffc4 	addi	r3,r16,-1
 100bcc0:	94410c36 	bltu	r18,r17,100c0f4 <__udivdi3+0x568>
 100bcc4:	90810b2e 	bgeu	r18,r2,100c0f4 <__udivdi3+0x568>
 100bcc8:	843fff84 	addi	r16,r16,-2
 100bccc:	b004943a 	slli	r2,r22,16
 100bcd0:	0007883a 	mov	r3,zero
 100bcd4:	1404b03a 	or	r2,r2,r16
 100bcd8:	00005e06 	br	100be54 <__udivdi3+0x2c8>
 100bcdc:	29c05b36 	bltu	r5,r7,100be4c <__udivdi3+0x2c0>
 100bce0:	00bfffd4 	movui	r2,65535
 100bce4:	11c0672e 	bgeu	r2,r7,100be84 <__udivdi3+0x2f8>
 100bce8:	00804034 	movhi	r2,256
 100bcec:	10bfffc4 	addi	r2,r2,-1
 100bcf0:	11c10a36 	bltu	r2,r7,100c11c <__udivdi3+0x590>
 100bcf4:	00800404 	movi	r2,16
 100bcf8:	3886d83a 	srl	r3,r7,r2
 100bcfc:	01004074 	movhi	r4,257
 100bd00:	2108cc04 	addi	r4,r4,9008
 100bd04:	20c7883a 	add	r3,r4,r3
 100bd08:	18c00003 	ldbu	r3,0(r3)
 100bd0c:	05c00804 	movi	r23,32
 100bd10:	1885883a 	add	r2,r3,r2
 100bd14:	b8afc83a 	sub	r23,r23,r2
 100bd18:	b800671e 	bne	r23,zero,100beb8 <__udivdi3+0x32c>
 100bd1c:	3c010536 	bltu	r7,r16,100c134 <__udivdi3+0x5a8>
 100bd20:	9985403a 	cmpgeu	r2,r19,r6
 100bd24:	0007883a 	mov	r3,zero
 100bd28:	00004a06 	br	100be54 <__udivdi3+0x2c8>
 100bd2c:	3000041e 	bne	r6,zero,100bd40 <__udivdi3+0x1b4>
 100bd30:	000b883a 	mov	r5,zero
 100bd34:	01000044 	movi	r4,1
 100bd38:	100c8440 	call	100c844 <__udivsi3>
 100bd3c:	1023883a 	mov	r17,r2
 100bd40:	00bfffd4 	movui	r2,65535
 100bd44:	1440532e 	bgeu	r2,r17,100be94 <__udivdi3+0x308>
 100bd48:	00804034 	movhi	r2,256
 100bd4c:	10bfffc4 	addi	r2,r2,-1
 100bd50:	1440f436 	bltu	r2,r17,100c124 <__udivdi3+0x598>
 100bd54:	00800404 	movi	r2,16
 100bd58:	8886d83a 	srl	r3,r17,r2
 100bd5c:	01004074 	movhi	r4,257
 100bd60:	2108cc04 	addi	r4,r4,9008
 100bd64:	20c7883a 	add	r3,r4,r3
 100bd68:	18c00003 	ldbu	r3,0(r3)
 100bd6c:	1885883a 	add	r2,r3,r2
 100bd70:	00c00804 	movi	r3,32
 100bd74:	1887c83a 	sub	r3,r3,r2
 100bd78:	1800a51e 	bne	r3,zero,100c010 <__udivdi3+0x484>
 100bd7c:	882ad43a 	srli	r21,r17,16
 100bd80:	8461c83a 	sub	r16,r16,r17
 100bd84:	8d3fffcc 	andi	r20,r17,65535
 100bd88:	00c00044 	movi	r3,1
 100bd8c:	a80b883a 	mov	r5,r21
 100bd90:	8009883a 	mov	r4,r16
 100bd94:	d8c00115 	stw	r3,4(sp)
 100bd98:	100c8a80 	call	100c8a8 <__umodsi3>
 100bd9c:	a80b883a 	mov	r5,r21
 100bda0:	8009883a 	mov	r4,r16
 100bda4:	1027883a 	mov	r19,r2
 100bda8:	100c8440 	call	100c844 <__udivsi3>
 100bdac:	a00b883a 	mov	r5,r20
 100bdb0:	1009883a 	mov	r4,r2
 100bdb4:	102d883a 	mov	r22,r2
 100bdb8:	100c9000 	call	100c900 <__mulsi3>
 100bdbc:	9826943a 	slli	r19,r19,16
 100bdc0:	900ed43a 	srli	r7,r18,16
 100bdc4:	d8c00117 	ldw	r3,4(sp)
 100bdc8:	3cceb03a 	or	r7,r7,r19
 100bdcc:	3880052e 	bgeu	r7,r2,100bde4 <__udivdi3+0x258>
 100bdd0:	3c4f883a 	add	r7,r7,r17
 100bdd4:	b13fffc4 	addi	r4,r22,-1
 100bdd8:	3c400136 	bltu	r7,r17,100bde0 <__udivdi3+0x254>
 100bddc:	3880e436 	bltu	r7,r2,100c170 <__udivdi3+0x5e4>
 100bde0:	202d883a 	mov	r22,r4
 100bde4:	38a1c83a 	sub	r16,r7,r2
 100bde8:	8009883a 	mov	r4,r16
 100bdec:	a80b883a 	mov	r5,r21
 100bdf0:	d8c00115 	stw	r3,4(sp)
 100bdf4:	100c8a80 	call	100c8a8 <__umodsi3>
 100bdf8:	1027883a 	mov	r19,r2
 100bdfc:	8009883a 	mov	r4,r16
 100be00:	a80b883a 	mov	r5,r21
 100be04:	9826943a 	slli	r19,r19,16
 100be08:	100c8440 	call	100c844 <__udivsi3>
 100be0c:	a00b883a 	mov	r5,r20
 100be10:	1009883a 	mov	r4,r2
 100be14:	94bfffcc 	andi	r18,r18,65535
 100be18:	1021883a 	mov	r16,r2
 100be1c:	94e4b03a 	or	r18,r18,r19
 100be20:	100c9000 	call	100c900 <__mulsi3>
 100be24:	d8c00117 	ldw	r3,4(sp)
 100be28:	9080052e 	bgeu	r18,r2,100be40 <__udivdi3+0x2b4>
 100be2c:	8ca5883a 	add	r18,r17,r18
 100be30:	813fffc4 	addi	r4,r16,-1
 100be34:	9440ad36 	bltu	r18,r17,100c0ec <__udivdi3+0x560>
 100be38:	9080ac2e 	bgeu	r18,r2,100c0ec <__udivdi3+0x560>
 100be3c:	843fff84 	addi	r16,r16,-2
 100be40:	b004943a 	slli	r2,r22,16
 100be44:	1404b03a 	or	r2,r2,r16
 100be48:	00000206 	br	100be54 <__udivdi3+0x2c8>
 100be4c:	0007883a 	mov	r3,zero
 100be50:	0005883a 	mov	r2,zero
 100be54:	dfc00b17 	ldw	ra,44(sp)
 100be58:	df000a17 	ldw	fp,40(sp)
 100be5c:	ddc00917 	ldw	r23,36(sp)
 100be60:	dd800817 	ldw	r22,32(sp)
 100be64:	dd400717 	ldw	r21,28(sp)
 100be68:	dd000617 	ldw	r20,24(sp)
 100be6c:	dcc00517 	ldw	r19,20(sp)
 100be70:	dc800417 	ldw	r18,16(sp)
 100be74:	dc400317 	ldw	r17,12(sp)
 100be78:	dc000217 	ldw	r16,8(sp)
 100be7c:	dec00c04 	addi	sp,sp,48
 100be80:	f800283a 	ret
 100be84:	00803fc4 	movi	r2,255
 100be88:	11c5803a 	cmpltu	r2,r2,r7
 100be8c:	100490fa 	slli	r2,r2,3
 100be90:	003f9906 	br	100bcf8 <__alt_data_end+0xff80bcf8>
 100be94:	00803fc4 	movi	r2,255
 100be98:	1445803a 	cmpltu	r2,r2,r17
 100be9c:	100490fa 	slli	r2,r2,3
 100bea0:	003fad06 	br	100bd58 <__alt_data_end+0xff80bd58>
 100bea4:	00804034 	movhi	r2,256
 100bea8:	10bfffc4 	addi	r2,r2,-1
 100beac:	11809f36 	bltu	r2,r6,100c12c <__udivdi3+0x5a0>
 100beb0:	00800404 	movi	r2,16
 100beb4:	003f4c06 	br	100bbe8 <__alt_data_end+0xff80bbe8>
 100beb8:	3dce983a 	sll	r7,r7,r23
 100bebc:	30b8d83a 	srl	fp,r6,r2
 100bec0:	80a2d83a 	srl	r17,r16,r2
 100bec4:	35cc983a 	sll	r6,r6,r23
 100bec8:	3f38b03a 	or	fp,r7,fp
 100becc:	e024d43a 	srli	r18,fp,16
 100bed0:	9884d83a 	srl	r2,r19,r2
 100bed4:	85e0983a 	sll	r16,r16,r23
 100bed8:	8809883a 	mov	r4,r17
 100bedc:	900b883a 	mov	r5,r18
 100bee0:	d9800015 	stw	r6,0(sp)
 100bee4:	1420b03a 	or	r16,r2,r16
 100bee8:	100c8a80 	call	100c8a8 <__umodsi3>
 100beec:	900b883a 	mov	r5,r18
 100bef0:	8809883a 	mov	r4,r17
 100bef4:	1029883a 	mov	r20,r2
 100bef8:	e5bfffcc 	andi	r22,fp,65535
 100befc:	100c8440 	call	100c844 <__udivsi3>
 100bf00:	100b883a 	mov	r5,r2
 100bf04:	b009883a 	mov	r4,r22
 100bf08:	102b883a 	mov	r21,r2
 100bf0c:	100c9000 	call	100c900 <__mulsi3>
 100bf10:	a028943a 	slli	r20,r20,16
 100bf14:	8006d43a 	srli	r3,r16,16
 100bf18:	1d06b03a 	or	r3,r3,r20
 100bf1c:	1880042e 	bgeu	r3,r2,100bf30 <__udivdi3+0x3a4>
 100bf20:	1f07883a 	add	r3,r3,fp
 100bf24:	a93fffc4 	addi	r4,r21,-1
 100bf28:	1f00892e 	bgeu	r3,fp,100c150 <__udivdi3+0x5c4>
 100bf2c:	202b883a 	mov	r21,r4
 100bf30:	18a3c83a 	sub	r17,r3,r2
 100bf34:	8809883a 	mov	r4,r17
 100bf38:	900b883a 	mov	r5,r18
 100bf3c:	100c8a80 	call	100c8a8 <__umodsi3>
 100bf40:	1029883a 	mov	r20,r2
 100bf44:	8809883a 	mov	r4,r17
 100bf48:	900b883a 	mov	r5,r18
 100bf4c:	a028943a 	slli	r20,r20,16
 100bf50:	100c8440 	call	100c844 <__udivsi3>
 100bf54:	100b883a 	mov	r5,r2
 100bf58:	b009883a 	mov	r4,r22
 100bf5c:	843fffcc 	andi	r16,r16,65535
 100bf60:	1023883a 	mov	r17,r2
 100bf64:	8520b03a 	or	r16,r16,r20
 100bf68:	100c9000 	call	100c900 <__mulsi3>
 100bf6c:	8080042e 	bgeu	r16,r2,100bf80 <__udivdi3+0x3f4>
 100bf70:	8721883a 	add	r16,r16,fp
 100bf74:	88ffffc4 	addi	r3,r17,-1
 100bf78:	8700712e 	bgeu	r16,fp,100c140 <__udivdi3+0x5b4>
 100bf7c:	1823883a 	mov	r17,r3
 100bf80:	a80e943a 	slli	r7,r21,16
 100bf84:	d8c00017 	ldw	r3,0(sp)
 100bf88:	80a1c83a 	sub	r16,r16,r2
 100bf8c:	3c64b03a 	or	r18,r7,r17
 100bf90:	1d3fffcc 	andi	r20,r3,65535
 100bf94:	9022d43a 	srli	r17,r18,16
 100bf98:	95bfffcc 	andi	r22,r18,65535
 100bf9c:	a00b883a 	mov	r5,r20
 100bfa0:	b009883a 	mov	r4,r22
 100bfa4:	182ad43a 	srli	r21,r3,16
 100bfa8:	100c9000 	call	100c900 <__mulsi3>
 100bfac:	a00b883a 	mov	r5,r20
 100bfb0:	8809883a 	mov	r4,r17
 100bfb4:	1039883a 	mov	fp,r2
 100bfb8:	100c9000 	call	100c900 <__mulsi3>
 100bfbc:	8809883a 	mov	r4,r17
 100bfc0:	a80b883a 	mov	r5,r21
 100bfc4:	1029883a 	mov	r20,r2
 100bfc8:	100c9000 	call	100c900 <__mulsi3>
 100bfcc:	a80b883a 	mov	r5,r21
 100bfd0:	b009883a 	mov	r4,r22
 100bfd4:	1023883a 	mov	r17,r2
 100bfd8:	100c9000 	call	100c900 <__mulsi3>
 100bfdc:	e006d43a 	srli	r3,fp,16
 100bfe0:	1505883a 	add	r2,r2,r20
 100bfe4:	1887883a 	add	r3,r3,r2
 100bfe8:	1d00022e 	bgeu	r3,r20,100bff4 <__udivdi3+0x468>
 100bfec:	00800074 	movhi	r2,1
 100bff0:	88a3883a 	add	r17,r17,r2
 100bff4:	1804d43a 	srli	r2,r3,16
 100bff8:	1463883a 	add	r17,r2,r17
 100bffc:	84404436 	bltu	r16,r17,100c110 <__udivdi3+0x584>
 100c000:	84403e26 	beq	r16,r17,100c0fc <__udivdi3+0x570>
 100c004:	9005883a 	mov	r2,r18
 100c008:	0007883a 	mov	r3,zero
 100c00c:	003f9106 	br	100be54 <__alt_data_end+0xff80be54>
 100c010:	88e2983a 	sll	r17,r17,r3
 100c014:	80aed83a 	srl	r23,r16,r2
 100c018:	80e0983a 	sll	r16,r16,r3
 100c01c:	882ad43a 	srli	r21,r17,16
 100c020:	9884d83a 	srl	r2,r19,r2
 100c024:	b809883a 	mov	r4,r23
 100c028:	a80b883a 	mov	r5,r21
 100c02c:	98e4983a 	sll	r18,r19,r3
 100c030:	142cb03a 	or	r22,r2,r16
 100c034:	100c8a80 	call	100c8a8 <__umodsi3>
 100c038:	b809883a 	mov	r4,r23
 100c03c:	a80b883a 	mov	r5,r21
 100c040:	1027883a 	mov	r19,r2
 100c044:	8d3fffcc 	andi	r20,r17,65535
 100c048:	100c8440 	call	100c844 <__udivsi3>
 100c04c:	a009883a 	mov	r4,r20
 100c050:	100b883a 	mov	r5,r2
 100c054:	102f883a 	mov	r23,r2
 100c058:	100c9000 	call	100c900 <__mulsi3>
 100c05c:	9826943a 	slli	r19,r19,16
 100c060:	b008d43a 	srli	r4,r22,16
 100c064:	24c8b03a 	or	r4,r4,r19
 100c068:	2080062e 	bgeu	r4,r2,100c084 <__udivdi3+0x4f8>
 100c06c:	2449883a 	add	r4,r4,r17
 100c070:	b8ffffc4 	addi	r3,r23,-1
 100c074:	24403c36 	bltu	r4,r17,100c168 <__udivdi3+0x5dc>
 100c078:	20803b2e 	bgeu	r4,r2,100c168 <__udivdi3+0x5dc>
 100c07c:	bdffff84 	addi	r23,r23,-2
 100c080:	2449883a 	add	r4,r4,r17
 100c084:	20a1c83a 	sub	r16,r4,r2
 100c088:	a80b883a 	mov	r5,r21
 100c08c:	8009883a 	mov	r4,r16
 100c090:	100c8a80 	call	100c8a8 <__umodsi3>
 100c094:	a80b883a 	mov	r5,r21
 100c098:	8009883a 	mov	r4,r16
 100c09c:	1027883a 	mov	r19,r2
 100c0a0:	100c8440 	call	100c844 <__udivsi3>
 100c0a4:	a009883a 	mov	r4,r20
 100c0a8:	100b883a 	mov	r5,r2
 100c0ac:	9826943a 	slli	r19,r19,16
 100c0b0:	1039883a 	mov	fp,r2
 100c0b4:	100c9000 	call	100c900 <__mulsi3>
 100c0b8:	b13fffcc 	andi	r4,r22,65535
 100c0bc:	24c8b03a 	or	r4,r4,r19
 100c0c0:	2080062e 	bgeu	r4,r2,100c0dc <__udivdi3+0x550>
 100c0c4:	2449883a 	add	r4,r4,r17
 100c0c8:	e0ffffc4 	addi	r3,fp,-1
 100c0cc:	24402436 	bltu	r4,r17,100c160 <__udivdi3+0x5d4>
 100c0d0:	2080232e 	bgeu	r4,r2,100c160 <__udivdi3+0x5d4>
 100c0d4:	e73fff84 	addi	fp,fp,-2
 100c0d8:	2449883a 	add	r4,r4,r17
 100c0dc:	b82e943a 	slli	r23,r23,16
 100c0e0:	20a1c83a 	sub	r16,r4,r2
 100c0e4:	bf06b03a 	or	r3,r23,fp
 100c0e8:	003f2806 	br	100bd8c <__alt_data_end+0xff80bd8c>
 100c0ec:	2021883a 	mov	r16,r4
 100c0f0:	003f5306 	br	100be40 <__alt_data_end+0xff80be40>
 100c0f4:	1821883a 	mov	r16,r3
 100c0f8:	003ef406 	br	100bccc <__alt_data_end+0xff80bccc>
 100c0fc:	1806943a 	slli	r3,r3,16
 100c100:	9de6983a 	sll	r19,r19,r23
 100c104:	e73fffcc 	andi	fp,fp,65535
 100c108:	1f07883a 	add	r3,r3,fp
 100c10c:	98ffbd2e 	bgeu	r19,r3,100c004 <__alt_data_end+0xff80c004>
 100c110:	90bfffc4 	addi	r2,r18,-1
 100c114:	0007883a 	mov	r3,zero
 100c118:	003f4e06 	br	100be54 <__alt_data_end+0xff80be54>
 100c11c:	00800604 	movi	r2,24
 100c120:	003ef506 	br	100bcf8 <__alt_data_end+0xff80bcf8>
 100c124:	00800604 	movi	r2,24
 100c128:	003f0b06 	br	100bd58 <__alt_data_end+0xff80bd58>
 100c12c:	00800604 	movi	r2,24
 100c130:	003ead06 	br	100bbe8 <__alt_data_end+0xff80bbe8>
 100c134:	0007883a 	mov	r3,zero
 100c138:	00800044 	movi	r2,1
 100c13c:	003f4506 	br	100be54 <__alt_data_end+0xff80be54>
 100c140:	80bf8e2e 	bgeu	r16,r2,100bf7c <__alt_data_end+0xff80bf7c>
 100c144:	8c7fff84 	addi	r17,r17,-2
 100c148:	8721883a 	add	r16,r16,fp
 100c14c:	003f8c06 	br	100bf80 <__alt_data_end+0xff80bf80>
 100c150:	18bf762e 	bgeu	r3,r2,100bf2c <__alt_data_end+0xff80bf2c>
 100c154:	ad7fff84 	addi	r21,r21,-2
 100c158:	1f07883a 	add	r3,r3,fp
 100c15c:	003f7406 	br	100bf30 <__alt_data_end+0xff80bf30>
 100c160:	1839883a 	mov	fp,r3
 100c164:	003fdd06 	br	100c0dc <__alt_data_end+0xff80c0dc>
 100c168:	182f883a 	mov	r23,r3
 100c16c:	003fc506 	br	100c084 <__alt_data_end+0xff80c084>
 100c170:	b5bfff84 	addi	r22,r22,-2
 100c174:	3c4f883a 	add	r7,r7,r17
 100c178:	003f1a06 	br	100bde4 <__alt_data_end+0xff80bde4>
 100c17c:	b5bfff84 	addi	r22,r22,-2
 100c180:	1c47883a 	add	r3,r3,r17
 100c184:	003ebc06 	br	100bc78 <__alt_data_end+0xff80bc78>

0100c188 <__umoddi3>:
 100c188:	defff304 	addi	sp,sp,-52
 100c18c:	df000b15 	stw	fp,44(sp)
 100c190:	dc400415 	stw	r17,16(sp)
 100c194:	dc000315 	stw	r16,12(sp)
 100c198:	dfc00c15 	stw	ra,48(sp)
 100c19c:	ddc00a15 	stw	r23,40(sp)
 100c1a0:	dd800915 	stw	r22,36(sp)
 100c1a4:	dd400815 	stw	r21,32(sp)
 100c1a8:	dd000715 	stw	r20,28(sp)
 100c1ac:	dcc00615 	stw	r19,24(sp)
 100c1b0:	dc800515 	stw	r18,20(sp)
 100c1b4:	2021883a 	mov	r16,r4
 100c1b8:	2823883a 	mov	r17,r5
 100c1bc:	2839883a 	mov	fp,r5
 100c1c0:	3800401e 	bne	r7,zero,100c2c4 <__umoddi3+0x13c>
 100c1c4:	3027883a 	mov	r19,r6
 100c1c8:	2029883a 	mov	r20,r4
 100c1cc:	2980552e 	bgeu	r5,r6,100c324 <__umoddi3+0x19c>
 100c1d0:	00bfffd4 	movui	r2,65535
 100c1d4:	1180a236 	bltu	r2,r6,100c460 <__umoddi3+0x2d8>
 100c1d8:	01003fc4 	movi	r4,255
 100c1dc:	2189803a 	cmpltu	r4,r4,r6
 100c1e0:	200890fa 	slli	r4,r4,3
 100c1e4:	3104d83a 	srl	r2,r6,r4
 100c1e8:	00c04074 	movhi	r3,257
 100c1ec:	18c8cc04 	addi	r3,r3,9008
 100c1f0:	1885883a 	add	r2,r3,r2
 100c1f4:	10c00003 	ldbu	r3,0(r2)
 100c1f8:	00800804 	movi	r2,32
 100c1fc:	1909883a 	add	r4,r3,r4
 100c200:	1125c83a 	sub	r18,r2,r4
 100c204:	90000526 	beq	r18,zero,100c21c <__umoddi3+0x94>
 100c208:	8ca2983a 	sll	r17,r17,r18
 100c20c:	8108d83a 	srl	r4,r16,r4
 100c210:	34a6983a 	sll	r19,r6,r18
 100c214:	84a8983a 	sll	r20,r16,r18
 100c218:	2478b03a 	or	fp,r4,r17
 100c21c:	982cd43a 	srli	r22,r19,16
 100c220:	e009883a 	mov	r4,fp
 100c224:	9dffffcc 	andi	r23,r19,65535
 100c228:	b00b883a 	mov	r5,r22
 100c22c:	100c8a80 	call	100c8a8 <__umodsi3>
 100c230:	b00b883a 	mov	r5,r22
 100c234:	e009883a 	mov	r4,fp
 100c238:	102b883a 	mov	r21,r2
 100c23c:	100c8440 	call	100c844 <__udivsi3>
 100c240:	100b883a 	mov	r5,r2
 100c244:	b809883a 	mov	r4,r23
 100c248:	100c9000 	call	100c900 <__mulsi3>
 100c24c:	a82a943a 	slli	r21,r21,16
 100c250:	a006d43a 	srli	r3,r20,16
 100c254:	1d46b03a 	or	r3,r3,r21
 100c258:	1880032e 	bgeu	r3,r2,100c268 <__umoddi3+0xe0>
 100c25c:	1cc7883a 	add	r3,r3,r19
 100c260:	1cc00136 	bltu	r3,r19,100c268 <__umoddi3+0xe0>
 100c264:	18813136 	bltu	r3,r2,100c72c <__umoddi3+0x5a4>
 100c268:	18a1c83a 	sub	r16,r3,r2
 100c26c:	b00b883a 	mov	r5,r22
 100c270:	8009883a 	mov	r4,r16
 100c274:	100c8a80 	call	100c8a8 <__umodsi3>
 100c278:	b00b883a 	mov	r5,r22
 100c27c:	8009883a 	mov	r4,r16
 100c280:	1023883a 	mov	r17,r2
 100c284:	100c8440 	call	100c844 <__udivsi3>
 100c288:	100b883a 	mov	r5,r2
 100c28c:	b809883a 	mov	r4,r23
 100c290:	8822943a 	slli	r17,r17,16
 100c294:	100c9000 	call	100c900 <__mulsi3>
 100c298:	a0ffffcc 	andi	r3,r20,65535
 100c29c:	1c46b03a 	or	r3,r3,r17
 100c2a0:	1880042e 	bgeu	r3,r2,100c2b4 <__umoddi3+0x12c>
 100c2a4:	1cc7883a 	add	r3,r3,r19
 100c2a8:	1cc00236 	bltu	r3,r19,100c2b4 <__umoddi3+0x12c>
 100c2ac:	1880012e 	bgeu	r3,r2,100c2b4 <__umoddi3+0x12c>
 100c2b0:	1cc7883a 	add	r3,r3,r19
 100c2b4:	1885c83a 	sub	r2,r3,r2
 100c2b8:	1484d83a 	srl	r2,r2,r18
 100c2bc:	0007883a 	mov	r3,zero
 100c2c0:	00005306 	br	100c410 <__umoddi3+0x288>
 100c2c4:	29c05036 	bltu	r5,r7,100c408 <__umoddi3+0x280>
 100c2c8:	00bfffd4 	movui	r2,65535
 100c2cc:	11c05c2e 	bgeu	r2,r7,100c440 <__umoddi3+0x2b8>
 100c2d0:	00804034 	movhi	r2,256
 100c2d4:	10bfffc4 	addi	r2,r2,-1
 100c2d8:	11c10636 	bltu	r2,r7,100c6f4 <__umoddi3+0x56c>
 100c2dc:	01000404 	movi	r4,16
 100c2e0:	3904d83a 	srl	r2,r7,r4
 100c2e4:	00c04074 	movhi	r3,257
 100c2e8:	18c8cc04 	addi	r3,r3,9008
 100c2ec:	1885883a 	add	r2,r3,r2
 100c2f0:	14c00003 	ldbu	r19,0(r2)
 100c2f4:	00c00804 	movi	r3,32
 100c2f8:	9927883a 	add	r19,r19,r4
 100c2fc:	1ce9c83a 	sub	r20,r3,r19
 100c300:	a0005c1e 	bne	r20,zero,100c474 <__umoddi3+0x2ec>
 100c304:	3c400136 	bltu	r7,r17,100c30c <__umoddi3+0x184>
 100c308:	81810a36 	bltu	r16,r6,100c734 <__umoddi3+0x5ac>
 100c30c:	8185c83a 	sub	r2,r16,r6
 100c310:	89e3c83a 	sub	r17,r17,r7
 100c314:	8089803a 	cmpltu	r4,r16,r2
 100c318:	8939c83a 	sub	fp,r17,r4
 100c31c:	e007883a 	mov	r3,fp
 100c320:	00003b06 	br	100c410 <__umoddi3+0x288>
 100c324:	3000041e 	bne	r6,zero,100c338 <__umoddi3+0x1b0>
 100c328:	000b883a 	mov	r5,zero
 100c32c:	01000044 	movi	r4,1
 100c330:	100c8440 	call	100c844 <__udivsi3>
 100c334:	1027883a 	mov	r19,r2
 100c338:	00bfffd4 	movui	r2,65535
 100c33c:	14c0442e 	bgeu	r2,r19,100c450 <__umoddi3+0x2c8>
 100c340:	00804034 	movhi	r2,256
 100c344:	10bfffc4 	addi	r2,r2,-1
 100c348:	14c0ec36 	bltu	r2,r19,100c6fc <__umoddi3+0x574>
 100c34c:	00800404 	movi	r2,16
 100c350:	9886d83a 	srl	r3,r19,r2
 100c354:	01004074 	movhi	r4,257
 100c358:	2108cc04 	addi	r4,r4,9008
 100c35c:	20c7883a 	add	r3,r4,r3
 100c360:	18c00003 	ldbu	r3,0(r3)
 100c364:	1887883a 	add	r3,r3,r2
 100c368:	00800804 	movi	r2,32
 100c36c:	10e5c83a 	sub	r18,r2,r3
 100c370:	9000ab1e 	bne	r18,zero,100c620 <__umoddi3+0x498>
 100c374:	982cd43a 	srli	r22,r19,16
 100c378:	8ce3c83a 	sub	r17,r17,r19
 100c37c:	9dffffcc 	andi	r23,r19,65535
 100c380:	b00b883a 	mov	r5,r22
 100c384:	8809883a 	mov	r4,r17
 100c388:	100c8a80 	call	100c8a8 <__umodsi3>
 100c38c:	b00b883a 	mov	r5,r22
 100c390:	8809883a 	mov	r4,r17
 100c394:	102b883a 	mov	r21,r2
 100c398:	100c8440 	call	100c844 <__udivsi3>
 100c39c:	b80b883a 	mov	r5,r23
 100c3a0:	1009883a 	mov	r4,r2
 100c3a4:	100c9000 	call	100c900 <__mulsi3>
 100c3a8:	a82a943a 	slli	r21,r21,16
 100c3ac:	a006d43a 	srli	r3,r20,16
 100c3b0:	1d46b03a 	or	r3,r3,r21
 100c3b4:	1880042e 	bgeu	r3,r2,100c3c8 <__umoddi3+0x240>
 100c3b8:	1cc7883a 	add	r3,r3,r19
 100c3bc:	1cc00236 	bltu	r3,r19,100c3c8 <__umoddi3+0x240>
 100c3c0:	1880012e 	bgeu	r3,r2,100c3c8 <__umoddi3+0x240>
 100c3c4:	1cc7883a 	add	r3,r3,r19
 100c3c8:	18a1c83a 	sub	r16,r3,r2
 100c3cc:	b00b883a 	mov	r5,r22
 100c3d0:	8009883a 	mov	r4,r16
 100c3d4:	100c8a80 	call	100c8a8 <__umodsi3>
 100c3d8:	1023883a 	mov	r17,r2
 100c3dc:	b00b883a 	mov	r5,r22
 100c3e0:	8009883a 	mov	r4,r16
 100c3e4:	100c8440 	call	100c844 <__udivsi3>
 100c3e8:	8822943a 	slli	r17,r17,16
 100c3ec:	b80b883a 	mov	r5,r23
 100c3f0:	1009883a 	mov	r4,r2
 100c3f4:	100c9000 	call	100c900 <__mulsi3>
 100c3f8:	a53fffcc 	andi	r20,r20,65535
 100c3fc:	a446b03a 	or	r3,r20,r17
 100c400:	18bfac2e 	bgeu	r3,r2,100c2b4 <__alt_data_end+0xff80c2b4>
 100c404:	003fa706 	br	100c2a4 <__alt_data_end+0xff80c2a4>
 100c408:	2005883a 	mov	r2,r4
 100c40c:	2807883a 	mov	r3,r5
 100c410:	dfc00c17 	ldw	ra,48(sp)
 100c414:	df000b17 	ldw	fp,44(sp)
 100c418:	ddc00a17 	ldw	r23,40(sp)
 100c41c:	dd800917 	ldw	r22,36(sp)
 100c420:	dd400817 	ldw	r21,32(sp)
 100c424:	dd000717 	ldw	r20,28(sp)
 100c428:	dcc00617 	ldw	r19,24(sp)
 100c42c:	dc800517 	ldw	r18,20(sp)
 100c430:	dc400417 	ldw	r17,16(sp)
 100c434:	dc000317 	ldw	r16,12(sp)
 100c438:	dec00d04 	addi	sp,sp,52
 100c43c:	f800283a 	ret
 100c440:	04c03fc4 	movi	r19,255
 100c444:	99c9803a 	cmpltu	r4,r19,r7
 100c448:	200890fa 	slli	r4,r4,3
 100c44c:	003fa406 	br	100c2e0 <__alt_data_end+0xff80c2e0>
 100c450:	00803fc4 	movi	r2,255
 100c454:	14c5803a 	cmpltu	r2,r2,r19
 100c458:	100490fa 	slli	r2,r2,3
 100c45c:	003fbc06 	br	100c350 <__alt_data_end+0xff80c350>
 100c460:	00804034 	movhi	r2,256
 100c464:	10bfffc4 	addi	r2,r2,-1
 100c468:	1180a636 	bltu	r2,r6,100c704 <__umoddi3+0x57c>
 100c46c:	01000404 	movi	r4,16
 100c470:	003f5c06 	br	100c1e4 <__alt_data_end+0xff80c1e4>
 100c474:	3d0e983a 	sll	r7,r7,r20
 100c478:	34ead83a 	srl	r21,r6,r19
 100c47c:	8cc6d83a 	srl	r3,r17,r19
 100c480:	8d10983a 	sll	r8,r17,r20
 100c484:	3d6ab03a 	or	r21,r7,r21
 100c488:	a82cd43a 	srli	r22,r21,16
 100c48c:	84e2d83a 	srl	r17,r16,r19
 100c490:	1809883a 	mov	r4,r3
 100c494:	b00b883a 	mov	r5,r22
 100c498:	8a22b03a 	or	r17,r17,r8
 100c49c:	3524983a 	sll	r18,r6,r20
 100c4a0:	dc400015 	stw	r17,0(sp)
 100c4a4:	d8c00115 	stw	r3,4(sp)
 100c4a8:	100c8a80 	call	100c8a8 <__umodsi3>
 100c4ac:	d8c00117 	ldw	r3,4(sp)
 100c4b0:	b00b883a 	mov	r5,r22
 100c4b4:	1039883a 	mov	fp,r2
 100c4b8:	1809883a 	mov	r4,r3
 100c4bc:	100c8440 	call	100c844 <__udivsi3>
 100c4c0:	adffffcc 	andi	r23,r21,65535
 100c4c4:	100b883a 	mov	r5,r2
 100c4c8:	b809883a 	mov	r4,r23
 100c4cc:	1023883a 	mov	r17,r2
 100c4d0:	100c9000 	call	100c900 <__mulsi3>
 100c4d4:	d9400017 	ldw	r5,0(sp)
 100c4d8:	e008943a 	slli	r4,fp,16
 100c4dc:	8520983a 	sll	r16,r16,r20
 100c4e0:	2806d43a 	srli	r3,r5,16
 100c4e4:	1906b03a 	or	r3,r3,r4
 100c4e8:	1880042e 	bgeu	r3,r2,100c4fc <__umoddi3+0x374>
 100c4ec:	1d47883a 	add	r3,r3,r21
 100c4f0:	893fffc4 	addi	r4,r17,-1
 100c4f4:	1d40892e 	bgeu	r3,r21,100c71c <__umoddi3+0x594>
 100c4f8:	2023883a 	mov	r17,r4
 100c4fc:	18b9c83a 	sub	fp,r3,r2
 100c500:	b00b883a 	mov	r5,r22
 100c504:	e009883a 	mov	r4,fp
 100c508:	100c8a80 	call	100c8a8 <__umodsi3>
 100c50c:	b00b883a 	mov	r5,r22
 100c510:	e009883a 	mov	r4,fp
 100c514:	d8800215 	stw	r2,8(sp)
 100c518:	100c8440 	call	100c844 <__udivsi3>
 100c51c:	100b883a 	mov	r5,r2
 100c520:	b809883a 	mov	r4,r23
 100c524:	102d883a 	mov	r22,r2
 100c528:	100c9000 	call	100c900 <__mulsi3>
 100c52c:	d9800217 	ldw	r6,8(sp)
 100c530:	d8c00017 	ldw	r3,0(sp)
 100c534:	300c943a 	slli	r6,r6,16
 100c538:	1a3fffcc 	andi	r8,r3,65535
 100c53c:	4190b03a 	or	r8,r8,r6
 100c540:	4080042e 	bgeu	r8,r2,100c554 <__umoddi3+0x3cc>
 100c544:	4551883a 	add	r8,r8,r21
 100c548:	b0ffffc4 	addi	r3,r22,-1
 100c54c:	45406f2e 	bgeu	r8,r21,100c70c <__umoddi3+0x584>
 100c550:	182d883a 	mov	r22,r3
 100c554:	880e943a 	slli	r7,r17,16
 100c558:	9006d43a 	srli	r3,r18,16
 100c55c:	91bfffcc 	andi	r6,r18,65535
 100c560:	3dacb03a 	or	r22,r7,r22
 100c564:	b02ed43a 	srli	r23,r22,16
 100c568:	b5bfffcc 	andi	r22,r22,65535
 100c56c:	300b883a 	mov	r5,r6
 100c570:	b009883a 	mov	r4,r22
 100c574:	40a3c83a 	sub	r17,r8,r2
 100c578:	d8c00115 	stw	r3,4(sp)
 100c57c:	d9800215 	stw	r6,8(sp)
 100c580:	100c9000 	call	100c900 <__mulsi3>
 100c584:	d9800217 	ldw	r6,8(sp)
 100c588:	b809883a 	mov	r4,r23
 100c58c:	1039883a 	mov	fp,r2
 100c590:	300b883a 	mov	r5,r6
 100c594:	100c9000 	call	100c900 <__mulsi3>
 100c598:	d8c00117 	ldw	r3,4(sp)
 100c59c:	b809883a 	mov	r4,r23
 100c5a0:	d8800215 	stw	r2,8(sp)
 100c5a4:	180b883a 	mov	r5,r3
 100c5a8:	100c9000 	call	100c900 <__mulsi3>
 100c5ac:	d8c00117 	ldw	r3,4(sp)
 100c5b0:	b009883a 	mov	r4,r22
 100c5b4:	102f883a 	mov	r23,r2
 100c5b8:	180b883a 	mov	r5,r3
 100c5bc:	100c9000 	call	100c900 <__mulsi3>
 100c5c0:	d9800217 	ldw	r6,8(sp)
 100c5c4:	e006d43a 	srli	r3,fp,16
 100c5c8:	1185883a 	add	r2,r2,r6
 100c5cc:	1885883a 	add	r2,r3,r2
 100c5d0:	1180022e 	bgeu	r2,r6,100c5dc <__umoddi3+0x454>
 100c5d4:	00c00074 	movhi	r3,1
 100c5d8:	b8ef883a 	add	r23,r23,r3
 100c5dc:	1006d43a 	srli	r3,r2,16
 100c5e0:	1004943a 	slli	r2,r2,16
 100c5e4:	e73fffcc 	andi	fp,fp,65535
 100c5e8:	1dc7883a 	add	r3,r3,r23
 100c5ec:	1739883a 	add	fp,r2,fp
 100c5f0:	88c03a36 	bltu	r17,r3,100c6dc <__umoddi3+0x554>
 100c5f4:	88c05126 	beq	r17,r3,100c73c <__umoddi3+0x5b4>
 100c5f8:	88c9c83a 	sub	r4,r17,r3
 100c5fc:	e00f883a 	mov	r7,fp
 100c600:	81cfc83a 	sub	r7,r16,r7
 100c604:	81c7803a 	cmpltu	r3,r16,r7
 100c608:	20c7c83a 	sub	r3,r4,r3
 100c60c:	1cc4983a 	sll	r2,r3,r19
 100c610:	3d0ed83a 	srl	r7,r7,r20
 100c614:	1d06d83a 	srl	r3,r3,r20
 100c618:	11c4b03a 	or	r2,r2,r7
 100c61c:	003f7c06 	br	100c410 <__alt_data_end+0xff80c410>
 100c620:	9ca6983a 	sll	r19,r19,r18
 100c624:	88f8d83a 	srl	fp,r17,r3
 100c628:	80c4d83a 	srl	r2,r16,r3
 100c62c:	982cd43a 	srli	r22,r19,16
 100c630:	8ca2983a 	sll	r17,r17,r18
 100c634:	e009883a 	mov	r4,fp
 100c638:	b00b883a 	mov	r5,r22
 100c63c:	146ab03a 	or	r21,r2,r17
 100c640:	100c8a80 	call	100c8a8 <__umodsi3>
 100c644:	b00b883a 	mov	r5,r22
 100c648:	e009883a 	mov	r4,fp
 100c64c:	1029883a 	mov	r20,r2
 100c650:	9dffffcc 	andi	r23,r19,65535
 100c654:	100c8440 	call	100c844 <__udivsi3>
 100c658:	b809883a 	mov	r4,r23
 100c65c:	100b883a 	mov	r5,r2
 100c660:	100c9000 	call	100c900 <__mulsi3>
 100c664:	a008943a 	slli	r4,r20,16
 100c668:	a806d43a 	srli	r3,r21,16
 100c66c:	84a8983a 	sll	r20,r16,r18
 100c670:	1906b03a 	or	r3,r3,r4
 100c674:	1880042e 	bgeu	r3,r2,100c688 <__umoddi3+0x500>
 100c678:	1cc7883a 	add	r3,r3,r19
 100c67c:	1cc00236 	bltu	r3,r19,100c688 <__umoddi3+0x500>
 100c680:	1880012e 	bgeu	r3,r2,100c688 <__umoddi3+0x500>
 100c684:	1cc7883a 	add	r3,r3,r19
 100c688:	18a3c83a 	sub	r17,r3,r2
 100c68c:	b00b883a 	mov	r5,r22
 100c690:	8809883a 	mov	r4,r17
 100c694:	100c8a80 	call	100c8a8 <__umodsi3>
 100c698:	b00b883a 	mov	r5,r22
 100c69c:	8809883a 	mov	r4,r17
 100c6a0:	1021883a 	mov	r16,r2
 100c6a4:	100c8440 	call	100c844 <__udivsi3>
 100c6a8:	100b883a 	mov	r5,r2
 100c6ac:	b809883a 	mov	r4,r23
 100c6b0:	8020943a 	slli	r16,r16,16
 100c6b4:	100c9000 	call	100c900 <__mulsi3>
 100c6b8:	a8ffffcc 	andi	r3,r21,65535
 100c6bc:	1c06b03a 	or	r3,r3,r16
 100c6c0:	1880042e 	bgeu	r3,r2,100c6d4 <__umoddi3+0x54c>
 100c6c4:	1cc7883a 	add	r3,r3,r19
 100c6c8:	1cc00236 	bltu	r3,r19,100c6d4 <__umoddi3+0x54c>
 100c6cc:	1880012e 	bgeu	r3,r2,100c6d4 <__umoddi3+0x54c>
 100c6d0:	1cc7883a 	add	r3,r3,r19
 100c6d4:	18a3c83a 	sub	r17,r3,r2
 100c6d8:	003f2906 	br	100c380 <__alt_data_end+0xff80c380>
 100c6dc:	e48fc83a 	sub	r7,fp,r18
 100c6e0:	1d49c83a 	sub	r4,r3,r21
 100c6e4:	e1f9803a 	cmpltu	fp,fp,r7
 100c6e8:	2739c83a 	sub	fp,r4,fp
 100c6ec:	8f09c83a 	sub	r4,r17,fp
 100c6f0:	003fc306 	br	100c600 <__alt_data_end+0xff80c600>
 100c6f4:	01000604 	movi	r4,24
 100c6f8:	003ef906 	br	100c2e0 <__alt_data_end+0xff80c2e0>
 100c6fc:	00800604 	movi	r2,24
 100c700:	003f1306 	br	100c350 <__alt_data_end+0xff80c350>
 100c704:	01000604 	movi	r4,24
 100c708:	003eb606 	br	100c1e4 <__alt_data_end+0xff80c1e4>
 100c70c:	40bf902e 	bgeu	r8,r2,100c550 <__alt_data_end+0xff80c550>
 100c710:	b5bfff84 	addi	r22,r22,-2
 100c714:	4551883a 	add	r8,r8,r21
 100c718:	003f8e06 	br	100c554 <__alt_data_end+0xff80c554>
 100c71c:	18bf762e 	bgeu	r3,r2,100c4f8 <__alt_data_end+0xff80c4f8>
 100c720:	8c7fff84 	addi	r17,r17,-2
 100c724:	1d47883a 	add	r3,r3,r21
 100c728:	003f7406 	br	100c4fc <__alt_data_end+0xff80c4fc>
 100c72c:	1cc7883a 	add	r3,r3,r19
 100c730:	003ecd06 	br	100c268 <__alt_data_end+0xff80c268>
 100c734:	8005883a 	mov	r2,r16
 100c738:	003ef806 	br	100c31c <__alt_data_end+0xff80c31c>
 100c73c:	873fe736 	bltu	r16,fp,100c6dc <__alt_data_end+0xff80c6dc>
 100c740:	e00f883a 	mov	r7,fp
 100c744:	0009883a 	mov	r4,zero
 100c748:	003fad06 	br	100c600 <__alt_data_end+0xff80c600>

0100c74c <__divsi3>:
 100c74c:	20001b16 	blt	r4,zero,100c7bc <__divsi3+0x70>
 100c750:	000f883a 	mov	r7,zero
 100c754:	28001616 	blt	r5,zero,100c7b0 <__divsi3+0x64>
 100c758:	200d883a 	mov	r6,r4
 100c75c:	29001a2e 	bgeu	r5,r4,100c7c8 <__divsi3+0x7c>
 100c760:	00800804 	movi	r2,32
 100c764:	00c00044 	movi	r3,1
 100c768:	00000106 	br	100c770 <__divsi3+0x24>
 100c76c:	10000d26 	beq	r2,zero,100c7a4 <__divsi3+0x58>
 100c770:	294b883a 	add	r5,r5,r5
 100c774:	10bfffc4 	addi	r2,r2,-1
 100c778:	18c7883a 	add	r3,r3,r3
 100c77c:	293ffb36 	bltu	r5,r4,100c76c <__alt_data_end+0xff80c76c>
 100c780:	0005883a 	mov	r2,zero
 100c784:	18000726 	beq	r3,zero,100c7a4 <__divsi3+0x58>
 100c788:	0005883a 	mov	r2,zero
 100c78c:	31400236 	bltu	r6,r5,100c798 <__divsi3+0x4c>
 100c790:	314dc83a 	sub	r6,r6,r5
 100c794:	10c4b03a 	or	r2,r2,r3
 100c798:	1806d07a 	srli	r3,r3,1
 100c79c:	280ad07a 	srli	r5,r5,1
 100c7a0:	183ffa1e 	bne	r3,zero,100c78c <__alt_data_end+0xff80c78c>
 100c7a4:	38000126 	beq	r7,zero,100c7ac <__divsi3+0x60>
 100c7a8:	0085c83a 	sub	r2,zero,r2
 100c7ac:	f800283a 	ret
 100c7b0:	014bc83a 	sub	r5,zero,r5
 100c7b4:	39c0005c 	xori	r7,r7,1
 100c7b8:	003fe706 	br	100c758 <__alt_data_end+0xff80c758>
 100c7bc:	0109c83a 	sub	r4,zero,r4
 100c7c0:	01c00044 	movi	r7,1
 100c7c4:	003fe306 	br	100c754 <__alt_data_end+0xff80c754>
 100c7c8:	00c00044 	movi	r3,1
 100c7cc:	003fee06 	br	100c788 <__alt_data_end+0xff80c788>

0100c7d0 <__modsi3>:
 100c7d0:	20001716 	blt	r4,zero,100c830 <__modsi3+0x60>
 100c7d4:	000f883a 	mov	r7,zero
 100c7d8:	2005883a 	mov	r2,r4
 100c7dc:	28001216 	blt	r5,zero,100c828 <__modsi3+0x58>
 100c7e0:	2900162e 	bgeu	r5,r4,100c83c <__modsi3+0x6c>
 100c7e4:	01800804 	movi	r6,32
 100c7e8:	00c00044 	movi	r3,1
 100c7ec:	00000106 	br	100c7f4 <__modsi3+0x24>
 100c7f0:	30000a26 	beq	r6,zero,100c81c <__modsi3+0x4c>
 100c7f4:	294b883a 	add	r5,r5,r5
 100c7f8:	31bfffc4 	addi	r6,r6,-1
 100c7fc:	18c7883a 	add	r3,r3,r3
 100c800:	293ffb36 	bltu	r5,r4,100c7f0 <__alt_data_end+0xff80c7f0>
 100c804:	18000526 	beq	r3,zero,100c81c <__modsi3+0x4c>
 100c808:	1806d07a 	srli	r3,r3,1
 100c80c:	11400136 	bltu	r2,r5,100c814 <__modsi3+0x44>
 100c810:	1145c83a 	sub	r2,r2,r5
 100c814:	280ad07a 	srli	r5,r5,1
 100c818:	183ffb1e 	bne	r3,zero,100c808 <__alt_data_end+0xff80c808>
 100c81c:	38000126 	beq	r7,zero,100c824 <__modsi3+0x54>
 100c820:	0085c83a 	sub	r2,zero,r2
 100c824:	f800283a 	ret
 100c828:	014bc83a 	sub	r5,zero,r5
 100c82c:	003fec06 	br	100c7e0 <__alt_data_end+0xff80c7e0>
 100c830:	0109c83a 	sub	r4,zero,r4
 100c834:	01c00044 	movi	r7,1
 100c838:	003fe706 	br	100c7d8 <__alt_data_end+0xff80c7d8>
 100c83c:	00c00044 	movi	r3,1
 100c840:	003ff106 	br	100c808 <__alt_data_end+0xff80c808>

0100c844 <__udivsi3>:
 100c844:	200d883a 	mov	r6,r4
 100c848:	2900152e 	bgeu	r5,r4,100c8a0 <__udivsi3+0x5c>
 100c84c:	28001416 	blt	r5,zero,100c8a0 <__udivsi3+0x5c>
 100c850:	00800804 	movi	r2,32
 100c854:	00c00044 	movi	r3,1
 100c858:	00000206 	br	100c864 <__udivsi3+0x20>
 100c85c:	10000e26 	beq	r2,zero,100c898 <__udivsi3+0x54>
 100c860:	28000516 	blt	r5,zero,100c878 <__udivsi3+0x34>
 100c864:	294b883a 	add	r5,r5,r5
 100c868:	10bfffc4 	addi	r2,r2,-1
 100c86c:	18c7883a 	add	r3,r3,r3
 100c870:	293ffa36 	bltu	r5,r4,100c85c <__alt_data_end+0xff80c85c>
 100c874:	18000826 	beq	r3,zero,100c898 <__udivsi3+0x54>
 100c878:	0005883a 	mov	r2,zero
 100c87c:	31400236 	bltu	r6,r5,100c888 <__udivsi3+0x44>
 100c880:	314dc83a 	sub	r6,r6,r5
 100c884:	10c4b03a 	or	r2,r2,r3
 100c888:	1806d07a 	srli	r3,r3,1
 100c88c:	280ad07a 	srli	r5,r5,1
 100c890:	183ffa1e 	bne	r3,zero,100c87c <__alt_data_end+0xff80c87c>
 100c894:	f800283a 	ret
 100c898:	0005883a 	mov	r2,zero
 100c89c:	f800283a 	ret
 100c8a0:	00c00044 	movi	r3,1
 100c8a4:	003ff406 	br	100c878 <__alt_data_end+0xff80c878>

0100c8a8 <__umodsi3>:
 100c8a8:	2005883a 	mov	r2,r4
 100c8ac:	2900122e 	bgeu	r5,r4,100c8f8 <__umodsi3+0x50>
 100c8b0:	28001116 	blt	r5,zero,100c8f8 <__umodsi3+0x50>
 100c8b4:	01800804 	movi	r6,32
 100c8b8:	00c00044 	movi	r3,1
 100c8bc:	00000206 	br	100c8c8 <__umodsi3+0x20>
 100c8c0:	30000c26 	beq	r6,zero,100c8f4 <__umodsi3+0x4c>
 100c8c4:	28000516 	blt	r5,zero,100c8dc <__umodsi3+0x34>
 100c8c8:	294b883a 	add	r5,r5,r5
 100c8cc:	31bfffc4 	addi	r6,r6,-1
 100c8d0:	18c7883a 	add	r3,r3,r3
 100c8d4:	293ffa36 	bltu	r5,r4,100c8c0 <__alt_data_end+0xff80c8c0>
 100c8d8:	18000626 	beq	r3,zero,100c8f4 <__umodsi3+0x4c>
 100c8dc:	1806d07a 	srli	r3,r3,1
 100c8e0:	11400136 	bltu	r2,r5,100c8e8 <__umodsi3+0x40>
 100c8e4:	1145c83a 	sub	r2,r2,r5
 100c8e8:	280ad07a 	srli	r5,r5,1
 100c8ec:	183ffb1e 	bne	r3,zero,100c8dc <__alt_data_end+0xff80c8dc>
 100c8f0:	f800283a 	ret
 100c8f4:	f800283a 	ret
 100c8f8:	00c00044 	movi	r3,1
 100c8fc:	003ff706 	br	100c8dc <__alt_data_end+0xff80c8dc>

0100c900 <__mulsi3>:
 100c900:	0005883a 	mov	r2,zero
 100c904:	20000726 	beq	r4,zero,100c924 <__mulsi3+0x24>
 100c908:	20c0004c 	andi	r3,r4,1
 100c90c:	2008d07a 	srli	r4,r4,1
 100c910:	18000126 	beq	r3,zero,100c918 <__mulsi3+0x18>
 100c914:	1145883a 	add	r2,r2,r5
 100c918:	294b883a 	add	r5,r5,r5
 100c91c:	203ffa1e 	bne	r4,zero,100c908 <__alt_data_end+0xff80c908>
 100c920:	f800283a 	ret
 100c924:	f800283a 	ret

0100c928 <__adddf3>:
 100c928:	02c00434 	movhi	r11,16
 100c92c:	5affffc4 	addi	r11,r11,-1
 100c930:	2806d7fa 	srli	r3,r5,31
 100c934:	2ad4703a 	and	r10,r5,r11
 100c938:	3ad2703a 	and	r9,r7,r11
 100c93c:	3804d53a 	srli	r2,r7,20
 100c940:	3018d77a 	srli	r12,r6,29
 100c944:	280ad53a 	srli	r5,r5,20
 100c948:	501490fa 	slli	r10,r10,3
 100c94c:	2010d77a 	srli	r8,r4,29
 100c950:	481290fa 	slli	r9,r9,3
 100c954:	380ed7fa 	srli	r7,r7,31
 100c958:	defffb04 	addi	sp,sp,-20
 100c95c:	dc800215 	stw	r18,8(sp)
 100c960:	dc400115 	stw	r17,4(sp)
 100c964:	dc000015 	stw	r16,0(sp)
 100c968:	dfc00415 	stw	ra,16(sp)
 100c96c:	dcc00315 	stw	r19,12(sp)
 100c970:	1c803fcc 	andi	r18,r3,255
 100c974:	2c01ffcc 	andi	r16,r5,2047
 100c978:	5210b03a 	or	r8,r10,r8
 100c97c:	202290fa 	slli	r17,r4,3
 100c980:	1081ffcc 	andi	r2,r2,2047
 100c984:	4b12b03a 	or	r9,r9,r12
 100c988:	300c90fa 	slli	r6,r6,3
 100c98c:	91c07526 	beq	r18,r7,100cb64 <__adddf3+0x23c>
 100c990:	8087c83a 	sub	r3,r16,r2
 100c994:	00c0ab0e 	bge	zero,r3,100cc44 <__adddf3+0x31c>
 100c998:	10002a1e 	bne	r2,zero,100ca44 <__adddf3+0x11c>
 100c99c:	4984b03a 	or	r2,r9,r6
 100c9a0:	1000961e 	bne	r2,zero,100cbfc <__adddf3+0x2d4>
 100c9a4:	888001cc 	andi	r2,r17,7
 100c9a8:	10000726 	beq	r2,zero,100c9c8 <__adddf3+0xa0>
 100c9ac:	888003cc 	andi	r2,r17,15
 100c9b0:	00c00104 	movi	r3,4
 100c9b4:	10c00426 	beq	r2,r3,100c9c8 <__adddf3+0xa0>
 100c9b8:	88c7883a 	add	r3,r17,r3
 100c9bc:	1c63803a 	cmpltu	r17,r3,r17
 100c9c0:	4451883a 	add	r8,r8,r17
 100c9c4:	1823883a 	mov	r17,r3
 100c9c8:	4080202c 	andhi	r2,r8,128
 100c9cc:	10005926 	beq	r2,zero,100cb34 <__adddf3+0x20c>
 100c9d0:	84000044 	addi	r16,r16,1
 100c9d4:	0081ffc4 	movi	r2,2047
 100c9d8:	8080ba26 	beq	r16,r2,100ccc4 <__adddf3+0x39c>
 100c9dc:	00bfe034 	movhi	r2,65408
 100c9e0:	10bfffc4 	addi	r2,r2,-1
 100c9e4:	4090703a 	and	r8,r8,r2
 100c9e8:	4004977a 	slli	r2,r8,29
 100c9ec:	4010927a 	slli	r8,r8,9
 100c9f0:	8822d0fa 	srli	r17,r17,3
 100c9f4:	8401ffcc 	andi	r16,r16,2047
 100c9f8:	4010d33a 	srli	r8,r8,12
 100c9fc:	9007883a 	mov	r3,r18
 100ca00:	1444b03a 	or	r2,r2,r17
 100ca04:	8401ffcc 	andi	r16,r16,2047
 100ca08:	8020953a 	slli	r16,r16,20
 100ca0c:	18c03fcc 	andi	r3,r3,255
 100ca10:	01000434 	movhi	r4,16
 100ca14:	213fffc4 	addi	r4,r4,-1
 100ca18:	180697fa 	slli	r3,r3,31
 100ca1c:	4110703a 	and	r8,r8,r4
 100ca20:	4410b03a 	or	r8,r8,r16
 100ca24:	40c6b03a 	or	r3,r8,r3
 100ca28:	dfc00417 	ldw	ra,16(sp)
 100ca2c:	dcc00317 	ldw	r19,12(sp)
 100ca30:	dc800217 	ldw	r18,8(sp)
 100ca34:	dc400117 	ldw	r17,4(sp)
 100ca38:	dc000017 	ldw	r16,0(sp)
 100ca3c:	dec00504 	addi	sp,sp,20
 100ca40:	f800283a 	ret
 100ca44:	0081ffc4 	movi	r2,2047
 100ca48:	80bfd626 	beq	r16,r2,100c9a4 <__alt_data_end+0xff80c9a4>
 100ca4c:	4a402034 	orhi	r9,r9,128
 100ca50:	00800e04 	movi	r2,56
 100ca54:	10c09f16 	blt	r2,r3,100ccd4 <__adddf3+0x3ac>
 100ca58:	008007c4 	movi	r2,31
 100ca5c:	10c0c216 	blt	r2,r3,100cd68 <__adddf3+0x440>
 100ca60:	00800804 	movi	r2,32
 100ca64:	10c5c83a 	sub	r2,r2,r3
 100ca68:	488a983a 	sll	r5,r9,r2
 100ca6c:	30c8d83a 	srl	r4,r6,r3
 100ca70:	3084983a 	sll	r2,r6,r2
 100ca74:	48c6d83a 	srl	r3,r9,r3
 100ca78:	290cb03a 	or	r6,r5,r4
 100ca7c:	1004c03a 	cmpne	r2,r2,zero
 100ca80:	308cb03a 	or	r6,r6,r2
 100ca84:	898dc83a 	sub	r6,r17,r6
 100ca88:	89a3803a 	cmpltu	r17,r17,r6
 100ca8c:	40d1c83a 	sub	r8,r8,r3
 100ca90:	4451c83a 	sub	r8,r8,r17
 100ca94:	3023883a 	mov	r17,r6
 100ca98:	4080202c 	andhi	r2,r8,128
 100ca9c:	10002326 	beq	r2,zero,100cb2c <__adddf3+0x204>
 100caa0:	04c02034 	movhi	r19,128
 100caa4:	9cffffc4 	addi	r19,r19,-1
 100caa8:	44e6703a 	and	r19,r8,r19
 100caac:	98007626 	beq	r19,zero,100cc88 <__adddf3+0x360>
 100cab0:	9809883a 	mov	r4,r19
 100cab4:	100f1680 	call	100f168 <__clzsi2>
 100cab8:	10fffe04 	addi	r3,r2,-8
 100cabc:	010007c4 	movi	r4,31
 100cac0:	20c07716 	blt	r4,r3,100cca0 <__adddf3+0x378>
 100cac4:	00800804 	movi	r2,32
 100cac8:	10c5c83a 	sub	r2,r2,r3
 100cacc:	8884d83a 	srl	r2,r17,r2
 100cad0:	98d0983a 	sll	r8,r19,r3
 100cad4:	88e2983a 	sll	r17,r17,r3
 100cad8:	1204b03a 	or	r2,r2,r8
 100cadc:	1c007416 	blt	r3,r16,100ccb0 <__adddf3+0x388>
 100cae0:	1c21c83a 	sub	r16,r3,r16
 100cae4:	82000044 	addi	r8,r16,1
 100cae8:	00c007c4 	movi	r3,31
 100caec:	1a009116 	blt	r3,r8,100cd34 <__adddf3+0x40c>
 100caf0:	00c00804 	movi	r3,32
 100caf4:	1a07c83a 	sub	r3,r3,r8
 100caf8:	8a08d83a 	srl	r4,r17,r8
 100cafc:	88e2983a 	sll	r17,r17,r3
 100cb00:	10c6983a 	sll	r3,r2,r3
 100cb04:	1210d83a 	srl	r8,r2,r8
 100cb08:	8804c03a 	cmpne	r2,r17,zero
 100cb0c:	1906b03a 	or	r3,r3,r4
 100cb10:	18a2b03a 	or	r17,r3,r2
 100cb14:	0021883a 	mov	r16,zero
 100cb18:	003fa206 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100cb1c:	1890b03a 	or	r8,r3,r2
 100cb20:	40017d26 	beq	r8,zero,100d118 <__adddf3+0x7f0>
 100cb24:	1011883a 	mov	r8,r2
 100cb28:	1823883a 	mov	r17,r3
 100cb2c:	888001cc 	andi	r2,r17,7
 100cb30:	103f9e1e 	bne	r2,zero,100c9ac <__alt_data_end+0xff80c9ac>
 100cb34:	4004977a 	slli	r2,r8,29
 100cb38:	8822d0fa 	srli	r17,r17,3
 100cb3c:	4010d0fa 	srli	r8,r8,3
 100cb40:	9007883a 	mov	r3,r18
 100cb44:	1444b03a 	or	r2,r2,r17
 100cb48:	0101ffc4 	movi	r4,2047
 100cb4c:	81002426 	beq	r16,r4,100cbe0 <__adddf3+0x2b8>
 100cb50:	8120703a 	and	r16,r16,r4
 100cb54:	01000434 	movhi	r4,16
 100cb58:	213fffc4 	addi	r4,r4,-1
 100cb5c:	4110703a 	and	r8,r8,r4
 100cb60:	003fa806 	br	100ca04 <__alt_data_end+0xff80ca04>
 100cb64:	8089c83a 	sub	r4,r16,r2
 100cb68:	01005e0e 	bge	zero,r4,100cce4 <__adddf3+0x3bc>
 100cb6c:	10002b26 	beq	r2,zero,100cc1c <__adddf3+0x2f4>
 100cb70:	0081ffc4 	movi	r2,2047
 100cb74:	80bf8b26 	beq	r16,r2,100c9a4 <__alt_data_end+0xff80c9a4>
 100cb78:	4a402034 	orhi	r9,r9,128
 100cb7c:	00800e04 	movi	r2,56
 100cb80:	1100a40e 	bge	r2,r4,100ce14 <__adddf3+0x4ec>
 100cb84:	498cb03a 	or	r6,r9,r6
 100cb88:	300ac03a 	cmpne	r5,r6,zero
 100cb8c:	0013883a 	mov	r9,zero
 100cb90:	2c4b883a 	add	r5,r5,r17
 100cb94:	2c63803a 	cmpltu	r17,r5,r17
 100cb98:	4a11883a 	add	r8,r9,r8
 100cb9c:	8a11883a 	add	r8,r17,r8
 100cba0:	2823883a 	mov	r17,r5
 100cba4:	4080202c 	andhi	r2,r8,128
 100cba8:	103fe026 	beq	r2,zero,100cb2c <__alt_data_end+0xff80cb2c>
 100cbac:	84000044 	addi	r16,r16,1
 100cbb0:	0081ffc4 	movi	r2,2047
 100cbb4:	8080d226 	beq	r16,r2,100cf00 <__adddf3+0x5d8>
 100cbb8:	00bfe034 	movhi	r2,65408
 100cbbc:	10bfffc4 	addi	r2,r2,-1
 100cbc0:	4090703a 	and	r8,r8,r2
 100cbc4:	880ad07a 	srli	r5,r17,1
 100cbc8:	400897fa 	slli	r4,r8,31
 100cbcc:	88c0004c 	andi	r3,r17,1
 100cbd0:	28e2b03a 	or	r17,r5,r3
 100cbd4:	4010d07a 	srli	r8,r8,1
 100cbd8:	2462b03a 	or	r17,r4,r17
 100cbdc:	003f7106 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100cbe0:	4088b03a 	or	r4,r8,r2
 100cbe4:	20014526 	beq	r4,zero,100d0fc <__adddf3+0x7d4>
 100cbe8:	01000434 	movhi	r4,16
 100cbec:	42000234 	orhi	r8,r8,8
 100cbf0:	213fffc4 	addi	r4,r4,-1
 100cbf4:	4110703a 	and	r8,r8,r4
 100cbf8:	003f8206 	br	100ca04 <__alt_data_end+0xff80ca04>
 100cbfc:	18ffffc4 	addi	r3,r3,-1
 100cc00:	1800491e 	bne	r3,zero,100cd28 <__adddf3+0x400>
 100cc04:	898bc83a 	sub	r5,r17,r6
 100cc08:	8963803a 	cmpltu	r17,r17,r5
 100cc0c:	4251c83a 	sub	r8,r8,r9
 100cc10:	4451c83a 	sub	r8,r8,r17
 100cc14:	2823883a 	mov	r17,r5
 100cc18:	003f9f06 	br	100ca98 <__alt_data_end+0xff80ca98>
 100cc1c:	4984b03a 	or	r2,r9,r6
 100cc20:	103f6026 	beq	r2,zero,100c9a4 <__alt_data_end+0xff80c9a4>
 100cc24:	213fffc4 	addi	r4,r4,-1
 100cc28:	2000931e 	bne	r4,zero,100ce78 <__adddf3+0x550>
 100cc2c:	898d883a 	add	r6,r17,r6
 100cc30:	3463803a 	cmpltu	r17,r6,r17
 100cc34:	4251883a 	add	r8,r8,r9
 100cc38:	8a11883a 	add	r8,r17,r8
 100cc3c:	3023883a 	mov	r17,r6
 100cc40:	003fd806 	br	100cba4 <__alt_data_end+0xff80cba4>
 100cc44:	1800541e 	bne	r3,zero,100cd98 <__adddf3+0x470>
 100cc48:	80800044 	addi	r2,r16,1
 100cc4c:	1081ffcc 	andi	r2,r2,2047
 100cc50:	00c00044 	movi	r3,1
 100cc54:	1880a00e 	bge	r3,r2,100ced8 <__adddf3+0x5b0>
 100cc58:	8989c83a 	sub	r4,r17,r6
 100cc5c:	8905803a 	cmpltu	r2,r17,r4
 100cc60:	4267c83a 	sub	r19,r8,r9
 100cc64:	98a7c83a 	sub	r19,r19,r2
 100cc68:	9880202c 	andhi	r2,r19,128
 100cc6c:	10006326 	beq	r2,zero,100cdfc <__adddf3+0x4d4>
 100cc70:	3463c83a 	sub	r17,r6,r17
 100cc74:	4a07c83a 	sub	r3,r9,r8
 100cc78:	344d803a 	cmpltu	r6,r6,r17
 100cc7c:	19a7c83a 	sub	r19,r3,r6
 100cc80:	3825883a 	mov	r18,r7
 100cc84:	983f8a1e 	bne	r19,zero,100cab0 <__alt_data_end+0xff80cab0>
 100cc88:	8809883a 	mov	r4,r17
 100cc8c:	100f1680 	call	100f168 <__clzsi2>
 100cc90:	10800804 	addi	r2,r2,32
 100cc94:	10fffe04 	addi	r3,r2,-8
 100cc98:	010007c4 	movi	r4,31
 100cc9c:	20ff890e 	bge	r4,r3,100cac4 <__alt_data_end+0xff80cac4>
 100cca0:	10bff604 	addi	r2,r2,-40
 100cca4:	8884983a 	sll	r2,r17,r2
 100cca8:	0023883a 	mov	r17,zero
 100ccac:	1c3f8c0e 	bge	r3,r16,100cae0 <__alt_data_end+0xff80cae0>
 100ccb0:	023fe034 	movhi	r8,65408
 100ccb4:	423fffc4 	addi	r8,r8,-1
 100ccb8:	80e1c83a 	sub	r16,r16,r3
 100ccbc:	1210703a 	and	r8,r2,r8
 100ccc0:	003f3806 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100ccc4:	9007883a 	mov	r3,r18
 100ccc8:	0011883a 	mov	r8,zero
 100cccc:	0005883a 	mov	r2,zero
 100ccd0:	003f4c06 	br	100ca04 <__alt_data_end+0xff80ca04>
 100ccd4:	498cb03a 	or	r6,r9,r6
 100ccd8:	300cc03a 	cmpne	r6,r6,zero
 100ccdc:	0007883a 	mov	r3,zero
 100cce0:	003f6806 	br	100ca84 <__alt_data_end+0xff80ca84>
 100cce4:	20009c1e 	bne	r4,zero,100cf58 <__adddf3+0x630>
 100cce8:	80800044 	addi	r2,r16,1
 100ccec:	1141ffcc 	andi	r5,r2,2047
 100ccf0:	01000044 	movi	r4,1
 100ccf4:	2140670e 	bge	r4,r5,100ce94 <__adddf3+0x56c>
 100ccf8:	0101ffc4 	movi	r4,2047
 100ccfc:	11007f26 	beq	r2,r4,100cefc <__adddf3+0x5d4>
 100cd00:	898d883a 	add	r6,r17,r6
 100cd04:	4247883a 	add	r3,r8,r9
 100cd08:	3451803a 	cmpltu	r8,r6,r17
 100cd0c:	40d1883a 	add	r8,r8,r3
 100cd10:	402297fa 	slli	r17,r8,31
 100cd14:	300cd07a 	srli	r6,r6,1
 100cd18:	4010d07a 	srli	r8,r8,1
 100cd1c:	1021883a 	mov	r16,r2
 100cd20:	89a2b03a 	or	r17,r17,r6
 100cd24:	003f1f06 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100cd28:	0081ffc4 	movi	r2,2047
 100cd2c:	80bf481e 	bne	r16,r2,100ca50 <__alt_data_end+0xff80ca50>
 100cd30:	003f1c06 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100cd34:	843ff844 	addi	r16,r16,-31
 100cd38:	01000804 	movi	r4,32
 100cd3c:	1406d83a 	srl	r3,r2,r16
 100cd40:	41005026 	beq	r8,r4,100ce84 <__adddf3+0x55c>
 100cd44:	01001004 	movi	r4,64
 100cd48:	2211c83a 	sub	r8,r4,r8
 100cd4c:	1204983a 	sll	r2,r2,r8
 100cd50:	88a2b03a 	or	r17,r17,r2
 100cd54:	8822c03a 	cmpne	r17,r17,zero
 100cd58:	1c62b03a 	or	r17,r3,r17
 100cd5c:	0011883a 	mov	r8,zero
 100cd60:	0021883a 	mov	r16,zero
 100cd64:	003f7106 	br	100cb2c <__alt_data_end+0xff80cb2c>
 100cd68:	193ff804 	addi	r4,r3,-32
 100cd6c:	00800804 	movi	r2,32
 100cd70:	4908d83a 	srl	r4,r9,r4
 100cd74:	18804526 	beq	r3,r2,100ce8c <__adddf3+0x564>
 100cd78:	00801004 	movi	r2,64
 100cd7c:	10c5c83a 	sub	r2,r2,r3
 100cd80:	4886983a 	sll	r3,r9,r2
 100cd84:	198cb03a 	or	r6,r3,r6
 100cd88:	300cc03a 	cmpne	r6,r6,zero
 100cd8c:	218cb03a 	or	r6,r4,r6
 100cd90:	0007883a 	mov	r3,zero
 100cd94:	003f3b06 	br	100ca84 <__alt_data_end+0xff80ca84>
 100cd98:	80002a26 	beq	r16,zero,100ce44 <__adddf3+0x51c>
 100cd9c:	0101ffc4 	movi	r4,2047
 100cda0:	11006826 	beq	r2,r4,100cf44 <__adddf3+0x61c>
 100cda4:	00c7c83a 	sub	r3,zero,r3
 100cda8:	42002034 	orhi	r8,r8,128
 100cdac:	01000e04 	movi	r4,56
 100cdb0:	20c07c16 	blt	r4,r3,100cfa4 <__adddf3+0x67c>
 100cdb4:	010007c4 	movi	r4,31
 100cdb8:	20c0da16 	blt	r4,r3,100d124 <__adddf3+0x7fc>
 100cdbc:	01000804 	movi	r4,32
 100cdc0:	20c9c83a 	sub	r4,r4,r3
 100cdc4:	4114983a 	sll	r10,r8,r4
 100cdc8:	88cad83a 	srl	r5,r17,r3
 100cdcc:	8908983a 	sll	r4,r17,r4
 100cdd0:	40c6d83a 	srl	r3,r8,r3
 100cdd4:	5162b03a 	or	r17,r10,r5
 100cdd8:	2008c03a 	cmpne	r4,r4,zero
 100cddc:	8922b03a 	or	r17,r17,r4
 100cde0:	3463c83a 	sub	r17,r6,r17
 100cde4:	48c7c83a 	sub	r3,r9,r3
 100cde8:	344d803a 	cmpltu	r6,r6,r17
 100cdec:	1991c83a 	sub	r8,r3,r6
 100cdf0:	1021883a 	mov	r16,r2
 100cdf4:	3825883a 	mov	r18,r7
 100cdf8:	003f2706 	br	100ca98 <__alt_data_end+0xff80ca98>
 100cdfc:	24d0b03a 	or	r8,r4,r19
 100ce00:	40001b1e 	bne	r8,zero,100ce70 <__adddf3+0x548>
 100ce04:	0005883a 	mov	r2,zero
 100ce08:	0007883a 	mov	r3,zero
 100ce0c:	0021883a 	mov	r16,zero
 100ce10:	003f4d06 	br	100cb48 <__alt_data_end+0xff80cb48>
 100ce14:	008007c4 	movi	r2,31
 100ce18:	11003c16 	blt	r2,r4,100cf0c <__adddf3+0x5e4>
 100ce1c:	00800804 	movi	r2,32
 100ce20:	1105c83a 	sub	r2,r2,r4
 100ce24:	488e983a 	sll	r7,r9,r2
 100ce28:	310ad83a 	srl	r5,r6,r4
 100ce2c:	3084983a 	sll	r2,r6,r2
 100ce30:	4912d83a 	srl	r9,r9,r4
 100ce34:	394ab03a 	or	r5,r7,r5
 100ce38:	1004c03a 	cmpne	r2,r2,zero
 100ce3c:	288ab03a 	or	r5,r5,r2
 100ce40:	003f5306 	br	100cb90 <__alt_data_end+0xff80cb90>
 100ce44:	4448b03a 	or	r4,r8,r17
 100ce48:	20003e26 	beq	r4,zero,100cf44 <__adddf3+0x61c>
 100ce4c:	00c6303a 	nor	r3,zero,r3
 100ce50:	18003a1e 	bne	r3,zero,100cf3c <__adddf3+0x614>
 100ce54:	3463c83a 	sub	r17,r6,r17
 100ce58:	4a07c83a 	sub	r3,r9,r8
 100ce5c:	344d803a 	cmpltu	r6,r6,r17
 100ce60:	1991c83a 	sub	r8,r3,r6
 100ce64:	1021883a 	mov	r16,r2
 100ce68:	3825883a 	mov	r18,r7
 100ce6c:	003f0a06 	br	100ca98 <__alt_data_end+0xff80ca98>
 100ce70:	2023883a 	mov	r17,r4
 100ce74:	003f0d06 	br	100caac <__alt_data_end+0xff80caac>
 100ce78:	0081ffc4 	movi	r2,2047
 100ce7c:	80bf3f1e 	bne	r16,r2,100cb7c <__alt_data_end+0xff80cb7c>
 100ce80:	003ec806 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100ce84:	0005883a 	mov	r2,zero
 100ce88:	003fb106 	br	100cd50 <__alt_data_end+0xff80cd50>
 100ce8c:	0007883a 	mov	r3,zero
 100ce90:	003fbc06 	br	100cd84 <__alt_data_end+0xff80cd84>
 100ce94:	4444b03a 	or	r2,r8,r17
 100ce98:	8000871e 	bne	r16,zero,100d0b8 <__adddf3+0x790>
 100ce9c:	1000ba26 	beq	r2,zero,100d188 <__adddf3+0x860>
 100cea0:	4984b03a 	or	r2,r9,r6
 100cea4:	103ebf26 	beq	r2,zero,100c9a4 <__alt_data_end+0xff80c9a4>
 100cea8:	8985883a 	add	r2,r17,r6
 100ceac:	4247883a 	add	r3,r8,r9
 100ceb0:	1451803a 	cmpltu	r8,r2,r17
 100ceb4:	40d1883a 	add	r8,r8,r3
 100ceb8:	40c0202c 	andhi	r3,r8,128
 100cebc:	1023883a 	mov	r17,r2
 100cec0:	183f1a26 	beq	r3,zero,100cb2c <__alt_data_end+0xff80cb2c>
 100cec4:	00bfe034 	movhi	r2,65408
 100cec8:	10bfffc4 	addi	r2,r2,-1
 100cecc:	2021883a 	mov	r16,r4
 100ced0:	4090703a 	and	r8,r8,r2
 100ced4:	003eb306 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100ced8:	4444b03a 	or	r2,r8,r17
 100cedc:	8000291e 	bne	r16,zero,100cf84 <__adddf3+0x65c>
 100cee0:	10004b1e 	bne	r2,zero,100d010 <__adddf3+0x6e8>
 100cee4:	4990b03a 	or	r8,r9,r6
 100cee8:	40008b26 	beq	r8,zero,100d118 <__adddf3+0x7f0>
 100ceec:	4811883a 	mov	r8,r9
 100cef0:	3023883a 	mov	r17,r6
 100cef4:	3825883a 	mov	r18,r7
 100cef8:	003eaa06 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100cefc:	1021883a 	mov	r16,r2
 100cf00:	0011883a 	mov	r8,zero
 100cf04:	0005883a 	mov	r2,zero
 100cf08:	003f0f06 	br	100cb48 <__alt_data_end+0xff80cb48>
 100cf0c:	217ff804 	addi	r5,r4,-32
 100cf10:	00800804 	movi	r2,32
 100cf14:	494ad83a 	srl	r5,r9,r5
 100cf18:	20807d26 	beq	r4,r2,100d110 <__adddf3+0x7e8>
 100cf1c:	00801004 	movi	r2,64
 100cf20:	1109c83a 	sub	r4,r2,r4
 100cf24:	4912983a 	sll	r9,r9,r4
 100cf28:	498cb03a 	or	r6,r9,r6
 100cf2c:	300cc03a 	cmpne	r6,r6,zero
 100cf30:	298ab03a 	or	r5,r5,r6
 100cf34:	0013883a 	mov	r9,zero
 100cf38:	003f1506 	br	100cb90 <__alt_data_end+0xff80cb90>
 100cf3c:	0101ffc4 	movi	r4,2047
 100cf40:	113f9a1e 	bne	r2,r4,100cdac <__alt_data_end+0xff80cdac>
 100cf44:	4811883a 	mov	r8,r9
 100cf48:	3023883a 	mov	r17,r6
 100cf4c:	1021883a 	mov	r16,r2
 100cf50:	3825883a 	mov	r18,r7
 100cf54:	003e9306 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100cf58:	8000161e 	bne	r16,zero,100cfb4 <__adddf3+0x68c>
 100cf5c:	444ab03a 	or	r5,r8,r17
 100cf60:	28005126 	beq	r5,zero,100d0a8 <__adddf3+0x780>
 100cf64:	0108303a 	nor	r4,zero,r4
 100cf68:	20004d1e 	bne	r4,zero,100d0a0 <__adddf3+0x778>
 100cf6c:	89a3883a 	add	r17,r17,r6
 100cf70:	4253883a 	add	r9,r8,r9
 100cf74:	898d803a 	cmpltu	r6,r17,r6
 100cf78:	3251883a 	add	r8,r6,r9
 100cf7c:	1021883a 	mov	r16,r2
 100cf80:	003f0806 	br	100cba4 <__alt_data_end+0xff80cba4>
 100cf84:	1000301e 	bne	r2,zero,100d048 <__adddf3+0x720>
 100cf88:	4984b03a 	or	r2,r9,r6
 100cf8c:	10007126 	beq	r2,zero,100d154 <__adddf3+0x82c>
 100cf90:	4811883a 	mov	r8,r9
 100cf94:	3023883a 	mov	r17,r6
 100cf98:	3825883a 	mov	r18,r7
 100cf9c:	0401ffc4 	movi	r16,2047
 100cfa0:	003e8006 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100cfa4:	4462b03a 	or	r17,r8,r17
 100cfa8:	8822c03a 	cmpne	r17,r17,zero
 100cfac:	0007883a 	mov	r3,zero
 100cfb0:	003f8b06 	br	100cde0 <__alt_data_end+0xff80cde0>
 100cfb4:	0141ffc4 	movi	r5,2047
 100cfb8:	11403b26 	beq	r2,r5,100d0a8 <__adddf3+0x780>
 100cfbc:	0109c83a 	sub	r4,zero,r4
 100cfc0:	42002034 	orhi	r8,r8,128
 100cfc4:	01400e04 	movi	r5,56
 100cfc8:	29006716 	blt	r5,r4,100d168 <__adddf3+0x840>
 100cfcc:	014007c4 	movi	r5,31
 100cfd0:	29007016 	blt	r5,r4,100d194 <__adddf3+0x86c>
 100cfd4:	01400804 	movi	r5,32
 100cfd8:	290bc83a 	sub	r5,r5,r4
 100cfdc:	4154983a 	sll	r10,r8,r5
 100cfe0:	890ed83a 	srl	r7,r17,r4
 100cfe4:	894a983a 	sll	r5,r17,r5
 100cfe8:	4108d83a 	srl	r4,r8,r4
 100cfec:	51e2b03a 	or	r17,r10,r7
 100cff0:	280ac03a 	cmpne	r5,r5,zero
 100cff4:	8962b03a 	or	r17,r17,r5
 100cff8:	89a3883a 	add	r17,r17,r6
 100cffc:	2253883a 	add	r9,r4,r9
 100d000:	898d803a 	cmpltu	r6,r17,r6
 100d004:	3251883a 	add	r8,r6,r9
 100d008:	1021883a 	mov	r16,r2
 100d00c:	003ee506 	br	100cba4 <__alt_data_end+0xff80cba4>
 100d010:	4984b03a 	or	r2,r9,r6
 100d014:	103e6326 	beq	r2,zero,100c9a4 <__alt_data_end+0xff80c9a4>
 100d018:	8987c83a 	sub	r3,r17,r6
 100d01c:	88c9803a 	cmpltu	r4,r17,r3
 100d020:	4245c83a 	sub	r2,r8,r9
 100d024:	1105c83a 	sub	r2,r2,r4
 100d028:	1100202c 	andhi	r4,r2,128
 100d02c:	203ebb26 	beq	r4,zero,100cb1c <__alt_data_end+0xff80cb1c>
 100d030:	3463c83a 	sub	r17,r6,r17
 100d034:	4a07c83a 	sub	r3,r9,r8
 100d038:	344d803a 	cmpltu	r6,r6,r17
 100d03c:	1991c83a 	sub	r8,r3,r6
 100d040:	3825883a 	mov	r18,r7
 100d044:	003e5706 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100d048:	4984b03a 	or	r2,r9,r6
 100d04c:	10002e26 	beq	r2,zero,100d108 <__adddf3+0x7e0>
 100d050:	4004d0fa 	srli	r2,r8,3
 100d054:	8822d0fa 	srli	r17,r17,3
 100d058:	4010977a 	slli	r8,r8,29
 100d05c:	10c0022c 	andhi	r3,r2,8
 100d060:	4462b03a 	or	r17,r8,r17
 100d064:	18000826 	beq	r3,zero,100d088 <__adddf3+0x760>
 100d068:	4808d0fa 	srli	r4,r9,3
 100d06c:	20c0022c 	andhi	r3,r4,8
 100d070:	1800051e 	bne	r3,zero,100d088 <__adddf3+0x760>
 100d074:	300cd0fa 	srli	r6,r6,3
 100d078:	4806977a 	slli	r3,r9,29
 100d07c:	2005883a 	mov	r2,r4
 100d080:	3825883a 	mov	r18,r7
 100d084:	19a2b03a 	or	r17,r3,r6
 100d088:	8810d77a 	srli	r8,r17,29
 100d08c:	100490fa 	slli	r2,r2,3
 100d090:	882290fa 	slli	r17,r17,3
 100d094:	0401ffc4 	movi	r16,2047
 100d098:	4090b03a 	or	r8,r8,r2
 100d09c:	003e4106 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100d0a0:	0141ffc4 	movi	r5,2047
 100d0a4:	117fc71e 	bne	r2,r5,100cfc4 <__alt_data_end+0xff80cfc4>
 100d0a8:	4811883a 	mov	r8,r9
 100d0ac:	3023883a 	mov	r17,r6
 100d0b0:	1021883a 	mov	r16,r2
 100d0b4:	003e3b06 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100d0b8:	10002f26 	beq	r2,zero,100d178 <__adddf3+0x850>
 100d0bc:	4984b03a 	or	r2,r9,r6
 100d0c0:	10001126 	beq	r2,zero,100d108 <__adddf3+0x7e0>
 100d0c4:	4004d0fa 	srli	r2,r8,3
 100d0c8:	8822d0fa 	srli	r17,r17,3
 100d0cc:	4010977a 	slli	r8,r8,29
 100d0d0:	10c0022c 	andhi	r3,r2,8
 100d0d4:	4462b03a 	or	r17,r8,r17
 100d0d8:	183feb26 	beq	r3,zero,100d088 <__alt_data_end+0xff80d088>
 100d0dc:	4808d0fa 	srli	r4,r9,3
 100d0e0:	20c0022c 	andhi	r3,r4,8
 100d0e4:	183fe81e 	bne	r3,zero,100d088 <__alt_data_end+0xff80d088>
 100d0e8:	300cd0fa 	srli	r6,r6,3
 100d0ec:	4806977a 	slli	r3,r9,29
 100d0f0:	2005883a 	mov	r2,r4
 100d0f4:	19a2b03a 	or	r17,r3,r6
 100d0f8:	003fe306 	br	100d088 <__alt_data_end+0xff80d088>
 100d0fc:	0011883a 	mov	r8,zero
 100d100:	0005883a 	mov	r2,zero
 100d104:	003e3f06 	br	100ca04 <__alt_data_end+0xff80ca04>
 100d108:	0401ffc4 	movi	r16,2047
 100d10c:	003e2506 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100d110:	0013883a 	mov	r9,zero
 100d114:	003f8406 	br	100cf28 <__alt_data_end+0xff80cf28>
 100d118:	0005883a 	mov	r2,zero
 100d11c:	0007883a 	mov	r3,zero
 100d120:	003e8906 	br	100cb48 <__alt_data_end+0xff80cb48>
 100d124:	197ff804 	addi	r5,r3,-32
 100d128:	01000804 	movi	r4,32
 100d12c:	414ad83a 	srl	r5,r8,r5
 100d130:	19002426 	beq	r3,r4,100d1c4 <__adddf3+0x89c>
 100d134:	01001004 	movi	r4,64
 100d138:	20c7c83a 	sub	r3,r4,r3
 100d13c:	40c6983a 	sll	r3,r8,r3
 100d140:	1c46b03a 	or	r3,r3,r17
 100d144:	1806c03a 	cmpne	r3,r3,zero
 100d148:	28e2b03a 	or	r17,r5,r3
 100d14c:	0007883a 	mov	r3,zero
 100d150:	003f2306 	br	100cde0 <__alt_data_end+0xff80cde0>
 100d154:	0007883a 	mov	r3,zero
 100d158:	5811883a 	mov	r8,r11
 100d15c:	00bfffc4 	movi	r2,-1
 100d160:	0401ffc4 	movi	r16,2047
 100d164:	003e7806 	br	100cb48 <__alt_data_end+0xff80cb48>
 100d168:	4462b03a 	or	r17,r8,r17
 100d16c:	8822c03a 	cmpne	r17,r17,zero
 100d170:	0009883a 	mov	r4,zero
 100d174:	003fa006 	br	100cff8 <__alt_data_end+0xff80cff8>
 100d178:	4811883a 	mov	r8,r9
 100d17c:	3023883a 	mov	r17,r6
 100d180:	0401ffc4 	movi	r16,2047
 100d184:	003e0706 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100d188:	4811883a 	mov	r8,r9
 100d18c:	3023883a 	mov	r17,r6
 100d190:	003e0406 	br	100c9a4 <__alt_data_end+0xff80c9a4>
 100d194:	21fff804 	addi	r7,r4,-32
 100d198:	01400804 	movi	r5,32
 100d19c:	41ced83a 	srl	r7,r8,r7
 100d1a0:	21400a26 	beq	r4,r5,100d1cc <__adddf3+0x8a4>
 100d1a4:	01401004 	movi	r5,64
 100d1a8:	2909c83a 	sub	r4,r5,r4
 100d1ac:	4108983a 	sll	r4,r8,r4
 100d1b0:	2448b03a 	or	r4,r4,r17
 100d1b4:	2008c03a 	cmpne	r4,r4,zero
 100d1b8:	3922b03a 	or	r17,r7,r4
 100d1bc:	0009883a 	mov	r4,zero
 100d1c0:	003f8d06 	br	100cff8 <__alt_data_end+0xff80cff8>
 100d1c4:	0007883a 	mov	r3,zero
 100d1c8:	003fdd06 	br	100d140 <__alt_data_end+0xff80d140>
 100d1cc:	0009883a 	mov	r4,zero
 100d1d0:	003ff706 	br	100d1b0 <__alt_data_end+0xff80d1b0>

0100d1d4 <__divdf3>:
 100d1d4:	defff004 	addi	sp,sp,-64
 100d1d8:	dc800815 	stw	r18,32(sp)
 100d1dc:	2824d53a 	srli	r18,r5,20
 100d1e0:	dd800c15 	stw	r22,48(sp)
 100d1e4:	282cd7fa 	srli	r22,r5,31
 100d1e8:	dc000615 	stw	r16,24(sp)
 100d1ec:	04000434 	movhi	r16,16
 100d1f0:	843fffc4 	addi	r16,r16,-1
 100d1f4:	dfc00f15 	stw	ra,60(sp)
 100d1f8:	df000e15 	stw	fp,56(sp)
 100d1fc:	ddc00d15 	stw	r23,52(sp)
 100d200:	dd400b15 	stw	r21,44(sp)
 100d204:	dd000a15 	stw	r20,40(sp)
 100d208:	dcc00915 	stw	r19,36(sp)
 100d20c:	dc400715 	stw	r17,28(sp)
 100d210:	9481ffcc 	andi	r18,r18,2047
 100d214:	2c20703a 	and	r16,r5,r16
 100d218:	b2003fcc 	andi	r8,r22,255
 100d21c:	90006126 	beq	r18,zero,100d3a4 <__divdf3+0x1d0>
 100d220:	0081ffc4 	movi	r2,2047
 100d224:	202b883a 	mov	r21,r4
 100d228:	90803726 	beq	r18,r2,100d308 <__divdf3+0x134>
 100d22c:	80800434 	orhi	r2,r16,16
 100d230:	100490fa 	slli	r2,r2,3
 100d234:	2020d77a 	srli	r16,r4,29
 100d238:	202a90fa 	slli	r21,r4,3
 100d23c:	94bf0044 	addi	r18,r18,-1023
 100d240:	80a0b03a 	or	r16,r16,r2
 100d244:	0013883a 	mov	r9,zero
 100d248:	000b883a 	mov	r5,zero
 100d24c:	3806d53a 	srli	r3,r7,20
 100d250:	382ed7fa 	srli	r23,r7,31
 100d254:	04400434 	movhi	r17,16
 100d258:	8c7fffc4 	addi	r17,r17,-1
 100d25c:	18c1ffcc 	andi	r3,r3,2047
 100d260:	3029883a 	mov	r20,r6
 100d264:	3c62703a 	and	r17,r7,r17
 100d268:	bf003fcc 	andi	fp,r23,255
 100d26c:	18006e26 	beq	r3,zero,100d428 <__divdf3+0x254>
 100d270:	0081ffc4 	movi	r2,2047
 100d274:	18806626 	beq	r3,r2,100d410 <__divdf3+0x23c>
 100d278:	88800434 	orhi	r2,r17,16
 100d27c:	100490fa 	slli	r2,r2,3
 100d280:	3022d77a 	srli	r17,r6,29
 100d284:	302890fa 	slli	r20,r6,3
 100d288:	18ff0044 	addi	r3,r3,-1023
 100d28c:	88a2b03a 	or	r17,r17,r2
 100d290:	000f883a 	mov	r7,zero
 100d294:	b5e6f03a 	xor	r19,r22,r23
 100d298:	3a4cb03a 	or	r6,r7,r9
 100d29c:	008003c4 	movi	r2,15
 100d2a0:	9809883a 	mov	r4,r19
 100d2a4:	90c7c83a 	sub	r3,r18,r3
 100d2a8:	9cc03fcc 	andi	r19,r19,255
 100d2ac:	11809636 	bltu	r2,r6,100d508 <__divdf3+0x334>
 100d2b0:	300c90ba 	slli	r6,r6,2
 100d2b4:	00804074 	movhi	r2,257
 100d2b8:	10b4b204 	addi	r2,r2,-11576
 100d2bc:	308d883a 	add	r6,r6,r2
 100d2c0:	30800017 	ldw	r2,0(r6)
 100d2c4:	1000683a 	jmp	r2
 100d2c8:	0100d508 	cmpgei	r4,zero,852
 100d2cc:	0100d340 	call	100d34 <__alt_mem_onchip_memory2_0+0x100d34>
 100d2d0:	0100d4f8 	rdprs	r4,zero,851
 100d2d4:	0100d334 	movhi	r4,844
 100d2d8:	0100d4f8 	rdprs	r4,zero,851
 100d2dc:	0100d4cc 	andi	r4,zero,851
 100d2e0:	0100d4f8 	rdprs	r4,zero,851
 100d2e4:	0100d334 	movhi	r4,844
 100d2e8:	0100d340 	call	100d34 <__alt_mem_onchip_memory2_0+0x100d34>
 100d2ec:	0100d340 	call	100d34 <__alt_mem_onchip_memory2_0+0x100d34>
 100d2f0:	0100d4cc 	andi	r4,zero,851
 100d2f4:	0100d334 	movhi	r4,844
 100d2f8:	0100d324 	muli	r4,zero,844
 100d2fc:	0100d324 	muli	r4,zero,844
 100d300:	0100d324 	muli	r4,zero,844
 100d304:	0100d890 	cmplti	r4,zero,866
 100d308:	2404b03a 	or	r2,r4,r16
 100d30c:	10006c1e 	bne	r2,zero,100d4c0 <__divdf3+0x2ec>
 100d310:	02400204 	movi	r9,8
 100d314:	0021883a 	mov	r16,zero
 100d318:	002b883a 	mov	r21,zero
 100d31c:	01400084 	movi	r5,2
 100d320:	003fca06 	br	100d24c <__alt_data_end+0xff80d24c>
 100d324:	8023883a 	mov	r17,r16
 100d328:	a829883a 	mov	r20,r21
 100d32c:	4039883a 	mov	fp,r8
 100d330:	280f883a 	mov	r7,r5
 100d334:	00800084 	movi	r2,2
 100d338:	3881601e 	bne	r7,r2,100d8bc <__divdf3+0x6e8>
 100d33c:	e027883a 	mov	r19,fp
 100d340:	9900004c 	andi	r4,r19,1
 100d344:	0081ffc4 	movi	r2,2047
 100d348:	0021883a 	mov	r16,zero
 100d34c:	002b883a 	mov	r21,zero
 100d350:	1004953a 	slli	r2,r2,20
 100d354:	20c03fcc 	andi	r3,r4,255
 100d358:	01400434 	movhi	r5,16
 100d35c:	297fffc4 	addi	r5,r5,-1
 100d360:	180697fa 	slli	r3,r3,31
 100d364:	8160703a 	and	r16,r16,r5
 100d368:	80a0b03a 	or	r16,r16,r2
 100d36c:	80c6b03a 	or	r3,r16,r3
 100d370:	a805883a 	mov	r2,r21
 100d374:	dfc00f17 	ldw	ra,60(sp)
 100d378:	df000e17 	ldw	fp,56(sp)
 100d37c:	ddc00d17 	ldw	r23,52(sp)
 100d380:	dd800c17 	ldw	r22,48(sp)
 100d384:	dd400b17 	ldw	r21,44(sp)
 100d388:	dd000a17 	ldw	r20,40(sp)
 100d38c:	dcc00917 	ldw	r19,36(sp)
 100d390:	dc800817 	ldw	r18,32(sp)
 100d394:	dc400717 	ldw	r17,28(sp)
 100d398:	dc000617 	ldw	r16,24(sp)
 100d39c:	dec01004 	addi	sp,sp,64
 100d3a0:	f800283a 	ret
 100d3a4:	2404b03a 	or	r2,r4,r16
 100d3a8:	2023883a 	mov	r17,r4
 100d3ac:	10003f26 	beq	r2,zero,100d4ac <__divdf3+0x2d8>
 100d3b0:	80015e26 	beq	r16,zero,100d92c <__divdf3+0x758>
 100d3b4:	8009883a 	mov	r4,r16
 100d3b8:	d9800215 	stw	r6,8(sp)
 100d3bc:	d9c00515 	stw	r7,20(sp)
 100d3c0:	da000415 	stw	r8,16(sp)
 100d3c4:	100f1680 	call	100f168 <__clzsi2>
 100d3c8:	d9800217 	ldw	r6,8(sp)
 100d3cc:	d9c00517 	ldw	r7,20(sp)
 100d3d0:	da000417 	ldw	r8,16(sp)
 100d3d4:	113ffd44 	addi	r4,r2,-11
 100d3d8:	00c00704 	movi	r3,28
 100d3dc:	19014f16 	blt	r3,r4,100d91c <__divdf3+0x748>
 100d3e0:	00c00744 	movi	r3,29
 100d3e4:	157ffe04 	addi	r21,r2,-8
 100d3e8:	1907c83a 	sub	r3,r3,r4
 100d3ec:	8560983a 	sll	r16,r16,r21
 100d3f0:	88c6d83a 	srl	r3,r17,r3
 100d3f4:	8d6a983a 	sll	r21,r17,r21
 100d3f8:	1c20b03a 	or	r16,r3,r16
 100d3fc:	1080fcc4 	addi	r2,r2,1011
 100d400:	00a5c83a 	sub	r18,zero,r2
 100d404:	0013883a 	mov	r9,zero
 100d408:	000b883a 	mov	r5,zero
 100d40c:	003f8f06 	br	100d24c <__alt_data_end+0xff80d24c>
 100d410:	3444b03a 	or	r2,r6,r17
 100d414:	1000231e 	bne	r2,zero,100d4a4 <__divdf3+0x2d0>
 100d418:	0023883a 	mov	r17,zero
 100d41c:	0029883a 	mov	r20,zero
 100d420:	01c00084 	movi	r7,2
 100d424:	003f9b06 	br	100d294 <__alt_data_end+0xff80d294>
 100d428:	3444b03a 	or	r2,r6,r17
 100d42c:	10001926 	beq	r2,zero,100d494 <__divdf3+0x2c0>
 100d430:	88014b26 	beq	r17,zero,100d960 <__divdf3+0x78c>
 100d434:	8809883a 	mov	r4,r17
 100d438:	d9400115 	stw	r5,4(sp)
 100d43c:	d9800215 	stw	r6,8(sp)
 100d440:	da000415 	stw	r8,16(sp)
 100d444:	da400315 	stw	r9,12(sp)
 100d448:	100f1680 	call	100f168 <__clzsi2>
 100d44c:	d9400117 	ldw	r5,4(sp)
 100d450:	d9800217 	ldw	r6,8(sp)
 100d454:	da000417 	ldw	r8,16(sp)
 100d458:	da400317 	ldw	r9,12(sp)
 100d45c:	113ffd44 	addi	r4,r2,-11
 100d460:	00c00704 	movi	r3,28
 100d464:	19013a16 	blt	r3,r4,100d950 <__divdf3+0x77c>
 100d468:	00c00744 	movi	r3,29
 100d46c:	153ffe04 	addi	r20,r2,-8
 100d470:	1907c83a 	sub	r3,r3,r4
 100d474:	8d22983a 	sll	r17,r17,r20
 100d478:	30c6d83a 	srl	r3,r6,r3
 100d47c:	3528983a 	sll	r20,r6,r20
 100d480:	1c62b03a 	or	r17,r3,r17
 100d484:	1080fcc4 	addi	r2,r2,1011
 100d488:	0087c83a 	sub	r3,zero,r2
 100d48c:	000f883a 	mov	r7,zero
 100d490:	003f8006 	br	100d294 <__alt_data_end+0xff80d294>
 100d494:	0023883a 	mov	r17,zero
 100d498:	0029883a 	mov	r20,zero
 100d49c:	01c00044 	movi	r7,1
 100d4a0:	003f7c06 	br	100d294 <__alt_data_end+0xff80d294>
 100d4a4:	01c000c4 	movi	r7,3
 100d4a8:	003f7a06 	br	100d294 <__alt_data_end+0xff80d294>
 100d4ac:	02400104 	movi	r9,4
 100d4b0:	0021883a 	mov	r16,zero
 100d4b4:	002b883a 	mov	r21,zero
 100d4b8:	01400044 	movi	r5,1
 100d4bc:	003f6306 	br	100d24c <__alt_data_end+0xff80d24c>
 100d4c0:	02400304 	movi	r9,12
 100d4c4:	014000c4 	movi	r5,3
 100d4c8:	003f6006 	br	100d24c <__alt_data_end+0xff80d24c>
 100d4cc:	04000434 	movhi	r16,16
 100d4d0:	0009883a 	mov	r4,zero
 100d4d4:	843fffc4 	addi	r16,r16,-1
 100d4d8:	057fffc4 	movi	r21,-1
 100d4dc:	0081ffc4 	movi	r2,2047
 100d4e0:	003f9b06 	br	100d350 <__alt_data_end+0xff80d350>
 100d4e4:	00c00044 	movi	r3,1
 100d4e8:	1887c83a 	sub	r3,r3,r2
 100d4ec:	01000e04 	movi	r4,56
 100d4f0:	20c1530e 	bge	r4,r3,100da40 <__divdf3+0x86c>
 100d4f4:	9900004c 	andi	r4,r19,1
 100d4f8:	0005883a 	mov	r2,zero
 100d4fc:	0021883a 	mov	r16,zero
 100d500:	002b883a 	mov	r21,zero
 100d504:	003f9206 	br	100d350 <__alt_data_end+0xff80d350>
 100d508:	8c012e36 	bltu	r17,r16,100d9c4 <__divdf3+0x7f0>
 100d50c:	84412c26 	beq	r16,r17,100d9c0 <__divdf3+0x7ec>
 100d510:	a82f883a 	mov	r23,r21
 100d514:	18ffffc4 	addi	r3,r3,-1
 100d518:	002b883a 	mov	r21,zero
 100d51c:	a004d63a 	srli	r2,r20,24
 100d520:	8822923a 	slli	r17,r17,8
 100d524:	a028923a 	slli	r20,r20,8
 100d528:	8009883a 	mov	r4,r16
 100d52c:	88acb03a 	or	r22,r17,r2
 100d530:	dd000015 	stw	r20,0(sp)
 100d534:	b028d43a 	srli	r20,r22,16
 100d538:	d8c00215 	stw	r3,8(sp)
 100d53c:	b4bfffcc 	andi	r18,r22,65535
 100d540:	a00b883a 	mov	r5,r20
 100d544:	100c8440 	call	100c844 <__udivsi3>
 100d548:	100b883a 	mov	r5,r2
 100d54c:	9009883a 	mov	r4,r18
 100d550:	1023883a 	mov	r17,r2
 100d554:	100c9000 	call	100c900 <__mulsi3>
 100d558:	8009883a 	mov	r4,r16
 100d55c:	a00b883a 	mov	r5,r20
 100d560:	1039883a 	mov	fp,r2
 100d564:	100c8a80 	call	100c8a8 <__umodsi3>
 100d568:	1004943a 	slli	r2,r2,16
 100d56c:	b808d43a 	srli	r4,r23,16
 100d570:	d8c00217 	ldw	r3,8(sp)
 100d574:	2084b03a 	or	r2,r4,r2
 100d578:	1700062e 	bgeu	r2,fp,100d594 <__divdf3+0x3c0>
 100d57c:	1585883a 	add	r2,r2,r22
 100d580:	893fffc4 	addi	r4,r17,-1
 100d584:	15811d36 	bltu	r2,r22,100d9fc <__divdf3+0x828>
 100d588:	17011c2e 	bgeu	r2,fp,100d9fc <__divdf3+0x828>
 100d58c:	8c7fff84 	addi	r17,r17,-2
 100d590:	1585883a 	add	r2,r2,r22
 100d594:	1739c83a 	sub	fp,r2,fp
 100d598:	a00b883a 	mov	r5,r20
 100d59c:	e009883a 	mov	r4,fp
 100d5a0:	d8c00215 	stw	r3,8(sp)
 100d5a4:	100c8440 	call	100c844 <__udivsi3>
 100d5a8:	100b883a 	mov	r5,r2
 100d5ac:	9009883a 	mov	r4,r18
 100d5b0:	1021883a 	mov	r16,r2
 100d5b4:	100c9000 	call	100c900 <__mulsi3>
 100d5b8:	a00b883a 	mov	r5,r20
 100d5bc:	e009883a 	mov	r4,fp
 100d5c0:	d8800415 	stw	r2,16(sp)
 100d5c4:	100c8a80 	call	100c8a8 <__umodsi3>
 100d5c8:	1004943a 	slli	r2,r2,16
 100d5cc:	da000417 	ldw	r8,16(sp)
 100d5d0:	bdffffcc 	andi	r23,r23,65535
 100d5d4:	b884b03a 	or	r2,r23,r2
 100d5d8:	d8c00217 	ldw	r3,8(sp)
 100d5dc:	1200062e 	bgeu	r2,r8,100d5f8 <__divdf3+0x424>
 100d5e0:	1585883a 	add	r2,r2,r22
 100d5e4:	813fffc4 	addi	r4,r16,-1
 100d5e8:	15810236 	bltu	r2,r22,100d9f4 <__divdf3+0x820>
 100d5ec:	1201012e 	bgeu	r2,r8,100d9f4 <__divdf3+0x820>
 100d5f0:	843fff84 	addi	r16,r16,-2
 100d5f4:	1585883a 	add	r2,r2,r22
 100d5f8:	8822943a 	slli	r17,r17,16
 100d5fc:	d9800017 	ldw	r6,0(sp)
 100d600:	1211c83a 	sub	r8,r2,r8
 100d604:	8c22b03a 	or	r17,r17,r16
 100d608:	373fffcc 	andi	fp,r6,65535
 100d60c:	8abfffcc 	andi	r10,r17,65535
 100d610:	8820d43a 	srli	r16,r17,16
 100d614:	5009883a 	mov	r4,r10
 100d618:	e00b883a 	mov	r5,fp
 100d61c:	302ed43a 	srli	r23,r6,16
 100d620:	d8c00215 	stw	r3,8(sp)
 100d624:	da000415 	stw	r8,16(sp)
 100d628:	da800115 	stw	r10,4(sp)
 100d62c:	100c9000 	call	100c900 <__mulsi3>
 100d630:	800b883a 	mov	r5,r16
 100d634:	e009883a 	mov	r4,fp
 100d638:	d8800515 	stw	r2,20(sp)
 100d63c:	100c9000 	call	100c900 <__mulsi3>
 100d640:	8009883a 	mov	r4,r16
 100d644:	b80b883a 	mov	r5,r23
 100d648:	d8800315 	stw	r2,12(sp)
 100d64c:	100c9000 	call	100c900 <__mulsi3>
 100d650:	da800117 	ldw	r10,4(sp)
 100d654:	b80b883a 	mov	r5,r23
 100d658:	1021883a 	mov	r16,r2
 100d65c:	5009883a 	mov	r4,r10
 100d660:	100c9000 	call	100c900 <__mulsi3>
 100d664:	d9c00517 	ldw	r7,20(sp)
 100d668:	da400317 	ldw	r9,12(sp)
 100d66c:	d8c00217 	ldw	r3,8(sp)
 100d670:	3808d43a 	srli	r4,r7,16
 100d674:	1245883a 	add	r2,r2,r9
 100d678:	da000417 	ldw	r8,16(sp)
 100d67c:	2085883a 	add	r2,r4,r2
 100d680:	1240022e 	bgeu	r2,r9,100d68c <__divdf3+0x4b8>
 100d684:	01000074 	movhi	r4,1
 100d688:	8121883a 	add	r16,r16,r4
 100d68c:	1008d43a 	srli	r4,r2,16
 100d690:	1004943a 	slli	r2,r2,16
 100d694:	39ffffcc 	andi	r7,r7,65535
 100d698:	2409883a 	add	r4,r4,r16
 100d69c:	11c5883a 	add	r2,r2,r7
 100d6a0:	4100bb36 	bltu	r8,r4,100d990 <__divdf3+0x7bc>
 100d6a4:	4100d726 	beq	r8,r4,100da04 <__divdf3+0x830>
 100d6a8:	4109c83a 	sub	r4,r8,r4
 100d6ac:	a8a1c83a 	sub	r16,r21,r2
 100d6b0:	ac2b803a 	cmpltu	r21,r21,r16
 100d6b4:	256bc83a 	sub	r21,r4,r21
 100d6b8:	b540d926 	beq	r22,r21,100da20 <__divdf3+0x84c>
 100d6bc:	a00b883a 	mov	r5,r20
 100d6c0:	a809883a 	mov	r4,r21
 100d6c4:	d8c00215 	stw	r3,8(sp)
 100d6c8:	100c8440 	call	100c844 <__udivsi3>
 100d6cc:	100b883a 	mov	r5,r2
 100d6d0:	9009883a 	mov	r4,r18
 100d6d4:	d8800515 	stw	r2,20(sp)
 100d6d8:	100c9000 	call	100c900 <__mulsi3>
 100d6dc:	a809883a 	mov	r4,r21
 100d6e0:	a00b883a 	mov	r5,r20
 100d6e4:	d8800415 	stw	r2,16(sp)
 100d6e8:	100c8a80 	call	100c8a8 <__umodsi3>
 100d6ec:	1004943a 	slli	r2,r2,16
 100d6f0:	8008d43a 	srli	r4,r16,16
 100d6f4:	da000417 	ldw	r8,16(sp)
 100d6f8:	d8c00217 	ldw	r3,8(sp)
 100d6fc:	2084b03a 	or	r2,r4,r2
 100d700:	d9c00517 	ldw	r7,20(sp)
 100d704:	1200062e 	bgeu	r2,r8,100d720 <__divdf3+0x54c>
 100d708:	1585883a 	add	r2,r2,r22
 100d70c:	393fffc4 	addi	r4,r7,-1
 100d710:	1580c536 	bltu	r2,r22,100da28 <__divdf3+0x854>
 100d714:	1200c42e 	bgeu	r2,r8,100da28 <__divdf3+0x854>
 100d718:	39ffff84 	addi	r7,r7,-2
 100d71c:	1585883a 	add	r2,r2,r22
 100d720:	122bc83a 	sub	r21,r2,r8
 100d724:	a00b883a 	mov	r5,r20
 100d728:	a809883a 	mov	r4,r21
 100d72c:	d8c00215 	stw	r3,8(sp)
 100d730:	d9c00515 	stw	r7,20(sp)
 100d734:	100c8440 	call	100c844 <__udivsi3>
 100d738:	9009883a 	mov	r4,r18
 100d73c:	100b883a 	mov	r5,r2
 100d740:	d8800415 	stw	r2,16(sp)
 100d744:	100c9000 	call	100c900 <__mulsi3>
 100d748:	a809883a 	mov	r4,r21
 100d74c:	a00b883a 	mov	r5,r20
 100d750:	1025883a 	mov	r18,r2
 100d754:	100c8a80 	call	100c8a8 <__umodsi3>
 100d758:	1004943a 	slli	r2,r2,16
 100d75c:	813fffcc 	andi	r4,r16,65535
 100d760:	d8c00217 	ldw	r3,8(sp)
 100d764:	20a0b03a 	or	r16,r4,r2
 100d768:	d9c00517 	ldw	r7,20(sp)
 100d76c:	da000417 	ldw	r8,16(sp)
 100d770:	8480062e 	bgeu	r16,r18,100d78c <__divdf3+0x5b8>
 100d774:	85a1883a 	add	r16,r16,r22
 100d778:	40bfffc4 	addi	r2,r8,-1
 100d77c:	8580ac36 	bltu	r16,r22,100da30 <__divdf3+0x85c>
 100d780:	8480ab2e 	bgeu	r16,r18,100da30 <__divdf3+0x85c>
 100d784:	423fff84 	addi	r8,r8,-2
 100d788:	85a1883a 	add	r16,r16,r22
 100d78c:	3804943a 	slli	r2,r7,16
 100d790:	84a1c83a 	sub	r16,r16,r18
 100d794:	e009883a 	mov	r4,fp
 100d798:	1228b03a 	or	r20,r2,r8
 100d79c:	a1ffffcc 	andi	r7,r20,65535
 100d7a0:	a024d43a 	srli	r18,r20,16
 100d7a4:	380b883a 	mov	r5,r7
 100d7a8:	d8c00215 	stw	r3,8(sp)
 100d7ac:	d9c00515 	stw	r7,20(sp)
 100d7b0:	100c9000 	call	100c900 <__mulsi3>
 100d7b4:	900b883a 	mov	r5,r18
 100d7b8:	e009883a 	mov	r4,fp
 100d7bc:	102b883a 	mov	r21,r2
 100d7c0:	100c9000 	call	100c900 <__mulsi3>
 100d7c4:	900b883a 	mov	r5,r18
 100d7c8:	b809883a 	mov	r4,r23
 100d7cc:	1039883a 	mov	fp,r2
 100d7d0:	100c9000 	call	100c900 <__mulsi3>
 100d7d4:	d9c00517 	ldw	r7,20(sp)
 100d7d8:	b80b883a 	mov	r5,r23
 100d7dc:	1025883a 	mov	r18,r2
 100d7e0:	3809883a 	mov	r4,r7
 100d7e4:	100c9000 	call	100c900 <__mulsi3>
 100d7e8:	a808d43a 	srli	r4,r21,16
 100d7ec:	1705883a 	add	r2,r2,fp
 100d7f0:	d8c00217 	ldw	r3,8(sp)
 100d7f4:	2085883a 	add	r2,r4,r2
 100d7f8:	1700022e 	bgeu	r2,fp,100d804 <__divdf3+0x630>
 100d7fc:	01000074 	movhi	r4,1
 100d800:	9125883a 	add	r18,r18,r4
 100d804:	1008d43a 	srli	r4,r2,16
 100d808:	1004943a 	slli	r2,r2,16
 100d80c:	ad7fffcc 	andi	r21,r21,65535
 100d810:	2489883a 	add	r4,r4,r18
 100d814:	1545883a 	add	r2,r2,r21
 100d818:	81003836 	bltu	r16,r4,100d8fc <__divdf3+0x728>
 100d81c:	81003626 	beq	r16,r4,100d8f8 <__divdf3+0x724>
 100d820:	a5000054 	ori	r20,r20,1
 100d824:	1880ffc4 	addi	r2,r3,1023
 100d828:	00bf2e0e 	bge	zero,r2,100d4e4 <__alt_data_end+0xff80d4e4>
 100d82c:	a10001cc 	andi	r4,r20,7
 100d830:	20000726 	beq	r4,zero,100d850 <__divdf3+0x67c>
 100d834:	a10003cc 	andi	r4,r20,15
 100d838:	01400104 	movi	r5,4
 100d83c:	21400426 	beq	r4,r5,100d850 <__divdf3+0x67c>
 100d840:	a149883a 	add	r4,r20,r5
 100d844:	2529803a 	cmpltu	r20,r4,r20
 100d848:	8d23883a 	add	r17,r17,r20
 100d84c:	2029883a 	mov	r20,r4
 100d850:	8900402c 	andhi	r4,r17,256
 100d854:	20000426 	beq	r4,zero,100d868 <__divdf3+0x694>
 100d858:	18810004 	addi	r2,r3,1024
 100d85c:	00ffc034 	movhi	r3,65280
 100d860:	18ffffc4 	addi	r3,r3,-1
 100d864:	88e2703a 	and	r17,r17,r3
 100d868:	00c1ff84 	movi	r3,2046
 100d86c:	18beb416 	blt	r3,r2,100d340 <__alt_data_end+0xff80d340>
 100d870:	a028d0fa 	srli	r20,r20,3
 100d874:	882a977a 	slli	r21,r17,29
 100d878:	8820927a 	slli	r16,r17,9
 100d87c:	1081ffcc 	andi	r2,r2,2047
 100d880:	ad2ab03a 	or	r21,r21,r20
 100d884:	8020d33a 	srli	r16,r16,12
 100d888:	9900004c 	andi	r4,r19,1
 100d88c:	003eb006 	br	100d350 <__alt_data_end+0xff80d350>
 100d890:	8080022c 	andhi	r2,r16,8
 100d894:	10001226 	beq	r2,zero,100d8e0 <__divdf3+0x70c>
 100d898:	8880022c 	andhi	r2,r17,8
 100d89c:	1000101e 	bne	r2,zero,100d8e0 <__divdf3+0x70c>
 100d8a0:	00800434 	movhi	r2,16
 100d8a4:	8c000234 	orhi	r16,r17,8
 100d8a8:	10bfffc4 	addi	r2,r2,-1
 100d8ac:	b809883a 	mov	r4,r23
 100d8b0:	80a0703a 	and	r16,r16,r2
 100d8b4:	a02b883a 	mov	r21,r20
 100d8b8:	003f0806 	br	100d4dc <__alt_data_end+0xff80d4dc>
 100d8bc:	008000c4 	movi	r2,3
 100d8c0:	3880b126 	beq	r7,r2,100db88 <__divdf3+0x9b4>
 100d8c4:	00800044 	movi	r2,1
 100d8c8:	38805b1e 	bne	r7,r2,100da38 <__divdf3+0x864>
 100d8cc:	e009883a 	mov	r4,fp
 100d8d0:	0005883a 	mov	r2,zero
 100d8d4:	0021883a 	mov	r16,zero
 100d8d8:	002b883a 	mov	r21,zero
 100d8dc:	003e9c06 	br	100d350 <__alt_data_end+0xff80d350>
 100d8e0:	00800434 	movhi	r2,16
 100d8e4:	84000234 	orhi	r16,r16,8
 100d8e8:	10bfffc4 	addi	r2,r2,-1
 100d8ec:	b009883a 	mov	r4,r22
 100d8f0:	80a0703a 	and	r16,r16,r2
 100d8f4:	003ef906 	br	100d4dc <__alt_data_end+0xff80d4dc>
 100d8f8:	103fca26 	beq	r2,zero,100d824 <__alt_data_end+0xff80d824>
 100d8fc:	b421883a 	add	r16,r22,r16
 100d900:	a17fffc4 	addi	r5,r20,-1
 100d904:	8580422e 	bgeu	r16,r22,100da10 <__divdf3+0x83c>
 100d908:	2829883a 	mov	r20,r5
 100d90c:	813fc41e 	bne	r16,r4,100d820 <__alt_data_end+0xff80d820>
 100d910:	d9800017 	ldw	r6,0(sp)
 100d914:	30bfc21e 	bne	r6,r2,100d820 <__alt_data_end+0xff80d820>
 100d918:	003fc206 	br	100d824 <__alt_data_end+0xff80d824>
 100d91c:	143ff604 	addi	r16,r2,-40
 100d920:	8c20983a 	sll	r16,r17,r16
 100d924:	002b883a 	mov	r21,zero
 100d928:	003eb406 	br	100d3fc <__alt_data_end+0xff80d3fc>
 100d92c:	d9800215 	stw	r6,8(sp)
 100d930:	d9c00515 	stw	r7,20(sp)
 100d934:	da000415 	stw	r8,16(sp)
 100d938:	100f1680 	call	100f168 <__clzsi2>
 100d93c:	10800804 	addi	r2,r2,32
 100d940:	da000417 	ldw	r8,16(sp)
 100d944:	d9c00517 	ldw	r7,20(sp)
 100d948:	d9800217 	ldw	r6,8(sp)
 100d94c:	003ea106 	br	100d3d4 <__alt_data_end+0xff80d3d4>
 100d950:	147ff604 	addi	r17,r2,-40
 100d954:	3462983a 	sll	r17,r6,r17
 100d958:	0029883a 	mov	r20,zero
 100d95c:	003ec906 	br	100d484 <__alt_data_end+0xff80d484>
 100d960:	3009883a 	mov	r4,r6
 100d964:	d9400115 	stw	r5,4(sp)
 100d968:	d9800215 	stw	r6,8(sp)
 100d96c:	da000415 	stw	r8,16(sp)
 100d970:	da400315 	stw	r9,12(sp)
 100d974:	100f1680 	call	100f168 <__clzsi2>
 100d978:	10800804 	addi	r2,r2,32
 100d97c:	da400317 	ldw	r9,12(sp)
 100d980:	da000417 	ldw	r8,16(sp)
 100d984:	d9800217 	ldw	r6,8(sp)
 100d988:	d9400117 	ldw	r5,4(sp)
 100d98c:	003eb306 	br	100d45c <__alt_data_end+0xff80d45c>
 100d990:	d9800017 	ldw	r6,0(sp)
 100d994:	a9ab883a 	add	r21,r21,r6
 100d998:	a98b803a 	cmpltu	r5,r21,r6
 100d99c:	2d8b883a 	add	r5,r5,r22
 100d9a0:	2a11883a 	add	r8,r5,r8
 100d9a4:	897fffc4 	addi	r5,r17,-1
 100d9a8:	b2000c2e 	bgeu	r22,r8,100d9dc <__divdf3+0x808>
 100d9ac:	41003f36 	bltu	r8,r4,100daac <__divdf3+0x8d8>
 100d9b0:	22006c26 	beq	r4,r8,100db64 <__divdf3+0x990>
 100d9b4:	4109c83a 	sub	r4,r8,r4
 100d9b8:	2823883a 	mov	r17,r5
 100d9bc:	003f3b06 	br	100d6ac <__alt_data_end+0xff80d6ac>
 100d9c0:	ad3ed336 	bltu	r21,r20,100d510 <__alt_data_end+0xff80d510>
 100d9c4:	a804d07a 	srli	r2,r21,1
 100d9c8:	802e97fa 	slli	r23,r16,31
 100d9cc:	a82a97fa 	slli	r21,r21,31
 100d9d0:	8020d07a 	srli	r16,r16,1
 100d9d4:	b8aeb03a 	or	r23,r23,r2
 100d9d8:	003ed006 	br	100d51c <__alt_data_end+0xff80d51c>
 100d9dc:	b23ff51e 	bne	r22,r8,100d9b4 <__alt_data_end+0xff80d9b4>
 100d9e0:	d9800017 	ldw	r6,0(sp)
 100d9e4:	a9bff12e 	bgeu	r21,r6,100d9ac <__alt_data_end+0xff80d9ac>
 100d9e8:	b109c83a 	sub	r4,r22,r4
 100d9ec:	2823883a 	mov	r17,r5
 100d9f0:	003f2e06 	br	100d6ac <__alt_data_end+0xff80d6ac>
 100d9f4:	2021883a 	mov	r16,r4
 100d9f8:	003eff06 	br	100d5f8 <__alt_data_end+0xff80d5f8>
 100d9fc:	2023883a 	mov	r17,r4
 100da00:	003ee406 	br	100d594 <__alt_data_end+0xff80d594>
 100da04:	a8bfe236 	bltu	r21,r2,100d990 <__alt_data_end+0xff80d990>
 100da08:	0009883a 	mov	r4,zero
 100da0c:	003f2706 	br	100d6ac <__alt_data_end+0xff80d6ac>
 100da10:	81002d36 	bltu	r16,r4,100dac8 <__divdf3+0x8f4>
 100da14:	24005626 	beq	r4,r16,100db70 <__divdf3+0x99c>
 100da18:	2829883a 	mov	r20,r5
 100da1c:	003f8006 	br	100d820 <__alt_data_end+0xff80d820>
 100da20:	053fffc4 	movi	r20,-1
 100da24:	003f7f06 	br	100d824 <__alt_data_end+0xff80d824>
 100da28:	200f883a 	mov	r7,r4
 100da2c:	003f3c06 	br	100d720 <__alt_data_end+0xff80d720>
 100da30:	1011883a 	mov	r8,r2
 100da34:	003f5506 	br	100d78c <__alt_data_end+0xff80d78c>
 100da38:	e027883a 	mov	r19,fp
 100da3c:	003f7906 	br	100d824 <__alt_data_end+0xff80d824>
 100da40:	010007c4 	movi	r4,31
 100da44:	20c02816 	blt	r4,r3,100dae8 <__divdf3+0x914>
 100da48:	00800804 	movi	r2,32
 100da4c:	10c5c83a 	sub	r2,r2,r3
 100da50:	888a983a 	sll	r5,r17,r2
 100da54:	a0c8d83a 	srl	r4,r20,r3
 100da58:	a084983a 	sll	r2,r20,r2
 100da5c:	88e2d83a 	srl	r17,r17,r3
 100da60:	2906b03a 	or	r3,r5,r4
 100da64:	1004c03a 	cmpne	r2,r2,zero
 100da68:	1886b03a 	or	r3,r3,r2
 100da6c:	188001cc 	andi	r2,r3,7
 100da70:	10000726 	beq	r2,zero,100da90 <__divdf3+0x8bc>
 100da74:	188003cc 	andi	r2,r3,15
 100da78:	01000104 	movi	r4,4
 100da7c:	11000426 	beq	r2,r4,100da90 <__divdf3+0x8bc>
 100da80:	1805883a 	mov	r2,r3
 100da84:	10c00104 	addi	r3,r2,4
 100da88:	1885803a 	cmpltu	r2,r3,r2
 100da8c:	88a3883a 	add	r17,r17,r2
 100da90:	8880202c 	andhi	r2,r17,128
 100da94:	10002926 	beq	r2,zero,100db3c <__divdf3+0x968>
 100da98:	9900004c 	andi	r4,r19,1
 100da9c:	00800044 	movi	r2,1
 100daa0:	0021883a 	mov	r16,zero
 100daa4:	002b883a 	mov	r21,zero
 100daa8:	003e2906 	br	100d350 <__alt_data_end+0xff80d350>
 100daac:	d9800017 	ldw	r6,0(sp)
 100dab0:	8c7fff84 	addi	r17,r17,-2
 100dab4:	a9ab883a 	add	r21,r21,r6
 100dab8:	a98b803a 	cmpltu	r5,r21,r6
 100dabc:	2d8b883a 	add	r5,r5,r22
 100dac0:	2a11883a 	add	r8,r5,r8
 100dac4:	003ef806 	br	100d6a8 <__alt_data_end+0xff80d6a8>
 100dac8:	d9800017 	ldw	r6,0(sp)
 100dacc:	318f883a 	add	r7,r6,r6
 100dad0:	398b803a 	cmpltu	r5,r7,r6
 100dad4:	2d8d883a 	add	r6,r5,r22
 100dad8:	81a1883a 	add	r16,r16,r6
 100dadc:	a17fff84 	addi	r5,r20,-2
 100dae0:	d9c00015 	stw	r7,0(sp)
 100dae4:	003f8806 	br	100d908 <__alt_data_end+0xff80d908>
 100dae8:	013ff844 	movi	r4,-31
 100daec:	2085c83a 	sub	r2,r4,r2
 100daf0:	8888d83a 	srl	r4,r17,r2
 100daf4:	00800804 	movi	r2,32
 100daf8:	18802126 	beq	r3,r2,100db80 <__divdf3+0x9ac>
 100dafc:	04001004 	movi	r16,64
 100db00:	80c7c83a 	sub	r3,r16,r3
 100db04:	88e0983a 	sll	r16,r17,r3
 100db08:	8504b03a 	or	r2,r16,r20
 100db0c:	1004c03a 	cmpne	r2,r2,zero
 100db10:	2084b03a 	or	r2,r4,r2
 100db14:	144001cc 	andi	r17,r2,7
 100db18:	88000d1e 	bne	r17,zero,100db50 <__divdf3+0x97c>
 100db1c:	0021883a 	mov	r16,zero
 100db20:	102ad0fa 	srli	r21,r2,3
 100db24:	9900004c 	andi	r4,r19,1
 100db28:	0005883a 	mov	r2,zero
 100db2c:	ac6ab03a 	or	r21,r21,r17
 100db30:	003e0706 	br	100d350 <__alt_data_end+0xff80d350>
 100db34:	1007883a 	mov	r3,r2
 100db38:	0023883a 	mov	r17,zero
 100db3c:	8820927a 	slli	r16,r17,9
 100db40:	1805883a 	mov	r2,r3
 100db44:	8822977a 	slli	r17,r17,29
 100db48:	8020d33a 	srli	r16,r16,12
 100db4c:	003ff406 	br	100db20 <__alt_data_end+0xff80db20>
 100db50:	10c003cc 	andi	r3,r2,15
 100db54:	01000104 	movi	r4,4
 100db58:	193ff626 	beq	r3,r4,100db34 <__alt_data_end+0xff80db34>
 100db5c:	0023883a 	mov	r17,zero
 100db60:	003fc806 	br	100da84 <__alt_data_end+0xff80da84>
 100db64:	a8bfd136 	bltu	r21,r2,100daac <__alt_data_end+0xff80daac>
 100db68:	2823883a 	mov	r17,r5
 100db6c:	003fa606 	br	100da08 <__alt_data_end+0xff80da08>
 100db70:	d9800017 	ldw	r6,0(sp)
 100db74:	30bfd436 	bltu	r6,r2,100dac8 <__alt_data_end+0xff80dac8>
 100db78:	2829883a 	mov	r20,r5
 100db7c:	003f6406 	br	100d910 <__alt_data_end+0xff80d910>
 100db80:	0021883a 	mov	r16,zero
 100db84:	003fe006 	br	100db08 <__alt_data_end+0xff80db08>
 100db88:	00800434 	movhi	r2,16
 100db8c:	8c000234 	orhi	r16,r17,8
 100db90:	10bfffc4 	addi	r2,r2,-1
 100db94:	e009883a 	mov	r4,fp
 100db98:	80a0703a 	and	r16,r16,r2
 100db9c:	a02b883a 	mov	r21,r20
 100dba0:	003e4e06 	br	100d4dc <__alt_data_end+0xff80d4dc>

0100dba4 <__eqdf2>:
 100dba4:	2804d53a 	srli	r2,r5,20
 100dba8:	3806d53a 	srli	r3,r7,20
 100dbac:	02000434 	movhi	r8,16
 100dbb0:	423fffc4 	addi	r8,r8,-1
 100dbb4:	1081ffcc 	andi	r2,r2,2047
 100dbb8:	0281ffc4 	movi	r10,2047
 100dbbc:	2a12703a 	and	r9,r5,r8
 100dbc0:	18c1ffcc 	andi	r3,r3,2047
 100dbc4:	3a10703a 	and	r8,r7,r8
 100dbc8:	280ad7fa 	srli	r5,r5,31
 100dbcc:	380ed7fa 	srli	r7,r7,31
 100dbd0:	12801026 	beq	r2,r10,100dc14 <__eqdf2+0x70>
 100dbd4:	0281ffc4 	movi	r10,2047
 100dbd8:	1a800a26 	beq	r3,r10,100dc04 <__eqdf2+0x60>
 100dbdc:	10c00226 	beq	r2,r3,100dbe8 <__eqdf2+0x44>
 100dbe0:	00800044 	movi	r2,1
 100dbe4:	f800283a 	ret
 100dbe8:	4a3ffd1e 	bne	r9,r8,100dbe0 <__alt_data_end+0xff80dbe0>
 100dbec:	21bffc1e 	bne	r4,r6,100dbe0 <__alt_data_end+0xff80dbe0>
 100dbf0:	29c00c26 	beq	r5,r7,100dc24 <__eqdf2+0x80>
 100dbf4:	103ffa1e 	bne	r2,zero,100dbe0 <__alt_data_end+0xff80dbe0>
 100dbf8:	2244b03a 	or	r2,r4,r9
 100dbfc:	1004c03a 	cmpne	r2,r2,zero
 100dc00:	f800283a 	ret
 100dc04:	3214b03a 	or	r10,r6,r8
 100dc08:	503ff426 	beq	r10,zero,100dbdc <__alt_data_end+0xff80dbdc>
 100dc0c:	00800044 	movi	r2,1
 100dc10:	f800283a 	ret
 100dc14:	2254b03a 	or	r10,r4,r9
 100dc18:	503fee26 	beq	r10,zero,100dbd4 <__alt_data_end+0xff80dbd4>
 100dc1c:	00800044 	movi	r2,1
 100dc20:	f800283a 	ret
 100dc24:	0005883a 	mov	r2,zero
 100dc28:	f800283a 	ret

0100dc2c <__gedf2>:
 100dc2c:	2804d53a 	srli	r2,r5,20
 100dc30:	3806d53a 	srli	r3,r7,20
 100dc34:	02000434 	movhi	r8,16
 100dc38:	423fffc4 	addi	r8,r8,-1
 100dc3c:	1081ffcc 	andi	r2,r2,2047
 100dc40:	0241ffc4 	movi	r9,2047
 100dc44:	2a14703a 	and	r10,r5,r8
 100dc48:	18c1ffcc 	andi	r3,r3,2047
 100dc4c:	3a10703a 	and	r8,r7,r8
 100dc50:	280ad7fa 	srli	r5,r5,31
 100dc54:	380ed7fa 	srli	r7,r7,31
 100dc58:	12401d26 	beq	r2,r9,100dcd0 <__gedf2+0xa4>
 100dc5c:	0241ffc4 	movi	r9,2047
 100dc60:	1a401226 	beq	r3,r9,100dcac <__gedf2+0x80>
 100dc64:	1000081e 	bne	r2,zero,100dc88 <__gedf2+0x5c>
 100dc68:	2296b03a 	or	r11,r4,r10
 100dc6c:	5813003a 	cmpeq	r9,r11,zero
 100dc70:	1800091e 	bne	r3,zero,100dc98 <__gedf2+0x6c>
 100dc74:	3218b03a 	or	r12,r6,r8
 100dc78:	6000071e 	bne	r12,zero,100dc98 <__gedf2+0x6c>
 100dc7c:	0005883a 	mov	r2,zero
 100dc80:	5800101e 	bne	r11,zero,100dcc4 <__gedf2+0x98>
 100dc84:	f800283a 	ret
 100dc88:	18000c1e 	bne	r3,zero,100dcbc <__gedf2+0x90>
 100dc8c:	3212b03a 	or	r9,r6,r8
 100dc90:	48000c26 	beq	r9,zero,100dcc4 <__gedf2+0x98>
 100dc94:	0013883a 	mov	r9,zero
 100dc98:	39c03fcc 	andi	r7,r7,255
 100dc9c:	48000826 	beq	r9,zero,100dcc0 <__gedf2+0x94>
 100dca0:	38000926 	beq	r7,zero,100dcc8 <__gedf2+0x9c>
 100dca4:	00800044 	movi	r2,1
 100dca8:	f800283a 	ret
 100dcac:	3212b03a 	or	r9,r6,r8
 100dcb0:	483fec26 	beq	r9,zero,100dc64 <__alt_data_end+0xff80dc64>
 100dcb4:	00bfff84 	movi	r2,-2
 100dcb8:	f800283a 	ret
 100dcbc:	39c03fcc 	andi	r7,r7,255
 100dcc0:	29c00626 	beq	r5,r7,100dcdc <__gedf2+0xb0>
 100dcc4:	283ff726 	beq	r5,zero,100dca4 <__alt_data_end+0xff80dca4>
 100dcc8:	00bfffc4 	movi	r2,-1
 100dccc:	f800283a 	ret
 100dcd0:	2292b03a 	or	r9,r4,r10
 100dcd4:	483fe126 	beq	r9,zero,100dc5c <__alt_data_end+0xff80dc5c>
 100dcd8:	003ff606 	br	100dcb4 <__alt_data_end+0xff80dcb4>
 100dcdc:	18bff916 	blt	r3,r2,100dcc4 <__alt_data_end+0xff80dcc4>
 100dce0:	10c00316 	blt	r2,r3,100dcf0 <__gedf2+0xc4>
 100dce4:	42bff736 	bltu	r8,r10,100dcc4 <__alt_data_end+0xff80dcc4>
 100dce8:	52000326 	beq	r10,r8,100dcf8 <__gedf2+0xcc>
 100dcec:	5200042e 	bgeu	r10,r8,100dd00 <__gedf2+0xd4>
 100dcf0:	283fec1e 	bne	r5,zero,100dca4 <__alt_data_end+0xff80dca4>
 100dcf4:	003ff406 	br	100dcc8 <__alt_data_end+0xff80dcc8>
 100dcf8:	313ff236 	bltu	r6,r4,100dcc4 <__alt_data_end+0xff80dcc4>
 100dcfc:	21bffc36 	bltu	r4,r6,100dcf0 <__alt_data_end+0xff80dcf0>
 100dd00:	0005883a 	mov	r2,zero
 100dd04:	f800283a 	ret

0100dd08 <__ledf2>:
 100dd08:	2804d53a 	srli	r2,r5,20
 100dd0c:	3810d53a 	srli	r8,r7,20
 100dd10:	00c00434 	movhi	r3,16
 100dd14:	18ffffc4 	addi	r3,r3,-1
 100dd18:	1081ffcc 	andi	r2,r2,2047
 100dd1c:	0241ffc4 	movi	r9,2047
 100dd20:	28d4703a 	and	r10,r5,r3
 100dd24:	4201ffcc 	andi	r8,r8,2047
 100dd28:	38c6703a 	and	r3,r7,r3
 100dd2c:	280ad7fa 	srli	r5,r5,31
 100dd30:	380ed7fa 	srli	r7,r7,31
 100dd34:	12401f26 	beq	r2,r9,100ddb4 <__ledf2+0xac>
 100dd38:	0241ffc4 	movi	r9,2047
 100dd3c:	42401426 	beq	r8,r9,100dd90 <__ledf2+0x88>
 100dd40:	1000091e 	bne	r2,zero,100dd68 <__ledf2+0x60>
 100dd44:	2296b03a 	or	r11,r4,r10
 100dd48:	5813003a 	cmpeq	r9,r11,zero
 100dd4c:	29403fcc 	andi	r5,r5,255
 100dd50:	40000a1e 	bne	r8,zero,100dd7c <__ledf2+0x74>
 100dd54:	30d8b03a 	or	r12,r6,r3
 100dd58:	6000081e 	bne	r12,zero,100dd7c <__ledf2+0x74>
 100dd5c:	0005883a 	mov	r2,zero
 100dd60:	5800111e 	bne	r11,zero,100dda8 <__ledf2+0xa0>
 100dd64:	f800283a 	ret
 100dd68:	29403fcc 	andi	r5,r5,255
 100dd6c:	40000c1e 	bne	r8,zero,100dda0 <__ledf2+0x98>
 100dd70:	30d2b03a 	or	r9,r6,r3
 100dd74:	48000c26 	beq	r9,zero,100dda8 <__ledf2+0xa0>
 100dd78:	0013883a 	mov	r9,zero
 100dd7c:	39c03fcc 	andi	r7,r7,255
 100dd80:	48000826 	beq	r9,zero,100dda4 <__ledf2+0x9c>
 100dd84:	38001126 	beq	r7,zero,100ddcc <__ledf2+0xc4>
 100dd88:	00800044 	movi	r2,1
 100dd8c:	f800283a 	ret
 100dd90:	30d2b03a 	or	r9,r6,r3
 100dd94:	483fea26 	beq	r9,zero,100dd40 <__alt_data_end+0xff80dd40>
 100dd98:	00800084 	movi	r2,2
 100dd9c:	f800283a 	ret
 100dda0:	39c03fcc 	andi	r7,r7,255
 100dda4:	39400726 	beq	r7,r5,100ddc4 <__ledf2+0xbc>
 100dda8:	2800081e 	bne	r5,zero,100ddcc <__ledf2+0xc4>
 100ddac:	00800044 	movi	r2,1
 100ddb0:	f800283a 	ret
 100ddb4:	2292b03a 	or	r9,r4,r10
 100ddb8:	483fdf26 	beq	r9,zero,100dd38 <__alt_data_end+0xff80dd38>
 100ddbc:	00800084 	movi	r2,2
 100ddc0:	f800283a 	ret
 100ddc4:	4080030e 	bge	r8,r2,100ddd4 <__ledf2+0xcc>
 100ddc8:	383fef26 	beq	r7,zero,100dd88 <__alt_data_end+0xff80dd88>
 100ddcc:	00bfffc4 	movi	r2,-1
 100ddd0:	f800283a 	ret
 100ddd4:	123feb16 	blt	r2,r8,100dd84 <__alt_data_end+0xff80dd84>
 100ddd8:	1abff336 	bltu	r3,r10,100dda8 <__alt_data_end+0xff80dda8>
 100dddc:	50c00326 	beq	r10,r3,100ddec <__ledf2+0xe4>
 100dde0:	50c0042e 	bgeu	r10,r3,100ddf4 <__ledf2+0xec>
 100dde4:	283fe81e 	bne	r5,zero,100dd88 <__alt_data_end+0xff80dd88>
 100dde8:	003ff806 	br	100ddcc <__alt_data_end+0xff80ddcc>
 100ddec:	313fee36 	bltu	r6,r4,100dda8 <__alt_data_end+0xff80dda8>
 100ddf0:	21bffc36 	bltu	r4,r6,100dde4 <__alt_data_end+0xff80dde4>
 100ddf4:	0005883a 	mov	r2,zero
 100ddf8:	f800283a 	ret

0100ddfc <__muldf3>:
 100ddfc:	deffee04 	addi	sp,sp,-72
 100de00:	dd000c15 	stw	r20,48(sp)
 100de04:	2828d53a 	srli	r20,r5,20
 100de08:	ddc00f15 	stw	r23,60(sp)
 100de0c:	282ed7fa 	srli	r23,r5,31
 100de10:	dc000815 	stw	r16,32(sp)
 100de14:	04000434 	movhi	r16,16
 100de18:	dcc00b15 	stw	r19,44(sp)
 100de1c:	843fffc4 	addi	r16,r16,-1
 100de20:	dfc01115 	stw	ra,68(sp)
 100de24:	df001015 	stw	fp,64(sp)
 100de28:	dd800e15 	stw	r22,56(sp)
 100de2c:	dd400d15 	stw	r21,52(sp)
 100de30:	dc800a15 	stw	r18,40(sp)
 100de34:	dc400915 	stw	r17,36(sp)
 100de38:	a501ffcc 	andi	r20,r20,2047
 100de3c:	2c20703a 	and	r16,r5,r16
 100de40:	b827883a 	mov	r19,r23
 100de44:	ba403fcc 	andi	r9,r23,255
 100de48:	a0006026 	beq	r20,zero,100dfcc <__muldf3+0x1d0>
 100de4c:	0081ffc4 	movi	r2,2047
 100de50:	202d883a 	mov	r22,r4
 100de54:	a0803626 	beq	r20,r2,100df30 <__muldf3+0x134>
 100de58:	84000434 	orhi	r16,r16,16
 100de5c:	200ad77a 	srli	r5,r4,29
 100de60:	800490fa 	slli	r2,r16,3
 100de64:	202c90fa 	slli	r22,r4,3
 100de68:	a53f0044 	addi	r20,r20,-1023
 100de6c:	28a0b03a 	or	r16,r5,r2
 100de70:	002b883a 	mov	r21,zero
 100de74:	000b883a 	mov	r5,zero
 100de78:	3804d53a 	srli	r2,r7,20
 100de7c:	3838d7fa 	srli	fp,r7,31
 100de80:	04400434 	movhi	r17,16
 100de84:	8c7fffc4 	addi	r17,r17,-1
 100de88:	1081ffcc 	andi	r2,r2,2047
 100de8c:	3025883a 	mov	r18,r6
 100de90:	3c62703a 	and	r17,r7,r17
 100de94:	e2803fcc 	andi	r10,fp,255
 100de98:	10006d26 	beq	r2,zero,100e050 <__muldf3+0x254>
 100de9c:	00c1ffc4 	movi	r3,2047
 100dea0:	10c06526 	beq	r2,r3,100e038 <__muldf3+0x23c>
 100dea4:	8c400434 	orhi	r17,r17,16
 100dea8:	300ed77a 	srli	r7,r6,29
 100deac:	880690fa 	slli	r3,r17,3
 100deb0:	302490fa 	slli	r18,r6,3
 100deb4:	10bf0044 	addi	r2,r2,-1023
 100deb8:	38e2b03a 	or	r17,r7,r3
 100debc:	000f883a 	mov	r7,zero
 100dec0:	a087883a 	add	r3,r20,r2
 100dec4:	010003c4 	movi	r4,15
 100dec8:	3d44b03a 	or	r2,r7,r21
 100decc:	e5ccf03a 	xor	r6,fp,r23
 100ded0:	1a000044 	addi	r8,r3,1
 100ded4:	20809b36 	bltu	r4,r2,100e144 <__muldf3+0x348>
 100ded8:	100490ba 	slli	r2,r2,2
 100dedc:	01004074 	movhi	r4,257
 100dee0:	2137bc04 	addi	r4,r4,-8464
 100dee4:	1105883a 	add	r2,r2,r4
 100dee8:	10800017 	ldw	r2,0(r2)
 100deec:	1000683a 	jmp	r2
 100def0:	0100e144 	movi	r4,901
 100def4:	0100df50 	cmplti	r4,zero,893
 100def8:	0100df50 	cmplti	r4,zero,893
 100defc:	0100df4c 	andi	r4,zero,893
 100df00:	0100e120 	cmpeqi	r4,zero,900
 100df04:	0100e120 	cmpeqi	r4,zero,900
 100df08:	0100e108 	cmpgei	r4,zero,900
 100df0c:	0100df4c 	andi	r4,zero,893
 100df10:	0100e120 	cmpeqi	r4,zero,900
 100df14:	0100e108 	cmpgei	r4,zero,900
 100df18:	0100e120 	cmpeqi	r4,zero,900
 100df1c:	0100df4c 	andi	r4,zero,893
 100df20:	0100e130 	cmpltui	r4,zero,900
 100df24:	0100e130 	cmpltui	r4,zero,900
 100df28:	0100e130 	cmpltui	r4,zero,900
 100df2c:	0100e490 	cmplti	r4,zero,914
 100df30:	2404b03a 	or	r2,r4,r16
 100df34:	1000711e 	bne	r2,zero,100e0fc <__muldf3+0x300>
 100df38:	05400204 	movi	r21,8
 100df3c:	0021883a 	mov	r16,zero
 100df40:	002d883a 	mov	r22,zero
 100df44:	01400084 	movi	r5,2
 100df48:	003fcb06 	br	100de78 <__alt_data_end+0xff80de78>
 100df4c:	500d883a 	mov	r6,r10
 100df50:	00800084 	movi	r2,2
 100df54:	38805926 	beq	r7,r2,100e0bc <__muldf3+0x2c0>
 100df58:	008000c4 	movi	r2,3
 100df5c:	3881bb26 	beq	r7,r2,100e64c <__muldf3+0x850>
 100df60:	00800044 	movi	r2,1
 100df64:	3881961e 	bne	r7,r2,100e5c0 <__muldf3+0x7c4>
 100df68:	3027883a 	mov	r19,r6
 100df6c:	0005883a 	mov	r2,zero
 100df70:	0021883a 	mov	r16,zero
 100df74:	002d883a 	mov	r22,zero
 100df78:	1004953a 	slli	r2,r2,20
 100df7c:	98c03fcc 	andi	r3,r19,255
 100df80:	04400434 	movhi	r17,16
 100df84:	8c7fffc4 	addi	r17,r17,-1
 100df88:	180697fa 	slli	r3,r3,31
 100df8c:	8460703a 	and	r16,r16,r17
 100df90:	80a0b03a 	or	r16,r16,r2
 100df94:	80c6b03a 	or	r3,r16,r3
 100df98:	b005883a 	mov	r2,r22
 100df9c:	dfc01117 	ldw	ra,68(sp)
 100dfa0:	df001017 	ldw	fp,64(sp)
 100dfa4:	ddc00f17 	ldw	r23,60(sp)
 100dfa8:	dd800e17 	ldw	r22,56(sp)
 100dfac:	dd400d17 	ldw	r21,52(sp)
 100dfb0:	dd000c17 	ldw	r20,48(sp)
 100dfb4:	dcc00b17 	ldw	r19,44(sp)
 100dfb8:	dc800a17 	ldw	r18,40(sp)
 100dfbc:	dc400917 	ldw	r17,36(sp)
 100dfc0:	dc000817 	ldw	r16,32(sp)
 100dfc4:	dec01204 	addi	sp,sp,72
 100dfc8:	f800283a 	ret
 100dfcc:	2404b03a 	or	r2,r4,r16
 100dfd0:	202b883a 	mov	r21,r4
 100dfd4:	10004426 	beq	r2,zero,100e0e8 <__muldf3+0x2ec>
 100dfd8:	80015126 	beq	r16,zero,100e520 <__muldf3+0x724>
 100dfdc:	8009883a 	mov	r4,r16
 100dfe0:	d9800715 	stw	r6,28(sp)
 100dfe4:	d9c00215 	stw	r7,8(sp)
 100dfe8:	da400415 	stw	r9,16(sp)
 100dfec:	100f1680 	call	100f168 <__clzsi2>
 100dff0:	d9800717 	ldw	r6,28(sp)
 100dff4:	d9c00217 	ldw	r7,8(sp)
 100dff8:	da400417 	ldw	r9,16(sp)
 100dffc:	113ffd44 	addi	r4,r2,-11
 100e000:	00c00704 	movi	r3,28
 100e004:	19014216 	blt	r3,r4,100e510 <__muldf3+0x714>
 100e008:	00c00744 	movi	r3,29
 100e00c:	15bffe04 	addi	r22,r2,-8
 100e010:	1907c83a 	sub	r3,r3,r4
 100e014:	85a0983a 	sll	r16,r16,r22
 100e018:	a8c6d83a 	srl	r3,r21,r3
 100e01c:	adac983a 	sll	r22,r21,r22
 100e020:	1c20b03a 	or	r16,r3,r16
 100e024:	1080fcc4 	addi	r2,r2,1011
 100e028:	00a9c83a 	sub	r20,zero,r2
 100e02c:	002b883a 	mov	r21,zero
 100e030:	000b883a 	mov	r5,zero
 100e034:	003f9006 	br	100de78 <__alt_data_end+0xff80de78>
 100e038:	3446b03a 	or	r3,r6,r17
 100e03c:	1800281e 	bne	r3,zero,100e0e0 <__muldf3+0x2e4>
 100e040:	0023883a 	mov	r17,zero
 100e044:	0025883a 	mov	r18,zero
 100e048:	01c00084 	movi	r7,2
 100e04c:	003f9c06 	br	100dec0 <__alt_data_end+0xff80dec0>
 100e050:	3446b03a 	or	r3,r6,r17
 100e054:	18001e26 	beq	r3,zero,100e0d0 <__muldf3+0x2d4>
 100e058:	88012126 	beq	r17,zero,100e4e0 <__muldf3+0x6e4>
 100e05c:	8809883a 	mov	r4,r17
 100e060:	d9400215 	stw	r5,8(sp)
 100e064:	d9800715 	stw	r6,28(sp)
 100e068:	da400415 	stw	r9,16(sp)
 100e06c:	da800315 	stw	r10,12(sp)
 100e070:	100f1680 	call	100f168 <__clzsi2>
 100e074:	d9400217 	ldw	r5,8(sp)
 100e078:	d9800717 	ldw	r6,28(sp)
 100e07c:	da400417 	ldw	r9,16(sp)
 100e080:	da800317 	ldw	r10,12(sp)
 100e084:	113ffd44 	addi	r4,r2,-11
 100e088:	00c00704 	movi	r3,28
 100e08c:	19011016 	blt	r3,r4,100e4d0 <__muldf3+0x6d4>
 100e090:	00c00744 	movi	r3,29
 100e094:	14bffe04 	addi	r18,r2,-8
 100e098:	1907c83a 	sub	r3,r3,r4
 100e09c:	8ca2983a 	sll	r17,r17,r18
 100e0a0:	30c6d83a 	srl	r3,r6,r3
 100e0a4:	34a4983a 	sll	r18,r6,r18
 100e0a8:	1c62b03a 	or	r17,r3,r17
 100e0ac:	1080fcc4 	addi	r2,r2,1011
 100e0b0:	0085c83a 	sub	r2,zero,r2
 100e0b4:	000f883a 	mov	r7,zero
 100e0b8:	003f8106 	br	100dec0 <__alt_data_end+0xff80dec0>
 100e0bc:	3027883a 	mov	r19,r6
 100e0c0:	0081ffc4 	movi	r2,2047
 100e0c4:	0021883a 	mov	r16,zero
 100e0c8:	002d883a 	mov	r22,zero
 100e0cc:	003faa06 	br	100df78 <__alt_data_end+0xff80df78>
 100e0d0:	0023883a 	mov	r17,zero
 100e0d4:	0025883a 	mov	r18,zero
 100e0d8:	01c00044 	movi	r7,1
 100e0dc:	003f7806 	br	100dec0 <__alt_data_end+0xff80dec0>
 100e0e0:	01c000c4 	movi	r7,3
 100e0e4:	003f7606 	br	100dec0 <__alt_data_end+0xff80dec0>
 100e0e8:	05400104 	movi	r21,4
 100e0ec:	0021883a 	mov	r16,zero
 100e0f0:	002d883a 	mov	r22,zero
 100e0f4:	01400044 	movi	r5,1
 100e0f8:	003f5f06 	br	100de78 <__alt_data_end+0xff80de78>
 100e0fc:	05400304 	movi	r21,12
 100e100:	014000c4 	movi	r5,3
 100e104:	003f5c06 	br	100de78 <__alt_data_end+0xff80de78>
 100e108:	04000434 	movhi	r16,16
 100e10c:	0027883a 	mov	r19,zero
 100e110:	843fffc4 	addi	r16,r16,-1
 100e114:	05bfffc4 	movi	r22,-1
 100e118:	0081ffc4 	movi	r2,2047
 100e11c:	003f9606 	br	100df78 <__alt_data_end+0xff80df78>
 100e120:	8023883a 	mov	r17,r16
 100e124:	b025883a 	mov	r18,r22
 100e128:	280f883a 	mov	r7,r5
 100e12c:	003f8806 	br	100df50 <__alt_data_end+0xff80df50>
 100e130:	8023883a 	mov	r17,r16
 100e134:	b025883a 	mov	r18,r22
 100e138:	480d883a 	mov	r6,r9
 100e13c:	280f883a 	mov	r7,r5
 100e140:	003f8306 	br	100df50 <__alt_data_end+0xff80df50>
 100e144:	b026d43a 	srli	r19,r22,16
 100e148:	902ed43a 	srli	r23,r18,16
 100e14c:	b5bfffcc 	andi	r22,r22,65535
 100e150:	94bfffcc 	andi	r18,r18,65535
 100e154:	b00b883a 	mov	r5,r22
 100e158:	9009883a 	mov	r4,r18
 100e15c:	d8c00515 	stw	r3,20(sp)
 100e160:	d9800715 	stw	r6,28(sp)
 100e164:	da000615 	stw	r8,24(sp)
 100e168:	100c9000 	call	100c900 <__mulsi3>
 100e16c:	980b883a 	mov	r5,r19
 100e170:	9009883a 	mov	r4,r18
 100e174:	1029883a 	mov	r20,r2
 100e178:	100c9000 	call	100c900 <__mulsi3>
 100e17c:	b80b883a 	mov	r5,r23
 100e180:	9809883a 	mov	r4,r19
 100e184:	102b883a 	mov	r21,r2
 100e188:	100c9000 	call	100c900 <__mulsi3>
 100e18c:	b809883a 	mov	r4,r23
 100e190:	b00b883a 	mov	r5,r22
 100e194:	1039883a 	mov	fp,r2
 100e198:	100c9000 	call	100c900 <__mulsi3>
 100e19c:	a008d43a 	srli	r4,r20,16
 100e1a0:	1545883a 	add	r2,r2,r21
 100e1a4:	d8c00517 	ldw	r3,20(sp)
 100e1a8:	2085883a 	add	r2,r4,r2
 100e1ac:	d9800717 	ldw	r6,28(sp)
 100e1b0:	da000617 	ldw	r8,24(sp)
 100e1b4:	1540022e 	bgeu	r2,r21,100e1c0 <__muldf3+0x3c4>
 100e1b8:	01000074 	movhi	r4,1
 100e1bc:	e139883a 	add	fp,fp,r4
 100e1c0:	100e943a 	slli	r7,r2,16
 100e1c4:	1004d43a 	srli	r2,r2,16
 100e1c8:	882ad43a 	srli	r21,r17,16
 100e1cc:	a53fffcc 	andi	r20,r20,65535
 100e1d0:	8c7fffcc 	andi	r17,r17,65535
 100e1d4:	3d29883a 	add	r20,r7,r20
 100e1d8:	b00b883a 	mov	r5,r22
 100e1dc:	8809883a 	mov	r4,r17
 100e1e0:	d8c00515 	stw	r3,20(sp)
 100e1e4:	d9800715 	stw	r6,28(sp)
 100e1e8:	da000615 	stw	r8,24(sp)
 100e1ec:	dd000115 	stw	r20,4(sp)
 100e1f0:	d8800015 	stw	r2,0(sp)
 100e1f4:	100c9000 	call	100c900 <__mulsi3>
 100e1f8:	980b883a 	mov	r5,r19
 100e1fc:	8809883a 	mov	r4,r17
 100e200:	d8800215 	stw	r2,8(sp)
 100e204:	100c9000 	call	100c900 <__mulsi3>
 100e208:	9809883a 	mov	r4,r19
 100e20c:	a80b883a 	mov	r5,r21
 100e210:	1029883a 	mov	r20,r2
 100e214:	100c9000 	call	100c900 <__mulsi3>
 100e218:	b00b883a 	mov	r5,r22
 100e21c:	a809883a 	mov	r4,r21
 100e220:	d8800415 	stw	r2,16(sp)
 100e224:	100c9000 	call	100c900 <__mulsi3>
 100e228:	d9c00217 	ldw	r7,8(sp)
 100e22c:	1505883a 	add	r2,r2,r20
 100e230:	d8c00517 	ldw	r3,20(sp)
 100e234:	3826d43a 	srli	r19,r7,16
 100e238:	d9800717 	ldw	r6,28(sp)
 100e23c:	da000617 	ldw	r8,24(sp)
 100e240:	9885883a 	add	r2,r19,r2
 100e244:	da400417 	ldw	r9,16(sp)
 100e248:	1500022e 	bgeu	r2,r20,100e254 <__muldf3+0x458>
 100e24c:	01000074 	movhi	r4,1
 100e250:	4913883a 	add	r9,r9,r4
 100e254:	1028d43a 	srli	r20,r2,16
 100e258:	1004943a 	slli	r2,r2,16
 100e25c:	802cd43a 	srli	r22,r16,16
 100e260:	843fffcc 	andi	r16,r16,65535
 100e264:	3cffffcc 	andi	r19,r7,65535
 100e268:	9009883a 	mov	r4,r18
 100e26c:	800b883a 	mov	r5,r16
 100e270:	a269883a 	add	r20,r20,r9
 100e274:	d8c00515 	stw	r3,20(sp)
 100e278:	d9800715 	stw	r6,28(sp)
 100e27c:	da000615 	stw	r8,24(sp)
 100e280:	14e7883a 	add	r19,r2,r19
 100e284:	100c9000 	call	100c900 <__mulsi3>
 100e288:	9009883a 	mov	r4,r18
 100e28c:	b00b883a 	mov	r5,r22
 100e290:	d8800315 	stw	r2,12(sp)
 100e294:	100c9000 	call	100c900 <__mulsi3>
 100e298:	b809883a 	mov	r4,r23
 100e29c:	b00b883a 	mov	r5,r22
 100e2a0:	d8800215 	stw	r2,8(sp)
 100e2a4:	100c9000 	call	100c900 <__mulsi3>
 100e2a8:	b80b883a 	mov	r5,r23
 100e2ac:	8009883a 	mov	r4,r16
 100e2b0:	d8800415 	stw	r2,16(sp)
 100e2b4:	100c9000 	call	100c900 <__mulsi3>
 100e2b8:	da800317 	ldw	r10,12(sp)
 100e2bc:	d9c00217 	ldw	r7,8(sp)
 100e2c0:	d9000017 	ldw	r4,0(sp)
 100e2c4:	502ed43a 	srli	r23,r10,16
 100e2c8:	11c5883a 	add	r2,r2,r7
 100e2cc:	24e5883a 	add	r18,r4,r19
 100e2d0:	b885883a 	add	r2,r23,r2
 100e2d4:	d8c00517 	ldw	r3,20(sp)
 100e2d8:	d9800717 	ldw	r6,28(sp)
 100e2dc:	da000617 	ldw	r8,24(sp)
 100e2e0:	da400417 	ldw	r9,16(sp)
 100e2e4:	11c0022e 	bgeu	r2,r7,100e2f0 <__muldf3+0x4f4>
 100e2e8:	01000074 	movhi	r4,1
 100e2ec:	4913883a 	add	r9,r9,r4
 100e2f0:	100ed43a 	srli	r7,r2,16
 100e2f4:	1004943a 	slli	r2,r2,16
 100e2f8:	55ffffcc 	andi	r23,r10,65535
 100e2fc:	3a53883a 	add	r9,r7,r9
 100e300:	8809883a 	mov	r4,r17
 100e304:	800b883a 	mov	r5,r16
 100e308:	d8c00515 	stw	r3,20(sp)
 100e30c:	d9800715 	stw	r6,28(sp)
 100e310:	da000615 	stw	r8,24(sp)
 100e314:	da400415 	stw	r9,16(sp)
 100e318:	15ef883a 	add	r23,r2,r23
 100e31c:	100c9000 	call	100c900 <__mulsi3>
 100e320:	8809883a 	mov	r4,r17
 100e324:	b00b883a 	mov	r5,r22
 100e328:	d8800215 	stw	r2,8(sp)
 100e32c:	100c9000 	call	100c900 <__mulsi3>
 100e330:	b00b883a 	mov	r5,r22
 100e334:	a809883a 	mov	r4,r21
 100e338:	d8800315 	stw	r2,12(sp)
 100e33c:	100c9000 	call	100c900 <__mulsi3>
 100e340:	8009883a 	mov	r4,r16
 100e344:	a80b883a 	mov	r5,r21
 100e348:	1023883a 	mov	r17,r2
 100e34c:	100c9000 	call	100c900 <__mulsi3>
 100e350:	d9c00217 	ldw	r7,8(sp)
 100e354:	da800317 	ldw	r10,12(sp)
 100e358:	d8c00517 	ldw	r3,20(sp)
 100e35c:	3808d43a 	srli	r4,r7,16
 100e360:	1285883a 	add	r2,r2,r10
 100e364:	d9800717 	ldw	r6,28(sp)
 100e368:	2085883a 	add	r2,r4,r2
 100e36c:	da000617 	ldw	r8,24(sp)
 100e370:	da400417 	ldw	r9,16(sp)
 100e374:	1280022e 	bgeu	r2,r10,100e380 <__muldf3+0x584>
 100e378:	01000074 	movhi	r4,1
 100e37c:	8923883a 	add	r17,r17,r4
 100e380:	1008943a 	slli	r4,r2,16
 100e384:	39ffffcc 	andi	r7,r7,65535
 100e388:	e4b9883a 	add	fp,fp,r18
 100e38c:	21cf883a 	add	r7,r4,r7
 100e390:	e4e7803a 	cmpltu	r19,fp,r19
 100e394:	3d0f883a 	add	r7,r7,r20
 100e398:	bf39883a 	add	fp,r23,fp
 100e39c:	99c9883a 	add	r4,r19,r7
 100e3a0:	e5ef803a 	cmpltu	r23,fp,r23
 100e3a4:	490b883a 	add	r5,r9,r4
 100e3a8:	1004d43a 	srli	r2,r2,16
 100e3ac:	b965883a 	add	r18,r23,r5
 100e3b0:	24c9803a 	cmpltu	r4,r4,r19
 100e3b4:	3d29803a 	cmpltu	r20,r7,r20
 100e3b8:	a128b03a 	or	r20,r20,r4
 100e3bc:	95ef803a 	cmpltu	r23,r18,r23
 100e3c0:	2a53803a 	cmpltu	r9,r5,r9
 100e3c4:	a0a9883a 	add	r20,r20,r2
 100e3c8:	4deeb03a 	or	r23,r9,r23
 100e3cc:	a5ef883a 	add	r23,r20,r23
 100e3d0:	bc63883a 	add	r17,r23,r17
 100e3d4:	e004927a 	slli	r2,fp,9
 100e3d8:	d9000117 	ldw	r4,4(sp)
 100e3dc:	882e927a 	slli	r23,r17,9
 100e3e0:	9022d5fa 	srli	r17,r18,23
 100e3e4:	e038d5fa 	srli	fp,fp,23
 100e3e8:	1104b03a 	or	r2,r2,r4
 100e3ec:	9024927a 	slli	r18,r18,9
 100e3f0:	1004c03a 	cmpne	r2,r2,zero
 100e3f4:	bc62b03a 	or	r17,r23,r17
 100e3f8:	1738b03a 	or	fp,r2,fp
 100e3fc:	8880402c 	andhi	r2,r17,256
 100e400:	e4a4b03a 	or	r18,fp,r18
 100e404:	10000726 	beq	r2,zero,100e424 <__muldf3+0x628>
 100e408:	9006d07a 	srli	r3,r18,1
 100e40c:	880497fa 	slli	r2,r17,31
 100e410:	9480004c 	andi	r18,r18,1
 100e414:	8822d07a 	srli	r17,r17,1
 100e418:	1ca4b03a 	or	r18,r3,r18
 100e41c:	14a4b03a 	or	r18,r2,r18
 100e420:	4007883a 	mov	r3,r8
 100e424:	1880ffc4 	addi	r2,r3,1023
 100e428:	0080460e 	bge	zero,r2,100e544 <__muldf3+0x748>
 100e42c:	910001cc 	andi	r4,r18,7
 100e430:	20000726 	beq	r4,zero,100e450 <__muldf3+0x654>
 100e434:	910003cc 	andi	r4,r18,15
 100e438:	01400104 	movi	r5,4
 100e43c:	21400426 	beq	r4,r5,100e450 <__muldf3+0x654>
 100e440:	9149883a 	add	r4,r18,r5
 100e444:	24a5803a 	cmpltu	r18,r4,r18
 100e448:	8ca3883a 	add	r17,r17,r18
 100e44c:	2025883a 	mov	r18,r4
 100e450:	8900402c 	andhi	r4,r17,256
 100e454:	20000426 	beq	r4,zero,100e468 <__muldf3+0x66c>
 100e458:	18810004 	addi	r2,r3,1024
 100e45c:	00ffc034 	movhi	r3,65280
 100e460:	18ffffc4 	addi	r3,r3,-1
 100e464:	88e2703a 	and	r17,r17,r3
 100e468:	00c1ff84 	movi	r3,2046
 100e46c:	18bf1316 	blt	r3,r2,100e0bc <__alt_data_end+0xff80e0bc>
 100e470:	882c977a 	slli	r22,r17,29
 100e474:	9024d0fa 	srli	r18,r18,3
 100e478:	8822927a 	slli	r17,r17,9
 100e47c:	1081ffcc 	andi	r2,r2,2047
 100e480:	b4acb03a 	or	r22,r22,r18
 100e484:	8820d33a 	srli	r16,r17,12
 100e488:	3027883a 	mov	r19,r6
 100e48c:	003eba06 	br	100df78 <__alt_data_end+0xff80df78>
 100e490:	8080022c 	andhi	r2,r16,8
 100e494:	10000926 	beq	r2,zero,100e4bc <__muldf3+0x6c0>
 100e498:	8880022c 	andhi	r2,r17,8
 100e49c:	1000071e 	bne	r2,zero,100e4bc <__muldf3+0x6c0>
 100e4a0:	00800434 	movhi	r2,16
 100e4a4:	8c000234 	orhi	r16,r17,8
 100e4a8:	10bfffc4 	addi	r2,r2,-1
 100e4ac:	e027883a 	mov	r19,fp
 100e4b0:	80a0703a 	and	r16,r16,r2
 100e4b4:	902d883a 	mov	r22,r18
 100e4b8:	003f1706 	br	100e118 <__alt_data_end+0xff80e118>
 100e4bc:	00800434 	movhi	r2,16
 100e4c0:	84000234 	orhi	r16,r16,8
 100e4c4:	10bfffc4 	addi	r2,r2,-1
 100e4c8:	80a0703a 	and	r16,r16,r2
 100e4cc:	003f1206 	br	100e118 <__alt_data_end+0xff80e118>
 100e4d0:	147ff604 	addi	r17,r2,-40
 100e4d4:	3462983a 	sll	r17,r6,r17
 100e4d8:	0025883a 	mov	r18,zero
 100e4dc:	003ef306 	br	100e0ac <__alt_data_end+0xff80e0ac>
 100e4e0:	3009883a 	mov	r4,r6
 100e4e4:	d9400215 	stw	r5,8(sp)
 100e4e8:	d9800715 	stw	r6,28(sp)
 100e4ec:	da400415 	stw	r9,16(sp)
 100e4f0:	da800315 	stw	r10,12(sp)
 100e4f4:	100f1680 	call	100f168 <__clzsi2>
 100e4f8:	10800804 	addi	r2,r2,32
 100e4fc:	da800317 	ldw	r10,12(sp)
 100e500:	da400417 	ldw	r9,16(sp)
 100e504:	d9800717 	ldw	r6,28(sp)
 100e508:	d9400217 	ldw	r5,8(sp)
 100e50c:	003edd06 	br	100e084 <__alt_data_end+0xff80e084>
 100e510:	143ff604 	addi	r16,r2,-40
 100e514:	ac20983a 	sll	r16,r21,r16
 100e518:	002d883a 	mov	r22,zero
 100e51c:	003ec106 	br	100e024 <__alt_data_end+0xff80e024>
 100e520:	d9800715 	stw	r6,28(sp)
 100e524:	d9c00215 	stw	r7,8(sp)
 100e528:	da400415 	stw	r9,16(sp)
 100e52c:	100f1680 	call	100f168 <__clzsi2>
 100e530:	10800804 	addi	r2,r2,32
 100e534:	da400417 	ldw	r9,16(sp)
 100e538:	d9c00217 	ldw	r7,8(sp)
 100e53c:	d9800717 	ldw	r6,28(sp)
 100e540:	003eae06 	br	100dffc <__alt_data_end+0xff80dffc>
 100e544:	00c00044 	movi	r3,1
 100e548:	1887c83a 	sub	r3,r3,r2
 100e54c:	01000e04 	movi	r4,56
 100e550:	20fe8516 	blt	r4,r3,100df68 <__alt_data_end+0xff80df68>
 100e554:	010007c4 	movi	r4,31
 100e558:	20c01b16 	blt	r4,r3,100e5c8 <__muldf3+0x7cc>
 100e55c:	00800804 	movi	r2,32
 100e560:	10c5c83a 	sub	r2,r2,r3
 100e564:	888a983a 	sll	r5,r17,r2
 100e568:	90c8d83a 	srl	r4,r18,r3
 100e56c:	9084983a 	sll	r2,r18,r2
 100e570:	88e2d83a 	srl	r17,r17,r3
 100e574:	2906b03a 	or	r3,r5,r4
 100e578:	1004c03a 	cmpne	r2,r2,zero
 100e57c:	1886b03a 	or	r3,r3,r2
 100e580:	188001cc 	andi	r2,r3,7
 100e584:	10000726 	beq	r2,zero,100e5a4 <__muldf3+0x7a8>
 100e588:	188003cc 	andi	r2,r3,15
 100e58c:	01000104 	movi	r4,4
 100e590:	11000426 	beq	r2,r4,100e5a4 <__muldf3+0x7a8>
 100e594:	1805883a 	mov	r2,r3
 100e598:	10c00104 	addi	r3,r2,4
 100e59c:	1885803a 	cmpltu	r2,r3,r2
 100e5a0:	88a3883a 	add	r17,r17,r2
 100e5a4:	8880202c 	andhi	r2,r17,128
 100e5a8:	10001c26 	beq	r2,zero,100e61c <__muldf3+0x820>
 100e5ac:	3027883a 	mov	r19,r6
 100e5b0:	00800044 	movi	r2,1
 100e5b4:	0021883a 	mov	r16,zero
 100e5b8:	002d883a 	mov	r22,zero
 100e5bc:	003e6e06 	br	100df78 <__alt_data_end+0xff80df78>
 100e5c0:	4007883a 	mov	r3,r8
 100e5c4:	003f9706 	br	100e424 <__alt_data_end+0xff80e424>
 100e5c8:	017ff844 	movi	r5,-31
 100e5cc:	2885c83a 	sub	r2,r5,r2
 100e5d0:	888ad83a 	srl	r5,r17,r2
 100e5d4:	00800804 	movi	r2,32
 100e5d8:	18801a26 	beq	r3,r2,100e644 <__muldf3+0x848>
 100e5dc:	01001004 	movi	r4,64
 100e5e0:	20c7c83a 	sub	r3,r4,r3
 100e5e4:	88e2983a 	sll	r17,r17,r3
 100e5e8:	8ca4b03a 	or	r18,r17,r18
 100e5ec:	9004c03a 	cmpne	r2,r18,zero
 100e5f0:	2884b03a 	or	r2,r5,r2
 100e5f4:	144001cc 	andi	r17,r2,7
 100e5f8:	88000d1e 	bne	r17,zero,100e630 <__muldf3+0x834>
 100e5fc:	0021883a 	mov	r16,zero
 100e600:	102cd0fa 	srli	r22,r2,3
 100e604:	3027883a 	mov	r19,r6
 100e608:	0005883a 	mov	r2,zero
 100e60c:	b46cb03a 	or	r22,r22,r17
 100e610:	003e5906 	br	100df78 <__alt_data_end+0xff80df78>
 100e614:	1007883a 	mov	r3,r2
 100e618:	0023883a 	mov	r17,zero
 100e61c:	8820927a 	slli	r16,r17,9
 100e620:	1805883a 	mov	r2,r3
 100e624:	8822977a 	slli	r17,r17,29
 100e628:	8020d33a 	srli	r16,r16,12
 100e62c:	003ff406 	br	100e600 <__alt_data_end+0xff80e600>
 100e630:	10c003cc 	andi	r3,r2,15
 100e634:	01000104 	movi	r4,4
 100e638:	193ff626 	beq	r3,r4,100e614 <__alt_data_end+0xff80e614>
 100e63c:	0023883a 	mov	r17,zero
 100e640:	003fd506 	br	100e598 <__alt_data_end+0xff80e598>
 100e644:	0023883a 	mov	r17,zero
 100e648:	003fe706 	br	100e5e8 <__alt_data_end+0xff80e5e8>
 100e64c:	00800434 	movhi	r2,16
 100e650:	8c000234 	orhi	r16,r17,8
 100e654:	10bfffc4 	addi	r2,r2,-1
 100e658:	3027883a 	mov	r19,r6
 100e65c:	80a0703a 	and	r16,r16,r2
 100e660:	902d883a 	mov	r22,r18
 100e664:	003eac06 	br	100e118 <__alt_data_end+0xff80e118>

0100e668 <__subdf3>:
 100e668:	02000434 	movhi	r8,16
 100e66c:	423fffc4 	addi	r8,r8,-1
 100e670:	defffb04 	addi	sp,sp,-20
 100e674:	2a14703a 	and	r10,r5,r8
 100e678:	3812d53a 	srli	r9,r7,20
 100e67c:	3a10703a 	and	r8,r7,r8
 100e680:	2006d77a 	srli	r3,r4,29
 100e684:	3004d77a 	srli	r2,r6,29
 100e688:	dc000015 	stw	r16,0(sp)
 100e68c:	501490fa 	slli	r10,r10,3
 100e690:	2820d53a 	srli	r16,r5,20
 100e694:	401090fa 	slli	r8,r8,3
 100e698:	dc800215 	stw	r18,8(sp)
 100e69c:	dc400115 	stw	r17,4(sp)
 100e6a0:	dfc00415 	stw	ra,16(sp)
 100e6a4:	202290fa 	slli	r17,r4,3
 100e6a8:	dcc00315 	stw	r19,12(sp)
 100e6ac:	4a41ffcc 	andi	r9,r9,2047
 100e6b0:	0101ffc4 	movi	r4,2047
 100e6b4:	2824d7fa 	srli	r18,r5,31
 100e6b8:	8401ffcc 	andi	r16,r16,2047
 100e6bc:	50c6b03a 	or	r3,r10,r3
 100e6c0:	380ed7fa 	srli	r7,r7,31
 100e6c4:	408ab03a 	or	r5,r8,r2
 100e6c8:	300c90fa 	slli	r6,r6,3
 100e6cc:	49009626 	beq	r9,r4,100e928 <__subdf3+0x2c0>
 100e6d0:	39c0005c 	xori	r7,r7,1
 100e6d4:	8245c83a 	sub	r2,r16,r9
 100e6d8:	3c807426 	beq	r7,r18,100e8ac <__subdf3+0x244>
 100e6dc:	0080af0e 	bge	zero,r2,100e99c <__subdf3+0x334>
 100e6e0:	48002a1e 	bne	r9,zero,100e78c <__subdf3+0x124>
 100e6e4:	2988b03a 	or	r4,r5,r6
 100e6e8:	20009a1e 	bne	r4,zero,100e954 <__subdf3+0x2ec>
 100e6ec:	888001cc 	andi	r2,r17,7
 100e6f0:	10000726 	beq	r2,zero,100e710 <__subdf3+0xa8>
 100e6f4:	888003cc 	andi	r2,r17,15
 100e6f8:	01000104 	movi	r4,4
 100e6fc:	11000426 	beq	r2,r4,100e710 <__subdf3+0xa8>
 100e700:	890b883a 	add	r5,r17,r4
 100e704:	2c63803a 	cmpltu	r17,r5,r17
 100e708:	1c47883a 	add	r3,r3,r17
 100e70c:	2823883a 	mov	r17,r5
 100e710:	1880202c 	andhi	r2,r3,128
 100e714:	10005926 	beq	r2,zero,100e87c <__subdf3+0x214>
 100e718:	84000044 	addi	r16,r16,1
 100e71c:	0081ffc4 	movi	r2,2047
 100e720:	8080be26 	beq	r16,r2,100ea1c <__subdf3+0x3b4>
 100e724:	017fe034 	movhi	r5,65408
 100e728:	297fffc4 	addi	r5,r5,-1
 100e72c:	1946703a 	and	r3,r3,r5
 100e730:	1804977a 	slli	r2,r3,29
 100e734:	1806927a 	slli	r3,r3,9
 100e738:	8822d0fa 	srli	r17,r17,3
 100e73c:	8401ffcc 	andi	r16,r16,2047
 100e740:	180ad33a 	srli	r5,r3,12
 100e744:	9100004c 	andi	r4,r18,1
 100e748:	1444b03a 	or	r2,r2,r17
 100e74c:	80c1ffcc 	andi	r3,r16,2047
 100e750:	1820953a 	slli	r16,r3,20
 100e754:	20c03fcc 	andi	r3,r4,255
 100e758:	180897fa 	slli	r4,r3,31
 100e75c:	00c00434 	movhi	r3,16
 100e760:	18ffffc4 	addi	r3,r3,-1
 100e764:	28c6703a 	and	r3,r5,r3
 100e768:	1c06b03a 	or	r3,r3,r16
 100e76c:	1906b03a 	or	r3,r3,r4
 100e770:	dfc00417 	ldw	ra,16(sp)
 100e774:	dcc00317 	ldw	r19,12(sp)
 100e778:	dc800217 	ldw	r18,8(sp)
 100e77c:	dc400117 	ldw	r17,4(sp)
 100e780:	dc000017 	ldw	r16,0(sp)
 100e784:	dec00504 	addi	sp,sp,20
 100e788:	f800283a 	ret
 100e78c:	0101ffc4 	movi	r4,2047
 100e790:	813fd626 	beq	r16,r4,100e6ec <__alt_data_end+0xff80e6ec>
 100e794:	29402034 	orhi	r5,r5,128
 100e798:	01000e04 	movi	r4,56
 100e79c:	2080a316 	blt	r4,r2,100ea2c <__subdf3+0x3c4>
 100e7a0:	010007c4 	movi	r4,31
 100e7a4:	2080c616 	blt	r4,r2,100eac0 <__subdf3+0x458>
 100e7a8:	01000804 	movi	r4,32
 100e7ac:	2089c83a 	sub	r4,r4,r2
 100e7b0:	2910983a 	sll	r8,r5,r4
 100e7b4:	308ed83a 	srl	r7,r6,r2
 100e7b8:	3108983a 	sll	r4,r6,r4
 100e7bc:	2884d83a 	srl	r2,r5,r2
 100e7c0:	41ccb03a 	or	r6,r8,r7
 100e7c4:	2008c03a 	cmpne	r4,r4,zero
 100e7c8:	310cb03a 	or	r6,r6,r4
 100e7cc:	898dc83a 	sub	r6,r17,r6
 100e7d0:	89a3803a 	cmpltu	r17,r17,r6
 100e7d4:	1887c83a 	sub	r3,r3,r2
 100e7d8:	1c47c83a 	sub	r3,r3,r17
 100e7dc:	3023883a 	mov	r17,r6
 100e7e0:	1880202c 	andhi	r2,r3,128
 100e7e4:	10002326 	beq	r2,zero,100e874 <__subdf3+0x20c>
 100e7e8:	04c02034 	movhi	r19,128
 100e7ec:	9cffffc4 	addi	r19,r19,-1
 100e7f0:	1ce6703a 	and	r19,r3,r19
 100e7f4:	98007a26 	beq	r19,zero,100e9e0 <__subdf3+0x378>
 100e7f8:	9809883a 	mov	r4,r19
 100e7fc:	100f1680 	call	100f168 <__clzsi2>
 100e800:	113ffe04 	addi	r4,r2,-8
 100e804:	00c007c4 	movi	r3,31
 100e808:	19007b16 	blt	r3,r4,100e9f8 <__subdf3+0x390>
 100e80c:	00800804 	movi	r2,32
 100e810:	1105c83a 	sub	r2,r2,r4
 100e814:	8884d83a 	srl	r2,r17,r2
 100e818:	9906983a 	sll	r3,r19,r4
 100e81c:	8922983a 	sll	r17,r17,r4
 100e820:	10c4b03a 	or	r2,r2,r3
 100e824:	24007816 	blt	r4,r16,100ea08 <__subdf3+0x3a0>
 100e828:	2421c83a 	sub	r16,r4,r16
 100e82c:	80c00044 	addi	r3,r16,1
 100e830:	010007c4 	movi	r4,31
 100e834:	20c09516 	blt	r4,r3,100ea8c <__subdf3+0x424>
 100e838:	01400804 	movi	r5,32
 100e83c:	28cbc83a 	sub	r5,r5,r3
 100e840:	88c8d83a 	srl	r4,r17,r3
 100e844:	8962983a 	sll	r17,r17,r5
 100e848:	114a983a 	sll	r5,r2,r5
 100e84c:	10c6d83a 	srl	r3,r2,r3
 100e850:	8804c03a 	cmpne	r2,r17,zero
 100e854:	290ab03a 	or	r5,r5,r4
 100e858:	28a2b03a 	or	r17,r5,r2
 100e85c:	0021883a 	mov	r16,zero
 100e860:	003fa206 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100e864:	2090b03a 	or	r8,r4,r2
 100e868:	40018e26 	beq	r8,zero,100eea4 <__subdf3+0x83c>
 100e86c:	1007883a 	mov	r3,r2
 100e870:	2023883a 	mov	r17,r4
 100e874:	888001cc 	andi	r2,r17,7
 100e878:	103f9e1e 	bne	r2,zero,100e6f4 <__alt_data_end+0xff80e6f4>
 100e87c:	1804977a 	slli	r2,r3,29
 100e880:	8822d0fa 	srli	r17,r17,3
 100e884:	1810d0fa 	srli	r8,r3,3
 100e888:	9100004c 	andi	r4,r18,1
 100e88c:	1444b03a 	or	r2,r2,r17
 100e890:	00c1ffc4 	movi	r3,2047
 100e894:	80c02826 	beq	r16,r3,100e938 <__subdf3+0x2d0>
 100e898:	01400434 	movhi	r5,16
 100e89c:	297fffc4 	addi	r5,r5,-1
 100e8a0:	80e0703a 	and	r16,r16,r3
 100e8a4:	414a703a 	and	r5,r8,r5
 100e8a8:	003fa806 	br	100e74c <__alt_data_end+0xff80e74c>
 100e8ac:	0080630e 	bge	zero,r2,100ea3c <__subdf3+0x3d4>
 100e8b0:	48003026 	beq	r9,zero,100e974 <__subdf3+0x30c>
 100e8b4:	0101ffc4 	movi	r4,2047
 100e8b8:	813f8c26 	beq	r16,r4,100e6ec <__alt_data_end+0xff80e6ec>
 100e8bc:	29402034 	orhi	r5,r5,128
 100e8c0:	01000e04 	movi	r4,56
 100e8c4:	2080a90e 	bge	r4,r2,100eb6c <__subdf3+0x504>
 100e8c8:	298cb03a 	or	r6,r5,r6
 100e8cc:	3012c03a 	cmpne	r9,r6,zero
 100e8d0:	0005883a 	mov	r2,zero
 100e8d4:	4c53883a 	add	r9,r9,r17
 100e8d8:	4c63803a 	cmpltu	r17,r9,r17
 100e8dc:	10c7883a 	add	r3,r2,r3
 100e8e0:	88c7883a 	add	r3,r17,r3
 100e8e4:	4823883a 	mov	r17,r9
 100e8e8:	1880202c 	andhi	r2,r3,128
 100e8ec:	1000d026 	beq	r2,zero,100ec30 <__subdf3+0x5c8>
 100e8f0:	84000044 	addi	r16,r16,1
 100e8f4:	0081ffc4 	movi	r2,2047
 100e8f8:	8080fe26 	beq	r16,r2,100ecf4 <__subdf3+0x68c>
 100e8fc:	00bfe034 	movhi	r2,65408
 100e900:	10bfffc4 	addi	r2,r2,-1
 100e904:	1886703a 	and	r3,r3,r2
 100e908:	880ad07a 	srli	r5,r17,1
 100e90c:	180497fa 	slli	r2,r3,31
 100e910:	8900004c 	andi	r4,r17,1
 100e914:	2922b03a 	or	r17,r5,r4
 100e918:	1806d07a 	srli	r3,r3,1
 100e91c:	1462b03a 	or	r17,r2,r17
 100e920:	3825883a 	mov	r18,r7
 100e924:	003f7106 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100e928:	2984b03a 	or	r2,r5,r6
 100e92c:	103f6826 	beq	r2,zero,100e6d0 <__alt_data_end+0xff80e6d0>
 100e930:	39c03fcc 	andi	r7,r7,255
 100e934:	003f6706 	br	100e6d4 <__alt_data_end+0xff80e6d4>
 100e938:	4086b03a 	or	r3,r8,r2
 100e93c:	18015226 	beq	r3,zero,100ee88 <__subdf3+0x820>
 100e940:	00c00434 	movhi	r3,16
 100e944:	41400234 	orhi	r5,r8,8
 100e948:	18ffffc4 	addi	r3,r3,-1
 100e94c:	28ca703a 	and	r5,r5,r3
 100e950:	003f7e06 	br	100e74c <__alt_data_end+0xff80e74c>
 100e954:	10bfffc4 	addi	r2,r2,-1
 100e958:	1000491e 	bne	r2,zero,100ea80 <__subdf3+0x418>
 100e95c:	898fc83a 	sub	r7,r17,r6
 100e960:	89e3803a 	cmpltu	r17,r17,r7
 100e964:	1947c83a 	sub	r3,r3,r5
 100e968:	1c47c83a 	sub	r3,r3,r17
 100e96c:	3823883a 	mov	r17,r7
 100e970:	003f9b06 	br	100e7e0 <__alt_data_end+0xff80e7e0>
 100e974:	2988b03a 	or	r4,r5,r6
 100e978:	203f5c26 	beq	r4,zero,100e6ec <__alt_data_end+0xff80e6ec>
 100e97c:	10bfffc4 	addi	r2,r2,-1
 100e980:	1000931e 	bne	r2,zero,100ebd0 <__subdf3+0x568>
 100e984:	898d883a 	add	r6,r17,r6
 100e988:	3463803a 	cmpltu	r17,r6,r17
 100e98c:	1947883a 	add	r3,r3,r5
 100e990:	88c7883a 	add	r3,r17,r3
 100e994:	3023883a 	mov	r17,r6
 100e998:	003fd306 	br	100e8e8 <__alt_data_end+0xff80e8e8>
 100e99c:	1000541e 	bne	r2,zero,100eaf0 <__subdf3+0x488>
 100e9a0:	80800044 	addi	r2,r16,1
 100e9a4:	1081ffcc 	andi	r2,r2,2047
 100e9a8:	01000044 	movi	r4,1
 100e9ac:	2080a20e 	bge	r4,r2,100ec38 <__subdf3+0x5d0>
 100e9b0:	8989c83a 	sub	r4,r17,r6
 100e9b4:	8905803a 	cmpltu	r2,r17,r4
 100e9b8:	1967c83a 	sub	r19,r3,r5
 100e9bc:	98a7c83a 	sub	r19,r19,r2
 100e9c0:	9880202c 	andhi	r2,r19,128
 100e9c4:	10006326 	beq	r2,zero,100eb54 <__subdf3+0x4ec>
 100e9c8:	3463c83a 	sub	r17,r6,r17
 100e9cc:	28c7c83a 	sub	r3,r5,r3
 100e9d0:	344d803a 	cmpltu	r6,r6,r17
 100e9d4:	19a7c83a 	sub	r19,r3,r6
 100e9d8:	3825883a 	mov	r18,r7
 100e9dc:	983f861e 	bne	r19,zero,100e7f8 <__alt_data_end+0xff80e7f8>
 100e9e0:	8809883a 	mov	r4,r17
 100e9e4:	100f1680 	call	100f168 <__clzsi2>
 100e9e8:	10800804 	addi	r2,r2,32
 100e9ec:	113ffe04 	addi	r4,r2,-8
 100e9f0:	00c007c4 	movi	r3,31
 100e9f4:	193f850e 	bge	r3,r4,100e80c <__alt_data_end+0xff80e80c>
 100e9f8:	10bff604 	addi	r2,r2,-40
 100e9fc:	8884983a 	sll	r2,r17,r2
 100ea00:	0023883a 	mov	r17,zero
 100ea04:	243f880e 	bge	r4,r16,100e828 <__alt_data_end+0xff80e828>
 100ea08:	00ffe034 	movhi	r3,65408
 100ea0c:	18ffffc4 	addi	r3,r3,-1
 100ea10:	8121c83a 	sub	r16,r16,r4
 100ea14:	10c6703a 	and	r3,r2,r3
 100ea18:	003f3406 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ea1c:	9100004c 	andi	r4,r18,1
 100ea20:	000b883a 	mov	r5,zero
 100ea24:	0005883a 	mov	r2,zero
 100ea28:	003f4806 	br	100e74c <__alt_data_end+0xff80e74c>
 100ea2c:	298cb03a 	or	r6,r5,r6
 100ea30:	300cc03a 	cmpne	r6,r6,zero
 100ea34:	0005883a 	mov	r2,zero
 100ea38:	003f6406 	br	100e7cc <__alt_data_end+0xff80e7cc>
 100ea3c:	10009a1e 	bne	r2,zero,100eca8 <__subdf3+0x640>
 100ea40:	82400044 	addi	r9,r16,1
 100ea44:	4881ffcc 	andi	r2,r9,2047
 100ea48:	02800044 	movi	r10,1
 100ea4c:	5080670e 	bge	r10,r2,100ebec <__subdf3+0x584>
 100ea50:	0081ffc4 	movi	r2,2047
 100ea54:	4880af26 	beq	r9,r2,100ed14 <__subdf3+0x6ac>
 100ea58:	898d883a 	add	r6,r17,r6
 100ea5c:	1945883a 	add	r2,r3,r5
 100ea60:	3447803a 	cmpltu	r3,r6,r17
 100ea64:	1887883a 	add	r3,r3,r2
 100ea68:	182297fa 	slli	r17,r3,31
 100ea6c:	300cd07a 	srli	r6,r6,1
 100ea70:	1806d07a 	srli	r3,r3,1
 100ea74:	4821883a 	mov	r16,r9
 100ea78:	89a2b03a 	or	r17,r17,r6
 100ea7c:	003f1b06 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ea80:	0101ffc4 	movi	r4,2047
 100ea84:	813f441e 	bne	r16,r4,100e798 <__alt_data_end+0xff80e798>
 100ea88:	003f1806 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ea8c:	843ff844 	addi	r16,r16,-31
 100ea90:	01400804 	movi	r5,32
 100ea94:	1408d83a 	srl	r4,r2,r16
 100ea98:	19405026 	beq	r3,r5,100ebdc <__subdf3+0x574>
 100ea9c:	01401004 	movi	r5,64
 100eaa0:	28c7c83a 	sub	r3,r5,r3
 100eaa4:	10c4983a 	sll	r2,r2,r3
 100eaa8:	88a2b03a 	or	r17,r17,r2
 100eaac:	8822c03a 	cmpne	r17,r17,zero
 100eab0:	2462b03a 	or	r17,r4,r17
 100eab4:	0007883a 	mov	r3,zero
 100eab8:	0021883a 	mov	r16,zero
 100eabc:	003f6d06 	br	100e874 <__alt_data_end+0xff80e874>
 100eac0:	11fff804 	addi	r7,r2,-32
 100eac4:	01000804 	movi	r4,32
 100eac8:	29ced83a 	srl	r7,r5,r7
 100eacc:	11004526 	beq	r2,r4,100ebe4 <__subdf3+0x57c>
 100ead0:	01001004 	movi	r4,64
 100ead4:	2089c83a 	sub	r4,r4,r2
 100ead8:	2904983a 	sll	r2,r5,r4
 100eadc:	118cb03a 	or	r6,r2,r6
 100eae0:	300cc03a 	cmpne	r6,r6,zero
 100eae4:	398cb03a 	or	r6,r7,r6
 100eae8:	0005883a 	mov	r2,zero
 100eaec:	003f3706 	br	100e7cc <__alt_data_end+0xff80e7cc>
 100eaf0:	80002a26 	beq	r16,zero,100eb9c <__subdf3+0x534>
 100eaf4:	0101ffc4 	movi	r4,2047
 100eaf8:	49006626 	beq	r9,r4,100ec94 <__subdf3+0x62c>
 100eafc:	0085c83a 	sub	r2,zero,r2
 100eb00:	18c02034 	orhi	r3,r3,128
 100eb04:	01000e04 	movi	r4,56
 100eb08:	20807e16 	blt	r4,r2,100ed04 <__subdf3+0x69c>
 100eb0c:	010007c4 	movi	r4,31
 100eb10:	2080e716 	blt	r4,r2,100eeb0 <__subdf3+0x848>
 100eb14:	01000804 	movi	r4,32
 100eb18:	2089c83a 	sub	r4,r4,r2
 100eb1c:	1914983a 	sll	r10,r3,r4
 100eb20:	8890d83a 	srl	r8,r17,r2
 100eb24:	8908983a 	sll	r4,r17,r4
 100eb28:	1884d83a 	srl	r2,r3,r2
 100eb2c:	5222b03a 	or	r17,r10,r8
 100eb30:	2006c03a 	cmpne	r3,r4,zero
 100eb34:	88e2b03a 	or	r17,r17,r3
 100eb38:	3463c83a 	sub	r17,r6,r17
 100eb3c:	2885c83a 	sub	r2,r5,r2
 100eb40:	344d803a 	cmpltu	r6,r6,r17
 100eb44:	1187c83a 	sub	r3,r2,r6
 100eb48:	4821883a 	mov	r16,r9
 100eb4c:	3825883a 	mov	r18,r7
 100eb50:	003f2306 	br	100e7e0 <__alt_data_end+0xff80e7e0>
 100eb54:	24d0b03a 	or	r8,r4,r19
 100eb58:	40001b1e 	bne	r8,zero,100ebc8 <__subdf3+0x560>
 100eb5c:	0005883a 	mov	r2,zero
 100eb60:	0009883a 	mov	r4,zero
 100eb64:	0021883a 	mov	r16,zero
 100eb68:	003f4906 	br	100e890 <__alt_data_end+0xff80e890>
 100eb6c:	010007c4 	movi	r4,31
 100eb70:	20803a16 	blt	r4,r2,100ec5c <__subdf3+0x5f4>
 100eb74:	01000804 	movi	r4,32
 100eb78:	2089c83a 	sub	r4,r4,r2
 100eb7c:	2912983a 	sll	r9,r5,r4
 100eb80:	3090d83a 	srl	r8,r6,r2
 100eb84:	3108983a 	sll	r4,r6,r4
 100eb88:	2884d83a 	srl	r2,r5,r2
 100eb8c:	4a12b03a 	or	r9,r9,r8
 100eb90:	2008c03a 	cmpne	r4,r4,zero
 100eb94:	4912b03a 	or	r9,r9,r4
 100eb98:	003f4e06 	br	100e8d4 <__alt_data_end+0xff80e8d4>
 100eb9c:	1c48b03a 	or	r4,r3,r17
 100eba0:	20003c26 	beq	r4,zero,100ec94 <__subdf3+0x62c>
 100eba4:	0084303a 	nor	r2,zero,r2
 100eba8:	1000381e 	bne	r2,zero,100ec8c <__subdf3+0x624>
 100ebac:	3463c83a 	sub	r17,r6,r17
 100ebb0:	28c5c83a 	sub	r2,r5,r3
 100ebb4:	344d803a 	cmpltu	r6,r6,r17
 100ebb8:	1187c83a 	sub	r3,r2,r6
 100ebbc:	4821883a 	mov	r16,r9
 100ebc0:	3825883a 	mov	r18,r7
 100ebc4:	003f0606 	br	100e7e0 <__alt_data_end+0xff80e7e0>
 100ebc8:	2023883a 	mov	r17,r4
 100ebcc:	003f0906 	br	100e7f4 <__alt_data_end+0xff80e7f4>
 100ebd0:	0101ffc4 	movi	r4,2047
 100ebd4:	813f3a1e 	bne	r16,r4,100e8c0 <__alt_data_end+0xff80e8c0>
 100ebd8:	003ec406 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ebdc:	0005883a 	mov	r2,zero
 100ebe0:	003fb106 	br	100eaa8 <__alt_data_end+0xff80eaa8>
 100ebe4:	0005883a 	mov	r2,zero
 100ebe8:	003fbc06 	br	100eadc <__alt_data_end+0xff80eadc>
 100ebec:	1c44b03a 	or	r2,r3,r17
 100ebf0:	80008e1e 	bne	r16,zero,100ee2c <__subdf3+0x7c4>
 100ebf4:	1000c826 	beq	r2,zero,100ef18 <__subdf3+0x8b0>
 100ebf8:	2984b03a 	or	r2,r5,r6
 100ebfc:	103ebb26 	beq	r2,zero,100e6ec <__alt_data_end+0xff80e6ec>
 100ec00:	8989883a 	add	r4,r17,r6
 100ec04:	1945883a 	add	r2,r3,r5
 100ec08:	2447803a 	cmpltu	r3,r4,r17
 100ec0c:	1887883a 	add	r3,r3,r2
 100ec10:	1880202c 	andhi	r2,r3,128
 100ec14:	2023883a 	mov	r17,r4
 100ec18:	103f1626 	beq	r2,zero,100e874 <__alt_data_end+0xff80e874>
 100ec1c:	00bfe034 	movhi	r2,65408
 100ec20:	10bfffc4 	addi	r2,r2,-1
 100ec24:	5021883a 	mov	r16,r10
 100ec28:	1886703a 	and	r3,r3,r2
 100ec2c:	003eaf06 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ec30:	3825883a 	mov	r18,r7
 100ec34:	003f0f06 	br	100e874 <__alt_data_end+0xff80e874>
 100ec38:	1c44b03a 	or	r2,r3,r17
 100ec3c:	8000251e 	bne	r16,zero,100ecd4 <__subdf3+0x66c>
 100ec40:	1000661e 	bne	r2,zero,100eddc <__subdf3+0x774>
 100ec44:	2990b03a 	or	r8,r5,r6
 100ec48:	40009626 	beq	r8,zero,100eea4 <__subdf3+0x83c>
 100ec4c:	2807883a 	mov	r3,r5
 100ec50:	3023883a 	mov	r17,r6
 100ec54:	3825883a 	mov	r18,r7
 100ec58:	003ea406 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ec5c:	127ff804 	addi	r9,r2,-32
 100ec60:	01000804 	movi	r4,32
 100ec64:	2a52d83a 	srl	r9,r5,r9
 100ec68:	11008c26 	beq	r2,r4,100ee9c <__subdf3+0x834>
 100ec6c:	01001004 	movi	r4,64
 100ec70:	2085c83a 	sub	r2,r4,r2
 100ec74:	2884983a 	sll	r2,r5,r2
 100ec78:	118cb03a 	or	r6,r2,r6
 100ec7c:	300cc03a 	cmpne	r6,r6,zero
 100ec80:	4992b03a 	or	r9,r9,r6
 100ec84:	0005883a 	mov	r2,zero
 100ec88:	003f1206 	br	100e8d4 <__alt_data_end+0xff80e8d4>
 100ec8c:	0101ffc4 	movi	r4,2047
 100ec90:	493f9c1e 	bne	r9,r4,100eb04 <__alt_data_end+0xff80eb04>
 100ec94:	2807883a 	mov	r3,r5
 100ec98:	3023883a 	mov	r17,r6
 100ec9c:	4821883a 	mov	r16,r9
 100eca0:	3825883a 	mov	r18,r7
 100eca4:	003e9106 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100eca8:	80001f1e 	bne	r16,zero,100ed28 <__subdf3+0x6c0>
 100ecac:	1c48b03a 	or	r4,r3,r17
 100ecb0:	20005a26 	beq	r4,zero,100ee1c <__subdf3+0x7b4>
 100ecb4:	0084303a 	nor	r2,zero,r2
 100ecb8:	1000561e 	bne	r2,zero,100ee14 <__subdf3+0x7ac>
 100ecbc:	89a3883a 	add	r17,r17,r6
 100ecc0:	1945883a 	add	r2,r3,r5
 100ecc4:	898d803a 	cmpltu	r6,r17,r6
 100ecc8:	3087883a 	add	r3,r6,r2
 100eccc:	4821883a 	mov	r16,r9
 100ecd0:	003f0506 	br	100e8e8 <__alt_data_end+0xff80e8e8>
 100ecd4:	10002b1e 	bne	r2,zero,100ed84 <__subdf3+0x71c>
 100ecd8:	2984b03a 	or	r2,r5,r6
 100ecdc:	10008026 	beq	r2,zero,100eee0 <__subdf3+0x878>
 100ece0:	2807883a 	mov	r3,r5
 100ece4:	3023883a 	mov	r17,r6
 100ece8:	3825883a 	mov	r18,r7
 100ecec:	0401ffc4 	movi	r16,2047
 100ecf0:	003e7e06 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ecf4:	3809883a 	mov	r4,r7
 100ecf8:	0011883a 	mov	r8,zero
 100ecfc:	0005883a 	mov	r2,zero
 100ed00:	003ee306 	br	100e890 <__alt_data_end+0xff80e890>
 100ed04:	1c62b03a 	or	r17,r3,r17
 100ed08:	8822c03a 	cmpne	r17,r17,zero
 100ed0c:	0005883a 	mov	r2,zero
 100ed10:	003f8906 	br	100eb38 <__alt_data_end+0xff80eb38>
 100ed14:	3809883a 	mov	r4,r7
 100ed18:	4821883a 	mov	r16,r9
 100ed1c:	0011883a 	mov	r8,zero
 100ed20:	0005883a 	mov	r2,zero
 100ed24:	003eda06 	br	100e890 <__alt_data_end+0xff80e890>
 100ed28:	0101ffc4 	movi	r4,2047
 100ed2c:	49003b26 	beq	r9,r4,100ee1c <__subdf3+0x7b4>
 100ed30:	0085c83a 	sub	r2,zero,r2
 100ed34:	18c02034 	orhi	r3,r3,128
 100ed38:	01000e04 	movi	r4,56
 100ed3c:	20806e16 	blt	r4,r2,100eef8 <__subdf3+0x890>
 100ed40:	010007c4 	movi	r4,31
 100ed44:	20807716 	blt	r4,r2,100ef24 <__subdf3+0x8bc>
 100ed48:	01000804 	movi	r4,32
 100ed4c:	2089c83a 	sub	r4,r4,r2
 100ed50:	1914983a 	sll	r10,r3,r4
 100ed54:	8890d83a 	srl	r8,r17,r2
 100ed58:	8908983a 	sll	r4,r17,r4
 100ed5c:	1884d83a 	srl	r2,r3,r2
 100ed60:	5222b03a 	or	r17,r10,r8
 100ed64:	2006c03a 	cmpne	r3,r4,zero
 100ed68:	88e2b03a 	or	r17,r17,r3
 100ed6c:	89a3883a 	add	r17,r17,r6
 100ed70:	1145883a 	add	r2,r2,r5
 100ed74:	898d803a 	cmpltu	r6,r17,r6
 100ed78:	3087883a 	add	r3,r6,r2
 100ed7c:	4821883a 	mov	r16,r9
 100ed80:	003ed906 	br	100e8e8 <__alt_data_end+0xff80e8e8>
 100ed84:	2984b03a 	or	r2,r5,r6
 100ed88:	10004226 	beq	r2,zero,100ee94 <__subdf3+0x82c>
 100ed8c:	1808d0fa 	srli	r4,r3,3
 100ed90:	8822d0fa 	srli	r17,r17,3
 100ed94:	1806977a 	slli	r3,r3,29
 100ed98:	2080022c 	andhi	r2,r4,8
 100ed9c:	1c62b03a 	or	r17,r3,r17
 100eda0:	10000826 	beq	r2,zero,100edc4 <__subdf3+0x75c>
 100eda4:	2812d0fa 	srli	r9,r5,3
 100eda8:	4880022c 	andhi	r2,r9,8
 100edac:	1000051e 	bne	r2,zero,100edc4 <__subdf3+0x75c>
 100edb0:	300cd0fa 	srli	r6,r6,3
 100edb4:	2804977a 	slli	r2,r5,29
 100edb8:	4809883a 	mov	r4,r9
 100edbc:	3825883a 	mov	r18,r7
 100edc0:	11a2b03a 	or	r17,r2,r6
 100edc4:	8806d77a 	srli	r3,r17,29
 100edc8:	200890fa 	slli	r4,r4,3
 100edcc:	882290fa 	slli	r17,r17,3
 100edd0:	0401ffc4 	movi	r16,2047
 100edd4:	1906b03a 	or	r3,r3,r4
 100edd8:	003e4406 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100eddc:	2984b03a 	or	r2,r5,r6
 100ede0:	103e4226 	beq	r2,zero,100e6ec <__alt_data_end+0xff80e6ec>
 100ede4:	8989c83a 	sub	r4,r17,r6
 100ede8:	8911803a 	cmpltu	r8,r17,r4
 100edec:	1945c83a 	sub	r2,r3,r5
 100edf0:	1205c83a 	sub	r2,r2,r8
 100edf4:	1200202c 	andhi	r8,r2,128
 100edf8:	403e9a26 	beq	r8,zero,100e864 <__alt_data_end+0xff80e864>
 100edfc:	3463c83a 	sub	r17,r6,r17
 100ee00:	28c5c83a 	sub	r2,r5,r3
 100ee04:	344d803a 	cmpltu	r6,r6,r17
 100ee08:	1187c83a 	sub	r3,r2,r6
 100ee0c:	3825883a 	mov	r18,r7
 100ee10:	003e3606 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ee14:	0101ffc4 	movi	r4,2047
 100ee18:	493fc71e 	bne	r9,r4,100ed38 <__alt_data_end+0xff80ed38>
 100ee1c:	2807883a 	mov	r3,r5
 100ee20:	3023883a 	mov	r17,r6
 100ee24:	4821883a 	mov	r16,r9
 100ee28:	003e3006 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ee2c:	10003626 	beq	r2,zero,100ef08 <__subdf3+0x8a0>
 100ee30:	2984b03a 	or	r2,r5,r6
 100ee34:	10001726 	beq	r2,zero,100ee94 <__subdf3+0x82c>
 100ee38:	1808d0fa 	srli	r4,r3,3
 100ee3c:	8822d0fa 	srli	r17,r17,3
 100ee40:	1806977a 	slli	r3,r3,29
 100ee44:	2080022c 	andhi	r2,r4,8
 100ee48:	1c62b03a 	or	r17,r3,r17
 100ee4c:	10000726 	beq	r2,zero,100ee6c <__subdf3+0x804>
 100ee50:	2812d0fa 	srli	r9,r5,3
 100ee54:	4880022c 	andhi	r2,r9,8
 100ee58:	1000041e 	bne	r2,zero,100ee6c <__subdf3+0x804>
 100ee5c:	300cd0fa 	srli	r6,r6,3
 100ee60:	2804977a 	slli	r2,r5,29
 100ee64:	4809883a 	mov	r4,r9
 100ee68:	11a2b03a 	or	r17,r2,r6
 100ee6c:	8806d77a 	srli	r3,r17,29
 100ee70:	200890fa 	slli	r4,r4,3
 100ee74:	882290fa 	slli	r17,r17,3
 100ee78:	3825883a 	mov	r18,r7
 100ee7c:	1906b03a 	or	r3,r3,r4
 100ee80:	0401ffc4 	movi	r16,2047
 100ee84:	003e1906 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ee88:	000b883a 	mov	r5,zero
 100ee8c:	0005883a 	mov	r2,zero
 100ee90:	003e2e06 	br	100e74c <__alt_data_end+0xff80e74c>
 100ee94:	0401ffc4 	movi	r16,2047
 100ee98:	003e1406 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ee9c:	0005883a 	mov	r2,zero
 100eea0:	003f7506 	br	100ec78 <__alt_data_end+0xff80ec78>
 100eea4:	0005883a 	mov	r2,zero
 100eea8:	0009883a 	mov	r4,zero
 100eeac:	003e7806 	br	100e890 <__alt_data_end+0xff80e890>
 100eeb0:	123ff804 	addi	r8,r2,-32
 100eeb4:	01000804 	movi	r4,32
 100eeb8:	1a10d83a 	srl	r8,r3,r8
 100eebc:	11002526 	beq	r2,r4,100ef54 <__subdf3+0x8ec>
 100eec0:	01001004 	movi	r4,64
 100eec4:	2085c83a 	sub	r2,r4,r2
 100eec8:	1884983a 	sll	r2,r3,r2
 100eecc:	1444b03a 	or	r2,r2,r17
 100eed0:	1004c03a 	cmpne	r2,r2,zero
 100eed4:	40a2b03a 	or	r17,r8,r2
 100eed8:	0005883a 	mov	r2,zero
 100eedc:	003f1606 	br	100eb38 <__alt_data_end+0xff80eb38>
 100eee0:	02000434 	movhi	r8,16
 100eee4:	0009883a 	mov	r4,zero
 100eee8:	423fffc4 	addi	r8,r8,-1
 100eeec:	00bfffc4 	movi	r2,-1
 100eef0:	0401ffc4 	movi	r16,2047
 100eef4:	003e6606 	br	100e890 <__alt_data_end+0xff80e890>
 100eef8:	1c62b03a 	or	r17,r3,r17
 100eefc:	8822c03a 	cmpne	r17,r17,zero
 100ef00:	0005883a 	mov	r2,zero
 100ef04:	003f9906 	br	100ed6c <__alt_data_end+0xff80ed6c>
 100ef08:	2807883a 	mov	r3,r5
 100ef0c:	3023883a 	mov	r17,r6
 100ef10:	0401ffc4 	movi	r16,2047
 100ef14:	003df506 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ef18:	2807883a 	mov	r3,r5
 100ef1c:	3023883a 	mov	r17,r6
 100ef20:	003df206 	br	100e6ec <__alt_data_end+0xff80e6ec>
 100ef24:	123ff804 	addi	r8,r2,-32
 100ef28:	01000804 	movi	r4,32
 100ef2c:	1a10d83a 	srl	r8,r3,r8
 100ef30:	11000a26 	beq	r2,r4,100ef5c <__subdf3+0x8f4>
 100ef34:	01001004 	movi	r4,64
 100ef38:	2085c83a 	sub	r2,r4,r2
 100ef3c:	1884983a 	sll	r2,r3,r2
 100ef40:	1444b03a 	or	r2,r2,r17
 100ef44:	1004c03a 	cmpne	r2,r2,zero
 100ef48:	40a2b03a 	or	r17,r8,r2
 100ef4c:	0005883a 	mov	r2,zero
 100ef50:	003f8606 	br	100ed6c <__alt_data_end+0xff80ed6c>
 100ef54:	0005883a 	mov	r2,zero
 100ef58:	003fdc06 	br	100eecc <__alt_data_end+0xff80eecc>
 100ef5c:	0005883a 	mov	r2,zero
 100ef60:	003ff706 	br	100ef40 <__alt_data_end+0xff80ef40>

0100ef64 <__fixdfsi>:
 100ef64:	280cd53a 	srli	r6,r5,20
 100ef68:	00c00434 	movhi	r3,16
 100ef6c:	18ffffc4 	addi	r3,r3,-1
 100ef70:	3181ffcc 	andi	r6,r6,2047
 100ef74:	01c0ff84 	movi	r7,1022
 100ef78:	28c6703a 	and	r3,r5,r3
 100ef7c:	280ad7fa 	srli	r5,r5,31
 100ef80:	3980120e 	bge	r7,r6,100efcc <__fixdfsi+0x68>
 100ef84:	00810744 	movi	r2,1053
 100ef88:	11800c16 	blt	r2,r6,100efbc <__fixdfsi+0x58>
 100ef8c:	00810cc4 	movi	r2,1075
 100ef90:	1185c83a 	sub	r2,r2,r6
 100ef94:	01c007c4 	movi	r7,31
 100ef98:	18c00434 	orhi	r3,r3,16
 100ef9c:	38800d16 	blt	r7,r2,100efd4 <__fixdfsi+0x70>
 100efa0:	31befb44 	addi	r6,r6,-1043
 100efa4:	2084d83a 	srl	r2,r4,r2
 100efa8:	1986983a 	sll	r3,r3,r6
 100efac:	1884b03a 	or	r2,r3,r2
 100efb0:	28000726 	beq	r5,zero,100efd0 <__fixdfsi+0x6c>
 100efb4:	0085c83a 	sub	r2,zero,r2
 100efb8:	f800283a 	ret
 100efbc:	00a00034 	movhi	r2,32768
 100efc0:	10bfffc4 	addi	r2,r2,-1
 100efc4:	2885883a 	add	r2,r5,r2
 100efc8:	f800283a 	ret
 100efcc:	0005883a 	mov	r2,zero
 100efd0:	f800283a 	ret
 100efd4:	008104c4 	movi	r2,1043
 100efd8:	1185c83a 	sub	r2,r2,r6
 100efdc:	1884d83a 	srl	r2,r3,r2
 100efe0:	003ff306 	br	100efb0 <__alt_data_end+0xff80efb0>

0100efe4 <__floatsidf>:
 100efe4:	defffd04 	addi	sp,sp,-12
 100efe8:	dfc00215 	stw	ra,8(sp)
 100efec:	dc400115 	stw	r17,4(sp)
 100eff0:	dc000015 	stw	r16,0(sp)
 100eff4:	20002b26 	beq	r4,zero,100f0a4 <__floatsidf+0xc0>
 100eff8:	2023883a 	mov	r17,r4
 100effc:	2020d7fa 	srli	r16,r4,31
 100f000:	20002d16 	blt	r4,zero,100f0b8 <__floatsidf+0xd4>
 100f004:	8809883a 	mov	r4,r17
 100f008:	100f1680 	call	100f168 <__clzsi2>
 100f00c:	01410784 	movi	r5,1054
 100f010:	288bc83a 	sub	r5,r5,r2
 100f014:	01010cc4 	movi	r4,1075
 100f018:	2149c83a 	sub	r4,r4,r5
 100f01c:	00c007c4 	movi	r3,31
 100f020:	1900160e 	bge	r3,r4,100f07c <__floatsidf+0x98>
 100f024:	00c104c4 	movi	r3,1043
 100f028:	1947c83a 	sub	r3,r3,r5
 100f02c:	88c6983a 	sll	r3,r17,r3
 100f030:	00800434 	movhi	r2,16
 100f034:	10bfffc4 	addi	r2,r2,-1
 100f038:	1886703a 	and	r3,r3,r2
 100f03c:	2941ffcc 	andi	r5,r5,2047
 100f040:	800d883a 	mov	r6,r16
 100f044:	0005883a 	mov	r2,zero
 100f048:	280a953a 	slli	r5,r5,20
 100f04c:	31803fcc 	andi	r6,r6,255
 100f050:	01000434 	movhi	r4,16
 100f054:	300c97fa 	slli	r6,r6,31
 100f058:	213fffc4 	addi	r4,r4,-1
 100f05c:	1906703a 	and	r3,r3,r4
 100f060:	1946b03a 	or	r3,r3,r5
 100f064:	1986b03a 	or	r3,r3,r6
 100f068:	dfc00217 	ldw	ra,8(sp)
 100f06c:	dc400117 	ldw	r17,4(sp)
 100f070:	dc000017 	ldw	r16,0(sp)
 100f074:	dec00304 	addi	sp,sp,12
 100f078:	f800283a 	ret
 100f07c:	00c002c4 	movi	r3,11
 100f080:	1887c83a 	sub	r3,r3,r2
 100f084:	88c6d83a 	srl	r3,r17,r3
 100f088:	8904983a 	sll	r2,r17,r4
 100f08c:	01000434 	movhi	r4,16
 100f090:	213fffc4 	addi	r4,r4,-1
 100f094:	2941ffcc 	andi	r5,r5,2047
 100f098:	1906703a 	and	r3,r3,r4
 100f09c:	800d883a 	mov	r6,r16
 100f0a0:	003fe906 	br	100f048 <__alt_data_end+0xff80f048>
 100f0a4:	000d883a 	mov	r6,zero
 100f0a8:	000b883a 	mov	r5,zero
 100f0ac:	0007883a 	mov	r3,zero
 100f0b0:	0005883a 	mov	r2,zero
 100f0b4:	003fe406 	br	100f048 <__alt_data_end+0xff80f048>
 100f0b8:	0123c83a 	sub	r17,zero,r4
 100f0bc:	003fd106 	br	100f004 <__alt_data_end+0xff80f004>

0100f0c0 <__floatunsidf>:
 100f0c0:	defffe04 	addi	sp,sp,-8
 100f0c4:	dc000015 	stw	r16,0(sp)
 100f0c8:	dfc00115 	stw	ra,4(sp)
 100f0cc:	2021883a 	mov	r16,r4
 100f0d0:	20002226 	beq	r4,zero,100f15c <__floatunsidf+0x9c>
 100f0d4:	100f1680 	call	100f168 <__clzsi2>
 100f0d8:	01010784 	movi	r4,1054
 100f0dc:	2089c83a 	sub	r4,r4,r2
 100f0e0:	01810cc4 	movi	r6,1075
 100f0e4:	310dc83a 	sub	r6,r6,r4
 100f0e8:	00c007c4 	movi	r3,31
 100f0ec:	1980120e 	bge	r3,r6,100f138 <__floatunsidf+0x78>
 100f0f0:	00c104c4 	movi	r3,1043
 100f0f4:	1907c83a 	sub	r3,r3,r4
 100f0f8:	80ca983a 	sll	r5,r16,r3
 100f0fc:	00800434 	movhi	r2,16
 100f100:	10bfffc4 	addi	r2,r2,-1
 100f104:	2101ffcc 	andi	r4,r4,2047
 100f108:	0021883a 	mov	r16,zero
 100f10c:	288a703a 	and	r5,r5,r2
 100f110:	2008953a 	slli	r4,r4,20
 100f114:	00c00434 	movhi	r3,16
 100f118:	18ffffc4 	addi	r3,r3,-1
 100f11c:	28c6703a 	and	r3,r5,r3
 100f120:	8005883a 	mov	r2,r16
 100f124:	1906b03a 	or	r3,r3,r4
 100f128:	dfc00117 	ldw	ra,4(sp)
 100f12c:	dc000017 	ldw	r16,0(sp)
 100f130:	dec00204 	addi	sp,sp,8
 100f134:	f800283a 	ret
 100f138:	00c002c4 	movi	r3,11
 100f13c:	188bc83a 	sub	r5,r3,r2
 100f140:	814ad83a 	srl	r5,r16,r5
 100f144:	00c00434 	movhi	r3,16
 100f148:	18ffffc4 	addi	r3,r3,-1
 100f14c:	81a0983a 	sll	r16,r16,r6
 100f150:	2101ffcc 	andi	r4,r4,2047
 100f154:	28ca703a 	and	r5,r5,r3
 100f158:	003fed06 	br	100f110 <__alt_data_end+0xff80f110>
 100f15c:	0009883a 	mov	r4,zero
 100f160:	000b883a 	mov	r5,zero
 100f164:	003fea06 	br	100f110 <__alt_data_end+0xff80f110>

0100f168 <__clzsi2>:
 100f168:	00bfffd4 	movui	r2,65535
 100f16c:	11000536 	bltu	r2,r4,100f184 <__clzsi2+0x1c>
 100f170:	00803fc4 	movi	r2,255
 100f174:	11000f36 	bltu	r2,r4,100f1b4 <__clzsi2+0x4c>
 100f178:	00800804 	movi	r2,32
 100f17c:	0007883a 	mov	r3,zero
 100f180:	00000506 	br	100f198 <__clzsi2+0x30>
 100f184:	00804034 	movhi	r2,256
 100f188:	10bfffc4 	addi	r2,r2,-1
 100f18c:	11000c2e 	bgeu	r2,r4,100f1c0 <__clzsi2+0x58>
 100f190:	00800204 	movi	r2,8
 100f194:	00c00604 	movi	r3,24
 100f198:	20c8d83a 	srl	r4,r4,r3
 100f19c:	00c04074 	movhi	r3,257
 100f1a0:	18c8cc04 	addi	r3,r3,9008
 100f1a4:	1909883a 	add	r4,r3,r4
 100f1a8:	20c00003 	ldbu	r3,0(r4)
 100f1ac:	10c5c83a 	sub	r2,r2,r3
 100f1b0:	f800283a 	ret
 100f1b4:	00800604 	movi	r2,24
 100f1b8:	00c00204 	movi	r3,8
 100f1bc:	003ff606 	br	100f198 <__alt_data_end+0xff80f198>
 100f1c0:	00800404 	movi	r2,16
 100f1c4:	1007883a 	mov	r3,r2
 100f1c8:	003ff306 	br	100f198 <__alt_data_end+0xff80f198>

0100f1cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f1cc:	defffe04 	addi	sp,sp,-8
 100f1d0:	dfc00115 	stw	ra,4(sp)
 100f1d4:	df000015 	stw	fp,0(sp)
 100f1d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f1dc:	d0a00b17 	ldw	r2,-32724(gp)
 100f1e0:	10000326 	beq	r2,zero,100f1f0 <alt_get_errno+0x24>
 100f1e4:	d0a00b17 	ldw	r2,-32724(gp)
 100f1e8:	103ee83a 	callr	r2
 100f1ec:	00000106 	br	100f1f4 <alt_get_errno+0x28>
 100f1f0:	d0a6d204 	addi	r2,gp,-25784
}
 100f1f4:	e037883a 	mov	sp,fp
 100f1f8:	dfc00117 	ldw	ra,4(sp)
 100f1fc:	df000017 	ldw	fp,0(sp)
 100f200:	dec00204 	addi	sp,sp,8
 100f204:	f800283a 	ret

0100f208 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100f208:	defffb04 	addi	sp,sp,-20
 100f20c:	dfc00415 	stw	ra,16(sp)
 100f210:	df000315 	stw	fp,12(sp)
 100f214:	df000304 	addi	fp,sp,12
 100f218:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100f21c:	e0bfff17 	ldw	r2,-4(fp)
 100f220:	10000816 	blt	r2,zero,100f244 <close+0x3c>
 100f224:	01400304 	movi	r5,12
 100f228:	e13fff17 	ldw	r4,-4(fp)
 100f22c:	100c9000 	call	100c900 <__mulsi3>
 100f230:	1007883a 	mov	r3,r2
 100f234:	00804074 	movhi	r2,257
 100f238:	108b4c04 	addi	r2,r2,11568
 100f23c:	1885883a 	add	r2,r3,r2
 100f240:	00000106 	br	100f248 <close+0x40>
 100f244:	0005883a 	mov	r2,zero
 100f248:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100f24c:	e0bffd17 	ldw	r2,-12(fp)
 100f250:	10001926 	beq	r2,zero,100f2b8 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100f254:	e0bffd17 	ldw	r2,-12(fp)
 100f258:	10800017 	ldw	r2,0(r2)
 100f25c:	10800417 	ldw	r2,16(r2)
 100f260:	10000626 	beq	r2,zero,100f27c <close+0x74>
 100f264:	e0bffd17 	ldw	r2,-12(fp)
 100f268:	10800017 	ldw	r2,0(r2)
 100f26c:	10800417 	ldw	r2,16(r2)
 100f270:	e13ffd17 	ldw	r4,-12(fp)
 100f274:	103ee83a 	callr	r2
 100f278:	00000106 	br	100f280 <close+0x78>
 100f27c:	0005883a 	mov	r2,zero
 100f280:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100f284:	e13fff17 	ldw	r4,-4(fp)
 100f288:	100f8f00 	call	100f8f0 <alt_release_fd>
    if (rval < 0)
 100f28c:	e0bffe17 	ldw	r2,-8(fp)
 100f290:	1000070e 	bge	r2,zero,100f2b0 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 100f294:	100f1cc0 	call	100f1cc <alt_get_errno>
 100f298:	1007883a 	mov	r3,r2
 100f29c:	e0bffe17 	ldw	r2,-8(fp)
 100f2a0:	0085c83a 	sub	r2,zero,r2
 100f2a4:	18800015 	stw	r2,0(r3)
      return -1;
 100f2a8:	00bfffc4 	movi	r2,-1
 100f2ac:	00000706 	br	100f2cc <close+0xc4>
    }
    return 0;
 100f2b0:	0005883a 	mov	r2,zero
 100f2b4:	00000506 	br	100f2cc <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f2b8:	100f1cc0 	call	100f1cc <alt_get_errno>
 100f2bc:	1007883a 	mov	r3,r2
 100f2c0:	00801444 	movi	r2,81
 100f2c4:	18800015 	stw	r2,0(r3)
    return -1;
 100f2c8:	00bfffc4 	movi	r2,-1
  }
}
 100f2cc:	e037883a 	mov	sp,fp
 100f2d0:	dfc00117 	ldw	ra,4(sp)
 100f2d4:	df000017 	ldw	fp,0(sp)
 100f2d8:	dec00204 	addi	sp,sp,8
 100f2dc:	f800283a 	ret

0100f2e0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100f2e0:	defffc04 	addi	sp,sp,-16
 100f2e4:	df000315 	stw	fp,12(sp)
 100f2e8:	df000304 	addi	fp,sp,12
 100f2ec:	e13ffd15 	stw	r4,-12(fp)
 100f2f0:	e17ffe15 	stw	r5,-8(fp)
 100f2f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100f2f8:	e0bfff17 	ldw	r2,-4(fp)
}
 100f2fc:	e037883a 	mov	sp,fp
 100f300:	df000017 	ldw	fp,0(sp)
 100f304:	dec00104 	addi	sp,sp,4
 100f308:	f800283a 	ret

0100f30c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f30c:	defffe04 	addi	sp,sp,-8
 100f310:	dfc00115 	stw	ra,4(sp)
 100f314:	df000015 	stw	fp,0(sp)
 100f318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f31c:	d0a00b17 	ldw	r2,-32724(gp)
 100f320:	10000326 	beq	r2,zero,100f330 <alt_get_errno+0x24>
 100f324:	d0a00b17 	ldw	r2,-32724(gp)
 100f328:	103ee83a 	callr	r2
 100f32c:	00000106 	br	100f334 <alt_get_errno+0x28>
 100f330:	d0a6d204 	addi	r2,gp,-25784
}
 100f334:	e037883a 	mov	sp,fp
 100f338:	dfc00117 	ldw	ra,4(sp)
 100f33c:	df000017 	ldw	fp,0(sp)
 100f340:	dec00204 	addi	sp,sp,8
 100f344:	f800283a 	ret

0100f348 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100f348:	defffb04 	addi	sp,sp,-20
 100f34c:	dfc00415 	stw	ra,16(sp)
 100f350:	df000315 	stw	fp,12(sp)
 100f354:	df000304 	addi	fp,sp,12
 100f358:	e13ffe15 	stw	r4,-8(fp)
 100f35c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f360:	e0bffe17 	ldw	r2,-8(fp)
 100f364:	10000816 	blt	r2,zero,100f388 <fstat+0x40>
 100f368:	01400304 	movi	r5,12
 100f36c:	e13ffe17 	ldw	r4,-8(fp)
 100f370:	100c9000 	call	100c900 <__mulsi3>
 100f374:	1007883a 	mov	r3,r2
 100f378:	00804074 	movhi	r2,257
 100f37c:	108b4c04 	addi	r2,r2,11568
 100f380:	1885883a 	add	r2,r3,r2
 100f384:	00000106 	br	100f38c <fstat+0x44>
 100f388:	0005883a 	mov	r2,zero
 100f38c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 100f390:	e0bffd17 	ldw	r2,-12(fp)
 100f394:	10001026 	beq	r2,zero,100f3d8 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100f398:	e0bffd17 	ldw	r2,-12(fp)
 100f39c:	10800017 	ldw	r2,0(r2)
 100f3a0:	10800817 	ldw	r2,32(r2)
 100f3a4:	10000726 	beq	r2,zero,100f3c4 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 100f3a8:	e0bffd17 	ldw	r2,-12(fp)
 100f3ac:	10800017 	ldw	r2,0(r2)
 100f3b0:	10800817 	ldw	r2,32(r2)
 100f3b4:	e17fff17 	ldw	r5,-4(fp)
 100f3b8:	e13ffd17 	ldw	r4,-12(fp)
 100f3bc:	103ee83a 	callr	r2
 100f3c0:	00000a06 	br	100f3ec <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100f3c4:	e0bfff17 	ldw	r2,-4(fp)
 100f3c8:	00c80004 	movi	r3,8192
 100f3cc:	10c00115 	stw	r3,4(r2)
      return 0;
 100f3d0:	0005883a 	mov	r2,zero
 100f3d4:	00000506 	br	100f3ec <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f3d8:	100f30c0 	call	100f30c <alt_get_errno>
 100f3dc:	1007883a 	mov	r3,r2
 100f3e0:	00801444 	movi	r2,81
 100f3e4:	18800015 	stw	r2,0(r3)
    return -1;
 100f3e8:	00bfffc4 	movi	r2,-1
  }
}
 100f3ec:	e037883a 	mov	sp,fp
 100f3f0:	dfc00117 	ldw	ra,4(sp)
 100f3f4:	df000017 	ldw	fp,0(sp)
 100f3f8:	dec00204 	addi	sp,sp,8
 100f3fc:	f800283a 	ret

0100f400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f400:	defffe04 	addi	sp,sp,-8
 100f404:	dfc00115 	stw	ra,4(sp)
 100f408:	df000015 	stw	fp,0(sp)
 100f40c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f410:	d0a00b17 	ldw	r2,-32724(gp)
 100f414:	10000326 	beq	r2,zero,100f424 <alt_get_errno+0x24>
 100f418:	d0a00b17 	ldw	r2,-32724(gp)
 100f41c:	103ee83a 	callr	r2
 100f420:	00000106 	br	100f428 <alt_get_errno+0x28>
 100f424:	d0a6d204 	addi	r2,gp,-25784
}
 100f428:	e037883a 	mov	sp,fp
 100f42c:	dfc00117 	ldw	ra,4(sp)
 100f430:	df000017 	ldw	fp,0(sp)
 100f434:	dec00204 	addi	sp,sp,8
 100f438:	f800283a 	ret

0100f43c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100f43c:	deffed04 	addi	sp,sp,-76
 100f440:	dfc01215 	stw	ra,72(sp)
 100f444:	df001115 	stw	fp,68(sp)
 100f448:	df001104 	addi	fp,sp,68
 100f44c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f450:	e0bfff17 	ldw	r2,-4(fp)
 100f454:	10000816 	blt	r2,zero,100f478 <isatty+0x3c>
 100f458:	01400304 	movi	r5,12
 100f45c:	e13fff17 	ldw	r4,-4(fp)
 100f460:	100c9000 	call	100c900 <__mulsi3>
 100f464:	1007883a 	mov	r3,r2
 100f468:	00804074 	movhi	r2,257
 100f46c:	108b4c04 	addi	r2,r2,11568
 100f470:	1885883a 	add	r2,r3,r2
 100f474:	00000106 	br	100f47c <isatty+0x40>
 100f478:	0005883a 	mov	r2,zero
 100f47c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 100f480:	e0bfef17 	ldw	r2,-68(fp)
 100f484:	10000e26 	beq	r2,zero,100f4c0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100f488:	e0bfef17 	ldw	r2,-68(fp)
 100f48c:	10800017 	ldw	r2,0(r2)
 100f490:	10800817 	ldw	r2,32(r2)
 100f494:	1000021e 	bne	r2,zero,100f4a0 <isatty+0x64>
    {
      return 1;
 100f498:	00800044 	movi	r2,1
 100f49c:	00000d06 	br	100f4d4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100f4a0:	e0bff004 	addi	r2,fp,-64
 100f4a4:	100b883a 	mov	r5,r2
 100f4a8:	e13fff17 	ldw	r4,-4(fp)
 100f4ac:	100f3480 	call	100f348 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100f4b0:	e0bff117 	ldw	r2,-60(fp)
 100f4b4:	10880020 	cmpeqi	r2,r2,8192
 100f4b8:	10803fcc 	andi	r2,r2,255
 100f4bc:	00000506 	br	100f4d4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100f4c0:	100f4000 	call	100f400 <alt_get_errno>
 100f4c4:	1007883a 	mov	r3,r2
 100f4c8:	00801444 	movi	r2,81
 100f4cc:	18800015 	stw	r2,0(r3)
    return 0;
 100f4d0:	0005883a 	mov	r2,zero
  }
}
 100f4d4:	e037883a 	mov	sp,fp
 100f4d8:	dfc00117 	ldw	ra,4(sp)
 100f4dc:	df000017 	ldw	fp,0(sp)
 100f4e0:	dec00204 	addi	sp,sp,8
 100f4e4:	f800283a 	ret

0100f4e8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100f4e8:	defffc04 	addi	sp,sp,-16
 100f4ec:	df000315 	stw	fp,12(sp)
 100f4f0:	df000304 	addi	fp,sp,12
 100f4f4:	e13ffd15 	stw	r4,-12(fp)
 100f4f8:	e17ffe15 	stw	r5,-8(fp)
 100f4fc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100f500:	e0fffe17 	ldw	r3,-8(fp)
 100f504:	e0bffd17 	ldw	r2,-12(fp)
 100f508:	18800c26 	beq	r3,r2,100f53c <alt_load_section+0x54>
  {
    while( to != end )
 100f50c:	00000806 	br	100f530 <alt_load_section+0x48>
    {
      *to++ = *from++;
 100f510:	e0bffe17 	ldw	r2,-8(fp)
 100f514:	10c00104 	addi	r3,r2,4
 100f518:	e0fffe15 	stw	r3,-8(fp)
 100f51c:	e0fffd17 	ldw	r3,-12(fp)
 100f520:	19000104 	addi	r4,r3,4
 100f524:	e13ffd15 	stw	r4,-12(fp)
 100f528:	18c00017 	ldw	r3,0(r3)
 100f52c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100f530:	e0fffe17 	ldw	r3,-8(fp)
 100f534:	e0bfff17 	ldw	r2,-4(fp)
 100f538:	18bff51e 	bne	r3,r2,100f510 <__alt_data_end+0xff80f510>
    {
      *to++ = *from++;
    }
  }
}
 100f53c:	0001883a 	nop
 100f540:	e037883a 	mov	sp,fp
 100f544:	df000017 	ldw	fp,0(sp)
 100f548:	dec00104 	addi	sp,sp,4
 100f54c:	f800283a 	ret

0100f550 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100f550:	defffe04 	addi	sp,sp,-8
 100f554:	dfc00115 	stw	ra,4(sp)
 100f558:	df000015 	stw	fp,0(sp)
 100f55c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100f560:	01804074 	movhi	r6,257
 100f564:	318fd404 	addi	r6,r6,16208
 100f568:	01404074 	movhi	r5,257
 100f56c:	29491904 	addi	r5,r5,9316
 100f570:	01004074 	movhi	r4,257
 100f574:	210fd404 	addi	r4,r4,16208
 100f578:	100f4e80 	call	100f4e8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100f57c:	01804034 	movhi	r6,256
 100f580:	31808c04 	addi	r6,r6,560
 100f584:	01404034 	movhi	r5,256
 100f588:	29400804 	addi	r5,r5,32
 100f58c:	01004034 	movhi	r4,256
 100f590:	21000804 	addi	r4,r4,32
 100f594:	100f4e80 	call	100f4e8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100f598:	01804074 	movhi	r6,257
 100f59c:	31891904 	addi	r6,r6,9316
 100f5a0:	01404074 	movhi	r5,257
 100f5a4:	29467b04 	addi	r5,r5,6636
 100f5a8:	01004074 	movhi	r4,257
 100f5ac:	21067b04 	addi	r4,r4,6636
 100f5b0:	100f4e80 	call	100f4e8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100f5b4:	10109340 	call	1010934 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100f5b8:	1010af40 	call	1010af4 <alt_icache_flush_all>
}
 100f5bc:	0001883a 	nop
 100f5c0:	e037883a 	mov	sp,fp
 100f5c4:	dfc00117 	ldw	ra,4(sp)
 100f5c8:	df000017 	ldw	fp,0(sp)
 100f5cc:	dec00204 	addi	sp,sp,8
 100f5d0:	f800283a 	ret

0100f5d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f5d4:	defffe04 	addi	sp,sp,-8
 100f5d8:	dfc00115 	stw	ra,4(sp)
 100f5dc:	df000015 	stw	fp,0(sp)
 100f5e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f5e4:	d0a00b17 	ldw	r2,-32724(gp)
 100f5e8:	10000326 	beq	r2,zero,100f5f8 <alt_get_errno+0x24>
 100f5ec:	d0a00b17 	ldw	r2,-32724(gp)
 100f5f0:	103ee83a 	callr	r2
 100f5f4:	00000106 	br	100f5fc <alt_get_errno+0x28>
 100f5f8:	d0a6d204 	addi	r2,gp,-25784
}
 100f5fc:	e037883a 	mov	sp,fp
 100f600:	dfc00117 	ldw	ra,4(sp)
 100f604:	df000017 	ldw	fp,0(sp)
 100f608:	dec00204 	addi	sp,sp,8
 100f60c:	f800283a 	ret

0100f610 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100f610:	defff904 	addi	sp,sp,-28
 100f614:	dfc00615 	stw	ra,24(sp)
 100f618:	df000515 	stw	fp,20(sp)
 100f61c:	df000504 	addi	fp,sp,20
 100f620:	e13ffd15 	stw	r4,-12(fp)
 100f624:	e17ffe15 	stw	r5,-8(fp)
 100f628:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100f62c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f630:	e0bffd17 	ldw	r2,-12(fp)
 100f634:	10000816 	blt	r2,zero,100f658 <lseek+0x48>
 100f638:	01400304 	movi	r5,12
 100f63c:	e13ffd17 	ldw	r4,-12(fp)
 100f640:	100c9000 	call	100c900 <__mulsi3>
 100f644:	1007883a 	mov	r3,r2
 100f648:	00804074 	movhi	r2,257
 100f64c:	108b4c04 	addi	r2,r2,11568
 100f650:	1885883a 	add	r2,r3,r2
 100f654:	00000106 	br	100f65c <lseek+0x4c>
 100f658:	0005883a 	mov	r2,zero
 100f65c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 100f660:	e0bffc17 	ldw	r2,-16(fp)
 100f664:	10001026 	beq	r2,zero,100f6a8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100f668:	e0bffc17 	ldw	r2,-16(fp)
 100f66c:	10800017 	ldw	r2,0(r2)
 100f670:	10800717 	ldw	r2,28(r2)
 100f674:	10000926 	beq	r2,zero,100f69c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100f678:	e0bffc17 	ldw	r2,-16(fp)
 100f67c:	10800017 	ldw	r2,0(r2)
 100f680:	10800717 	ldw	r2,28(r2)
 100f684:	e1bfff17 	ldw	r6,-4(fp)
 100f688:	e17ffe17 	ldw	r5,-8(fp)
 100f68c:	e13ffc17 	ldw	r4,-16(fp)
 100f690:	103ee83a 	callr	r2
 100f694:	e0bffb15 	stw	r2,-20(fp)
 100f698:	00000506 	br	100f6b0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100f69c:	00bfde84 	movi	r2,-134
 100f6a0:	e0bffb15 	stw	r2,-20(fp)
 100f6a4:	00000206 	br	100f6b0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100f6a8:	00bfebc4 	movi	r2,-81
 100f6ac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 100f6b0:	e0bffb17 	ldw	r2,-20(fp)
 100f6b4:	1000070e 	bge	r2,zero,100f6d4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 100f6b8:	100f5d40 	call	100f5d4 <alt_get_errno>
 100f6bc:	1007883a 	mov	r3,r2
 100f6c0:	e0bffb17 	ldw	r2,-20(fp)
 100f6c4:	0085c83a 	sub	r2,zero,r2
 100f6c8:	18800015 	stw	r2,0(r3)
    rc = -1;
 100f6cc:	00bfffc4 	movi	r2,-1
 100f6d0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 100f6d4:	e0bffb17 	ldw	r2,-20(fp)
}
 100f6d8:	e037883a 	mov	sp,fp
 100f6dc:	dfc00117 	ldw	ra,4(sp)
 100f6e0:	df000017 	ldw	fp,0(sp)
 100f6e4:	dec00204 	addi	sp,sp,8
 100f6e8:	f800283a 	ret

0100f6ec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100f6ec:	defffd04 	addi	sp,sp,-12
 100f6f0:	dfc00215 	stw	ra,8(sp)
 100f6f4:	df000115 	stw	fp,4(sp)
 100f6f8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100f6fc:	0009883a 	mov	r4,zero
 100f700:	100fbc40 	call	100fbc4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100f704:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100f708:	100fbfc0 	call	100fbfc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100f70c:	01804074 	movhi	r6,257
 100f710:	31890f04 	addi	r6,r6,9276
 100f714:	01404074 	movhi	r5,257
 100f718:	29490f04 	addi	r5,r5,9276
 100f71c:	01004074 	movhi	r4,257
 100f720:	21090f04 	addi	r4,r4,9276
 100f724:	1010e980 	call	1010e98 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100f728:	1010a340 	call	1010a34 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100f72c:	01004074 	movhi	r4,257
 100f730:	2102a504 	addi	r4,r4,2708
 100f734:	10116580 	call	1011658 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100f738:	d0a6d317 	ldw	r2,-25780(gp)
 100f73c:	d0e6d417 	ldw	r3,-25776(gp)
 100f740:	d126d517 	ldw	r4,-25772(gp)
 100f744:	200d883a 	mov	r6,r4
 100f748:	180b883a 	mov	r5,r3
 100f74c:	1009883a 	mov	r4,r2
 100f750:	10003cc0 	call	10003cc <main>
 100f754:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100f758:	01000044 	movi	r4,1
 100f75c:	100f2080 	call	100f208 <close>
  exit (result);
 100f760:	e13fff17 	ldw	r4,-4(fp)
 100f764:	101166c0 	call	101166c <exit>

0100f768 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100f768:	defffe04 	addi	sp,sp,-8
 100f76c:	df000115 	stw	fp,4(sp)
 100f770:	df000104 	addi	fp,sp,4
 100f774:	e13fff15 	stw	r4,-4(fp)
}
 100f778:	0001883a 	nop
 100f77c:	e037883a 	mov	sp,fp
 100f780:	df000017 	ldw	fp,0(sp)
 100f784:	dec00104 	addi	sp,sp,4
 100f788:	f800283a 	ret

0100f78c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100f78c:	defffe04 	addi	sp,sp,-8
 100f790:	df000115 	stw	fp,4(sp)
 100f794:	df000104 	addi	fp,sp,4
 100f798:	e13fff15 	stw	r4,-4(fp)
}
 100f79c:	0001883a 	nop
 100f7a0:	e037883a 	mov	sp,fp
 100f7a4:	df000017 	ldw	fp,0(sp)
 100f7a8:	dec00104 	addi	sp,sp,4
 100f7ac:	f800283a 	ret

0100f7b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100f7b0:	defffe04 	addi	sp,sp,-8
 100f7b4:	dfc00115 	stw	ra,4(sp)
 100f7b8:	df000015 	stw	fp,0(sp)
 100f7bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100f7c0:	d0a00b17 	ldw	r2,-32724(gp)
 100f7c4:	10000326 	beq	r2,zero,100f7d4 <alt_get_errno+0x24>
 100f7c8:	d0a00b17 	ldw	r2,-32724(gp)
 100f7cc:	103ee83a 	callr	r2
 100f7d0:	00000106 	br	100f7d8 <alt_get_errno+0x28>
 100f7d4:	d0a6d204 	addi	r2,gp,-25784
}
 100f7d8:	e037883a 	mov	sp,fp
 100f7dc:	dfc00117 	ldw	ra,4(sp)
 100f7e0:	df000017 	ldw	fp,0(sp)
 100f7e4:	dec00204 	addi	sp,sp,8
 100f7e8:	f800283a 	ret

0100f7ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100f7ec:	defff904 	addi	sp,sp,-28
 100f7f0:	dfc00615 	stw	ra,24(sp)
 100f7f4:	df000515 	stw	fp,20(sp)
 100f7f8:	df000504 	addi	fp,sp,20
 100f7fc:	e13ffd15 	stw	r4,-12(fp)
 100f800:	e17ffe15 	stw	r5,-8(fp)
 100f804:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100f808:	e0bffd17 	ldw	r2,-12(fp)
 100f80c:	10000816 	blt	r2,zero,100f830 <read+0x44>
 100f810:	01400304 	movi	r5,12
 100f814:	e13ffd17 	ldw	r4,-12(fp)
 100f818:	100c9000 	call	100c900 <__mulsi3>
 100f81c:	1007883a 	mov	r3,r2
 100f820:	00804074 	movhi	r2,257
 100f824:	108b4c04 	addi	r2,r2,11568
 100f828:	1885883a 	add	r2,r3,r2
 100f82c:	00000106 	br	100f834 <read+0x48>
 100f830:	0005883a 	mov	r2,zero
 100f834:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100f838:	e0bffb17 	ldw	r2,-20(fp)
 100f83c:	10002226 	beq	r2,zero,100f8c8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100f840:	e0bffb17 	ldw	r2,-20(fp)
 100f844:	10800217 	ldw	r2,8(r2)
 100f848:	108000cc 	andi	r2,r2,3
 100f84c:	10800060 	cmpeqi	r2,r2,1
 100f850:	1000181e 	bne	r2,zero,100f8b4 <read+0xc8>
        (fd->dev->read))
 100f854:	e0bffb17 	ldw	r2,-20(fp)
 100f858:	10800017 	ldw	r2,0(r2)
 100f85c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100f860:	10001426 	beq	r2,zero,100f8b4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100f864:	e0bffb17 	ldw	r2,-20(fp)
 100f868:	10800017 	ldw	r2,0(r2)
 100f86c:	10800517 	ldw	r2,20(r2)
 100f870:	e0ffff17 	ldw	r3,-4(fp)
 100f874:	180d883a 	mov	r6,r3
 100f878:	e17ffe17 	ldw	r5,-8(fp)
 100f87c:	e13ffb17 	ldw	r4,-20(fp)
 100f880:	103ee83a 	callr	r2
 100f884:	e0bffc15 	stw	r2,-16(fp)
 100f888:	e0bffc17 	ldw	r2,-16(fp)
 100f88c:	1000070e 	bge	r2,zero,100f8ac <read+0xc0>
        {
          ALT_ERRNO = -rval;
 100f890:	100f7b00 	call	100f7b0 <alt_get_errno>
 100f894:	1007883a 	mov	r3,r2
 100f898:	e0bffc17 	ldw	r2,-16(fp)
 100f89c:	0085c83a 	sub	r2,zero,r2
 100f8a0:	18800015 	stw	r2,0(r3)
          return -1;
 100f8a4:	00bfffc4 	movi	r2,-1
 100f8a8:	00000c06 	br	100f8dc <read+0xf0>
        }
        return rval;
 100f8ac:	e0bffc17 	ldw	r2,-16(fp)
 100f8b0:	00000a06 	br	100f8dc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100f8b4:	100f7b00 	call	100f7b0 <alt_get_errno>
 100f8b8:	1007883a 	mov	r3,r2
 100f8bc:	00800344 	movi	r2,13
 100f8c0:	18800015 	stw	r2,0(r3)
 100f8c4:	00000406 	br	100f8d8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100f8c8:	100f7b00 	call	100f7b0 <alt_get_errno>
 100f8cc:	1007883a 	mov	r3,r2
 100f8d0:	00801444 	movi	r2,81
 100f8d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100f8d8:	00bfffc4 	movi	r2,-1
}
 100f8dc:	e037883a 	mov	sp,fp
 100f8e0:	dfc00117 	ldw	ra,4(sp)
 100f8e4:	df000017 	ldw	fp,0(sp)
 100f8e8:	dec00204 	addi	sp,sp,8
 100f8ec:	f800283a 	ret

0100f8f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100f8f0:	defffc04 	addi	sp,sp,-16
 100f8f4:	dfc00315 	stw	ra,12(sp)
 100f8f8:	df000215 	stw	fp,8(sp)
 100f8fc:	dc000115 	stw	r16,4(sp)
 100f900:	df000204 	addi	fp,sp,8
 100f904:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 100f908:	e0bffe17 	ldw	r2,-8(fp)
 100f90c:	108000d0 	cmplti	r2,r2,3
 100f910:	1000111e 	bne	r2,zero,100f958 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 100f914:	04004074 	movhi	r16,257
 100f918:	840b4c04 	addi	r16,r16,11568
 100f91c:	e0bffe17 	ldw	r2,-8(fp)
 100f920:	01400304 	movi	r5,12
 100f924:	1009883a 	mov	r4,r2
 100f928:	100c9000 	call	100c900 <__mulsi3>
 100f92c:	8085883a 	add	r2,r16,r2
 100f930:	10800204 	addi	r2,r2,8
 100f934:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100f938:	04004074 	movhi	r16,257
 100f93c:	840b4c04 	addi	r16,r16,11568
 100f940:	e0bffe17 	ldw	r2,-8(fp)
 100f944:	01400304 	movi	r5,12
 100f948:	1009883a 	mov	r4,r2
 100f94c:	100c9000 	call	100c900 <__mulsi3>
 100f950:	8085883a 	add	r2,r16,r2
 100f954:	10000015 	stw	zero,0(r2)
  }
}
 100f958:	0001883a 	nop
 100f95c:	e6ffff04 	addi	sp,fp,-4
 100f960:	dfc00217 	ldw	ra,8(sp)
 100f964:	df000117 	ldw	fp,4(sp)
 100f968:	dc000017 	ldw	r16,0(sp)
 100f96c:	dec00304 	addi	sp,sp,12
 100f970:	f800283a 	ret

0100f974 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100f974:	defff904 	addi	sp,sp,-28
 100f978:	df000615 	stw	fp,24(sp)
 100f97c:	df000604 	addi	fp,sp,24
 100f980:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f984:	0005303a 	rdctl	r2,status
 100f988:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f98c:	e0fffe17 	ldw	r3,-8(fp)
 100f990:	00bfff84 	movi	r2,-2
 100f994:	1884703a 	and	r2,r3,r2
 100f998:	1001703a 	wrctl	status,r2
  
  return context;
 100f99c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100f9a0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100f9a4:	d0a00c17 	ldw	r2,-32720(gp)
 100f9a8:	10c000c4 	addi	r3,r2,3
 100f9ac:	00bfff04 	movi	r2,-4
 100f9b0:	1884703a 	and	r2,r3,r2
 100f9b4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100f9b8:	d0e00c17 	ldw	r3,-32720(gp)
 100f9bc:	e0bfff17 	ldw	r2,-4(fp)
 100f9c0:	1887883a 	add	r3,r3,r2
 100f9c4:	00806034 	movhi	r2,384
 100f9c8:	10800004 	addi	r2,r2,0
 100f9cc:	10c0062e 	bgeu	r2,r3,100f9e8 <sbrk+0x74>
 100f9d0:	e0bffb17 	ldw	r2,-20(fp)
 100f9d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f9d8:	e0bffa17 	ldw	r2,-24(fp)
 100f9dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100f9e0:	00bfffc4 	movi	r2,-1
 100f9e4:	00000b06 	br	100fa14 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 100f9e8:	d0a00c17 	ldw	r2,-32720(gp)
 100f9ec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 100f9f0:	d0e00c17 	ldw	r3,-32720(gp)
 100f9f4:	e0bfff17 	ldw	r2,-4(fp)
 100f9f8:	1885883a 	add	r2,r3,r2
 100f9fc:	d0a00c15 	stw	r2,-32720(gp)
 100fa00:	e0bffb17 	ldw	r2,-20(fp)
 100fa04:	e0bffc15 	stw	r2,-16(fp)
 100fa08:	e0bffc17 	ldw	r2,-16(fp)
 100fa0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100fa10:	e0bffd17 	ldw	r2,-12(fp)
} 
 100fa14:	e037883a 	mov	sp,fp
 100fa18:	df000017 	ldw	fp,0(sp)
 100fa1c:	dec00104 	addi	sp,sp,4
 100fa20:	f800283a 	ret

0100fa24 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 100fa24:	defffd04 	addi	sp,sp,-12
 100fa28:	dfc00215 	stw	ra,8(sp)
 100fa2c:	df000115 	stw	fp,4(sp)
 100fa30:	df000104 	addi	fp,sp,4
 100fa34:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 100fa38:	e13fff17 	ldw	r4,-4(fp)
 100fa3c:	10107dc0 	call	10107dc <alt_busy_sleep>
}
 100fa40:	e037883a 	mov	sp,fp
 100fa44:	dfc00117 	ldw	ra,4(sp)
 100fa48:	df000017 	ldw	fp,0(sp)
 100fa4c:	dec00204 	addi	sp,sp,8
 100fa50:	f800283a 	ret

0100fa54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100fa54:	defffe04 	addi	sp,sp,-8
 100fa58:	dfc00115 	stw	ra,4(sp)
 100fa5c:	df000015 	stw	fp,0(sp)
 100fa60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100fa64:	d0a00b17 	ldw	r2,-32724(gp)
 100fa68:	10000326 	beq	r2,zero,100fa78 <alt_get_errno+0x24>
 100fa6c:	d0a00b17 	ldw	r2,-32724(gp)
 100fa70:	103ee83a 	callr	r2
 100fa74:	00000106 	br	100fa7c <alt_get_errno+0x28>
 100fa78:	d0a6d204 	addi	r2,gp,-25784
}
 100fa7c:	e037883a 	mov	sp,fp
 100fa80:	dfc00117 	ldw	ra,4(sp)
 100fa84:	df000017 	ldw	fp,0(sp)
 100fa88:	dec00204 	addi	sp,sp,8
 100fa8c:	f800283a 	ret

0100fa90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100fa90:	defff904 	addi	sp,sp,-28
 100fa94:	dfc00615 	stw	ra,24(sp)
 100fa98:	df000515 	stw	fp,20(sp)
 100fa9c:	df000504 	addi	fp,sp,20
 100faa0:	e13ffd15 	stw	r4,-12(fp)
 100faa4:	e17ffe15 	stw	r5,-8(fp)
 100faa8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100faac:	e0bffd17 	ldw	r2,-12(fp)
 100fab0:	10000816 	blt	r2,zero,100fad4 <write+0x44>
 100fab4:	01400304 	movi	r5,12
 100fab8:	e13ffd17 	ldw	r4,-12(fp)
 100fabc:	100c9000 	call	100c900 <__mulsi3>
 100fac0:	1007883a 	mov	r3,r2
 100fac4:	00804074 	movhi	r2,257
 100fac8:	108b4c04 	addi	r2,r2,11568
 100facc:	1885883a 	add	r2,r3,r2
 100fad0:	00000106 	br	100fad8 <write+0x48>
 100fad4:	0005883a 	mov	r2,zero
 100fad8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100fadc:	e0bffb17 	ldw	r2,-20(fp)
 100fae0:	10002126 	beq	r2,zero,100fb68 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100fae4:	e0bffb17 	ldw	r2,-20(fp)
 100fae8:	10800217 	ldw	r2,8(r2)
 100faec:	108000cc 	andi	r2,r2,3
 100faf0:	10001826 	beq	r2,zero,100fb54 <write+0xc4>
 100faf4:	e0bffb17 	ldw	r2,-20(fp)
 100faf8:	10800017 	ldw	r2,0(r2)
 100fafc:	10800617 	ldw	r2,24(r2)
 100fb00:	10001426 	beq	r2,zero,100fb54 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100fb04:	e0bffb17 	ldw	r2,-20(fp)
 100fb08:	10800017 	ldw	r2,0(r2)
 100fb0c:	10800617 	ldw	r2,24(r2)
 100fb10:	e0ffff17 	ldw	r3,-4(fp)
 100fb14:	180d883a 	mov	r6,r3
 100fb18:	e17ffe17 	ldw	r5,-8(fp)
 100fb1c:	e13ffb17 	ldw	r4,-20(fp)
 100fb20:	103ee83a 	callr	r2
 100fb24:	e0bffc15 	stw	r2,-16(fp)
 100fb28:	e0bffc17 	ldw	r2,-16(fp)
 100fb2c:	1000070e 	bge	r2,zero,100fb4c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 100fb30:	100fa540 	call	100fa54 <alt_get_errno>
 100fb34:	1007883a 	mov	r3,r2
 100fb38:	e0bffc17 	ldw	r2,-16(fp)
 100fb3c:	0085c83a 	sub	r2,zero,r2
 100fb40:	18800015 	stw	r2,0(r3)
        return -1;
 100fb44:	00bfffc4 	movi	r2,-1
 100fb48:	00000c06 	br	100fb7c <write+0xec>
      }
      return rval;
 100fb4c:	e0bffc17 	ldw	r2,-16(fp)
 100fb50:	00000a06 	br	100fb7c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100fb54:	100fa540 	call	100fa54 <alt_get_errno>
 100fb58:	1007883a 	mov	r3,r2
 100fb5c:	00800344 	movi	r2,13
 100fb60:	18800015 	stw	r2,0(r3)
 100fb64:	00000406 	br	100fb78 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100fb68:	100fa540 	call	100fa54 <alt_get_errno>
 100fb6c:	1007883a 	mov	r3,r2
 100fb70:	00801444 	movi	r2,81
 100fb74:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100fb78:	00bfffc4 	movi	r2,-1
}
 100fb7c:	e037883a 	mov	sp,fp
 100fb80:	dfc00117 	ldw	ra,4(sp)
 100fb84:	df000017 	ldw	fp,0(sp)
 100fb88:	dec00204 	addi	sp,sp,8
 100fb8c:	f800283a 	ret

0100fb90 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100fb90:	defffd04 	addi	sp,sp,-12
 100fb94:	dfc00215 	stw	ra,8(sp)
 100fb98:	df000115 	stw	fp,4(sp)
 100fb9c:	df000104 	addi	fp,sp,4
 100fba0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100fba4:	d1600804 	addi	r5,gp,-32736
 100fba8:	e13fff17 	ldw	r4,-4(fp)
 100fbac:	10109900 	call	1010990 <alt_dev_llist_insert>
}
 100fbb0:	e037883a 	mov	sp,fp
 100fbb4:	dfc00117 	ldw	ra,4(sp)
 100fbb8:	df000017 	ldw	fp,0(sp)
 100fbbc:	dec00204 	addi	sp,sp,8
 100fbc0:	f800283a 	ret

0100fbc4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100fbc4:	defffd04 	addi	sp,sp,-12
 100fbc8:	dfc00215 	stw	ra,8(sp)
 100fbcc:	df000115 	stw	fp,4(sp)
 100fbd0:	df000104 	addi	fp,sp,4
 100fbd4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 100fbd8:	101133c0 	call	101133c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100fbdc:	00800044 	movi	r2,1
 100fbe0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100fbe4:	0001883a 	nop
 100fbe8:	e037883a 	mov	sp,fp
 100fbec:	dfc00117 	ldw	ra,4(sp)
 100fbf0:	df000017 	ldw	fp,0(sp)
 100fbf4:	dec00204 	addi	sp,sp,8
 100fbf8:	f800283a 	ret

0100fbfc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100fbfc:	defffe04 	addi	sp,sp,-8
 100fc00:	dfc00115 	stw	ra,4(sp)
 100fc04:	df000015 	stw	fp,0(sp)
 100fc08:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100fc0c:	01800144 	movi	r6,5
 100fc10:	000b883a 	mov	r5,zero
 100fc14:	01004074 	movhi	r4,257
 100fc18:	210bb604 	addi	r4,r4,11992
 100fc1c:	100fdac0 	call	100fdac <altera_avalon_jtag_uart_init>
 100fc20:	01004074 	movhi	r4,257
 100fc24:	210bac04 	addi	r4,r4,11952
 100fc28:	100fb900 	call	100fb90 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 100fc2c:	0001883a 	nop
}
 100fc30:	0001883a 	nop
 100fc34:	e037883a 	mov	sp,fp
 100fc38:	dfc00117 	ldw	ra,4(sp)
 100fc3c:	df000017 	ldw	fp,0(sp)
 100fc40:	dec00204 	addi	sp,sp,8
 100fc44:	f800283a 	ret

0100fc48 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100fc48:	defffa04 	addi	sp,sp,-24
 100fc4c:	dfc00515 	stw	ra,20(sp)
 100fc50:	df000415 	stw	fp,16(sp)
 100fc54:	df000404 	addi	fp,sp,16
 100fc58:	e13ffd15 	stw	r4,-12(fp)
 100fc5c:	e17ffe15 	stw	r5,-8(fp)
 100fc60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100fc64:	e0bffd17 	ldw	r2,-12(fp)
 100fc68:	10800017 	ldw	r2,0(r2)
 100fc6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100fc70:	e0bffc17 	ldw	r2,-16(fp)
 100fc74:	10c00a04 	addi	r3,r2,40
 100fc78:	e0bffd17 	ldw	r2,-12(fp)
 100fc7c:	10800217 	ldw	r2,8(r2)
 100fc80:	100f883a 	mov	r7,r2
 100fc84:	e1bfff17 	ldw	r6,-4(fp)
 100fc88:	e17ffe17 	ldw	r5,-8(fp)
 100fc8c:	1809883a 	mov	r4,r3
 100fc90:	10102700 	call	1010270 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100fc94:	e037883a 	mov	sp,fp
 100fc98:	dfc00117 	ldw	ra,4(sp)
 100fc9c:	df000017 	ldw	fp,0(sp)
 100fca0:	dec00204 	addi	sp,sp,8
 100fca4:	f800283a 	ret

0100fca8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100fca8:	defffa04 	addi	sp,sp,-24
 100fcac:	dfc00515 	stw	ra,20(sp)
 100fcb0:	df000415 	stw	fp,16(sp)
 100fcb4:	df000404 	addi	fp,sp,16
 100fcb8:	e13ffd15 	stw	r4,-12(fp)
 100fcbc:	e17ffe15 	stw	r5,-8(fp)
 100fcc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100fcc4:	e0bffd17 	ldw	r2,-12(fp)
 100fcc8:	10800017 	ldw	r2,0(r2)
 100fccc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100fcd0:	e0bffc17 	ldw	r2,-16(fp)
 100fcd4:	10c00a04 	addi	r3,r2,40
 100fcd8:	e0bffd17 	ldw	r2,-12(fp)
 100fcdc:	10800217 	ldw	r2,8(r2)
 100fce0:	100f883a 	mov	r7,r2
 100fce4:	e1bfff17 	ldw	r6,-4(fp)
 100fce8:	e17ffe17 	ldw	r5,-8(fp)
 100fcec:	1809883a 	mov	r4,r3
 100fcf0:	101048c0 	call	101048c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100fcf4:	e037883a 	mov	sp,fp
 100fcf8:	dfc00117 	ldw	ra,4(sp)
 100fcfc:	df000017 	ldw	fp,0(sp)
 100fd00:	dec00204 	addi	sp,sp,8
 100fd04:	f800283a 	ret

0100fd08 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100fd08:	defffc04 	addi	sp,sp,-16
 100fd0c:	dfc00315 	stw	ra,12(sp)
 100fd10:	df000215 	stw	fp,8(sp)
 100fd14:	df000204 	addi	fp,sp,8
 100fd18:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100fd1c:	e0bfff17 	ldw	r2,-4(fp)
 100fd20:	10800017 	ldw	r2,0(r2)
 100fd24:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100fd28:	e0bffe17 	ldw	r2,-8(fp)
 100fd2c:	10c00a04 	addi	r3,r2,40
 100fd30:	e0bfff17 	ldw	r2,-4(fp)
 100fd34:	10800217 	ldw	r2,8(r2)
 100fd38:	100b883a 	mov	r5,r2
 100fd3c:	1809883a 	mov	r4,r3
 100fd40:	10101180 	call	1010118 <altera_avalon_jtag_uart_close>
}
 100fd44:	e037883a 	mov	sp,fp
 100fd48:	dfc00117 	ldw	ra,4(sp)
 100fd4c:	df000017 	ldw	fp,0(sp)
 100fd50:	dec00204 	addi	sp,sp,8
 100fd54:	f800283a 	ret

0100fd58 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100fd58:	defffa04 	addi	sp,sp,-24
 100fd5c:	dfc00515 	stw	ra,20(sp)
 100fd60:	df000415 	stw	fp,16(sp)
 100fd64:	df000404 	addi	fp,sp,16
 100fd68:	e13ffd15 	stw	r4,-12(fp)
 100fd6c:	e17ffe15 	stw	r5,-8(fp)
 100fd70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100fd74:	e0bffd17 	ldw	r2,-12(fp)
 100fd78:	10800017 	ldw	r2,0(r2)
 100fd7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100fd80:	e0bffc17 	ldw	r2,-16(fp)
 100fd84:	10800a04 	addi	r2,r2,40
 100fd88:	e1bfff17 	ldw	r6,-4(fp)
 100fd8c:	e17ffe17 	ldw	r5,-8(fp)
 100fd90:	1009883a 	mov	r4,r2
 100fd94:	10101800 	call	1010180 <altera_avalon_jtag_uart_ioctl>
}
 100fd98:	e037883a 	mov	sp,fp
 100fd9c:	dfc00117 	ldw	ra,4(sp)
 100fda0:	df000017 	ldw	fp,0(sp)
 100fda4:	dec00204 	addi	sp,sp,8
 100fda8:	f800283a 	ret

0100fdac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100fdac:	defffa04 	addi	sp,sp,-24
 100fdb0:	dfc00515 	stw	ra,20(sp)
 100fdb4:	df000415 	stw	fp,16(sp)
 100fdb8:	df000404 	addi	fp,sp,16
 100fdbc:	e13ffd15 	stw	r4,-12(fp)
 100fdc0:	e17ffe15 	stw	r5,-8(fp)
 100fdc4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100fdc8:	e0bffd17 	ldw	r2,-12(fp)
 100fdcc:	00c00044 	movi	r3,1
 100fdd0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100fdd4:	e0bffd17 	ldw	r2,-12(fp)
 100fdd8:	10800017 	ldw	r2,0(r2)
 100fddc:	10800104 	addi	r2,r2,4
 100fde0:	1007883a 	mov	r3,r2
 100fde4:	e0bffd17 	ldw	r2,-12(fp)
 100fde8:	10800817 	ldw	r2,32(r2)
 100fdec:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100fdf0:	e0bffe17 	ldw	r2,-8(fp)
 100fdf4:	e0ffff17 	ldw	r3,-4(fp)
 100fdf8:	d8000015 	stw	zero,0(sp)
 100fdfc:	e1fffd17 	ldw	r7,-12(fp)
 100fe00:	01804074 	movhi	r6,257
 100fe04:	31bf9b04 	addi	r6,r6,-404
 100fe08:	180b883a 	mov	r5,r3
 100fe0c:	1009883a 	mov	r4,r2
 100fe10:	1010b140 	call	1010b14 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100fe14:	e0bffd17 	ldw	r2,-12(fp)
 100fe18:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100fe1c:	e0bffd17 	ldw	r2,-12(fp)
 100fe20:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100fe24:	d0e6d717 	ldw	r3,-25764(gp)
 100fe28:	e1fffd17 	ldw	r7,-12(fp)
 100fe2c:	01804074 	movhi	r6,257
 100fe30:	31801e04 	addi	r6,r6,120
 100fe34:	180b883a 	mov	r5,r3
 100fe38:	1009883a 	mov	r4,r2
 100fe3c:	10106b00 	call	10106b0 <alt_alarm_start>
 100fe40:	1000040e 	bge	r2,zero,100fe54 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100fe44:	e0fffd17 	ldw	r3,-12(fp)
 100fe48:	00a00034 	movhi	r2,32768
 100fe4c:	10bfffc4 	addi	r2,r2,-1
 100fe50:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100fe54:	0001883a 	nop
 100fe58:	e037883a 	mov	sp,fp
 100fe5c:	dfc00117 	ldw	ra,4(sp)
 100fe60:	df000017 	ldw	fp,0(sp)
 100fe64:	dec00204 	addi	sp,sp,8
 100fe68:	f800283a 	ret

0100fe6c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100fe6c:	defff804 	addi	sp,sp,-32
 100fe70:	df000715 	stw	fp,28(sp)
 100fe74:	df000704 	addi	fp,sp,28
 100fe78:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100fe7c:	e0bfff17 	ldw	r2,-4(fp)
 100fe80:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 100fe84:	e0bffb17 	ldw	r2,-20(fp)
 100fe88:	10800017 	ldw	r2,0(r2)
 100fe8c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100fe90:	e0bffc17 	ldw	r2,-16(fp)
 100fe94:	10800104 	addi	r2,r2,4
 100fe98:	10800037 	ldwio	r2,0(r2)
 100fe9c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100fea0:	e0bffd17 	ldw	r2,-12(fp)
 100fea4:	1080c00c 	andi	r2,r2,768
 100fea8:	10006d26 	beq	r2,zero,1010060 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100feac:	e0bffd17 	ldw	r2,-12(fp)
 100feb0:	1080400c 	andi	r2,r2,256
 100feb4:	10003526 	beq	r2,zero,100ff8c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100feb8:	00800074 	movhi	r2,1
 100febc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100fec0:	e0bffb17 	ldw	r2,-20(fp)
 100fec4:	10800a17 	ldw	r2,40(r2)
 100fec8:	10800044 	addi	r2,r2,1
 100fecc:	1081ffcc 	andi	r2,r2,2047
 100fed0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 100fed4:	e0bffb17 	ldw	r2,-20(fp)
 100fed8:	10c00b17 	ldw	r3,44(r2)
 100fedc:	e0bffe17 	ldw	r2,-8(fp)
 100fee0:	18801526 	beq	r3,r2,100ff38 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100fee4:	e0bffc17 	ldw	r2,-16(fp)
 100fee8:	10800037 	ldwio	r2,0(r2)
 100feec:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100fef0:	e0bff917 	ldw	r2,-28(fp)
 100fef4:	10a0000c 	andi	r2,r2,32768
 100fef8:	10001126 	beq	r2,zero,100ff40 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100fefc:	e0bffb17 	ldw	r2,-20(fp)
 100ff00:	10800a17 	ldw	r2,40(r2)
 100ff04:	e0fff917 	ldw	r3,-28(fp)
 100ff08:	1809883a 	mov	r4,r3
 100ff0c:	e0fffb17 	ldw	r3,-20(fp)
 100ff10:	1885883a 	add	r2,r3,r2
 100ff14:	10800e04 	addi	r2,r2,56
 100ff18:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ff1c:	e0bffb17 	ldw	r2,-20(fp)
 100ff20:	10800a17 	ldw	r2,40(r2)
 100ff24:	10800044 	addi	r2,r2,1
 100ff28:	10c1ffcc 	andi	r3,r2,2047
 100ff2c:	e0bffb17 	ldw	r2,-20(fp)
 100ff30:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100ff34:	003fe206 	br	100fec0 <__alt_data_end+0xff80fec0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 100ff38:	0001883a 	nop
 100ff3c:	00000106 	br	100ff44 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 100ff40:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100ff44:	e0bff917 	ldw	r2,-28(fp)
 100ff48:	10bfffec 	andhi	r2,r2,65535
 100ff4c:	10000f26 	beq	r2,zero,100ff8c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100ff50:	e0bffb17 	ldw	r2,-20(fp)
 100ff54:	10c00817 	ldw	r3,32(r2)
 100ff58:	00bfff84 	movi	r2,-2
 100ff5c:	1886703a 	and	r3,r3,r2
 100ff60:	e0bffb17 	ldw	r2,-20(fp)
 100ff64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100ff68:	e0bffc17 	ldw	r2,-16(fp)
 100ff6c:	10800104 	addi	r2,r2,4
 100ff70:	1007883a 	mov	r3,r2
 100ff74:	e0bffb17 	ldw	r2,-20(fp)
 100ff78:	10800817 	ldw	r2,32(r2)
 100ff7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ff80:	e0bffc17 	ldw	r2,-16(fp)
 100ff84:	10800104 	addi	r2,r2,4
 100ff88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100ff8c:	e0bffd17 	ldw	r2,-12(fp)
 100ff90:	1080800c 	andi	r2,r2,512
 100ff94:	103fbe26 	beq	r2,zero,100fe90 <__alt_data_end+0xff80fe90>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100ff98:	e0bffd17 	ldw	r2,-12(fp)
 100ff9c:	1004d43a 	srli	r2,r2,16
 100ffa0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100ffa4:	00001406 	br	100fff8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100ffa8:	e0bffc17 	ldw	r2,-16(fp)
 100ffac:	e0fffb17 	ldw	r3,-20(fp)
 100ffb0:	18c00d17 	ldw	r3,52(r3)
 100ffb4:	e13ffb17 	ldw	r4,-20(fp)
 100ffb8:	20c7883a 	add	r3,r4,r3
 100ffbc:	18c20e04 	addi	r3,r3,2104
 100ffc0:	18c00003 	ldbu	r3,0(r3)
 100ffc4:	18c03fcc 	andi	r3,r3,255
 100ffc8:	18c0201c 	xori	r3,r3,128
 100ffcc:	18ffe004 	addi	r3,r3,-128
 100ffd0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ffd4:	e0bffb17 	ldw	r2,-20(fp)
 100ffd8:	10800d17 	ldw	r2,52(r2)
 100ffdc:	10800044 	addi	r2,r2,1
 100ffe0:	10c1ffcc 	andi	r3,r2,2047
 100ffe4:	e0bffb17 	ldw	r2,-20(fp)
 100ffe8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100ffec:	e0bffa17 	ldw	r2,-24(fp)
 100fff0:	10bfffc4 	addi	r2,r2,-1
 100fff4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100fff8:	e0bffa17 	ldw	r2,-24(fp)
 100fffc:	10000526 	beq	r2,zero,1010014 <altera_avalon_jtag_uart_irq+0x1a8>
 1010000:	e0bffb17 	ldw	r2,-20(fp)
 1010004:	10c00d17 	ldw	r3,52(r2)
 1010008:	e0bffb17 	ldw	r2,-20(fp)
 101000c:	10800c17 	ldw	r2,48(r2)
 1010010:	18bfe51e 	bne	r3,r2,100ffa8 <__alt_data_end+0xff80ffa8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1010014:	e0bffa17 	ldw	r2,-24(fp)
 1010018:	103f9d26 	beq	r2,zero,100fe90 <__alt_data_end+0xff80fe90>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 101001c:	e0bffb17 	ldw	r2,-20(fp)
 1010020:	10c00817 	ldw	r3,32(r2)
 1010024:	00bfff44 	movi	r2,-3
 1010028:	1886703a 	and	r3,r3,r2
 101002c:	e0bffb17 	ldw	r2,-20(fp)
 1010030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1010034:	e0bffb17 	ldw	r2,-20(fp)
 1010038:	10800017 	ldw	r2,0(r2)
 101003c:	10800104 	addi	r2,r2,4
 1010040:	1007883a 	mov	r3,r2
 1010044:	e0bffb17 	ldw	r2,-20(fp)
 1010048:	10800817 	ldw	r2,32(r2)
 101004c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1010050:	e0bffc17 	ldw	r2,-16(fp)
 1010054:	10800104 	addi	r2,r2,4
 1010058:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 101005c:	003f8c06 	br	100fe90 <__alt_data_end+0xff80fe90>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1010060:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1010064:	0001883a 	nop
 1010068:	e037883a 	mov	sp,fp
 101006c:	df000017 	ldw	fp,0(sp)
 1010070:	dec00104 	addi	sp,sp,4
 1010074:	f800283a 	ret

01010078 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1010078:	defff804 	addi	sp,sp,-32
 101007c:	df000715 	stw	fp,28(sp)
 1010080:	df000704 	addi	fp,sp,28
 1010084:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1010088:	e0bffb17 	ldw	r2,-20(fp)
 101008c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1010090:	e0bff917 	ldw	r2,-28(fp)
 1010094:	10800017 	ldw	r2,0(r2)
 1010098:	10800104 	addi	r2,r2,4
 101009c:	10800037 	ldwio	r2,0(r2)
 10100a0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10100a4:	e0bffa17 	ldw	r2,-24(fp)
 10100a8:	1081000c 	andi	r2,r2,1024
 10100ac:	10000b26 	beq	r2,zero,10100dc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10100b0:	e0bff917 	ldw	r2,-28(fp)
 10100b4:	10800017 	ldw	r2,0(r2)
 10100b8:	10800104 	addi	r2,r2,4
 10100bc:	1007883a 	mov	r3,r2
 10100c0:	e0bff917 	ldw	r2,-28(fp)
 10100c4:	10800817 	ldw	r2,32(r2)
 10100c8:	10810014 	ori	r2,r2,1024
 10100cc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 10100d0:	e0bff917 	ldw	r2,-28(fp)
 10100d4:	10000915 	stw	zero,36(r2)
 10100d8:	00000a06 	br	1010104 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10100dc:	e0bff917 	ldw	r2,-28(fp)
 10100e0:	10c00917 	ldw	r3,36(r2)
 10100e4:	00a00034 	movhi	r2,32768
 10100e8:	10bfff04 	addi	r2,r2,-4
 10100ec:	10c00536 	bltu	r2,r3,1010104 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 10100f0:	e0bff917 	ldw	r2,-28(fp)
 10100f4:	10800917 	ldw	r2,36(r2)
 10100f8:	10c00044 	addi	r3,r2,1
 10100fc:	e0bff917 	ldw	r2,-28(fp)
 1010100:	10c00915 	stw	r3,36(r2)
 1010104:	d0a6d717 	ldw	r2,-25764(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1010108:	e037883a 	mov	sp,fp
 101010c:	df000017 	ldw	fp,0(sp)
 1010110:	dec00104 	addi	sp,sp,4
 1010114:	f800283a 	ret

01010118 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1010118:	defffd04 	addi	sp,sp,-12
 101011c:	df000215 	stw	fp,8(sp)
 1010120:	df000204 	addi	fp,sp,8
 1010124:	e13ffe15 	stw	r4,-8(fp)
 1010128:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 101012c:	00000506 	br	1010144 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1010130:	e0bfff17 	ldw	r2,-4(fp)
 1010134:	1090000c 	andi	r2,r2,16384
 1010138:	10000226 	beq	r2,zero,1010144 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 101013c:	00bffd44 	movi	r2,-11
 1010140:	00000b06 	br	1010170 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1010144:	e0bffe17 	ldw	r2,-8(fp)
 1010148:	10c00d17 	ldw	r3,52(r2)
 101014c:	e0bffe17 	ldw	r2,-8(fp)
 1010150:	10800c17 	ldw	r2,48(r2)
 1010154:	18800526 	beq	r3,r2,101016c <altera_avalon_jtag_uart_close+0x54>
 1010158:	e0bffe17 	ldw	r2,-8(fp)
 101015c:	10c00917 	ldw	r3,36(r2)
 1010160:	e0bffe17 	ldw	r2,-8(fp)
 1010164:	10800117 	ldw	r2,4(r2)
 1010168:	18bff136 	bltu	r3,r2,1010130 <__alt_data_end+0xff810130>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 101016c:	0005883a 	mov	r2,zero
}
 1010170:	e037883a 	mov	sp,fp
 1010174:	df000017 	ldw	fp,0(sp)
 1010178:	dec00104 	addi	sp,sp,4
 101017c:	f800283a 	ret

01010180 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1010180:	defffa04 	addi	sp,sp,-24
 1010184:	df000515 	stw	fp,20(sp)
 1010188:	df000504 	addi	fp,sp,20
 101018c:	e13ffd15 	stw	r4,-12(fp)
 1010190:	e17ffe15 	stw	r5,-8(fp)
 1010194:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1010198:	00bff9c4 	movi	r2,-25
 101019c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 10101a0:	e0bffe17 	ldw	r2,-8(fp)
 10101a4:	10da8060 	cmpeqi	r3,r2,27137
 10101a8:	1800031e 	bne	r3,zero,10101b8 <altera_avalon_jtag_uart_ioctl+0x38>
 10101ac:	109a80a0 	cmpeqi	r2,r2,27138
 10101b0:	1000181e 	bne	r2,zero,1010214 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 10101b4:	00002906 	br	101025c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10101b8:	e0bffd17 	ldw	r2,-12(fp)
 10101bc:	10c00117 	ldw	r3,4(r2)
 10101c0:	00a00034 	movhi	r2,32768
 10101c4:	10bfffc4 	addi	r2,r2,-1
 10101c8:	18802126 	beq	r3,r2,1010250 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 10101cc:	e0bfff17 	ldw	r2,-4(fp)
 10101d0:	10800017 	ldw	r2,0(r2)
 10101d4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10101d8:	e0bffc17 	ldw	r2,-16(fp)
 10101dc:	10800090 	cmplti	r2,r2,2
 10101e0:	1000061e 	bne	r2,zero,10101fc <altera_avalon_jtag_uart_ioctl+0x7c>
 10101e4:	e0fffc17 	ldw	r3,-16(fp)
 10101e8:	00a00034 	movhi	r2,32768
 10101ec:	10bfffc4 	addi	r2,r2,-1
 10101f0:	18800226 	beq	r3,r2,10101fc <altera_avalon_jtag_uart_ioctl+0x7c>
 10101f4:	e0bffc17 	ldw	r2,-16(fp)
 10101f8:	00000206 	br	1010204 <altera_avalon_jtag_uart_ioctl+0x84>
 10101fc:	00a00034 	movhi	r2,32768
 1010200:	10bfff84 	addi	r2,r2,-2
 1010204:	e0fffd17 	ldw	r3,-12(fp)
 1010208:	18800115 	stw	r2,4(r3)
      rc = 0;
 101020c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1010210:	00000f06 	br	1010250 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1010214:	e0bffd17 	ldw	r2,-12(fp)
 1010218:	10c00117 	ldw	r3,4(r2)
 101021c:	00a00034 	movhi	r2,32768
 1010220:	10bfffc4 	addi	r2,r2,-1
 1010224:	18800c26 	beq	r3,r2,1010258 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1010228:	e0bffd17 	ldw	r2,-12(fp)
 101022c:	10c00917 	ldw	r3,36(r2)
 1010230:	e0bffd17 	ldw	r2,-12(fp)
 1010234:	10800117 	ldw	r2,4(r2)
 1010238:	1885803a 	cmpltu	r2,r3,r2
 101023c:	10c03fcc 	andi	r3,r2,255
 1010240:	e0bfff17 	ldw	r2,-4(fp)
 1010244:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1010248:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 101024c:	00000206 	br	1010258 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1010250:	0001883a 	nop
 1010254:	00000106 	br	101025c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1010258:	0001883a 	nop

  default:
    break;
  }

  return rc;
 101025c:	e0bffb17 	ldw	r2,-20(fp)
}
 1010260:	e037883a 	mov	sp,fp
 1010264:	df000017 	ldw	fp,0(sp)
 1010268:	dec00104 	addi	sp,sp,4
 101026c:	f800283a 	ret

01010270 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1010270:	defff304 	addi	sp,sp,-52
 1010274:	dfc00c15 	stw	ra,48(sp)
 1010278:	df000b15 	stw	fp,44(sp)
 101027c:	df000b04 	addi	fp,sp,44
 1010280:	e13ffc15 	stw	r4,-16(fp)
 1010284:	e17ffd15 	stw	r5,-12(fp)
 1010288:	e1bffe15 	stw	r6,-8(fp)
 101028c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1010290:	e0bffd17 	ldw	r2,-12(fp)
 1010294:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1010298:	00004706 	br	10103b8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 101029c:	e0bffc17 	ldw	r2,-16(fp)
 10102a0:	10800a17 	ldw	r2,40(r2)
 10102a4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 10102a8:	e0bffc17 	ldw	r2,-16(fp)
 10102ac:	10800b17 	ldw	r2,44(r2)
 10102b0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 10102b4:	e0fff717 	ldw	r3,-36(fp)
 10102b8:	e0bff817 	ldw	r2,-32(fp)
 10102bc:	18800536 	bltu	r3,r2,10102d4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10102c0:	e0fff717 	ldw	r3,-36(fp)
 10102c4:	e0bff817 	ldw	r2,-32(fp)
 10102c8:	1885c83a 	sub	r2,r3,r2
 10102cc:	e0bff615 	stw	r2,-40(fp)
 10102d0:	00000406 	br	10102e4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10102d4:	00c20004 	movi	r3,2048
 10102d8:	e0bff817 	ldw	r2,-32(fp)
 10102dc:	1885c83a 	sub	r2,r3,r2
 10102e0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 10102e4:	e0bff617 	ldw	r2,-40(fp)
 10102e8:	10001e26 	beq	r2,zero,1010364 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 10102ec:	e0fffe17 	ldw	r3,-8(fp)
 10102f0:	e0bff617 	ldw	r2,-40(fp)
 10102f4:	1880022e 	bgeu	r3,r2,1010300 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 10102f8:	e0bffe17 	ldw	r2,-8(fp)
 10102fc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1010300:	e0bffc17 	ldw	r2,-16(fp)
 1010304:	10c00e04 	addi	r3,r2,56
 1010308:	e0bff817 	ldw	r2,-32(fp)
 101030c:	1885883a 	add	r2,r3,r2
 1010310:	e1bff617 	ldw	r6,-40(fp)
 1010314:	100b883a 	mov	r5,r2
 1010318:	e13ff517 	ldw	r4,-44(fp)
 101031c:	1007e800 	call	1007e80 <memcpy>
      ptr   += n;
 1010320:	e0fff517 	ldw	r3,-44(fp)
 1010324:	e0bff617 	ldw	r2,-40(fp)
 1010328:	1885883a 	add	r2,r3,r2
 101032c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1010330:	e0fffe17 	ldw	r3,-8(fp)
 1010334:	e0bff617 	ldw	r2,-40(fp)
 1010338:	1885c83a 	sub	r2,r3,r2
 101033c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010340:	e0fff817 	ldw	r3,-32(fp)
 1010344:	e0bff617 	ldw	r2,-40(fp)
 1010348:	1885883a 	add	r2,r3,r2
 101034c:	10c1ffcc 	andi	r3,r2,2047
 1010350:	e0bffc17 	ldw	r2,-16(fp)
 1010354:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1010358:	e0bffe17 	ldw	r2,-8(fp)
 101035c:	00bfcf16 	blt	zero,r2,101029c <__alt_data_end+0xff81029c>
 1010360:	00000106 	br	1010368 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1010364:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1010368:	e0fff517 	ldw	r3,-44(fp)
 101036c:	e0bffd17 	ldw	r2,-12(fp)
 1010370:	1880141e 	bne	r3,r2,10103c4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1010374:	e0bfff17 	ldw	r2,-4(fp)
 1010378:	1090000c 	andi	r2,r2,16384
 101037c:	1000131e 	bne	r2,zero,10103cc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1010380:	0001883a 	nop
 1010384:	e0bffc17 	ldw	r2,-16(fp)
 1010388:	10c00a17 	ldw	r3,40(r2)
 101038c:	e0bff717 	ldw	r2,-36(fp)
 1010390:	1880051e 	bne	r3,r2,10103a8 <altera_avalon_jtag_uart_read+0x138>
 1010394:	e0bffc17 	ldw	r2,-16(fp)
 1010398:	10c00917 	ldw	r3,36(r2)
 101039c:	e0bffc17 	ldw	r2,-16(fp)
 10103a0:	10800117 	ldw	r2,4(r2)
 10103a4:	18bff736 	bltu	r3,r2,1010384 <__alt_data_end+0xff810384>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10103a8:	e0bffc17 	ldw	r2,-16(fp)
 10103ac:	10c00a17 	ldw	r3,40(r2)
 10103b0:	e0bff717 	ldw	r2,-36(fp)
 10103b4:	18800726 	beq	r3,r2,10103d4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10103b8:	e0bffe17 	ldw	r2,-8(fp)
 10103bc:	00bfb716 	blt	zero,r2,101029c <__alt_data_end+0xff81029c>
 10103c0:	00000506 	br	10103d8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 10103c4:	0001883a 	nop
 10103c8:	00000306 	br	10103d8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 10103cc:	0001883a 	nop
 10103d0:	00000106 	br	10103d8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 10103d4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10103d8:	e0fff517 	ldw	r3,-44(fp)
 10103dc:	e0bffd17 	ldw	r2,-12(fp)
 10103e0:	18801826 	beq	r3,r2,1010444 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10103e4:	0005303a 	rdctl	r2,status
 10103e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10103ec:	e0fffb17 	ldw	r3,-20(fp)
 10103f0:	00bfff84 	movi	r2,-2
 10103f4:	1884703a 	and	r2,r3,r2
 10103f8:	1001703a 	wrctl	status,r2
  
  return context;
 10103fc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1010400:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1010404:	e0bffc17 	ldw	r2,-16(fp)
 1010408:	10800817 	ldw	r2,32(r2)
 101040c:	10c00054 	ori	r3,r2,1
 1010410:	e0bffc17 	ldw	r2,-16(fp)
 1010414:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1010418:	e0bffc17 	ldw	r2,-16(fp)
 101041c:	10800017 	ldw	r2,0(r2)
 1010420:	10800104 	addi	r2,r2,4
 1010424:	1007883a 	mov	r3,r2
 1010428:	e0bffc17 	ldw	r2,-16(fp)
 101042c:	10800817 	ldw	r2,32(r2)
 1010430:	18800035 	stwio	r2,0(r3)
 1010434:	e0bffa17 	ldw	r2,-24(fp)
 1010438:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 101043c:	e0bff917 	ldw	r2,-28(fp)
 1010440:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1010444:	e0fff517 	ldw	r3,-44(fp)
 1010448:	e0bffd17 	ldw	r2,-12(fp)
 101044c:	18800426 	beq	r3,r2,1010460 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1010450:	e0fff517 	ldw	r3,-44(fp)
 1010454:	e0bffd17 	ldw	r2,-12(fp)
 1010458:	1885c83a 	sub	r2,r3,r2
 101045c:	00000606 	br	1010478 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1010460:	e0bfff17 	ldw	r2,-4(fp)
 1010464:	1090000c 	andi	r2,r2,16384
 1010468:	10000226 	beq	r2,zero,1010474 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 101046c:	00bffd44 	movi	r2,-11
 1010470:	00000106 	br	1010478 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1010474:	00bffec4 	movi	r2,-5
}
 1010478:	e037883a 	mov	sp,fp
 101047c:	dfc00117 	ldw	ra,4(sp)
 1010480:	df000017 	ldw	fp,0(sp)
 1010484:	dec00204 	addi	sp,sp,8
 1010488:	f800283a 	ret

0101048c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 101048c:	defff304 	addi	sp,sp,-52
 1010490:	dfc00c15 	stw	ra,48(sp)
 1010494:	df000b15 	stw	fp,44(sp)
 1010498:	df000b04 	addi	fp,sp,44
 101049c:	e13ffc15 	stw	r4,-16(fp)
 10104a0:	e17ffd15 	stw	r5,-12(fp)
 10104a4:	e1bffe15 	stw	r6,-8(fp)
 10104a8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10104ac:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10104b0:	e0bffd17 	ldw	r2,-12(fp)
 10104b4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10104b8:	00003706 	br	1010598 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10104bc:	e0bffc17 	ldw	r2,-16(fp)
 10104c0:	10800c17 	ldw	r2,48(r2)
 10104c4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 10104c8:	e0bffc17 	ldw	r2,-16(fp)
 10104cc:	10800d17 	ldw	r2,52(r2)
 10104d0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 10104d4:	e0fff917 	ldw	r3,-28(fp)
 10104d8:	e0bff517 	ldw	r2,-44(fp)
 10104dc:	1880062e 	bgeu	r3,r2,10104f8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10104e0:	e0fff517 	ldw	r3,-44(fp)
 10104e4:	e0bff917 	ldw	r2,-28(fp)
 10104e8:	1885c83a 	sub	r2,r3,r2
 10104ec:	10bfffc4 	addi	r2,r2,-1
 10104f0:	e0bff615 	stw	r2,-40(fp)
 10104f4:	00000b06 	br	1010524 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 10104f8:	e0bff517 	ldw	r2,-44(fp)
 10104fc:	10000526 	beq	r2,zero,1010514 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1010500:	00c20004 	movi	r3,2048
 1010504:	e0bff917 	ldw	r2,-28(fp)
 1010508:	1885c83a 	sub	r2,r3,r2
 101050c:	e0bff615 	stw	r2,-40(fp)
 1010510:	00000406 	br	1010524 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1010514:	00c1ffc4 	movi	r3,2047
 1010518:	e0bff917 	ldw	r2,-28(fp)
 101051c:	1885c83a 	sub	r2,r3,r2
 1010520:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1010524:	e0bff617 	ldw	r2,-40(fp)
 1010528:	10001e26 	beq	r2,zero,10105a4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 101052c:	e0fffe17 	ldw	r3,-8(fp)
 1010530:	e0bff617 	ldw	r2,-40(fp)
 1010534:	1880022e 	bgeu	r3,r2,1010540 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1010538:	e0bffe17 	ldw	r2,-8(fp)
 101053c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1010540:	e0bffc17 	ldw	r2,-16(fp)
 1010544:	10c20e04 	addi	r3,r2,2104
 1010548:	e0bff917 	ldw	r2,-28(fp)
 101054c:	1885883a 	add	r2,r3,r2
 1010550:	e1bff617 	ldw	r6,-40(fp)
 1010554:	e17ffd17 	ldw	r5,-12(fp)
 1010558:	1009883a 	mov	r4,r2
 101055c:	1007e800 	call	1007e80 <memcpy>
      ptr   += n;
 1010560:	e0fffd17 	ldw	r3,-12(fp)
 1010564:	e0bff617 	ldw	r2,-40(fp)
 1010568:	1885883a 	add	r2,r3,r2
 101056c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1010570:	e0fffe17 	ldw	r3,-8(fp)
 1010574:	e0bff617 	ldw	r2,-40(fp)
 1010578:	1885c83a 	sub	r2,r3,r2
 101057c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010580:	e0fff917 	ldw	r3,-28(fp)
 1010584:	e0bff617 	ldw	r2,-40(fp)
 1010588:	1885883a 	add	r2,r3,r2
 101058c:	10c1ffcc 	andi	r3,r2,2047
 1010590:	e0bffc17 	ldw	r2,-16(fp)
 1010594:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1010598:	e0bffe17 	ldw	r2,-8(fp)
 101059c:	00bfc716 	blt	zero,r2,10104bc <__alt_data_end+0xff8104bc>
 10105a0:	00000106 	br	10105a8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 10105a4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10105a8:	0005303a 	rdctl	r2,status
 10105ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10105b0:	e0fffb17 	ldw	r3,-20(fp)
 10105b4:	00bfff84 	movi	r2,-2
 10105b8:	1884703a 	and	r2,r3,r2
 10105bc:	1001703a 	wrctl	status,r2
  
  return context;
 10105c0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10105c4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10105c8:	e0bffc17 	ldw	r2,-16(fp)
 10105cc:	10800817 	ldw	r2,32(r2)
 10105d0:	10c00094 	ori	r3,r2,2
 10105d4:	e0bffc17 	ldw	r2,-16(fp)
 10105d8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10105dc:	e0bffc17 	ldw	r2,-16(fp)
 10105e0:	10800017 	ldw	r2,0(r2)
 10105e4:	10800104 	addi	r2,r2,4
 10105e8:	1007883a 	mov	r3,r2
 10105ec:	e0bffc17 	ldw	r2,-16(fp)
 10105f0:	10800817 	ldw	r2,32(r2)
 10105f4:	18800035 	stwio	r2,0(r3)
 10105f8:	e0bffa17 	ldw	r2,-24(fp)
 10105fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010600:	e0bff817 	ldw	r2,-32(fp)
 1010604:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1010608:	e0bffe17 	ldw	r2,-8(fp)
 101060c:	0080100e 	bge	zero,r2,1010650 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 1010610:	e0bfff17 	ldw	r2,-4(fp)
 1010614:	1090000c 	andi	r2,r2,16384
 1010618:	1000101e 	bne	r2,zero,101065c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 101061c:	0001883a 	nop
 1010620:	e0bffc17 	ldw	r2,-16(fp)
 1010624:	10c00d17 	ldw	r3,52(r2)
 1010628:	e0bff517 	ldw	r2,-44(fp)
 101062c:	1880051e 	bne	r3,r2,1010644 <altera_avalon_jtag_uart_write+0x1b8>
 1010630:	e0bffc17 	ldw	r2,-16(fp)
 1010634:	10c00917 	ldw	r3,36(r2)
 1010638:	e0bffc17 	ldw	r2,-16(fp)
 101063c:	10800117 	ldw	r2,4(r2)
 1010640:	18bff736 	bltu	r3,r2,1010620 <__alt_data_end+0xff810620>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1010644:	e0bffc17 	ldw	r2,-16(fp)
 1010648:	10800917 	ldw	r2,36(r2)
 101064c:	1000051e 	bne	r2,zero,1010664 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 1010650:	e0bffe17 	ldw	r2,-8(fp)
 1010654:	00bfd016 	blt	zero,r2,1010598 <__alt_data_end+0xff810598>
 1010658:	00000306 	br	1010668 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 101065c:	0001883a 	nop
 1010660:	00000106 	br	1010668 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 1010664:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1010668:	e0fffd17 	ldw	r3,-12(fp)
 101066c:	e0bff717 	ldw	r2,-36(fp)
 1010670:	18800426 	beq	r3,r2,1010684 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 1010674:	e0fffd17 	ldw	r3,-12(fp)
 1010678:	e0bff717 	ldw	r2,-36(fp)
 101067c:	1885c83a 	sub	r2,r3,r2
 1010680:	00000606 	br	101069c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 1010684:	e0bfff17 	ldw	r2,-4(fp)
 1010688:	1090000c 	andi	r2,r2,16384
 101068c:	10000226 	beq	r2,zero,1010698 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 1010690:	00bffd44 	movi	r2,-11
 1010694:	00000106 	br	101069c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1010698:	00bffec4 	movi	r2,-5
}
 101069c:	e037883a 	mov	sp,fp
 10106a0:	dfc00117 	ldw	ra,4(sp)
 10106a4:	df000017 	ldw	fp,0(sp)
 10106a8:	dec00204 	addi	sp,sp,8
 10106ac:	f800283a 	ret

010106b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10106b0:	defff504 	addi	sp,sp,-44
 10106b4:	df000a15 	stw	fp,40(sp)
 10106b8:	df000a04 	addi	fp,sp,40
 10106bc:	e13ffc15 	stw	r4,-16(fp)
 10106c0:	e17ffd15 	stw	r5,-12(fp)
 10106c4:	e1bffe15 	stw	r6,-8(fp)
 10106c8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10106cc:	e03ff615 	stw	zero,-40(fp)
 10106d0:	d0a6d717 	ldw	r2,-25764(gp)
  
  if (alt_ticks_per_second ())
 10106d4:	10003c26 	beq	r2,zero,10107c8 <alt_alarm_start+0x118>
  {
    if (alarm)
 10106d8:	e0bffc17 	ldw	r2,-16(fp)
 10106dc:	10003826 	beq	r2,zero,10107c0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 10106e0:	e0bffc17 	ldw	r2,-16(fp)
 10106e4:	e0fffe17 	ldw	r3,-8(fp)
 10106e8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 10106ec:	e0bffc17 	ldw	r2,-16(fp)
 10106f0:	e0ffff17 	ldw	r3,-4(fp)
 10106f4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10106f8:	0005303a 	rdctl	r2,status
 10106fc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010700:	e0fff917 	ldw	r3,-28(fp)
 1010704:	00bfff84 	movi	r2,-2
 1010708:	1884703a 	and	r2,r3,r2
 101070c:	1001703a 	wrctl	status,r2
  
  return context;
 1010710:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1010714:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1010718:	d0a6d817 	ldw	r2,-25760(gp)
      
      current_nticks = alt_nticks();
 101071c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1010720:	e0fffd17 	ldw	r3,-12(fp)
 1010724:	e0bff617 	ldw	r2,-40(fp)
 1010728:	1885883a 	add	r2,r3,r2
 101072c:	10c00044 	addi	r3,r2,1
 1010730:	e0bffc17 	ldw	r2,-16(fp)
 1010734:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1010738:	e0bffc17 	ldw	r2,-16(fp)
 101073c:	10c00217 	ldw	r3,8(r2)
 1010740:	e0bff617 	ldw	r2,-40(fp)
 1010744:	1880042e 	bgeu	r3,r2,1010758 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1010748:	e0bffc17 	ldw	r2,-16(fp)
 101074c:	00c00044 	movi	r3,1
 1010750:	10c00405 	stb	r3,16(r2)
 1010754:	00000206 	br	1010760 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1010758:	e0bffc17 	ldw	r2,-16(fp)
 101075c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1010760:	e0bffc17 	ldw	r2,-16(fp)
 1010764:	d0e00e04 	addi	r3,gp,-32712
 1010768:	e0fffa15 	stw	r3,-24(fp)
 101076c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1010770:	e0bffb17 	ldw	r2,-20(fp)
 1010774:	e0fffa17 	ldw	r3,-24(fp)
 1010778:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 101077c:	e0bffa17 	ldw	r2,-24(fp)
 1010780:	10c00017 	ldw	r3,0(r2)
 1010784:	e0bffb17 	ldw	r2,-20(fp)
 1010788:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101078c:	e0bffa17 	ldw	r2,-24(fp)
 1010790:	10800017 	ldw	r2,0(r2)
 1010794:	e0fffb17 	ldw	r3,-20(fp)
 1010798:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 101079c:	e0bffa17 	ldw	r2,-24(fp)
 10107a0:	e0fffb17 	ldw	r3,-20(fp)
 10107a4:	10c00015 	stw	r3,0(r2)
 10107a8:	e0bff817 	ldw	r2,-32(fp)
 10107ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10107b0:	e0bff717 	ldw	r2,-36(fp)
 10107b4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10107b8:	0005883a 	mov	r2,zero
 10107bc:	00000306 	br	10107cc <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 10107c0:	00bffa84 	movi	r2,-22
 10107c4:	00000106 	br	10107cc <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 10107c8:	00bfde84 	movi	r2,-134
  }
}
 10107cc:	e037883a 	mov	sp,fp
 10107d0:	df000017 	ldw	fp,0(sp)
 10107d4:	dec00104 	addi	sp,sp,4
 10107d8:	f800283a 	ret

010107dc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 10107dc:	defffa04 	addi	sp,sp,-24
 10107e0:	dfc00515 	stw	ra,20(sp)
 10107e4:	df000415 	stw	fp,16(sp)
 10107e8:	df000404 	addi	fp,sp,16
 10107ec:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 10107f0:	00800244 	movi	r2,9
 10107f4:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 10107f8:	014003f4 	movhi	r5,15
 10107fc:	29509004 	addi	r5,r5,16960
 1010800:	e13ffd17 	ldw	r4,-12(fp)
 1010804:	100c9000 	call	100c900 <__mulsi3>
 1010808:	100b883a 	mov	r5,r2
 101080c:	0100bef4 	movhi	r4,763
 1010810:	213c2004 	addi	r4,r4,-3968
 1010814:	100c8440 	call	100c844 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1010818:	100b883a 	mov	r5,r2
 101081c:	01200034 	movhi	r4,32768
 1010820:	213fffc4 	addi	r4,r4,-1
 1010824:	100c8440 	call	100c844 <__udivsi3>
 1010828:	100b883a 	mov	r5,r2
 101082c:	e13fff17 	ldw	r4,-4(fp)
 1010830:	100c8440 	call	100c844 <__udivsi3>
 1010834:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1010838:	e0bffe17 	ldw	r2,-8(fp)
 101083c:	10002a26 	beq	r2,zero,10108e8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1010840:	e03ffc15 	stw	zero,-16(fp)
 1010844:	00001706 	br	10108a4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1010848:	00a00034 	movhi	r2,32768
 101084c:	10bfffc4 	addi	r2,r2,-1
 1010850:	10bfffc4 	addi	r2,r2,-1
 1010854:	103ffe1e 	bne	r2,zero,1010850 <__alt_data_end+0xff810850>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1010858:	014003f4 	movhi	r5,15
 101085c:	29509004 	addi	r5,r5,16960
 1010860:	e13ffd17 	ldw	r4,-12(fp)
 1010864:	100c9000 	call	100c900 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 1010868:	100b883a 	mov	r5,r2
 101086c:	0100bef4 	movhi	r4,763
 1010870:	213c2004 	addi	r4,r4,-3968
 1010874:	100c8440 	call	100c844 <__udivsi3>
 1010878:	100b883a 	mov	r5,r2
 101087c:	01200034 	movhi	r4,32768
 1010880:	213fffc4 	addi	r4,r4,-1
 1010884:	100c8440 	call	100c844 <__udivsi3>
 1010888:	1007883a 	mov	r3,r2
 101088c:	e0bfff17 	ldw	r2,-4(fp)
 1010890:	10c5c83a 	sub	r2,r2,r3
 1010894:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 1010898:	e0bffc17 	ldw	r2,-16(fp)
 101089c:	10800044 	addi	r2,r2,1
 10108a0:	e0bffc15 	stw	r2,-16(fp)
 10108a4:	e0fffc17 	ldw	r3,-16(fp)
 10108a8:	e0bffe17 	ldw	r2,-8(fp)
 10108ac:	18bfe616 	blt	r3,r2,1010848 <__alt_data_end+0xff810848>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10108b0:	014003f4 	movhi	r5,15
 10108b4:	29509004 	addi	r5,r5,16960
 10108b8:	e13ffd17 	ldw	r4,-12(fp)
 10108bc:	100c9000 	call	100c900 <__mulsi3>
 10108c0:	100b883a 	mov	r5,r2
 10108c4:	0100bef4 	movhi	r4,763
 10108c8:	213c2004 	addi	r4,r4,-3968
 10108cc:	100c8440 	call	100c844 <__udivsi3>
 10108d0:	e17fff17 	ldw	r5,-4(fp)
 10108d4:	1009883a 	mov	r4,r2
 10108d8:	100c9000 	call	100c900 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 10108dc:	10bfffc4 	addi	r2,r2,-1
 10108e0:	103ffe1e 	bne	r2,zero,10108dc <__alt_data_end+0xff8108dc>
 10108e4:	00000d06 	br	101091c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10108e8:	014003f4 	movhi	r5,15
 10108ec:	29509004 	addi	r5,r5,16960
 10108f0:	e13ffd17 	ldw	r4,-12(fp)
 10108f4:	100c9000 	call	100c900 <__mulsi3>
 10108f8:	100b883a 	mov	r5,r2
 10108fc:	0100bef4 	movhi	r4,763
 1010900:	213c2004 	addi	r4,r4,-3968
 1010904:	100c8440 	call	100c844 <__udivsi3>
 1010908:	e17fff17 	ldw	r5,-4(fp)
 101090c:	1009883a 	mov	r4,r2
 1010910:	100c9000 	call	100c900 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1010914:	10bfffc4 	addi	r2,r2,-1
 1010918:	00bffe16 	blt	zero,r2,1010914 <__alt_data_end+0xff810914>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 101091c:	0005883a 	mov	r2,zero
}
 1010920:	e037883a 	mov	sp,fp
 1010924:	dfc00117 	ldw	ra,4(sp)
 1010928:	df000017 	ldw	fp,0(sp)
 101092c:	dec00204 	addi	sp,sp,8
 1010930:	f800283a 	ret

01010934 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1010934:	deffff04 	addi	sp,sp,-4
 1010938:	df000015 	stw	fp,0(sp)
 101093c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1010940:	0001883a 	nop
 1010944:	e037883a 	mov	sp,fp
 1010948:	df000017 	ldw	fp,0(sp)
 101094c:	dec00104 	addi	sp,sp,4
 1010950:	f800283a 	ret

01010954 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010954:	defffe04 	addi	sp,sp,-8
 1010958:	dfc00115 	stw	ra,4(sp)
 101095c:	df000015 	stw	fp,0(sp)
 1010960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1010964:	d0a00b17 	ldw	r2,-32724(gp)
 1010968:	10000326 	beq	r2,zero,1010978 <alt_get_errno+0x24>
 101096c:	d0a00b17 	ldw	r2,-32724(gp)
 1010970:	103ee83a 	callr	r2
 1010974:	00000106 	br	101097c <alt_get_errno+0x28>
 1010978:	d0a6d204 	addi	r2,gp,-25784
}
 101097c:	e037883a 	mov	sp,fp
 1010980:	dfc00117 	ldw	ra,4(sp)
 1010984:	df000017 	ldw	fp,0(sp)
 1010988:	dec00204 	addi	sp,sp,8
 101098c:	f800283a 	ret

01010990 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1010990:	defffa04 	addi	sp,sp,-24
 1010994:	dfc00515 	stw	ra,20(sp)
 1010998:	df000415 	stw	fp,16(sp)
 101099c:	df000404 	addi	fp,sp,16
 10109a0:	e13ffe15 	stw	r4,-8(fp)
 10109a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10109a8:	e0bffe17 	ldw	r2,-8(fp)
 10109ac:	10000326 	beq	r2,zero,10109bc <alt_dev_llist_insert+0x2c>
 10109b0:	e0bffe17 	ldw	r2,-8(fp)
 10109b4:	10800217 	ldw	r2,8(r2)
 10109b8:	1000061e 	bne	r2,zero,10109d4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 10109bc:	10109540 	call	1010954 <alt_get_errno>
 10109c0:	1007883a 	mov	r3,r2
 10109c4:	00800584 	movi	r2,22
 10109c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10109cc:	00bffa84 	movi	r2,-22
 10109d0:	00001306 	br	1010a20 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10109d4:	e0bffe17 	ldw	r2,-8(fp)
 10109d8:	e0ffff17 	ldw	r3,-4(fp)
 10109dc:	e0fffc15 	stw	r3,-16(fp)
 10109e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10109e4:	e0bffd17 	ldw	r2,-12(fp)
 10109e8:	e0fffc17 	ldw	r3,-16(fp)
 10109ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 10109f0:	e0bffc17 	ldw	r2,-16(fp)
 10109f4:	10c00017 	ldw	r3,0(r2)
 10109f8:	e0bffd17 	ldw	r2,-12(fp)
 10109fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010a00:	e0bffc17 	ldw	r2,-16(fp)
 1010a04:	10800017 	ldw	r2,0(r2)
 1010a08:	e0fffd17 	ldw	r3,-12(fp)
 1010a0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1010a10:	e0bffc17 	ldw	r2,-16(fp)
 1010a14:	e0fffd17 	ldw	r3,-12(fp)
 1010a18:	10c00015 	stw	r3,0(r2)

  return 0;  
 1010a1c:	0005883a 	mov	r2,zero
}
 1010a20:	e037883a 	mov	sp,fp
 1010a24:	dfc00117 	ldw	ra,4(sp)
 1010a28:	df000017 	ldw	fp,0(sp)
 1010a2c:	dec00204 	addi	sp,sp,8
 1010a30:	f800283a 	ret

01010a34 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1010a34:	defffd04 	addi	sp,sp,-12
 1010a38:	dfc00215 	stw	ra,8(sp)
 1010a3c:	df000115 	stw	fp,4(sp)
 1010a40:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010a44:	00804074 	movhi	r2,257
 1010a48:	10867a04 	addi	r2,r2,6632
 1010a4c:	e0bfff15 	stw	r2,-4(fp)
 1010a50:	00000606 	br	1010a6c <_do_ctors+0x38>
        (*ctor) (); 
 1010a54:	e0bfff17 	ldw	r2,-4(fp)
 1010a58:	10800017 	ldw	r2,0(r2)
 1010a5c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010a60:	e0bfff17 	ldw	r2,-4(fp)
 1010a64:	10bfff04 	addi	r2,r2,-4
 1010a68:	e0bfff15 	stw	r2,-4(fp)
 1010a6c:	e0ffff17 	ldw	r3,-4(fp)
 1010a70:	00804074 	movhi	r2,257
 1010a74:	10867b04 	addi	r2,r2,6636
 1010a78:	18bff62e 	bgeu	r3,r2,1010a54 <__alt_data_end+0xff810a54>
        (*ctor) (); 
}
 1010a7c:	0001883a 	nop
 1010a80:	e037883a 	mov	sp,fp
 1010a84:	dfc00117 	ldw	ra,4(sp)
 1010a88:	df000017 	ldw	fp,0(sp)
 1010a8c:	dec00204 	addi	sp,sp,8
 1010a90:	f800283a 	ret

01010a94 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1010a94:	defffd04 	addi	sp,sp,-12
 1010a98:	dfc00215 	stw	ra,8(sp)
 1010a9c:	df000115 	stw	fp,4(sp)
 1010aa0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010aa4:	00804074 	movhi	r2,257
 1010aa8:	10867a04 	addi	r2,r2,6632
 1010aac:	e0bfff15 	stw	r2,-4(fp)
 1010ab0:	00000606 	br	1010acc <_do_dtors+0x38>
        (*dtor) (); 
 1010ab4:	e0bfff17 	ldw	r2,-4(fp)
 1010ab8:	10800017 	ldw	r2,0(r2)
 1010abc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010ac0:	e0bfff17 	ldw	r2,-4(fp)
 1010ac4:	10bfff04 	addi	r2,r2,-4
 1010ac8:	e0bfff15 	stw	r2,-4(fp)
 1010acc:	e0ffff17 	ldw	r3,-4(fp)
 1010ad0:	00804074 	movhi	r2,257
 1010ad4:	10867b04 	addi	r2,r2,6636
 1010ad8:	18bff62e 	bgeu	r3,r2,1010ab4 <__alt_data_end+0xff810ab4>
        (*dtor) (); 
}
 1010adc:	0001883a 	nop
 1010ae0:	e037883a 	mov	sp,fp
 1010ae4:	dfc00117 	ldw	ra,4(sp)
 1010ae8:	df000017 	ldw	fp,0(sp)
 1010aec:	dec00204 	addi	sp,sp,8
 1010af0:	f800283a 	ret

01010af4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1010af4:	deffff04 	addi	sp,sp,-4
 1010af8:	df000015 	stw	fp,0(sp)
 1010afc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1010b00:	0001883a 	nop
 1010b04:	e037883a 	mov	sp,fp
 1010b08:	df000017 	ldw	fp,0(sp)
 1010b0c:	dec00104 	addi	sp,sp,4
 1010b10:	f800283a 	ret

01010b14 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010b14:	defff904 	addi	sp,sp,-28
 1010b18:	dfc00615 	stw	ra,24(sp)
 1010b1c:	df000515 	stw	fp,20(sp)
 1010b20:	df000504 	addi	fp,sp,20
 1010b24:	e13ffc15 	stw	r4,-16(fp)
 1010b28:	e17ffd15 	stw	r5,-12(fp)
 1010b2c:	e1bffe15 	stw	r6,-8(fp)
 1010b30:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 1010b34:	e0800217 	ldw	r2,8(fp)
 1010b38:	d8800015 	stw	r2,0(sp)
 1010b3c:	e1ffff17 	ldw	r7,-4(fp)
 1010b40:	e1bffe17 	ldw	r6,-8(fp)
 1010b44:	e17ffd17 	ldw	r5,-12(fp)
 1010b48:	e13ffc17 	ldw	r4,-16(fp)
 1010b4c:	1010cc40 	call	1010cc4 <alt_iic_isr_register>
}  
 1010b50:	e037883a 	mov	sp,fp
 1010b54:	dfc00117 	ldw	ra,4(sp)
 1010b58:	df000017 	ldw	fp,0(sp)
 1010b5c:	dec00204 	addi	sp,sp,8
 1010b60:	f800283a 	ret

01010b64 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 1010b64:	defff904 	addi	sp,sp,-28
 1010b68:	df000615 	stw	fp,24(sp)
 1010b6c:	df000604 	addi	fp,sp,24
 1010b70:	e13ffe15 	stw	r4,-8(fp)
 1010b74:	e17fff15 	stw	r5,-4(fp)
 1010b78:	e0bfff17 	ldw	r2,-4(fp)
 1010b7c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010b80:	0005303a 	rdctl	r2,status
 1010b84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010b88:	e0fffb17 	ldw	r3,-20(fp)
 1010b8c:	00bfff84 	movi	r2,-2
 1010b90:	1884703a 	and	r2,r3,r2
 1010b94:	1001703a 	wrctl	status,r2
  
  return context;
 1010b98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010b9c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1010ba0:	00c00044 	movi	r3,1
 1010ba4:	e0bffa17 	ldw	r2,-24(fp)
 1010ba8:	1884983a 	sll	r2,r3,r2
 1010bac:	1007883a 	mov	r3,r2
 1010bb0:	d0a6d617 	ldw	r2,-25768(gp)
 1010bb4:	1884b03a 	or	r2,r3,r2
 1010bb8:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010bbc:	d0a6d617 	ldw	r2,-25768(gp)
 1010bc0:	100170fa 	wrctl	ienable,r2
 1010bc4:	e0bffc17 	ldw	r2,-16(fp)
 1010bc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010bcc:	e0bffd17 	ldw	r2,-12(fp)
 1010bd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010bd4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1010bd8:	0001883a 	nop
}
 1010bdc:	e037883a 	mov	sp,fp
 1010be0:	df000017 	ldw	fp,0(sp)
 1010be4:	dec00104 	addi	sp,sp,4
 1010be8:	f800283a 	ret

01010bec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1010bec:	defff904 	addi	sp,sp,-28
 1010bf0:	df000615 	stw	fp,24(sp)
 1010bf4:	df000604 	addi	fp,sp,24
 1010bf8:	e13ffe15 	stw	r4,-8(fp)
 1010bfc:	e17fff15 	stw	r5,-4(fp)
 1010c00:	e0bfff17 	ldw	r2,-4(fp)
 1010c04:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010c08:	0005303a 	rdctl	r2,status
 1010c0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010c10:	e0fffb17 	ldw	r3,-20(fp)
 1010c14:	00bfff84 	movi	r2,-2
 1010c18:	1884703a 	and	r2,r3,r2
 1010c1c:	1001703a 	wrctl	status,r2
  
  return context;
 1010c20:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010c24:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 1010c28:	00c00044 	movi	r3,1
 1010c2c:	e0bffa17 	ldw	r2,-24(fp)
 1010c30:	1884983a 	sll	r2,r3,r2
 1010c34:	0084303a 	nor	r2,zero,r2
 1010c38:	1007883a 	mov	r3,r2
 1010c3c:	d0a6d617 	ldw	r2,-25768(gp)
 1010c40:	1884703a 	and	r2,r3,r2
 1010c44:	d0a6d615 	stw	r2,-25768(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010c48:	d0a6d617 	ldw	r2,-25768(gp)
 1010c4c:	100170fa 	wrctl	ienable,r2
 1010c50:	e0bffc17 	ldw	r2,-16(fp)
 1010c54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010c58:	e0bffd17 	ldw	r2,-12(fp)
 1010c5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010c60:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 1010c64:	0001883a 	nop
}
 1010c68:	e037883a 	mov	sp,fp
 1010c6c:	df000017 	ldw	fp,0(sp)
 1010c70:	dec00104 	addi	sp,sp,4
 1010c74:	f800283a 	ret

01010c78 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1010c78:	defffc04 	addi	sp,sp,-16
 1010c7c:	df000315 	stw	fp,12(sp)
 1010c80:	df000304 	addi	fp,sp,12
 1010c84:	e13ffe15 	stw	r4,-8(fp)
 1010c88:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1010c8c:	000530fa 	rdctl	r2,ienable
 1010c90:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 1010c94:	00c00044 	movi	r3,1
 1010c98:	e0bfff17 	ldw	r2,-4(fp)
 1010c9c:	1884983a 	sll	r2,r3,r2
 1010ca0:	1007883a 	mov	r3,r2
 1010ca4:	e0bffd17 	ldw	r2,-12(fp)
 1010ca8:	1884703a 	and	r2,r3,r2
 1010cac:	1004c03a 	cmpne	r2,r2,zero
 1010cb0:	10803fcc 	andi	r2,r2,255
}
 1010cb4:	e037883a 	mov	sp,fp
 1010cb8:	df000017 	ldw	fp,0(sp)
 1010cbc:	dec00104 	addi	sp,sp,4
 1010cc0:	f800283a 	ret

01010cc4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 1010cc4:	defff504 	addi	sp,sp,-44
 1010cc8:	dfc00a15 	stw	ra,40(sp)
 1010ccc:	df000915 	stw	fp,36(sp)
 1010cd0:	df000904 	addi	fp,sp,36
 1010cd4:	e13ffc15 	stw	r4,-16(fp)
 1010cd8:	e17ffd15 	stw	r5,-12(fp)
 1010cdc:	e1bffe15 	stw	r6,-8(fp)
 1010ce0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 1010ce4:	00bffa84 	movi	r2,-22
 1010ce8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1010cec:	e0bffd17 	ldw	r2,-12(fp)
 1010cf0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1010cf4:	e0bff817 	ldw	r2,-32(fp)
 1010cf8:	10800808 	cmpgei	r2,r2,32
 1010cfc:	1000271e 	bne	r2,zero,1010d9c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010d00:	0005303a 	rdctl	r2,status
 1010d04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010d08:	e0fffb17 	ldw	r3,-20(fp)
 1010d0c:	00bfff84 	movi	r2,-2
 1010d10:	1884703a 	and	r2,r3,r2
 1010d14:	1001703a 	wrctl	status,r2
  
  return context;
 1010d18:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1010d1c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1010d20:	00804074 	movhi	r2,257
 1010d24:	1096a804 	addi	r2,r2,23200
 1010d28:	e0fff817 	ldw	r3,-32(fp)
 1010d2c:	180690fa 	slli	r3,r3,3
 1010d30:	10c5883a 	add	r2,r2,r3
 1010d34:	e0fffe17 	ldw	r3,-8(fp)
 1010d38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 1010d3c:	00804074 	movhi	r2,257
 1010d40:	1096a804 	addi	r2,r2,23200
 1010d44:	e0fff817 	ldw	r3,-32(fp)
 1010d48:	180690fa 	slli	r3,r3,3
 1010d4c:	10c5883a 	add	r2,r2,r3
 1010d50:	10800104 	addi	r2,r2,4
 1010d54:	e0ffff17 	ldw	r3,-4(fp)
 1010d58:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1010d5c:	e0bffe17 	ldw	r2,-8(fp)
 1010d60:	10000526 	beq	r2,zero,1010d78 <alt_iic_isr_register+0xb4>
 1010d64:	e0bff817 	ldw	r2,-32(fp)
 1010d68:	100b883a 	mov	r5,r2
 1010d6c:	e13ffc17 	ldw	r4,-16(fp)
 1010d70:	1010b640 	call	1010b64 <alt_ic_irq_enable>
 1010d74:	00000406 	br	1010d88 <alt_iic_isr_register+0xc4>
 1010d78:	e0bff817 	ldw	r2,-32(fp)
 1010d7c:	100b883a 	mov	r5,r2
 1010d80:	e13ffc17 	ldw	r4,-16(fp)
 1010d84:	1010bec0 	call	1010bec <alt_ic_irq_disable>
 1010d88:	e0bff715 	stw	r2,-36(fp)
 1010d8c:	e0bffa17 	ldw	r2,-24(fp)
 1010d90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010d94:	e0bff917 	ldw	r2,-28(fp)
 1010d98:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1010d9c:	e0bff717 	ldw	r2,-36(fp)
}
 1010da0:	e037883a 	mov	sp,fp
 1010da4:	dfc00117 	ldw	ra,4(sp)
 1010da8:	df000017 	ldw	fp,0(sp)
 1010dac:	dec00204 	addi	sp,sp,8
 1010db0:	f800283a 	ret

01010db4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1010db4:	defff804 	addi	sp,sp,-32
 1010db8:	dfc00715 	stw	ra,28(sp)
 1010dbc:	df000615 	stw	fp,24(sp)
 1010dc0:	dc000515 	stw	r16,20(sp)
 1010dc4:	df000604 	addi	fp,sp,24
 1010dc8:	e13ffb15 	stw	r4,-20(fp)
 1010dcc:	e17ffc15 	stw	r5,-16(fp)
 1010dd0:	e1bffd15 	stw	r6,-12(fp)
 1010dd4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 1010dd8:	e1bffe17 	ldw	r6,-8(fp)
 1010ddc:	e17ffd17 	ldw	r5,-12(fp)
 1010de0:	e13ffc17 	ldw	r4,-16(fp)
 1010de4:	101103c0 	call	101103c <open>
 1010de8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 1010dec:	e0bffa17 	ldw	r2,-24(fp)
 1010df0:	10002216 	blt	r2,zero,1010e7c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 1010df4:	04004074 	movhi	r16,257
 1010df8:	840b4c04 	addi	r16,r16,11568
 1010dfc:	e0bffa17 	ldw	r2,-24(fp)
 1010e00:	01400304 	movi	r5,12
 1010e04:	1009883a 	mov	r4,r2
 1010e08:	100c9000 	call	100c900 <__mulsi3>
 1010e0c:	8085883a 	add	r2,r16,r2
 1010e10:	10c00017 	ldw	r3,0(r2)
 1010e14:	e0bffb17 	ldw	r2,-20(fp)
 1010e18:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1010e1c:	04004074 	movhi	r16,257
 1010e20:	840b4c04 	addi	r16,r16,11568
 1010e24:	e0bffa17 	ldw	r2,-24(fp)
 1010e28:	01400304 	movi	r5,12
 1010e2c:	1009883a 	mov	r4,r2
 1010e30:	100c9000 	call	100c900 <__mulsi3>
 1010e34:	8085883a 	add	r2,r16,r2
 1010e38:	10800104 	addi	r2,r2,4
 1010e3c:	10c00017 	ldw	r3,0(r2)
 1010e40:	e0bffb17 	ldw	r2,-20(fp)
 1010e44:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1010e48:	04004074 	movhi	r16,257
 1010e4c:	840b4c04 	addi	r16,r16,11568
 1010e50:	e0bffa17 	ldw	r2,-24(fp)
 1010e54:	01400304 	movi	r5,12
 1010e58:	1009883a 	mov	r4,r2
 1010e5c:	100c9000 	call	100c900 <__mulsi3>
 1010e60:	8085883a 	add	r2,r16,r2
 1010e64:	10800204 	addi	r2,r2,8
 1010e68:	10c00017 	ldw	r3,0(r2)
 1010e6c:	e0bffb17 	ldw	r2,-20(fp)
 1010e70:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1010e74:	e13ffa17 	ldw	r4,-24(fp)
 1010e78:	100f8f00 	call	100f8f0 <alt_release_fd>
  }
} 
 1010e7c:	0001883a 	nop
 1010e80:	e6ffff04 	addi	sp,fp,-4
 1010e84:	dfc00217 	ldw	ra,8(sp)
 1010e88:	df000117 	ldw	fp,4(sp)
 1010e8c:	dc000017 	ldw	r16,0(sp)
 1010e90:	dec00304 	addi	sp,sp,12
 1010e94:	f800283a 	ret

01010e98 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1010e98:	defffb04 	addi	sp,sp,-20
 1010e9c:	dfc00415 	stw	ra,16(sp)
 1010ea0:	df000315 	stw	fp,12(sp)
 1010ea4:	df000304 	addi	fp,sp,12
 1010ea8:	e13ffd15 	stw	r4,-12(fp)
 1010eac:	e17ffe15 	stw	r5,-8(fp)
 1010eb0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1010eb4:	01c07fc4 	movi	r7,511
 1010eb8:	01800044 	movi	r6,1
 1010ebc:	e17ffd17 	ldw	r5,-12(fp)
 1010ec0:	01004074 	movhi	r4,257
 1010ec4:	210b4f04 	addi	r4,r4,11580
 1010ec8:	1010db40 	call	1010db4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1010ecc:	01c07fc4 	movi	r7,511
 1010ed0:	000d883a 	mov	r6,zero
 1010ed4:	e17ffe17 	ldw	r5,-8(fp)
 1010ed8:	01004074 	movhi	r4,257
 1010edc:	210b4c04 	addi	r4,r4,11568
 1010ee0:	1010db40 	call	1010db4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1010ee4:	01c07fc4 	movi	r7,511
 1010ee8:	01800044 	movi	r6,1
 1010eec:	e17fff17 	ldw	r5,-4(fp)
 1010ef0:	01004074 	movhi	r4,257
 1010ef4:	210b5204 	addi	r4,r4,11592
 1010ef8:	1010db40 	call	1010db4 <alt_open_fd>
}  
 1010efc:	0001883a 	nop
 1010f00:	e037883a 	mov	sp,fp
 1010f04:	dfc00117 	ldw	ra,4(sp)
 1010f08:	df000017 	ldw	fp,0(sp)
 1010f0c:	dec00204 	addi	sp,sp,8
 1010f10:	f800283a 	ret

01010f14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010f14:	defffe04 	addi	sp,sp,-8
 1010f18:	dfc00115 	stw	ra,4(sp)
 1010f1c:	df000015 	stw	fp,0(sp)
 1010f20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1010f24:	d0a00b17 	ldw	r2,-32724(gp)
 1010f28:	10000326 	beq	r2,zero,1010f38 <alt_get_errno+0x24>
 1010f2c:	d0a00b17 	ldw	r2,-32724(gp)
 1010f30:	103ee83a 	callr	r2
 1010f34:	00000106 	br	1010f3c <alt_get_errno+0x28>
 1010f38:	d0a6d204 	addi	r2,gp,-25784
}
 1010f3c:	e037883a 	mov	sp,fp
 1010f40:	dfc00117 	ldw	ra,4(sp)
 1010f44:	df000017 	ldw	fp,0(sp)
 1010f48:	dec00204 	addi	sp,sp,8
 1010f4c:	f800283a 	ret

01010f50 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1010f50:	defffb04 	addi	sp,sp,-20
 1010f54:	dfc00415 	stw	ra,16(sp)
 1010f58:	df000315 	stw	fp,12(sp)
 1010f5c:	dc000215 	stw	r16,8(sp)
 1010f60:	df000304 	addi	fp,sp,12
 1010f64:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1010f68:	e0bffe17 	ldw	r2,-8(fp)
 1010f6c:	10800217 	ldw	r2,8(r2)
 1010f70:	10d00034 	orhi	r3,r2,16384
 1010f74:	e0bffe17 	ldw	r2,-8(fp)
 1010f78:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1010f7c:	e03ffd15 	stw	zero,-12(fp)
 1010f80:	00002306 	br	1011010 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1010f84:	04004074 	movhi	r16,257
 1010f88:	840b4c04 	addi	r16,r16,11568
 1010f8c:	e0bffd17 	ldw	r2,-12(fp)
 1010f90:	01400304 	movi	r5,12
 1010f94:	1009883a 	mov	r4,r2
 1010f98:	100c9000 	call	100c900 <__mulsi3>
 1010f9c:	8085883a 	add	r2,r16,r2
 1010fa0:	10c00017 	ldw	r3,0(r2)
 1010fa4:	e0bffe17 	ldw	r2,-8(fp)
 1010fa8:	10800017 	ldw	r2,0(r2)
 1010fac:	1880151e 	bne	r3,r2,1011004 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1010fb0:	04004074 	movhi	r16,257
 1010fb4:	840b4c04 	addi	r16,r16,11568
 1010fb8:	e0bffd17 	ldw	r2,-12(fp)
 1010fbc:	01400304 	movi	r5,12
 1010fc0:	1009883a 	mov	r4,r2
 1010fc4:	100c9000 	call	100c900 <__mulsi3>
 1010fc8:	8085883a 	add	r2,r16,r2
 1010fcc:	10800204 	addi	r2,r2,8
 1010fd0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1010fd4:	10000b0e 	bge	r2,zero,1011004 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1010fd8:	01400304 	movi	r5,12
 1010fdc:	e13ffd17 	ldw	r4,-12(fp)
 1010fe0:	100c9000 	call	100c900 <__mulsi3>
 1010fe4:	1007883a 	mov	r3,r2
 1010fe8:	00804074 	movhi	r2,257
 1010fec:	108b4c04 	addi	r2,r2,11568
 1010ff0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1010ff4:	e0bffe17 	ldw	r2,-8(fp)
 1010ff8:	18800226 	beq	r3,r2,1011004 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1010ffc:	00bffcc4 	movi	r2,-13
 1011000:	00000806 	br	1011024 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1011004:	e0bffd17 	ldw	r2,-12(fp)
 1011008:	10800044 	addi	r2,r2,1
 101100c:	e0bffd15 	stw	r2,-12(fp)
 1011010:	d0a00a17 	ldw	r2,-32728(gp)
 1011014:	1007883a 	mov	r3,r2
 1011018:	e0bffd17 	ldw	r2,-12(fp)
 101101c:	18bfd92e 	bgeu	r3,r2,1010f84 <__alt_data_end+0xff810f84>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1011020:	0005883a 	mov	r2,zero
}
 1011024:	e6ffff04 	addi	sp,fp,-4
 1011028:	dfc00217 	ldw	ra,8(sp)
 101102c:	df000117 	ldw	fp,4(sp)
 1011030:	dc000017 	ldw	r16,0(sp)
 1011034:	dec00304 	addi	sp,sp,12
 1011038:	f800283a 	ret

0101103c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 101103c:	defff604 	addi	sp,sp,-40
 1011040:	dfc00915 	stw	ra,36(sp)
 1011044:	df000815 	stw	fp,32(sp)
 1011048:	df000804 	addi	fp,sp,32
 101104c:	e13ffd15 	stw	r4,-12(fp)
 1011050:	e17ffe15 	stw	r5,-8(fp)
 1011054:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1011058:	00bfffc4 	movi	r2,-1
 101105c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1011060:	00bffb44 	movi	r2,-19
 1011064:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1011068:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 101106c:	d1600804 	addi	r5,gp,-32736
 1011070:	e13ffd17 	ldw	r4,-12(fp)
 1011074:	10113600 	call	1011360 <alt_find_dev>
 1011078:	e0bff815 	stw	r2,-32(fp)
 101107c:	e0bff817 	ldw	r2,-32(fp)
 1011080:	1000051e 	bne	r2,zero,1011098 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1011084:	e13ffd17 	ldw	r4,-12(fp)
 1011088:	10113f00 	call	10113f0 <alt_find_file>
 101108c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1011090:	00800044 	movi	r2,1
 1011094:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1011098:	e0bff817 	ldw	r2,-32(fp)
 101109c:	10002b26 	beq	r2,zero,101114c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 10110a0:	e13ff817 	ldw	r4,-32(fp)
 10110a4:	10114f80 	call	10114f8 <alt_get_fd>
 10110a8:	e0bff915 	stw	r2,-28(fp)
 10110ac:	e0bff917 	ldw	r2,-28(fp)
 10110b0:	1000030e 	bge	r2,zero,10110c0 <open+0x84>
    {
      status = index;
 10110b4:	e0bff917 	ldw	r2,-28(fp)
 10110b8:	e0bffa15 	stw	r2,-24(fp)
 10110bc:	00002506 	br	1011154 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 10110c0:	01400304 	movi	r5,12
 10110c4:	e13ff917 	ldw	r4,-28(fp)
 10110c8:	100c9000 	call	100c900 <__mulsi3>
 10110cc:	1007883a 	mov	r3,r2
 10110d0:	00804074 	movhi	r2,257
 10110d4:	108b4c04 	addi	r2,r2,11568
 10110d8:	1885883a 	add	r2,r3,r2
 10110dc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 10110e0:	e0fffe17 	ldw	r3,-8(fp)
 10110e4:	00900034 	movhi	r2,16384
 10110e8:	10bfffc4 	addi	r2,r2,-1
 10110ec:	1886703a 	and	r3,r3,r2
 10110f0:	e0bffc17 	ldw	r2,-16(fp)
 10110f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 10110f8:	e0bffb17 	ldw	r2,-20(fp)
 10110fc:	1000051e 	bne	r2,zero,1011114 <open+0xd8>
 1011100:	e13ffc17 	ldw	r4,-16(fp)
 1011104:	1010f500 	call	1010f50 <alt_file_locked>
 1011108:	e0bffa15 	stw	r2,-24(fp)
 101110c:	e0bffa17 	ldw	r2,-24(fp)
 1011110:	10001016 	blt	r2,zero,1011154 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1011114:	e0bff817 	ldw	r2,-32(fp)
 1011118:	10800317 	ldw	r2,12(r2)
 101111c:	10000826 	beq	r2,zero,1011140 <open+0x104>
 1011120:	e0bff817 	ldw	r2,-32(fp)
 1011124:	10800317 	ldw	r2,12(r2)
 1011128:	e1ffff17 	ldw	r7,-4(fp)
 101112c:	e1bffe17 	ldw	r6,-8(fp)
 1011130:	e17ffd17 	ldw	r5,-12(fp)
 1011134:	e13ffc17 	ldw	r4,-16(fp)
 1011138:	103ee83a 	callr	r2
 101113c:	00000106 	br	1011144 <open+0x108>
 1011140:	0005883a 	mov	r2,zero
 1011144:	e0bffa15 	stw	r2,-24(fp)
 1011148:	00000206 	br	1011154 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 101114c:	00bffb44 	movi	r2,-19
 1011150:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1011154:	e0bffa17 	ldw	r2,-24(fp)
 1011158:	1000090e 	bge	r2,zero,1011180 <open+0x144>
  {
    alt_release_fd (index);  
 101115c:	e13ff917 	ldw	r4,-28(fp)
 1011160:	100f8f00 	call	100f8f0 <alt_release_fd>
    ALT_ERRNO = -status;
 1011164:	1010f140 	call	1010f14 <alt_get_errno>
 1011168:	1007883a 	mov	r3,r2
 101116c:	e0bffa17 	ldw	r2,-24(fp)
 1011170:	0085c83a 	sub	r2,zero,r2
 1011174:	18800015 	stw	r2,0(r3)
    return -1;
 1011178:	00bfffc4 	movi	r2,-1
 101117c:	00000106 	br	1011184 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 1011180:	e0bff917 	ldw	r2,-28(fp)
}
 1011184:	e037883a 	mov	sp,fp
 1011188:	dfc00117 	ldw	ra,4(sp)
 101118c:	df000017 	ldw	fp,0(sp)
 1011190:	dec00204 	addi	sp,sp,8
 1011194:	f800283a 	ret

01011198 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1011198:	defffa04 	addi	sp,sp,-24
 101119c:	df000515 	stw	fp,20(sp)
 10111a0:	df000504 	addi	fp,sp,20
 10111a4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10111a8:	0005303a 	rdctl	r2,status
 10111ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10111b0:	e0fffc17 	ldw	r3,-16(fp)
 10111b4:	00bfff84 	movi	r2,-2
 10111b8:	1884703a 	and	r2,r3,r2
 10111bc:	1001703a 	wrctl	status,r2
  
  return context;
 10111c0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10111c4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 10111c8:	e0bfff17 	ldw	r2,-4(fp)
 10111cc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10111d0:	e0bffd17 	ldw	r2,-12(fp)
 10111d4:	10800017 	ldw	r2,0(r2)
 10111d8:	e0fffd17 	ldw	r3,-12(fp)
 10111dc:	18c00117 	ldw	r3,4(r3)
 10111e0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 10111e4:	e0bffd17 	ldw	r2,-12(fp)
 10111e8:	10800117 	ldw	r2,4(r2)
 10111ec:	e0fffd17 	ldw	r3,-12(fp)
 10111f0:	18c00017 	ldw	r3,0(r3)
 10111f4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10111f8:	e0bffd17 	ldw	r2,-12(fp)
 10111fc:	e0fffd17 	ldw	r3,-12(fp)
 1011200:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1011204:	e0bffd17 	ldw	r2,-12(fp)
 1011208:	e0fffd17 	ldw	r3,-12(fp)
 101120c:	10c00015 	stw	r3,0(r2)
 1011210:	e0bffb17 	ldw	r2,-20(fp)
 1011214:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1011218:	e0bffe17 	ldw	r2,-8(fp)
 101121c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1011220:	0001883a 	nop
 1011224:	e037883a 	mov	sp,fp
 1011228:	df000017 	ldw	fp,0(sp)
 101122c:	dec00104 	addi	sp,sp,4
 1011230:	f800283a 	ret

01011234 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1011234:	defffb04 	addi	sp,sp,-20
 1011238:	dfc00415 	stw	ra,16(sp)
 101123c:	df000315 	stw	fp,12(sp)
 1011240:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1011244:	d0a00e17 	ldw	r2,-32712(gp)
 1011248:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 101124c:	d0a6d817 	ldw	r2,-25760(gp)
 1011250:	10800044 	addi	r2,r2,1
 1011254:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011258:	00002e06 	br	1011314 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 101125c:	e0bffd17 	ldw	r2,-12(fp)
 1011260:	10800017 	ldw	r2,0(r2)
 1011264:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1011268:	e0bffd17 	ldw	r2,-12(fp)
 101126c:	10800403 	ldbu	r2,16(r2)
 1011270:	10803fcc 	andi	r2,r2,255
 1011274:	10000426 	beq	r2,zero,1011288 <alt_tick+0x54>
 1011278:	d0a6d817 	ldw	r2,-25760(gp)
 101127c:	1000021e 	bne	r2,zero,1011288 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 1011280:	e0bffd17 	ldw	r2,-12(fp)
 1011284:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1011288:	e0bffd17 	ldw	r2,-12(fp)
 101128c:	10800217 	ldw	r2,8(r2)
 1011290:	d0e6d817 	ldw	r3,-25760(gp)
 1011294:	18801d36 	bltu	r3,r2,101130c <alt_tick+0xd8>
 1011298:	e0bffd17 	ldw	r2,-12(fp)
 101129c:	10800403 	ldbu	r2,16(r2)
 10112a0:	10803fcc 	andi	r2,r2,255
 10112a4:	1000191e 	bne	r2,zero,101130c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 10112a8:	e0bffd17 	ldw	r2,-12(fp)
 10112ac:	10800317 	ldw	r2,12(r2)
 10112b0:	e0fffd17 	ldw	r3,-12(fp)
 10112b4:	18c00517 	ldw	r3,20(r3)
 10112b8:	1809883a 	mov	r4,r3
 10112bc:	103ee83a 	callr	r2
 10112c0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10112c4:	e0bfff17 	ldw	r2,-4(fp)
 10112c8:	1000031e 	bne	r2,zero,10112d8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 10112cc:	e13ffd17 	ldw	r4,-12(fp)
 10112d0:	10111980 	call	1011198 <alt_alarm_stop>
 10112d4:	00000d06 	br	101130c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 10112d8:	e0bffd17 	ldw	r2,-12(fp)
 10112dc:	10c00217 	ldw	r3,8(r2)
 10112e0:	e0bfff17 	ldw	r2,-4(fp)
 10112e4:	1887883a 	add	r3,r3,r2
 10112e8:	e0bffd17 	ldw	r2,-12(fp)
 10112ec:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10112f0:	e0bffd17 	ldw	r2,-12(fp)
 10112f4:	10c00217 	ldw	r3,8(r2)
 10112f8:	d0a6d817 	ldw	r2,-25760(gp)
 10112fc:	1880032e 	bgeu	r3,r2,101130c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1011300:	e0bffd17 	ldw	r2,-12(fp)
 1011304:	00c00044 	movi	r3,1
 1011308:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 101130c:	e0bffe17 	ldw	r2,-8(fp)
 1011310:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011314:	e0fffd17 	ldw	r3,-12(fp)
 1011318:	d0a00e04 	addi	r2,gp,-32712
 101131c:	18bfcf1e 	bne	r3,r2,101125c <__alt_data_end+0xff81125c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1011320:	0001883a 	nop
}
 1011324:	0001883a 	nop
 1011328:	e037883a 	mov	sp,fp
 101132c:	dfc00117 	ldw	ra,4(sp)
 1011330:	df000017 	ldw	fp,0(sp)
 1011334:	dec00204 	addi	sp,sp,8
 1011338:	f800283a 	ret

0101133c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 101133c:	deffff04 	addi	sp,sp,-4
 1011340:	df000015 	stw	fp,0(sp)
 1011344:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1011348:	000170fa 	wrctl	ienable,zero
}
 101134c:	0001883a 	nop
 1011350:	e037883a 	mov	sp,fp
 1011354:	df000017 	ldw	fp,0(sp)
 1011358:	dec00104 	addi	sp,sp,4
 101135c:	f800283a 	ret

01011360 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1011360:	defffa04 	addi	sp,sp,-24
 1011364:	dfc00515 	stw	ra,20(sp)
 1011368:	df000415 	stw	fp,16(sp)
 101136c:	df000404 	addi	fp,sp,16
 1011370:	e13ffe15 	stw	r4,-8(fp)
 1011374:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1011378:	e0bfff17 	ldw	r2,-4(fp)
 101137c:	10800017 	ldw	r2,0(r2)
 1011380:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1011384:	e13ffe17 	ldw	r4,-8(fp)
 1011388:	10023cc0 	call	10023cc <strlen>
 101138c:	10800044 	addi	r2,r2,1
 1011390:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1011394:	00000d06 	br	10113cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1011398:	e0bffc17 	ldw	r2,-16(fp)
 101139c:	10800217 	ldw	r2,8(r2)
 10113a0:	e0fffd17 	ldw	r3,-12(fp)
 10113a4:	180d883a 	mov	r6,r3
 10113a8:	e17ffe17 	ldw	r5,-8(fp)
 10113ac:	1009883a 	mov	r4,r2
 10113b0:	10116a40 	call	10116a4 <memcmp>
 10113b4:	1000021e 	bne	r2,zero,10113c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10113b8:	e0bffc17 	ldw	r2,-16(fp)
 10113bc:	00000706 	br	10113dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10113c0:	e0bffc17 	ldw	r2,-16(fp)
 10113c4:	10800017 	ldw	r2,0(r2)
 10113c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10113cc:	e0fffc17 	ldw	r3,-16(fp)
 10113d0:	e0bfff17 	ldw	r2,-4(fp)
 10113d4:	18bff01e 	bne	r3,r2,1011398 <__alt_data_end+0xff811398>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10113d8:	0005883a 	mov	r2,zero
}
 10113dc:	e037883a 	mov	sp,fp
 10113e0:	dfc00117 	ldw	ra,4(sp)
 10113e4:	df000017 	ldw	fp,0(sp)
 10113e8:	dec00204 	addi	sp,sp,8
 10113ec:	f800283a 	ret

010113f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10113f0:	defffb04 	addi	sp,sp,-20
 10113f4:	dfc00415 	stw	ra,16(sp)
 10113f8:	df000315 	stw	fp,12(sp)
 10113fc:	df000304 	addi	fp,sp,12
 1011400:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1011404:	d0a00617 	ldw	r2,-32744(gp)
 1011408:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 101140c:	00003106 	br	10114d4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1011410:	e0bffd17 	ldw	r2,-12(fp)
 1011414:	10800217 	ldw	r2,8(r2)
 1011418:	1009883a 	mov	r4,r2
 101141c:	10023cc0 	call	10023cc <strlen>
 1011420:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1011424:	e0bffd17 	ldw	r2,-12(fp)
 1011428:	10c00217 	ldw	r3,8(r2)
 101142c:	e0bffe17 	ldw	r2,-8(fp)
 1011430:	10bfffc4 	addi	r2,r2,-1
 1011434:	1885883a 	add	r2,r3,r2
 1011438:	10800003 	ldbu	r2,0(r2)
 101143c:	10803fcc 	andi	r2,r2,255
 1011440:	1080201c 	xori	r2,r2,128
 1011444:	10bfe004 	addi	r2,r2,-128
 1011448:	10800bd8 	cmpnei	r2,r2,47
 101144c:	1000031e 	bne	r2,zero,101145c <alt_find_file+0x6c>
    {
      len -= 1;
 1011450:	e0bffe17 	ldw	r2,-8(fp)
 1011454:	10bfffc4 	addi	r2,r2,-1
 1011458:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 101145c:	e0bffe17 	ldw	r2,-8(fp)
 1011460:	e0ffff17 	ldw	r3,-4(fp)
 1011464:	1885883a 	add	r2,r3,r2
 1011468:	10800003 	ldbu	r2,0(r2)
 101146c:	10803fcc 	andi	r2,r2,255
 1011470:	1080201c 	xori	r2,r2,128
 1011474:	10bfe004 	addi	r2,r2,-128
 1011478:	10800be0 	cmpeqi	r2,r2,47
 101147c:	1000081e 	bne	r2,zero,10114a0 <alt_find_file+0xb0>
 1011480:	e0bffe17 	ldw	r2,-8(fp)
 1011484:	e0ffff17 	ldw	r3,-4(fp)
 1011488:	1885883a 	add	r2,r3,r2
 101148c:	10800003 	ldbu	r2,0(r2)
 1011490:	10803fcc 	andi	r2,r2,255
 1011494:	1080201c 	xori	r2,r2,128
 1011498:	10bfe004 	addi	r2,r2,-128
 101149c:	10000a1e 	bne	r2,zero,10114c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 10114a0:	e0bffd17 	ldw	r2,-12(fp)
 10114a4:	10800217 	ldw	r2,8(r2)
 10114a8:	e0fffe17 	ldw	r3,-8(fp)
 10114ac:	180d883a 	mov	r6,r3
 10114b0:	e17fff17 	ldw	r5,-4(fp)
 10114b4:	1009883a 	mov	r4,r2
 10114b8:	10116a40 	call	10116a4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 10114bc:	1000021e 	bne	r2,zero,10114c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10114c0:	e0bffd17 	ldw	r2,-12(fp)
 10114c4:	00000706 	br	10114e4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 10114c8:	e0bffd17 	ldw	r2,-12(fp)
 10114cc:	10800017 	ldw	r2,0(r2)
 10114d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10114d4:	e0fffd17 	ldw	r3,-12(fp)
 10114d8:	d0a00604 	addi	r2,gp,-32744
 10114dc:	18bfcc1e 	bne	r3,r2,1011410 <__alt_data_end+0xff811410>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10114e0:	0005883a 	mov	r2,zero
}
 10114e4:	e037883a 	mov	sp,fp
 10114e8:	dfc00117 	ldw	ra,4(sp)
 10114ec:	df000017 	ldw	fp,0(sp)
 10114f0:	dec00204 	addi	sp,sp,8
 10114f4:	f800283a 	ret

010114f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 10114f8:	defffa04 	addi	sp,sp,-24
 10114fc:	dfc00515 	stw	ra,20(sp)
 1011500:	df000415 	stw	fp,16(sp)
 1011504:	dc000315 	stw	r16,12(sp)
 1011508:	df000404 	addi	fp,sp,16
 101150c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 1011510:	00bffa04 	movi	r2,-24
 1011514:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011518:	e03ffc15 	stw	zero,-16(fp)
 101151c:	00001d06 	br	1011594 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 1011520:	04004074 	movhi	r16,257
 1011524:	840b4c04 	addi	r16,r16,11568
 1011528:	e0bffc17 	ldw	r2,-16(fp)
 101152c:	01400304 	movi	r5,12
 1011530:	1009883a 	mov	r4,r2
 1011534:	100c9000 	call	100c900 <__mulsi3>
 1011538:	8085883a 	add	r2,r16,r2
 101153c:	10800017 	ldw	r2,0(r2)
 1011540:	1000111e 	bne	r2,zero,1011588 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 1011544:	04004074 	movhi	r16,257
 1011548:	840b4c04 	addi	r16,r16,11568
 101154c:	e0bffc17 	ldw	r2,-16(fp)
 1011550:	01400304 	movi	r5,12
 1011554:	1009883a 	mov	r4,r2
 1011558:	100c9000 	call	100c900 <__mulsi3>
 101155c:	8085883a 	add	r2,r16,r2
 1011560:	e0fffe17 	ldw	r3,-8(fp)
 1011564:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1011568:	d0e00a17 	ldw	r3,-32728(gp)
 101156c:	e0bffc17 	ldw	r2,-16(fp)
 1011570:	1880020e 	bge	r3,r2,101157c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 1011574:	e0bffc17 	ldw	r2,-16(fp)
 1011578:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 101157c:	e0bffc17 	ldw	r2,-16(fp)
 1011580:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1011584:	00000606 	br	10115a0 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011588:	e0bffc17 	ldw	r2,-16(fp)
 101158c:	10800044 	addi	r2,r2,1
 1011590:	e0bffc15 	stw	r2,-16(fp)
 1011594:	e0bffc17 	ldw	r2,-16(fp)
 1011598:	10800810 	cmplti	r2,r2,32
 101159c:	103fe01e 	bne	r2,zero,1011520 <__alt_data_end+0xff811520>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10115a0:	e0bffd17 	ldw	r2,-12(fp)
}
 10115a4:	e6ffff04 	addi	sp,fp,-4
 10115a8:	dfc00217 	ldw	ra,8(sp)
 10115ac:	df000117 	ldw	fp,4(sp)
 10115b0:	dc000017 	ldw	r16,0(sp)
 10115b4:	dec00304 	addi	sp,sp,12
 10115b8:	f800283a 	ret

010115bc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 10115bc:	defffe04 	addi	sp,sp,-8
 10115c0:	df000115 	stw	fp,4(sp)
 10115c4:	df000104 	addi	fp,sp,4
 10115c8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 10115cc:	e0bfff17 	ldw	r2,-4(fp)
 10115d0:	10bffe84 	addi	r2,r2,-6
 10115d4:	10c00428 	cmpgeui	r3,r2,16
 10115d8:	18001a1e 	bne	r3,zero,1011644 <alt_exception_cause_generated_bad_addr+0x88>
 10115dc:	100690ba 	slli	r3,r2,2
 10115e0:	00804074 	movhi	r2,257
 10115e4:	10857d04 	addi	r2,r2,5620
 10115e8:	1885883a 	add	r2,r3,r2
 10115ec:	10800017 	ldw	r2,0(r2)
 10115f0:	1000683a 	jmp	r2
 10115f4:	01011634 	movhi	r4,1112
 10115f8:	01011634 	movhi	r4,1112
 10115fc:	01011644 	movi	r4,1113
 1011600:	01011644 	movi	r4,1113
 1011604:	01011644 	movi	r4,1113
 1011608:	01011634 	movhi	r4,1112
 101160c:	0101163c 	xorhi	r4,zero,1112
 1011610:	01011644 	movi	r4,1113
 1011614:	01011634 	movhi	r4,1112
 1011618:	01011634 	movhi	r4,1112
 101161c:	01011644 	movi	r4,1113
 1011620:	01011634 	movhi	r4,1112
 1011624:	0101163c 	xorhi	r4,zero,1112
 1011628:	01011644 	movi	r4,1113
 101162c:	01011644 	movi	r4,1113
 1011630:	01011634 	movhi	r4,1112
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1011634:	00800044 	movi	r2,1
 1011638:	00000306 	br	1011648 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 101163c:	0005883a 	mov	r2,zero
 1011640:	00000106 	br	1011648 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1011644:	0005883a 	mov	r2,zero
  }
}
 1011648:	e037883a 	mov	sp,fp
 101164c:	df000017 	ldw	fp,0(sp)
 1011650:	dec00104 	addi	sp,sp,4
 1011654:	f800283a 	ret

01011658 <atexit>:
 1011658:	200b883a 	mov	r5,r4
 101165c:	000f883a 	mov	r7,zero
 1011660:	000d883a 	mov	r6,zero
 1011664:	0009883a 	mov	r4,zero
 1011668:	10117201 	jmpi	1011720 <__register_exitproc>

0101166c <exit>:
 101166c:	defffe04 	addi	sp,sp,-8
 1011670:	000b883a 	mov	r5,zero
 1011674:	dc000015 	stw	r16,0(sp)
 1011678:	dfc00115 	stw	ra,4(sp)
 101167c:	2021883a 	mov	r16,r4
 1011680:	10118380 	call	1011838 <__call_exitprocs>
 1011684:	00804074 	movhi	r2,257
 1011688:	108fc404 	addi	r2,r2,16144
 101168c:	11000017 	ldw	r4,0(r2)
 1011690:	20800f17 	ldw	r2,60(r4)
 1011694:	10000126 	beq	r2,zero,101169c <exit+0x30>
 1011698:	103ee83a 	callr	r2
 101169c:	8009883a 	mov	r4,r16
 10116a0:	10119b80 	call	10119b8 <_exit>

010116a4 <memcmp>:
 10116a4:	01c000c4 	movi	r7,3
 10116a8:	3980192e 	bgeu	r7,r6,1011710 <memcmp+0x6c>
 10116ac:	2144b03a 	or	r2,r4,r5
 10116b0:	11c4703a 	and	r2,r2,r7
 10116b4:	10000f26 	beq	r2,zero,10116f4 <memcmp+0x50>
 10116b8:	20800003 	ldbu	r2,0(r4)
 10116bc:	28c00003 	ldbu	r3,0(r5)
 10116c0:	10c0151e 	bne	r2,r3,1011718 <memcmp+0x74>
 10116c4:	31bfff84 	addi	r6,r6,-2
 10116c8:	01ffffc4 	movi	r7,-1
 10116cc:	00000406 	br	10116e0 <memcmp+0x3c>
 10116d0:	20800003 	ldbu	r2,0(r4)
 10116d4:	28c00003 	ldbu	r3,0(r5)
 10116d8:	31bfffc4 	addi	r6,r6,-1
 10116dc:	10c00e1e 	bne	r2,r3,1011718 <memcmp+0x74>
 10116e0:	21000044 	addi	r4,r4,1
 10116e4:	29400044 	addi	r5,r5,1
 10116e8:	31fff91e 	bne	r6,r7,10116d0 <__alt_data_end+0xff8116d0>
 10116ec:	0005883a 	mov	r2,zero
 10116f0:	f800283a 	ret
 10116f4:	20c00017 	ldw	r3,0(r4)
 10116f8:	28800017 	ldw	r2,0(r5)
 10116fc:	18bfee1e 	bne	r3,r2,10116b8 <__alt_data_end+0xff8116b8>
 1011700:	31bfff04 	addi	r6,r6,-4
 1011704:	21000104 	addi	r4,r4,4
 1011708:	29400104 	addi	r5,r5,4
 101170c:	39bff936 	bltu	r7,r6,10116f4 <__alt_data_end+0xff8116f4>
 1011710:	303fe91e 	bne	r6,zero,10116b8 <__alt_data_end+0xff8116b8>
 1011714:	003ff506 	br	10116ec <__alt_data_end+0xff8116ec>
 1011718:	10c5c83a 	sub	r2,r2,r3
 101171c:	f800283a 	ret

01011720 <__register_exitproc>:
 1011720:	defffa04 	addi	sp,sp,-24
 1011724:	dc000315 	stw	r16,12(sp)
 1011728:	04004074 	movhi	r16,257
 101172c:	840fc404 	addi	r16,r16,16144
 1011730:	80c00017 	ldw	r3,0(r16)
 1011734:	dc400415 	stw	r17,16(sp)
 1011738:	dfc00515 	stw	ra,20(sp)
 101173c:	18805217 	ldw	r2,328(r3)
 1011740:	2023883a 	mov	r17,r4
 1011744:	10003726 	beq	r2,zero,1011824 <__register_exitproc+0x104>
 1011748:	10c00117 	ldw	r3,4(r2)
 101174c:	010007c4 	movi	r4,31
 1011750:	20c00e16 	blt	r4,r3,101178c <__register_exitproc+0x6c>
 1011754:	1a000044 	addi	r8,r3,1
 1011758:	8800221e 	bne	r17,zero,10117e4 <__register_exitproc+0xc4>
 101175c:	18c00084 	addi	r3,r3,2
 1011760:	18c7883a 	add	r3,r3,r3
 1011764:	18c7883a 	add	r3,r3,r3
 1011768:	12000115 	stw	r8,4(r2)
 101176c:	10c7883a 	add	r3,r2,r3
 1011770:	19400015 	stw	r5,0(r3)
 1011774:	0005883a 	mov	r2,zero
 1011778:	dfc00517 	ldw	ra,20(sp)
 101177c:	dc400417 	ldw	r17,16(sp)
 1011780:	dc000317 	ldw	r16,12(sp)
 1011784:	dec00604 	addi	sp,sp,24
 1011788:	f800283a 	ret
 101178c:	00800034 	movhi	r2,0
 1011790:	10800004 	addi	r2,r2,0
 1011794:	10002626 	beq	r2,zero,1011830 <__register_exitproc+0x110>
 1011798:	01006404 	movi	r4,400
 101179c:	d9400015 	stw	r5,0(sp)
 10117a0:	d9800115 	stw	r6,4(sp)
 10117a4:	d9c00215 	stw	r7,8(sp)
 10117a8:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10117ac:	d9400017 	ldw	r5,0(sp)
 10117b0:	d9800117 	ldw	r6,4(sp)
 10117b4:	d9c00217 	ldw	r7,8(sp)
 10117b8:	10001d26 	beq	r2,zero,1011830 <__register_exitproc+0x110>
 10117bc:	81000017 	ldw	r4,0(r16)
 10117c0:	10000115 	stw	zero,4(r2)
 10117c4:	02000044 	movi	r8,1
 10117c8:	22405217 	ldw	r9,328(r4)
 10117cc:	0007883a 	mov	r3,zero
 10117d0:	12400015 	stw	r9,0(r2)
 10117d4:	20805215 	stw	r2,328(r4)
 10117d8:	10006215 	stw	zero,392(r2)
 10117dc:	10006315 	stw	zero,396(r2)
 10117e0:	883fde26 	beq	r17,zero,101175c <__alt_data_end+0xff81175c>
 10117e4:	18c9883a 	add	r4,r3,r3
 10117e8:	2109883a 	add	r4,r4,r4
 10117ec:	1109883a 	add	r4,r2,r4
 10117f0:	21802215 	stw	r6,136(r4)
 10117f4:	01800044 	movi	r6,1
 10117f8:	12406217 	ldw	r9,392(r2)
 10117fc:	30cc983a 	sll	r6,r6,r3
 1011800:	4992b03a 	or	r9,r9,r6
 1011804:	12406215 	stw	r9,392(r2)
 1011808:	21c04215 	stw	r7,264(r4)
 101180c:	01000084 	movi	r4,2
 1011810:	893fd21e 	bne	r17,r4,101175c <__alt_data_end+0xff81175c>
 1011814:	11006317 	ldw	r4,396(r2)
 1011818:	218cb03a 	or	r6,r4,r6
 101181c:	11806315 	stw	r6,396(r2)
 1011820:	003fce06 	br	101175c <__alt_data_end+0xff81175c>
 1011824:	18805304 	addi	r2,r3,332
 1011828:	18805215 	stw	r2,328(r3)
 101182c:	003fc606 	br	1011748 <__alt_data_end+0xff811748>
 1011830:	00bfffc4 	movi	r2,-1
 1011834:	003fd006 	br	1011778 <__alt_data_end+0xff811778>

01011838 <__call_exitprocs>:
 1011838:	defff504 	addi	sp,sp,-44
 101183c:	df000915 	stw	fp,36(sp)
 1011840:	dd400615 	stw	r21,24(sp)
 1011844:	dc800315 	stw	r18,12(sp)
 1011848:	dfc00a15 	stw	ra,40(sp)
 101184c:	ddc00815 	stw	r23,32(sp)
 1011850:	dd800715 	stw	r22,28(sp)
 1011854:	dd000515 	stw	r20,20(sp)
 1011858:	dcc00415 	stw	r19,16(sp)
 101185c:	dc400215 	stw	r17,8(sp)
 1011860:	dc000115 	stw	r16,4(sp)
 1011864:	d9000015 	stw	r4,0(sp)
 1011868:	2839883a 	mov	fp,r5
 101186c:	04800044 	movi	r18,1
 1011870:	057fffc4 	movi	r21,-1
 1011874:	00804074 	movhi	r2,257
 1011878:	108fc404 	addi	r2,r2,16144
 101187c:	12000017 	ldw	r8,0(r2)
 1011880:	45005217 	ldw	r20,328(r8)
 1011884:	44c05204 	addi	r19,r8,328
 1011888:	a0001c26 	beq	r20,zero,10118fc <__call_exitprocs+0xc4>
 101188c:	a0800117 	ldw	r2,4(r20)
 1011890:	15ffffc4 	addi	r23,r2,-1
 1011894:	b8000d16 	blt	r23,zero,10118cc <__call_exitprocs+0x94>
 1011898:	14000044 	addi	r16,r2,1
 101189c:	8421883a 	add	r16,r16,r16
 10118a0:	8421883a 	add	r16,r16,r16
 10118a4:	84402004 	addi	r17,r16,128
 10118a8:	a463883a 	add	r17,r20,r17
 10118ac:	a421883a 	add	r16,r20,r16
 10118b0:	e0001e26 	beq	fp,zero,101192c <__call_exitprocs+0xf4>
 10118b4:	80804017 	ldw	r2,256(r16)
 10118b8:	e0801c26 	beq	fp,r2,101192c <__call_exitprocs+0xf4>
 10118bc:	bdffffc4 	addi	r23,r23,-1
 10118c0:	843fff04 	addi	r16,r16,-4
 10118c4:	8c7fff04 	addi	r17,r17,-4
 10118c8:	bd7ff91e 	bne	r23,r21,10118b0 <__alt_data_end+0xff8118b0>
 10118cc:	00800034 	movhi	r2,0
 10118d0:	10800004 	addi	r2,r2,0
 10118d4:	10000926 	beq	r2,zero,10118fc <__call_exitprocs+0xc4>
 10118d8:	a0800117 	ldw	r2,4(r20)
 10118dc:	1000301e 	bne	r2,zero,10119a0 <__call_exitprocs+0x168>
 10118e0:	a0800017 	ldw	r2,0(r20)
 10118e4:	10003226 	beq	r2,zero,10119b0 <__call_exitprocs+0x178>
 10118e8:	a009883a 	mov	r4,r20
 10118ec:	98800015 	stw	r2,0(r19)
 10118f0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10118f4:	9d000017 	ldw	r20,0(r19)
 10118f8:	a03fe41e 	bne	r20,zero,101188c <__alt_data_end+0xff81188c>
 10118fc:	dfc00a17 	ldw	ra,40(sp)
 1011900:	df000917 	ldw	fp,36(sp)
 1011904:	ddc00817 	ldw	r23,32(sp)
 1011908:	dd800717 	ldw	r22,28(sp)
 101190c:	dd400617 	ldw	r21,24(sp)
 1011910:	dd000517 	ldw	r20,20(sp)
 1011914:	dcc00417 	ldw	r19,16(sp)
 1011918:	dc800317 	ldw	r18,12(sp)
 101191c:	dc400217 	ldw	r17,8(sp)
 1011920:	dc000117 	ldw	r16,4(sp)
 1011924:	dec00b04 	addi	sp,sp,44
 1011928:	f800283a 	ret
 101192c:	a0800117 	ldw	r2,4(r20)
 1011930:	80c00017 	ldw	r3,0(r16)
 1011934:	10bfffc4 	addi	r2,r2,-1
 1011938:	15c01426 	beq	r2,r23,101198c <__call_exitprocs+0x154>
 101193c:	80000015 	stw	zero,0(r16)
 1011940:	183fde26 	beq	r3,zero,10118bc <__alt_data_end+0xff8118bc>
 1011944:	95c8983a 	sll	r4,r18,r23
 1011948:	a0806217 	ldw	r2,392(r20)
 101194c:	a5800117 	ldw	r22,4(r20)
 1011950:	2084703a 	and	r2,r4,r2
 1011954:	10000b26 	beq	r2,zero,1011984 <__call_exitprocs+0x14c>
 1011958:	a0806317 	ldw	r2,396(r20)
 101195c:	2088703a 	and	r4,r4,r2
 1011960:	20000c1e 	bne	r4,zero,1011994 <__call_exitprocs+0x15c>
 1011964:	89400017 	ldw	r5,0(r17)
 1011968:	d9000017 	ldw	r4,0(sp)
 101196c:	183ee83a 	callr	r3
 1011970:	a0800117 	ldw	r2,4(r20)
 1011974:	15bfbf1e 	bne	r2,r22,1011874 <__alt_data_end+0xff811874>
 1011978:	98800017 	ldw	r2,0(r19)
 101197c:	153fcf26 	beq	r2,r20,10118bc <__alt_data_end+0xff8118bc>
 1011980:	003fbc06 	br	1011874 <__alt_data_end+0xff811874>
 1011984:	183ee83a 	callr	r3
 1011988:	003ff906 	br	1011970 <__alt_data_end+0xff811970>
 101198c:	a5c00115 	stw	r23,4(r20)
 1011990:	003feb06 	br	1011940 <__alt_data_end+0xff811940>
 1011994:	89000017 	ldw	r4,0(r17)
 1011998:	183ee83a 	callr	r3
 101199c:	003ff406 	br	1011970 <__alt_data_end+0xff811970>
 10119a0:	a0800017 	ldw	r2,0(r20)
 10119a4:	a027883a 	mov	r19,r20
 10119a8:	1029883a 	mov	r20,r2
 10119ac:	003fb606 	br	1011888 <__alt_data_end+0xff811888>
 10119b0:	0005883a 	mov	r2,zero
 10119b4:	003ffb06 	br	10119a4 <__alt_data_end+0xff8119a4>

010119b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10119b8:	defffd04 	addi	sp,sp,-12
 10119bc:	df000215 	stw	fp,8(sp)
 10119c0:	df000204 	addi	fp,sp,8
 10119c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 10119c8:	0001883a 	nop
 10119cc:	e0bfff17 	ldw	r2,-4(fp)
 10119d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 10119d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 10119d8:	10000226 	beq	r2,zero,10119e4 <_exit+0x2c>
    ALT_SIM_FAIL();
 10119dc:	002af070 	cmpltui	zero,zero,43969
 10119e0:	00000106 	br	10119e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 10119e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 10119e8:	003fff06 	br	10119e8 <__alt_data_end+0xff8119e8>
