mysql> EXPLAIN ANALYZE  SELECT cc.card_name, COUNT(cl.card_id) AS total_requests FROM CREDIT_CARDS cc NATURAL JOIN CLICK_LOGS cl  WHERE TIMESTAMPDIFF(DAY, CURRENT_TIMESTAMP(), cl.date_time) < 7 GROUP BY cc.card_id  ORDER BY total_requests DESC;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| EXPLAIN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |

| -> Sort: total_requests DESC  (actual time=52.237..52.250 rows=227 loops=1)
    -> Stream results  (cost=14245.56 rows=30960) (actual time=1.027..52.122 rows=227 loops=1)
        -> Group aggregate: count(cl.card_id)  (cost=14245.56 rows=30960) (actual time=1.021..51.974 rows=227 loops=1)
            -> Nested loop inner join  (cost=11149.51 rows=30960) (actual time=0.208..51.816 rows=233 loops=1)
                -> Index scan on cc using PRIMARY  (cost=313.35 rows=3066) (actual time=0.075..1.207 rows=3000 loops=1)
                -> Filter: (timestampdiff(DAY,<cache>(now()),cl.date_time) < 7)  (cost=2.52 rows=10) (actual time=0.016..0.017 rows=0 loops=3000)
                    -> Index lookup on cl using click_fk_card_id (card_id=cc.card_id)  (cost=2.52 rows=10) (actual time=0.010..0.012 rows=10 loops=3000)
 |

1 row in set, 28915 warnings (0.05 sec)

mysql> CREATE INDEX click_logs_time_index ON click_logs(date_time);                                                                                                                                         Query OK, 0 rows affected (0.09 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> EXPLAIN ANALYZE  SELECT cc.card_name, COUNT(cl.card_id) AS total_requests FROM CREDIT_CARDS cc NATURAL JOIN CLICK_LOGS cl  WHERE TIMESTAMPDIFF(DAY, CURRENT_TIMESTAMP(), cl.date_time) < 7 GROUP BY cc.card_id  ORDER BY total_requests DESC;

||

| -> Sort: total_requests DESC  (actual time=48.752..48.765 rows=227 loops=1)
    -> Stream results  (cost=14245.56 rows=30960) (actual time=0.499..48.649 rows=227 loops=1)
        -> Group aggregate: count(cl.card_id)  (cost=14245.56 rows=30960) (actual time=0.496..48.502 rows=227 loops=1)
            -> Nested loop inner join  (cost=11149.51 rows=30960) (actual time=0.127..48.374 rows=233 loops=1)
                -> Index scan on cc using PRIMARY  (cost=313.35 rows=3066) (actual time=0.039..0.991 rows=3000 loops=1)
                -> Filter: (timestampdiff(DAY,<cache>(now()),cl.date_time) < 7)  (cost=2.52 rows=10) (actual time=0.015..0.016 rows=0 loops=3000)
                    -> Index lookup on cl using click_fk_card_id (card_id=cc.card_id)  (cost=2.52 rows=10) (actual time=0.009..0.011 rows=10 loops=3000)
 |

1 row in set, 28915 warnings (0.05 sec)

mysql> CREATE INDEX click_logs_card ON click_logs(card_id);
Query OK, 0 rows affected, 1 warning (0.70 sec)
Records: 0  Duplicates: 0  Warnings: 1

mysql> EXPLAIN ANALYZE  SELECT cc.card_name, COUNT(cl.card_id) AS total_requests FROM CREDIT_CARDS cc NATURAL JOIN CLICK_LOGS cl  WHERE TIMESTAMPDIFF(DAY, CURRENT_TIMESTAMP(), cl.date_time) < 7 GROUP BY cc.card_id  ORDER BY total_requests DESC;
+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| EXPLAIN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |

| -> Sort: total_requests DESC  (actual time=57.430..57.445 rows=227 loops=1)
    -> Stream results  (cost=14245.56 rows=30960) (actual time=3.474..57.334 rows=227 loops=1)
        -> Group aggregate: count(cl.card_id)  (cost=14245.56 rows=30960) (actual time=3.467..57.208 rows=227 loops=1)
            -> Nested loop inner join  (cost=11149.51 rows=30960) (actual time=1.757..57.075 rows=233 loops=1)
                -> Index scan on cc using PRIMARY  (cost=313.35 rows=3066) (actual time=0.210..3.013 rows=3000 loops=1)
                -> Filter: (timestampdiff(DAY,<cache>(now()),cl.date_time) < 7)  (cost=2.52 rows=10) (actual time=0.018..0.018 rows=0 loops=3000)
                    -> Index lookup on cl using click_fk_card_id (card_id=cc.card_id)  (cost=2.52 rows=10) (actual time=0.011..0.013 rows=10 loops=3000)
 |

1 row in set, 28915 warnings (0.06 sec)

mysql> CREATE INDEX click_logs_card ON click_logs(card_id);                                                                                                                                                 Query OK, 0 rows affected, 1 warning (0.07 sec)
Records: 0  Duplicates: 0  Warnings: 1

mysql> CREATE INDEX click_logs_time_index ON click_logs(date_time);
Query OK, 0 rows affected (0.07 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> EXPLAIN ANALYZE  SELECT cc.card_name, COUNT(cl.card_id) AS total_requests FROM CREDIT_CARDS cc NATURAL JOIN CLICK_LOGS cl  WHERE TIMESTAMPDIFF(DAY, CURRENT_TIMESTAMP(), cl.date_time) < 7 GROUP BY cc.card_id  ORDER BY total_requests DESC;

||

| -> Sort: total_requests DESC  (actual time=46.663..46.676 rows=227 loops=1)
    -> Stream results  (cost=14245.56 rows=30960) (actual time=0.773..46.571 rows=227 loops=1)
        -> Group aggregate: count(cl.card_id)  (cost=14245.56 rows=30960) (actual time=0.770..46.454 rows=227 loops=1)
            -> Nested loop inner join  (cost=11149.51 rows=30960) (actual time=0.156..46.334 rows=233 loops=1)
                -> Index scan on cc using PRIMARY  (cost=313.35 rows=3066) (actual time=0.051..0.936 rows=3000 loops=1)
                -> Filter: (timestampdiff(DAY,<cache>(now()),cl.date_time) < 7)  (cost=2.52 rows=10) (actual time=0.015..0.015 rows=0 loops=3000)
                    -> Index lookup on cl using click_fk_card_id (card_id=cc.card_id)  (cost=2.52 rows=10) (actual time=0.009..0.011 rows=10 loops=3000)
 |

1 row in set, 28915 warnings (0.05 sec)












mysql> EXPLAIN ANALYZE SELECT cc.card_name,
    ->     -- use this aggregation to get weighted number to select appropriate ranking
    ->     -- flags with higher multipliers indicate greater importance in our ranking metric
    ->     (400 * credit_score_flag + 300 * credit_limit_flag + 200 * payment_processor_flag +
    ->             100 * annual_fee_flag + COALESCE(vendor_requirements_counts, 0)) AS user_specification_card_rating,
    ->     average_rating
    -> FROM CREDIT_CARDS cc
    -> -- determine number of vendor matches a card has
    -> LEFT JOIN (
    ->     SELECT cc1.card_id, COUNT(pv1.vend_id) AS vendor_requirements_counts
    ->     FROM CREDIT_CARDS cc1
    ->     NATURAL JOIN OFFERS o1 NATURAL JOIN PREFERRED_VENDORS pv1
    ->     WHERE (FIND_IN_SET(pv1.vend_type, @vend_type_filter) OR FIND_IN_SET(pv1.vend_name, @vend_name_filter))
    ->     GROUP BY cc1.card_id
    -> ) vendorsub ON cc.card_id = vendorsub.card_id
    -> -- determine if credit card meets certain requirements, use numbers for aggregation formula
    -> JOIN (
    ->     SELECT 
    ->         cc2.card_id, 
    ->         IF (cc2.min_rec_credit >= @credit_score_min_filter, 1, 0) AS credit_score_flag,
    ->         IF(cc2.credit_limit >= @credit_limit_min_filter, 1, 0) AS credit_limit_flag,
    ->         IF(cc2.annual_fee <= @annual_fee_max_filter, 1, 0) AS annual_fee_flag
    ->     FROM CREDIT_CARDS cc2
    -> ) cardsub ON cc.card_id = cardsub.card_id
    -> -- determine if credit card uses one of specified payment processors, use numbers for aggregation formula
    -> JOIN (
    ->     SELECT cc3.card_id, IF(FIND_IN_SET(pp3.processor_name, @payment_processor_filter), 1, 0) AS payment_processor_flag
    ->     FROM CREDIT_CARDS cc3 NATURAL JOIN PAYMENT_PROCESSORS pp3
    -> ) processorsub ON cc.card_id = processorsub.card_id
    -> -- get average rating to use as tiebreaker if we still have multiple cards
    -> LEFT JOIN (
    ->     SELECT cc4.card_id, AVG(cr.rating) AS average_rating
    ->     FROM CREDIT_CARDS cc4
    ->     NATURAL JOIN CARD_RATINGS cr
    ->     GROUP BY cc4.card_id
    -> ) ratingsub ON cc.card_id = ratingsub.card_id
    -> ORDER BY user_specification_card_rating DESC, average_rating DESC;

||

| -> Sort: user_specification_card_rating DESC, ratingsub.average_rating DESC  (actual time=66.810..67.036 rows=3000 loops=1)
    -> Stream results  (cost=87152.76 rows=0) (actual time=35.032..64.633 rows=3000 loops=1)
        -> Nested loop left join  (cost=87152.76 rows=0) (actual time=35.009..59.937 rows=3000 loops=1)
            -> Nested loop left join  (cost=10469.87 rows=0) (actual time=4.746..24.305 rows=3000 loops=1)
                -> Nested loop inner join  (cost=2804.87 rows=3066) (actual time=1.082..17.806 rows=3000 loops=1)
                    -> Nested loop inner join  (cost=1731.77 rows=3066) (actual time=1.056..13.239 rows=3000 loops=1)
                        -> Nested loop inner join  (cost=658.67 rows=3066) (actual time=0.979..6.232 rows=3000 loops=1)
                            -> Table scan on pp3  (cost=101.50 rows=1000) (actual time=0.304..1.499 rows=1000 loops=1)
                            -> Covering index lookup on cc3 using cc_fk_processor_id (processor_id=pp3.processor_id)  (cost=0.25 rows=3) (actual time=0.003..0.004 rows=3 loops=1000)
                        -> Single-row index lookup on cc using PRIMARY (card_id=cc3.card_id)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=3000)
                    -> Single-row index lookup on cc2 using PRIMARY (card_id=cc3.card_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=3000)
                -> Index lookup on vendorsub using <auto_key0> (card_id=cc3.card_id)  (actual time=0.000..0.000 rows=0 loops=3000)
                    -> Materialize  (cost=0.00..0.00 rows=0) (actual time=5.661..5.663 rows=12 loops=1)
                        -> Table scan on <temporary>  (actual time=0.001..0.002 rows=12 loops=1)
                            -> Aggregate using temporary table  (actual time=3.588..3.590 rows=12 loops=1)
                                -> Nested loop inner join  (cost=2201.50 rows=3000) (actual time=1.192..3.476 rows=12 loops=1)
                                    -> Nested loop inner join  (cost=1151.50 rows=3000) (actual time=1.125..2.004 rows=12 loops=1)
                                        -> Filter: ((0 <> find_in_set(pv1.vend_type,<cache>((@vend_type_filter)))) or (0 <> find_in_set(pv1.vend_name,<cache>((@vend_name_filter)))))  (cost=101.50 rows=1000) (actual time=0.969..1.746 rows=4 loops=1)
                                            -> Table scan on pv1  (cost=101.50 rows=1000) (actual time=0.947..1.260 rows=1000 loops=1)
                                        -> Filter: (o1.card_id is not null)  (cost=0.75 rows=3) (actual time=0.055..0.063 rows=3 loops=4)
                                            -> Index lookup on o1 using offer_fk_vend_id (vend_id=pv1.vend_id)  (cost=0.75 rows=3) (actual time=0.054..0.062 rows=3 loops=4)
                                    -> Single-row covering index lookup on cc1 using PRIMARY (card_id=o1.card_id)  (cost=0.25 rows=1) (actual time=0.122..0.122 rows=1 loops=12)
            -> Index lookup on ratingsub using <auto_key0> (card_id=cc3.card_id)  (actual time=0.001..0.001 rows=1 loops=3000)
                -> Materialize  (cost=5441.95..5441.95 rows=9325) (actual time=33.674..34.574 rows=3000 loops=1)
                    -> Group aggregate: avg(cr.rating)  (cost=4509.48 rows=9325) (actual time=0.913..27.060 rows=3000 loops=1)
                        -> Nested loop inner join  (cost=3577.00 rows=9325) (actual time=0.819..25.477 rows=9000 loops=1)
                            -> Covering index scan on cc4 using PRIMARY  (cost=313.35 rows=3066) (actual time=0.061..1.605 rows=3000 loops=1)
                            -> Index lookup on cr using rate_fk_card_id (card_id=cc4.card_id)  (cost=0.76 rows=3) (actual time=0.007..0.007 rows=3 loops=3000)
 |



mysql> CREATE INDEX  ratings_card_id_index ON card_ratings(card_id);
Query OK, 0 rows affected, 1 warning (0.08 sec)
Records: 0  Duplicates: 0  Warnings: 1

mysql> EXPLAIN ANALYZE SELECT cc.card_name,
    ->     -- use this aggregation to get weighted number to select appropriate ranking
    ->     -- flags with higher multipliers indicate greater importance in our ranking metric
    ->     (400 * credit_score_flag + 300 * credit_limit_flag + 200 * payment_processor_flag +
    ->             100 * annual_fee_flag + COALESCE(vendor_requirements_counts, 0)) AS user_specification_card_rating,
    ->     average_rating
    -> FROM CREDIT_CARDS cc
    -> -- determine number of vendor matches a card has
    -> LEFT JOIN (
    ->     SELECT cc1.card_id, COUNT(pv1.vend_id) AS vendor_requirements_counts
    ->     FROM CREDIT_CARDS cc1
    ->     NATURAL JOIN OFFERS o1 NATURAL JOIN PREFERRED_VENDORS pv1
    ->     WHERE (FIND_IN_SET(pv1.vend_type, @vend_type_filter) OR FIND_IN_SET(pv1.vend_name, @vend_name_filter))
    ->     GROUP BY cc1.card_id
    -> ) vendorsub ON cc.card_id = vendorsub.card_id
    -> -- determine if credit card meets certain requirements, use numbers for aggregation formula
    -> JOIN (
    ->     SELECT 
    ->         cc2.card_id, 
    ->         IF (cc2.min_rec_credit >= @credit_score_min_filter, 1, 0) AS credit_score_flag,
    ->         IF(cc2.credit_limit >= @credit_limit_min_filter, 1, 0) AS credit_limit_flag,
    ->         IF(cc2.annual_fee <= @annual_fee_max_filter, 1, 0) AS annual_fee_flag
    ->     FROM CREDIT_CARDS cc2
    -> ) cardsub ON cc.card_id = cardsub.card_id
    -> -- determine if credit card uses one of specified payment processors, use numbers for aggregation formula
    -> JOIN (
    ->     SELECT cc3.card_id, IF(FIND_IN_SET(pp3.processor_name, @payment_processor_filter), 1, 0) AS payment_processor_flag
    ->     FROM CREDIT_CARDS cc3 NATURAL JOIN PAYMENT_PROCESSORS pp3
    -> ) processorsub ON cc.card_id = processorsub.card_id
    -> -- get average rating to use as tiebreaker if we still have multiple cards
    -> LEFT JOIN (
    ->     SELECT cc4.card_id, AVG(cr.rating) AS average_rating
    ->     FROM CREDIT_CARDS cc4
    ->     NATURAL JOIN CARD_RATINGS cr
    ->     GROUP BY cc4.card_id
    -> ) ratingsub ON cc.card_id = ratingsub.card_id
    -> ORDER BY user_specification_card_rating DESC, average_rating DESC;

||

| -> Sort: user_specification_card_rating DESC, ratingsub.average_rating DESC  (actual time=41.491..41.709 rows=3000 loops=1)
    -> Stream results  (cost=87152.76 rows=0) (actual time=20.010..40.296 rows=3000 loops=1)
        -> Nested loop left join  (cost=87152.76 rows=0) (actual time=19.984..36.977 rows=3000 loops=1)
            -> Nested loop left join  (cost=10469.87 rows=0) (actual time=0.966..14.155 rows=3000 loops=1)
                -> Nested loop inner join  (cost=2804.87 rows=3066) (actual time=0.055..10.941 rows=3000 loops=1)
                    -> Nested loop inner join  (cost=1731.77 rows=3066) (actual time=0.052..7.371 rows=3000 loops=1)
                        -> Nested loop inner join  (cost=658.67 rows=3066) (actual time=0.048..3.078 rows=3000 loops=1)
                            -> Table scan on pp3  (cost=101.50 rows=1000) (actual time=0.036..0.323 rows=1000 loops=1)
                            -> Covering index lookup on cc3 using cc_fk_processor_id (processor_id=pp3.processor_id)  (cost=0.25 rows=3) (actual time=0.001..0.002 rows=3 loops=1000)
                        -> Single-row index lookup on cc using PRIMARY (card_id=cc3.card_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=3000)
                    -> Single-row index lookup on cc2 using PRIMARY (card_id=cc3.card_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=3000)
                -> Index lookup on vendorsub using <auto_key0> (card_id=cc3.card_id)  (actual time=0.000..0.000 rows=0 loops=3000)
                    -> Materialize  (cost=0.00..0.00 rows=0) (actual time=2.563..2.565 rows=12 loops=1)
                        -> Table scan on <temporary>  (actual time=0.003..0.004 rows=12 loops=1)
                            -> Aggregate using temporary table  (actual time=0.864..0.866 rows=12 loops=1)
                                -> Nested loop inner join  (cost=2201.50 rows=3000) (actual time=0.038..0.844 rows=12 loops=1)
                                    -> Nested loop inner join  (cost=1151.50 rows=3000) (actual time=0.033..0.822 rows=12 loops=1)
                                        -> Filter: ((0 <> find_in_set(pv1.vend_type,<cache>((@vend_type_filter)))) or (0 <> find_in_set(pv1.vend_name,<cache>((@vend_name_filter)))))  (cost=101.50 rows=1000) (actual time=0.021..0.778 rows=4 loops=1)
                                            -> Table scan on pv1  (cost=101.50 rows=1000) (actual time=0.016..0.323 rows=1000 loops=1)
                                        -> Filter: (o1.card_id is not null)  (cost=0.75 rows=3) (actual time=0.006..0.010 rows=3 loops=4)
                                            -> Index lookup on o1 using offer_fk_vend_id (vend_id=pv1.vend_id)  (cost=0.75 rows=3) (actual time=0.006..0.010 rows=3 loops=4)
                                    -> Single-row covering index lookup on cc1 using PRIMARY (card_id=o1.card_id)  (cost=0.25 rows=1) (actual time=0.002..0.002 rows=1 loops=12)
            -> Index lookup on ratingsub using <auto_key0> (card_id=cc3.card_id)  (actual time=0.001..0.001 rows=1 loops=3000)
                -> Materialize  (cost=5441.95..5441.95 rows=9325) (actual time=21.352..22.006 rows=3000 loops=1)
                    -> Group aggregate: avg(cr.rating)  (cost=4509.48 rows=9325) (actual time=0.132..16.742 rows=3000 loops=1)
                        -> Nested loop inner join  (cost=3577.00 rows=9325) (actual time=0.104..15.198 rows=9000 loops=1)
                            -> Covering index scan on cc4 using PRIMARY  (cost=313.35 rows=3066) (actual time=0.054..0.838 rows=3000 loops=1)
                            -> Index lookup on cr using rate_fk_card_id (card_id=cc4.card_id)  (cost=0.76 rows=3) (actual time=0.004..0.004 rows=3 loops=3000)
 |



mysql> CREATE INDEX vendor_type ON preferred_vendors(vend_type);
Query OK, 0 rows affected (0.33 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> EXPLAIN ANALYZE SELECT cc.card_name,
    ->     -- use this aggregation to get weighted number to select appropriate ranking
    ->     -- flags with higher multipliers indicate greater importance in our ranking metric
    ->     (400 * credit_score_flag + 300 * credit_limit_flag + 200 * payment_processor_flag +
    ->             100 * annual_fee_flag + COALESCE(vendor_requirements_counts, 0)) AS user_specification_card_rating,
    ->     average_rating
    -> FROM CREDIT_CARDS cc
    -> -- determine number of vendor matches a card has
    -> LEFT JOIN (
    ->     SELECT cc1.card_id, COUNT(pv1.vend_id) AS vendor_requirements_counts
    ->     FROM CREDIT_CARDS cc1
    ->     NATURAL JOIN OFFERS o1 NATURAL JOIN PREFERRED_VENDORS pv1
    ->     WHERE (FIND_IN_SET(pv1.vend_type, @vend_type_filter) OR FIND_IN_SET(pv1.vend_name, @vend_name_filter))
    ->     GROUP BY cc1.card_id
    -> ) vendorsub ON cc.card_id = vendorsub.card_id
    -> -- determine if credit card meets certain requirements, use numbers for aggregation formula
    -> JOIN (
    ->     SELECT 
    ->         cc2.card_id, 
    ->         IF (cc2.min_rec_credit >= @credit_score_min_filter, 1, 0) AS credit_score_flag,
    ->         IF(cc2.credit_limit >= @credit_limit_min_filter, 1, 0) AS credit_limit_flag,
    ->         IF(cc2.annual_fee <= @annual_fee_max_filter, 1, 0) AS annual_fee_flag
    ->     FROM CREDIT_CARDS cc2
    -> ) cardsub ON cc.card_id = cardsub.card_id
    -> -- determine if credit card uses one of specified payment processors, use numbers for aggregation formula
    -> JOIN (
    ->     SELECT cc3.card_id, IF(FIND_IN_SET(pp3.processor_name, @payment_processor_filter), 1, 0) AS payment_processor_flag
    ->     FROM CREDIT_CARDS cc3 NATURAL JOIN PAYMENT_PROCESSORS pp3
    -> ) processorsub ON cc.card_id = processorsub.card_id
    -> -- get average rating to use as tiebreaker if we still have multiple cards
    -> LEFT JOIN (
    ->     SELECT cc4.card_id, AVG(cr.rating) AS average_rating
    ->     FROM CREDIT_CARDS cc4
    ->     NATURAL JOIN CARD_RATINGS cr
    ->     GROUP BY cc4.card_id
    -> ) ratingsub ON cc.card_id = ratingsub.card_id
    -> ORDER BY user_specification_card_rating DESC, average_rating DESC;

||

| -> Sort: user_specification_card_rating DESC, ratingsub.average_rating DESC  (actual time=50.398..50.601 rows=3000 loops=1)
    -> Stream results  (cost=87152.76 rows=0) (actual time=26.055..49.126 rows=3000 loops=1)
        -> Nested loop left join  (cost=87152.76 rows=0) (actual time=26.031..45.537 rows=3000 loops=1)
            -> Nested loop left join  (cost=10469.87 rows=0) (actual time=3.142..18.545 rows=3000 loops=1)
                -> Nested loop inner join  (cost=2804.87 rows=3066) (actual time=0.850..13.937 rows=3000 loops=1)
                    -> Nested loop inner join  (cost=1731.77 rows=3066) (actual time=0.829..10.133 rows=3000 loops=1)
                        -> Nested loop inner join  (cost=658.67 rows=3066) (actual time=0.788..4.990 rows=3000 loops=1)
                            -> Table scan on pp3  (cost=101.50 rows=1000) (actual time=0.145..0.514 rows=1000 loops=1)
                            -> Covering index lookup on cc3 using cc_fk_processor_id (processor_id=pp3.processor_id)  (cost=0.25 rows=3) (actual time=0.003..0.004 rows=3 loops=1000)
                        -> Single-row index lookup on cc using PRIMARY (card_id=cc3.card_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=3000)
                    -> Single-row index lookup on cc2 using PRIMARY (card_id=cc3.card_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=3000)
                -> Index lookup on vendorsub using <auto_key0> (card_id=cc3.card_id)  (actual time=0.000..0.000 rows=0 loops=3000)
                    -> Materialize  (cost=0.00..0.00 rows=0) (actual time=3.950..3.953 rows=12 loops=1)
                        -> Table scan on <temporary>  (actual time=0.000..0.001 rows=12 loops=1)
                            -> Aggregate using temporary table  (actual time=1.676..1.678 rows=12 loops=1)
                                -> Nested loop inner join  (cost=2201.50 rows=3000) (actual time=0.725..1.649 rows=12 loops=1)
                                    -> Nested loop inner join  (cost=1151.50 rows=3000) (actual time=0.687..1.431 rows=12 loops=1)
                                        -> Filter: ((0 <> find_in_set(pv1.vend_type,<cache>((@vend_type_filter)))) or (0 <> find_in_set(pv1.vend_name,<cache>((@vend_name_filter)))))  (cost=101.50 rows=1000) (actual time=0.032..0.683 rows=4 loops=1)
                                            -> Table scan on pv1  (cost=101.50 rows=1000) (actual time=0.025..0.267 rows=1000 loops=1)
                                        -> Filter: (o1.card_id is not null)  (cost=0.75 rows=3) (actual time=0.181..0.186 rows=3 loops=4)
                                            -> Index lookup on o1 using offer_fk_vend_id (vend_id=pv1.vend_id)  (cost=0.75 rows=3) (actual time=0.181..0.186 rows=3 loops=4)
                                    -> Single-row covering index lookup on cc1 using PRIMARY (card_id=o1.card_id)  (cost=0.25 rows=1) (actual time=0.018..0.018 rows=1 loops=12)
            -> Index lookup on ratingsub using <auto_key0> (card_id=cc3.card_id)  (actual time=0.001..0.001 rows=1 loops=3000)
                -> Materialize  (cost=5441.95..5441.95 rows=9325) (actual time=25.474..26.147 rows=3000 loops=1)
                    -> Group aggregate: avg(cr.rating)  (cost=4509.48 rows=9325) (actual time=0.233..20.345 rows=3000 loops=1)
                        -> Nested loop inner join  (cost=3577.00 rows=9325) (actual time=0.156..19.077 rows=9000 loops=1)
                            -> Covering index scan on cc4 using PRIMARY  (cost=313.35 rows=3066) (actual time=0.047..1.775 rows=3000 loops=1)
                            -> Index lookup on cr using rate_fk_card_id (card_id=cc4.card_id)  (cost=0.76 rows=3) (actual time=0.005..0.005 rows=3 loops=3000)
 |

1 row in set (0.06 sec)

mysql> CREATE INDEX  ratings_card_id_index ON card_ratings(card_id);
Query OK, 0 rows affected, 1 warning (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 1

mysql> CREATE INDEX vendor_type ON preferred_vendors(vend_type);
Query OK, 0 rows affected (0.33 sec)
Records: 0  Duplicates: 0  Warnings: 0
mysql> EXPLAIN ANALYZE SELECT cc.card_name,
    ->     -- use this aggregation to get weighted number to select appropriate ranking
    ->     -- flags with higher multipliers indicate greater importance in our ranking metric
    ->     (400 * credit_score_flag + 300 * credit_limit_flag + 200 * payment_processor_flag +
    ->             100 * annual_fee_flag + COALESCE(vendor_requirements_counts, 0)) AS user_specification_card_rating,
    ->     average_rating
    -> FROM CREDIT_CARDS cc
    -> -- determine number of vendor matches a card has
    -> LEFT JOIN (
    ->     SELECT cc1.card_id, COUNT(pv1.vend_id) AS vendor_requirements_counts
    ->     FROM CREDIT_CARDS cc1
    ->     NATURAL JOIN OFFERS o1 NATURAL JOIN PREFERRED_VENDORS pv1
    ->     WHERE (FIND_IN_SET(pv1.vend_type, @vend_type_filter) OR FIND_IN_SET(pv1.vend_name, @vend_name_filter))
    ->     GROUP BY cc1.card_id
    -> ) vendorsub ON cc.card_id = vendorsub.card_id
    -> -- determine if credit card meets certain requirements, use numbers for aggregation formula
    -> JOIN (
    ->     SELECT 
    ->         cc2.card_id, 
    ->         IF (cc2.min_rec_credit >= @credit_score_min_filter, 1, 0) AS credit_score_flag,
    ->         IF(cc2.credit_limit >= @credit_limit_min_filter, 1, 0) AS credit_limit_flag,
    ->         IF(cc2.annual_fee <= @annual_fee_max_filter, 1, 0) AS annual_fee_flag
    ->     FROM CREDIT_CARDS cc2
    -> ) cardsub ON cc.card_id = cardsub.card_id
    -> -- determine if credit card uses one of specified payment processors, use numbers for aggregation formula
    -> JOIN (
    ->     SELECT cc3.card_id, IF(FIND_IN_SET(pp3.processor_name, @payment_processor_filter), 1, 0) AS payment_processor_flag
    ->     FROM CREDIT_CARDS cc3 NATURAL JOIN PAYMENT_PROCESSORS pp3
    -> ) processorsub ON cc.card_id = processorsub.card_id
    -> -- get average rating to use as tiebreaker if we still have multiple cards
    -> LEFT JOIN (
    ->     SELECT cc4.card_id, AVG(cr.rating) AS average_rating
    ->     FROM CREDIT_CARDS cc4
    ->     NATURAL JOIN CARD_RATINGS cr
    ->     GROUP BY cc4.card_id
    -> ) ratingsub ON cc.card_id = ratingsub.card_id
    -> ORDER BY user_specification_card_rating DESC, average_rating DESC;

||

| -> Sort: user_specification_card_rating DESC, ratingsub.average_rating DESC  (actual time=50.709..50.936 rows=3000 loops=1)
    -> Stream results  (cost=87152.76 rows=0) (actual time=27.458..49.375 rows=3000 loops=1)
        -> Nested loop left join  (cost=87152.76 rows=0) (actual time=27.431..45.898 rows=3000 loops=1)
            -> Nested loop left join  (cost=10469.87 rows=0) (actual time=8.921..23.304 rows=3000 loops=1)
                -> Nested loop inner join  (cost=2804.87 rows=3066) (actual time=1.672..13.640 rows=3000 loops=1)
                    -> Nested loop inner join  (cost=1731.77 rows=3066) (actual time=1.666..9.709 rows=3000 loops=1)
                        -> Nested loop inner join  (cost=658.67 rows=3066) (actual time=1.648..4.994 rows=3000 loops=1)
                            -> Table scan on pp3  (cost=101.50 rows=1000) (actual time=0.978..1.305 rows=1000 loops=1)
                            -> Covering index lookup on cc3 using cc_fk_processor_id (processor_id=pp3.processor_id)  (cost=0.25 rows=3) (actual time=0.002..0.003 rows=3 loops=1000)
                        -> Single-row index lookup on cc using PRIMARY (card_id=cc3.card_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=3000)
                    -> Single-row index lookup on cc2 using PRIMARY (card_id=cc3.card_id)  (cost=0.25 rows=1) (actual time=0.001..0.001 rows=1 loops=3000)
                -> Index lookup on vendorsub using <auto_key0> (card_id=cc3.card_id)  (actual time=0.000..0.000 rows=0 loops=3000)
                    -> Materialize  (cost=0.00..0.00 rows=0) (actual time=8.982..8.984 rows=12 loops=1)
                        -> Table scan on <temporary>  (actual time=0.001..0.001 rows=12 loops=1)
                            -> Aggregate using temporary table  (actual time=7.211..7.213 rows=12 loops=1)
                                -> Nested loop inner join  (cost=2201.50 rows=3000) (actual time=6.304..7.193 rows=12 loops=1)
                                    -> Nested loop inner join  (cost=1151.50 rows=3000) (actual time=6.289..7.150 rows=12 loops=1)
                                        -> Filter: ((0 <> find_in_set(pv1.vend_type,<cache>((@vend_type_filter)))) or (0 <> find_in_set(pv1.vend_name,<cache>((@vend_name_filter)))))  (cost=101.50 rows=1000) (actual time=4.959..5.733 rows=4 loops=1)
                                            -> Table scan on pv1  (cost=101.50 rows=1000) (actual time=4.936..5.268 rows=1000 loops=1)
                                        -> Filter: (o1.card_id is not null)  (cost=0.75 rows=3) (actual time=0.349..0.353 rows=3 loops=4)
                                            -> Index lookup on o1 using offer_fk_vend_id (vend_id=pv1.vend_id)  (cost=0.75 rows=3) (actual time=0.348..0.352 rows=3 loops=4)
                                    -> Single-row covering index lookup on cc1 using PRIMARY (card_id=o1.card_id)  (cost=0.25 rows=1) (actual time=0.003..0.003 rows=1 loops=12)
            -> Index lookup on ratingsub using <auto_key0> (card_id=cc3.card_id)  (actual time=0.001..0.001 rows=1 loops=3000)
                -> Materialize  (cost=5441.95..5441.95 rows=9325) (actual time=21.044..21.723 rows=3000 loops=1)
                    -> Group aggregate: avg(cr.rating)  (cost=4509.48 rows=9325) (actual time=0.054..16.333 rows=3000 loops=1)
                        -> Nested loop inner join  (cost=3577.00 rows=9325) (actual time=0.041..14.973 rows=9000 loops=1)
                            -> Covering index scan on cc4 using PRIMARY  (cost=313.35 rows=3066) (actual time=0.023..0.873 rows=3000 loops=1)
                            -> Index lookup on cr using rate_fk_card_id (card_id=cc4.card_id)  (cost=0.76 rows=3) (actual time=0.004..0.004 rows=3 loops=3000)
 |
+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.06 sec)
